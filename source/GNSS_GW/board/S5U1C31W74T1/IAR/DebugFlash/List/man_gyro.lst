###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       21/May/2019  17:01:00
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\GNSS\Software\rJ105\source\GNSS_GW\apl\man_gyro.c
#    Command line =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\apl\man_gyro.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_A -lCN
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        -lA
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List\man_gyro.lst
#    Object file  =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj\man_gyro.o
#
###############################################################################

C:\GNSS\Software\rJ105\source\GNSS_GW\apl\man_gyro.c
      1          /**
      2            ******************************************************************************
      3            * @file    man_gyro.c
      4            * @author  コア
      5            * @version V1.0
      6            * @date    2017.10.2
      7            * @brief   角速度・加速度データを管理する
      8            ******************************************************************************
      9            $Id: man_gyro.c 182 2018-05-25 04:55:18Z shitaoka $
     10            * @attention
     11            *
     12            *****************************************************************************
     13          */
     14          
     15          #include <string.h>
     16          #include <stdio.h>
     17          #include <stdlib.h>
     18          
     19          #include "board.h"
     20          #include "system_manager.h"
     21          #include "ctrl_LSM6DSL.h"
     22          #include "man_gyro.h"
     23          #include "man_data.h"
     24          #include "gnss_gw_common.h"
     25          
     26          
     27          #pragma section = "APL_PRG_BLOCK"
     28          
     29          /************************************************************************/
     30          /* declaration of structure                                             */
     31          /************************************************************************/
     32          
     33          
     34          #define	MAN_GYRO_MODE_STOP			0	// 受信停止
     35          #define	MAN_GYRO_MODE_ACTIVE		1	// 受信中
     36          
     37          #define	MAN_GYRO_RECV_NON			0	// 未受信
     38          #define	MAN_GYRO_RECV_OK			1	// 受信
     39          
     40          #define	MN_GYRO_LOOP_MAX			10	// 100ms毎
     41          
     42          
     43          
     44          // 受信データ
     45          typedef struct _man_gyro_recv_t {
     46          	int32_t					flag;				// 受信済みフラグ
     47          	int32_t					flag_gyro;			// 角速度データ取得フラグ
     48          	int32_t					flag_accel;			// 加速度データ取得フラグ
     49          	man_gyro_data_t			gyro;				// 角速度・加速度データ
     50          } man_gyro_recv_t;
     51          
     52          
     53          
     54          // 角速度・加速度データ管理ワーク
     55          typedef struct _man_gyro_work_t {
     56          	uint32_t				mode;				// 動作状態
     57          	uint32_t				loop;				// 
     58          	int32_t					new_flag;			// 最新取得フラグ
     59          	man_gyro_recv_t			gyro_recv;			// 受信した角速度・加速度データ
     60          	uint32_t				err_cnt;
     61          } man_gyro_work_t;
     62          
     63          
     64          /************************************************************************/
     65          /* definition of variables                                              */
     66          /************************************************************************/
     67          

   \                                 In section .bss, align 4
     68          man_gyro_work_t			man_gyro_work;
   \                     man_gyro_work:
   \   00000000                      DS8 100
     69          
     70          
     71          
     72          /********************************************************************/
     73          /*	callback関数                                                    */
     74          /********************************************************************/
     75          
     76          /********************************************************************/
     77          /*	static関数                                                      */
     78          /********************************************************************/
     79          
     80          /********************************************************************/
     81          /*	extern関数                                                      */
     82          /********************************************************************/
     83          
     84          /********************************************************************/
     85          /*!
     86           * \name	man_gyro_init
     87           * \brief	角速度・加速度データ管理の初期化処理
     88           * \param	なし
     89           * \return   0: 正常
     90           *          -1: 異常
     91           * \note	起動時に、呼ばれること
     92           */
     93          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     94          int32_t man_gyro_init(void)
     95          {
   \                     man_gyro_init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     96          	int	ret;
     97          
     98          
     99          	// LSM6DSLの初期化処理
    100          	ret = ctrc_LSM6DSL_start();
   \   00000002   0x.... 0x....      BL       ctrc_LSM6DSL_start
   \   00000006   0x0004             MOVS     R4,R0
    101          
    102          	// 内部変数を初期化する
    103          	memset(&man_gyro_work, 0, sizeof(man_gyro_work_t));
   \   00000008   0x2164             MOVS     R1,#+100
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x....             LDR      R5,??DataTable7
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x.... 0x....      BL       __aeabi_memset
    104          
    105          	if (ret >= 0) {
   \   00000014   0x2C00             CMP      R4,#+0
   \   00000016   0xD402             BMI      ??man_gyro_init_0
    106          		// 受信開始
    107          		man_gyro_work.mode = MAN_GYRO_MODE_ACTIVE;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x....             LDR      R1,??DataTable7
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    108          	}
    109          
    110          	return ret;
   \                     ??man_gyro_init_0: (+1)
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    111          }
    112          
    113          /********************************************************************/
    114          /*!
    115           * \name	man_gyro_main
    116           * \brief	角速度・加速度データ管理のmain処理
    117           * \param	なし
    118           * \return  なし
    119           * \note	100ms毎に呼ばれること
    120           */
    121          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    122          void man_gyro_main(void)
    123          {
   \                     man_gyro_main: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
    124          	int32_t					ret=-1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
    125          	man_gyro_data_t			gyro={0};				// 角速度・加速度データ
   \   00000008   0xA802             ADD      R0,SP,#+8
   \   0000000A   0x2148             MOVS     R1,#+72
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
    126          //	long long value;
    127          
    128          	if (man_gyro_work.mode == MAN_GYRO_MODE_ACTIVE) {
   \   00000010   0x....             LDR      R0,??DataTable7
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD000             BEQ      .+4
   \   00000018   0xE0A2             B        ??man_gyro_main_0
    129          
    130          		man_gyro_work.loop++;
   \   0000001A   0x....             LDR      R0,??DataTable7
   \   0000001C   0x6840             LDR      R0,[R0, #+4]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x....             LDR      R1,??DataTable7
   \   00000022   0x6048             STR      R0,[R1, #+4]
    131          		if (man_gyro_work.loop >= MN_GYRO_LOOP_MAX) {
   \   00000024   0x....             LDR      R0,??DataTable7
   \   00000026   0x6840             LDR      R0,[R0, #+4]
   \   00000028   0x280A             CMP      R0,#+10
   \   0000002A   0xD308             BCC      ??man_gyro_main_1
    132          			man_gyro_work.loop = 0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x....             LDR      R1,??DataTable7
   \   00000030   0x6048             STR      R0,[R1, #+4]
    133          			man_gyro_work.gyro_recv.flag = MAN_GYRO_RECV_NON;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR      R1,??DataTable7
   \   00000036   0x60C8             STR      R0,[R1, #+12]
    134          			man_gyro_work.gyro_recv.flag_gyro = 0;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x....             LDR      R1,??DataTable7
   \   0000003C   0x6108             STR      R0,[R1, #+16]
    135          		}
    136          
    137          		// 100ms毎に取得できるまで繰り返す
    138          		if (man_gyro_work.gyro_recv.flag != MAN_GYRO_RECV_OK) {
   \                     ??man_gyro_main_1: (+1)
   \   0000003E   0x....             LDR      R0,??DataTable7
   \   00000040   0x68C0             LDR      R0,[R0, #+12]
   \   00000042   0x2801             CMP      R0,#+1
   \   00000044   0xD100             BNE      .+4
   \   00000046   0xE08B             B        ??man_gyro_main_0
    139          
    140          			if (man_gyro_work.gyro_recv.flag_gyro == 0) {
   \   00000048   0x....             LDR      R0,??DataTable7
   \   0000004A   0x6900             LDR      R0,[R0, #+16]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD000             BEQ      .+4
   \   00000050   0xE086             B        ??man_gyro_main_0
    141          				ret = ctrc_LSM6DSL_get_gyro(&gyro.gyro_x, 
    142          											&gyro.gyro_y,
    143          											&gyro.gyro_z,
    144          											&gyro.accel_x, 
    145          											&gyro.accel_y,
    146          											&gyro.accel_z);
   \   00000052   0xA802             ADD      R0,SP,#+8
   \   00000054   0x3038             ADDS     R0,R0,#+56
   \   00000056   0x9001             STR      R0,[SP, #+4]
   \   00000058   0xA802             ADD      R0,SP,#+8
   \   0000005A   0x3034             ADDS     R0,R0,#+52
   \   0000005C   0x9000             STR      R0,[SP, #+0]
   \   0000005E   0xA802             ADD      R0,SP,#+8
   \   00000060   0x0003             MOVS     R3,R0
   \   00000062   0x3330             ADDS     R3,R3,#+48
   \   00000064   0xA802             ADD      R0,SP,#+8
   \   00000066   0x0002             MOVS     R2,R0
   \   00000068   0x322C             ADDS     R2,R2,#+44
   \   0000006A   0xA802             ADD      R0,SP,#+8
   \   0000006C   0x0001             MOVS     R1,R0
   \   0000006E   0x3128             ADDS     R1,R1,#+40
   \   00000070   0xA802             ADD      R0,SP,#+8
   \   00000072   0x3024             ADDS     R0,R0,#+36
   \   00000074   0x.... 0x....      BL       ctrc_LSM6DSL_get_gyro
    147          				if (ret >= 0) {
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD471             BMI      ??man_gyro_main_0
    148          					man_gyro_work.gyro_recv.flag_gyro = 1;			// 角速度データ取得フラグ
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0x....             LDR      R1,??DataTable7
   \   00000080   0x6108             STR      R0,[R1, #+16]
    149          
    150          					man_gyro_work.gyro_recv.gyro.raw_gyro_x		 	= gyro.gyro_x;
   \   00000082   0x980B             LDR      R0,[SP, #+44]
   \   00000084   0x....             LDR      R1,??DataTable7
   \   00000086   0x6188             STR      R0,[R1, #+24]
    151          					man_gyro_work.gyro_recv.gyro.raw_gyro_y		 	= gyro.gyro_y;
   \   00000088   0x980C             LDR      R0,[SP, #+48]
   \   0000008A   0x....             LDR      R1,??DataTable7
   \   0000008C   0x61C8             STR      R0,[R1, #+28]
    152          					man_gyro_work.gyro_recv.gyro.raw_gyro_z		 	= gyro.gyro_z;
   \   0000008E   0x980D             LDR      R0,[SP, #+52]
   \   00000090   0x....             LDR      R1,??DataTable7
   \   00000092   0x6208             STR      R0,[R1, #+32]
    153          					man_gyro_work.gyro_recv.gyro.raw_accel_x		= gyro.accel_x;
   \   00000094   0x980E             LDR      R0,[SP, #+56]
   \   00000096   0x....             LDR      R1,??DataTable7
   \   00000098   0x6248             STR      R0,[R1, #+36]
    154          					man_gyro_work.gyro_recv.gyro.raw_accel_y		= gyro.accel_y;
   \   0000009A   0x980F             LDR      R0,[SP, #+60]
   \   0000009C   0x....             LDR      R1,??DataTable7
   \   0000009E   0x6288             STR      R0,[R1, #+40]
    155          					man_gyro_work.gyro_recv.gyro.raw_accel_z		= gyro.accel_z;
   \   000000A0   0x9810             LDR      R0,[SP, #+64]
   \   000000A2   0x....             LDR      R1,??DataTable7
   \   000000A4   0x62C8             STR      R0,[R1, #+44]
    156          					man_gyro_work.gyro_recv.gyro.raw_GravAccel_x	= 0;
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x....             LDR      R1,??DataTable7
   \   000000AA   0x6308             STR      R0,[R1, #+48]
    157          					man_gyro_work.gyro_recv.gyro.raw_GravAccel_y	= 0;
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x....             LDR      R1,??DataTable7
   \   000000B0   0x6348             STR      R0,[R1, #+52]
    158          					man_gyro_work.gyro_recv.gyro.raw_GravAccel_z	= 0;
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x....             LDR      R1,??DataTable7
   \   000000B6   0x6388             STR      R0,[R1, #+56]
    159          
    160          					man_gyro_work.gyro_recv.gyro.gyro_x				= (gyro.gyro_x   * MAN_DATA_GYRO_UNIT_UDPS   / 1000 / 1000);	// 角速度(X軸)[dps]
   \   000000B8   0x980B             LDR      R0,[SP, #+44]
   \   000000BA   0x....             LDR      R1,??DataTable7_1  ;; 0xee6b
   \   000000BC   0x4348             MULS     R0,R1,R0
   \   000000BE   0x21FA             MOVS     R1,#+250
   \   000000C0   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   000000C2   0x.... 0x....      BL       __aeabi_idiv
   \   000000C6   0x21FA             MOVS     R1,#+250
   \   000000C8   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   000000CA   0x.... 0x....      BL       __aeabi_idiv
   \   000000CE   0x....             LDR      R1,??DataTable7
   \   000000D0   0x63C8             STR      R0,[R1, #+60]
    161          					man_gyro_work.gyro_recv.gyro.gyro_y				= (gyro.gyro_y   * MAN_DATA_GYRO_UNIT_UDPS   / 1000 / 1000);	// 角速度(X軸)[dps]
   \   000000D2   0x980C             LDR      R0,[SP, #+48]
   \   000000D4   0x....             LDR      R1,??DataTable7_1  ;; 0xee6b
   \   000000D6   0x4348             MULS     R0,R1,R0
   \   000000D8   0x21FA             MOVS     R1,#+250
   \   000000DA   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   000000DC   0x.... 0x....      BL       __aeabi_idiv
   \   000000E0   0x21FA             MOVS     R1,#+250
   \   000000E2   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   000000E4   0x.... 0x....      BL       __aeabi_idiv
   \   000000E8   0x....             LDR      R1,??DataTable7
   \   000000EA   0x6408             STR      R0,[R1, #+64]
    162          					man_gyro_work.gyro_recv.gyro.gyro_z				= (gyro.gyro_z   * MAN_DATA_GYRO_UNIT_UDPS   / 1000 / 1000);	// 角速度(X軸)[dps]
   \   000000EC   0x980D             LDR      R0,[SP, #+52]
   \   000000EE   0x....             LDR      R1,??DataTable7_1  ;; 0xee6b
   \   000000F0   0x4348             MULS     R0,R1,R0
   \   000000F2   0x21FA             MOVS     R1,#+250
   \   000000F4   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   000000F6   0x.... 0x....      BL       __aeabi_idiv
   \   000000FA   0x21FA             MOVS     R1,#+250
   \   000000FC   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   000000FE   0x.... 0x....      BL       __aeabi_idiv
   \   00000102   0x....             LDR      R1,??DataTable7
   \   00000104   0x6448             STR      R0,[R1, #+68]
    163          					man_gyro_work.gyro_recv.gyro.accel_x			= (gyro.accel_x  * MAN_DATA_ACCEL_UNIT_10NG  / 1000 / 100);		// 加速度(X軸)[mG]
   \   00000106   0x980E             LDR      R0,[SP, #+56]
   \   00000108   0x....             LDR      R1,??DataTable7_2  ;; 0x5f5f
   \   0000010A   0x4348             MULS     R0,R1,R0
   \   0000010C   0x21FA             MOVS     R1,#+250
   \   0000010E   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000110   0x.... 0x....      BL       __aeabi_idiv
   \   00000114   0x2164             MOVS     R1,#+100
   \   00000116   0x.... 0x....      BL       __aeabi_idiv
   \   0000011A   0x....             LDR      R1,??DataTable7
   \   0000011C   0x6488             STR      R0,[R1, #+72]
    164          					man_gyro_work.gyro_recv.gyro.accel_y			= (gyro.accel_y  * MAN_DATA_ACCEL_UNIT_10NG  / 1000 / 100);		// 加速度(Y軸)[mG]
   \   0000011E   0x980F             LDR      R0,[SP, #+60]
   \   00000120   0x....             LDR      R1,??DataTable7_2  ;; 0x5f5f
   \   00000122   0x4348             MULS     R0,R1,R0
   \   00000124   0x21FA             MOVS     R1,#+250
   \   00000126   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000128   0x.... 0x....      BL       __aeabi_idiv
   \   0000012C   0x2164             MOVS     R1,#+100
   \   0000012E   0x.... 0x....      BL       __aeabi_idiv
   \   00000132   0x....             LDR      R1,??DataTable7
   \   00000134   0x64C8             STR      R0,[R1, #+76]
    165          					man_gyro_work.gyro_recv.gyro.accel_z			= (gyro.accel_z  * MAN_DATA_ACCEL_UNIT_10NG  / 1000 / 100);		// 加速度(Z軸)[mG]
   \   00000136   0x9810             LDR      R0,[SP, #+64]
   \   00000138   0x....             LDR      R1,??DataTable7_2  ;; 0x5f5f
   \   0000013A   0x4348             MULS     R0,R1,R0
   \   0000013C   0x21FA             MOVS     R1,#+250
   \   0000013E   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000140   0x.... 0x....      BL       __aeabi_idiv
   \   00000144   0x2164             MOVS     R1,#+100
   \   00000146   0x.... 0x....      BL       __aeabi_idiv
   \   0000014A   0x....             LDR      R1,??DataTable7
   \   0000014C   0x6508             STR      R0,[R1, #+80]
    166          					man_gyro_work.gyro_recv.gyro.GravAccel_x		= 0;															// 重力加速度(X軸)
   \   0000014E   0x2000             MOVS     R0,#+0
   \   00000150   0x....             LDR      R1,??DataTable7
   \   00000152   0x6548             STR      R0,[R1, #+84]
    167          					man_gyro_work.gyro_recv.gyro.GravAccel_y		= 0;															// 重力加速度(Y軸)
   \   00000154   0x2000             MOVS     R0,#+0
   \   00000156   0x....             LDR      R1,??DataTable7
   \   00000158   0x6588             STR      R0,[R1, #+88]
    168          					man_gyro_work.gyro_recv.gyro.GravAccel_z		= 0;	
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0x....             LDR      R1,??DataTable7
   \   0000015E   0x65C8             STR      R0,[R1, #+92]
    169          														// 重力加速度(Z軸)
    170          #ifdef ADLINK_DEBUG  //Matsushita
    171                                                  sprintf(print_buf," man_gyro_work.gyro_recv.gyro.accel x:%d y:%d z:%d\r\n",
    172                                                            man_gyro_work.gyro_recv.gyro.accel_x,
    173                                                            man_gyro_work.gyro_recv.gyro.accel_y,
    174                                                            man_gyro_work.gyro_recv.gyro.accel_z);
    175                                                          sysmgr_log(print_buf,strlen(print_buf));
    176          #endif 
    177                                          }
    178          			}
    179          		}
    180          	}
    181          }
   \                     ??man_gyro_main_0: (+1)
   \   00000160   0xB015             ADD      SP,SP,#+84
   \   00000162   0xBD00             POP      {PC}             ;; return
    182          
    183          
    184          /********************************************************************/
    185          /*!
    186           * \name	man_gyro_get_data
    187           * \brief	現在保持している角速度・加速度データの取得
    188           * \param	gyro    : 角速度・加速度データ
    189           * \return   0: 取得
    190           *          -1: 未取得
    191           * \note	必要時に呼ばれること
    192           */
    193          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    194          int32_t man_gyro_get_data(man_gyro_data_t *gyro)
    195          {
   \                     man_gyro_get_data: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    196          	int32_t		ret=-1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
    197          	
    198          	if (gyro != NULL) {
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD005             BEQ      ??man_gyro_get_data_0
    199          		*gyro = man_gyro_work.gyro_recv.gyro;
   \   0000000C   0x0008             MOVS     R0,R1
   \   0000000E   0x....             LDR      R1,??DataTable7_3
   \   00000010   0x2248             MOVS     R2,#+72
   \   00000012   0x.... 0x....      BL       __aeabi_memcpy4
    200          		ret = 0;
   \   00000016   0x2000             MOVS     R0,#+0
    201          	}
    202          
    203          	return ret;
   \                     ??man_gyro_get_data_0: (+1)
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
    204          }
    205          
    206          
    207          /********************************************************************/
    208          /*!
    209           * \name	man_gyro_get_new_data
    210           * \brief	新しい角速度・加速度データの取得
    211           * \param	gyro    : 角速度・加速度データ
    212           * \return   0: 取得
    213           *          -1: 未取得
    214           * \note	必要時に呼ばれること
    215           */
    216          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    217          int32_t man_gyro_get_new_data(man_gyro_data_t *gyro)
    218          {
   \                     man_gyro_get_new_data: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    219          	int32_t		ret=-1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
    220          	
    221          	if (gyro != NULL) {
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD00C             BEQ      ??man_gyro_get_new_data_0
    222          		if (man_gyro_work.new_flag == MAN_GYRO_RECV_OK) {
   \   0000000C   0x....             LDR      R2,??DataTable7
   \   0000000E   0x6892             LDR      R2,[R2, #+8]
   \   00000010   0x2A01             CMP      R2,#+1
   \   00000012   0xD108             BNE      ??man_gyro_get_new_data_0
    223          			*gyro = man_gyro_work.gyro_recv.gyro;
   \   00000014   0x0008             MOVS     R0,R1
   \   00000016   0x....             LDR      R1,??DataTable7_3
   \   00000018   0x2248             MOVS     R2,#+72
   \   0000001A   0x.... 0x....      BL       __aeabi_memcpy4
    224          
    225          			man_gyro_work.new_flag = MAN_GYRO_RECV_NON;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR      R1,??DataTable7
   \   00000022   0x6088             STR      R0,[R1, #+8]
    226          			ret = 0;
   \   00000024   0x2000             MOVS     R0,#+0
    227          		}
    228          	}
    229          
    230          	return ret;
   \                     ??man_gyro_get_new_data_0: (+1)
   \   00000026   0xBD02             POP      {R1,PC}          ;; return
    231          }
    232          
    233          
    234          /********************************************************************/
    235          /*!
    236           * \name	man_gyro_standby
    237           * \brief	角速度・加速度データ管理のスタンバイモード処理
    238           * \param	なし
    239           * \return   0: 正常
    240           *          -1: 異常
    241           * \note	アクティブ -> スタンバイ時に、呼ばれること
    242           */
    243          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    244          int32_t man_gyro_standby(void)
    245          {
   \                     man_gyro_standby: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    246          	int32_t	ret=0;
   \   00000002   0x2000             MOVS     R0,#+0
    247          	
    248          	if (man_gyro_work.mode != MAN_GYRO_MODE_STOP) {
   \   00000004   0x....             LDR      R1,??DataTable7
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD004             BEQ      ??man_gyro_standby_0
    249          		// スタンバイモードに移行する
    250          		ret = ctrc_LSM6DSL_set_standby();
   \   0000000C   0x.... 0x....      BL       ctrc_LSM6DSL_set_standby
    251          		// 受信停止
    252          		man_gyro_work.mode = MAN_GYRO_MODE_STOP;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x....             LDR      R2,??DataTable7
   \   00000014   0x6011             STR      R1,[R2, #+0]
    253          	}
    254          
    255          	return ret;
   \                     ??man_gyro_standby_0: (+1)
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
    256          }
    257          
    258          /********************************************************************/
    259          /*!
    260           * \name	man_gyro_active
    261           * \brief	角速度・加速度データ管理のアクティブモード処理
    262           * \param	なし
    263           * \return   0: 正常
    264           *          -1: 異常
    265           * \note	スタンバイ -> アクティブ時に、呼ばれること
    266           */
    267          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    268          int32_t man_gyro_active(void)
    269          {
   \                     man_gyro_active: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    270          	int32_t	ret=0;
   \   00000002   0x2000             MOVS     R0,#+0
    271          	
    272          	if (man_gyro_work.mode != MAN_GYRO_MODE_ACTIVE) {
   \   00000004   0x....             LDR      R1,??DataTable7
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0xD009             BEQ      ??man_gyro_active_0
    273          		// アクティブモードに移行する
    274          		ret = ctrc_LSM6DSL_set_active();
   \   0000000C   0x.... 0x....      BL       ctrc_LSM6DSL_set_active
    275          	
    276          		if (ret >= 0) {
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD405             BMI      ??man_gyro_active_0
    277          			// 受信再開
    278          			man_gyro_work.mode = MAN_GYRO_MODE_ACTIVE;
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x....             LDR      R2,??DataTable7
   \   00000018   0x6011             STR      R1,[R2, #+0]
    279          			man_gyro_work.loop = 0;
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x....             LDR      R2,??DataTable7
   \   0000001E   0x6051             STR      R1,[R2, #+4]
    280          		}
    281          	}
    282          
    283          	return ret;
   \                     ??man_gyro_active_0: (+1)
   \   00000020   0xBD02             POP      {R1,PC}          ;; return
    284          }
    285          
    286          /********************************************************************/
    287          /*!
    288           * \name	man_gyro_off
    289           * \brief	角速度・加速度データ管理のOFFモード処理
    290           * \param	なし
    291           * \return   0: 正常
    292           * \note	アクティブ -> OFF時に、呼ばれること
    293           */
    294          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    295          int32_t man_gyro_off(void)
    296          {
    297          	int32_t	ret=0;
   \                     man_gyro_off: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    298          	
    299          	// 受信停止
    300          	man_gyro_work.mode = MAN_GYRO_MODE_STOP;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x....             LDR      R2,??DataTable7
   \   00000006   0x6011             STR      R1,[R2, #+0]
    301          
    302          	return ret;
   \   00000008   0x4770             BX       LR               ;; return
    303          }
    304          
    305          /********************************************************************/
    306          /*!
    307           * \name	man_gyro_on
    308           * \brief	角速度・加速度データ管理のONモード処理
    309           * \param	なし
    310           * \return   0: 正常
    311           * \note	OFF -> アクティブ時に、呼ばれること
    312           */
    313          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    314          int32_t man_gyro_on(void)
    315          {
   \                     man_gyro_on: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    316          	int32_t	ret=0;
   \   00000002   0x2400             MOVS     R4,#+0
    317          
    318          	// LSM6DSLの初期化処理
    319          	ctrc_LSM6DSL_start();
   \   00000004   0x.... 0x....      BL       ctrc_LSM6DSL_start
    320          	man_gyro_work.mode = MAN_GYRO_MODE_ACTIVE;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x....             LDR      R1,??DataTable7
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    321          
    322          	return ret;
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    323          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     man_gyro_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x0000EE6B         DC32     0xee6b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x00005F5F         DC32     0x5f5f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     man_gyro_work+0x18

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
    324          
    325          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   man_gyro_active
         8   -> ctrc_LSM6DSL_set_active
       8   man_gyro_get_data
         8   -> __aeabi_memcpy4
       8   man_gyro_get_new_data
         8   -> __aeabi_memcpy4
      16   man_gyro_init
        16   -> __aeabi_memset
        16   -> ctrc_LSM6DSL_start
      88   man_gyro_main
        88   -> __aeabi_memclr4
        88   -> ctrc_LSM6DSL_get_gyro
        88 __aeabi_idiv
       0   man_gyro_off
       8   man_gyro_on
         8   -> ctrc_LSM6DSL_start
       8   man_gyro_standby
         8   -> ctrc_LSM6DSL_set_standby


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
      72  ?_0
      34  man_gyro_active
      26  man_gyro_get_data
      40  man_gyro_get_new_data
      34  man_gyro_init
     356  man_gyro_main
      10  man_gyro_off
      18  man_gyro_on
      24  man_gyro_standby
     100  man_gyro_work

 
 100 bytes in section .bss
  72 bytes in section .rodata
 558 bytes in section .text
 
 558 bytes of CODE  memory
  72 bytes of CONST memory
 100 bytes of DATA  memory

Errors: none
Warnings: none
