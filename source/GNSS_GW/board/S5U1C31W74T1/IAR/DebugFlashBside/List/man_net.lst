###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       21/May/2019  17:01:24
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\GNSS\Software\rJ105\source\GNSS_GW\apl\man_net.c
#    Command line =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\apl\man_net.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_B -lCN
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        -lA
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List\man_net.lst
#    Object file  =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj\man_net.o
#
###############################################################################

C:\GNSS\Software\rJ105\source\GNSS_GW\apl\man_net.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    man_net.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    2017.10.2
      8            * @brief   ネットワークを管理する
      9            ******************************************************************************
     10            $Id: man_net.c 247 2018-07-30 01:52:13Z shitaoka $
     11            * @attention
     12            *
     13            *****************************************************************************
     14          */
     15          
     16          #include <string.h>
     17          #include <stdio.h>
     18          #include <stdlib.h>
     19          
     20          #include "board.h"
     21          
     22          #include "man_timer.h"
     23          #include "man_lte.h"
     24          #include "man_rpt.h"
     25          #include "man_cmd.h"
     26          #include "man_msg.h"
     27          #include "man_ota.h"
     28          #include "man_net.h"
     29          #include "man_error.h"
     30          #include "man_usb.h"
     31          #include "man_data.h"
     32          #include "gnss_gw_common.h"
     33          
     34          
     35          #pragma section = "APL_PRG_BLOCK"
     36          
     37          /************************************************************************/
     38          /* declaration of structure                                             */
     39          /************************************************************************/
     40          
     41          
     42          #define	MAN_NET_SEQ_BUFF_MAX			100
     43          
     44          // 状態
     45          #define	MAN_NET_STATE_CLOSE		0			// NETWORK CLOSE状態
     46          #define	MAN_NET_STATE_OPEN		1			// NETWORK OPEN状態
     47          #define	MAN_NET_STATE_STBY		2			// NETWORK STBY IN状態
     48          #define	MAN_NET_STATE_OFF		3			// NETWORK POWER OFF状態
     49          
     50          
     51          #define	MAN_NET_STS_LTE		0x01			// NET OPEN状態
     52          #define	MAN_NET_STS_UDP		0x02			// UDP OPEN状態
     53          #define	MAN_NET_STS_CLIENT	0x04			// MSG OPEN状態
     54          #define	MAN_NET_STS_SERVER	0x08			// SEVER START状態
     55          #define	MAN_NET_STS_ALL		(MAN_NET_STS_LTE|MAN_NET_STS_UDP|MAN_NET_STS_CLIENT|MAN_NET_STS_SERVER)
     56          #define	MAN_NET_STS_OTA		(MAN_NET_STS_UDP|MAN_NET_STS_CLIENT|MAN_NET_STS_SERVER)
     57          
     58          
     59          // ステータス
     60          #define	MAN_NET_STATUS_LTE_INIT		0x01	// network使用初期化
     61          #define	MAN_NET_STATUS_LTE_READY	0x02	// network使用準備
     62          
     63          
     64          #define	MAN_NET_REQ_STATE_NON				0
     65          #define	MAN_NET_REQ_STATE_RESET				1		// リセット発生
     66          //#define	MAN_NET_REQ_STATE_NETCLOSE			2		// NET CLOSE発生
     67          //#define	MAN_NET_REQ_STATE_NETOPEN			3		// NET OPEN発生
     68          #define	MAN_NET_REQ_STATE_CSQ_OK			4		// CSQ復帰
     69          #define	MAN_NET_REQ_STATE_CSQ_NG			5		// CSQ異常
     70          #define	MAN_NET_REQ_STATE_NET_CLOSE			11		// SM7500JE の自動 NET CLOSE(+CIPERROR: 2) :: NET OPENから再開
     71          #define	MAN_NET_REQ_STATE_DEV_NOT_SUPPORT	12		// SM7500JE のNOT_SUPPORT   (+CIPERROR: 4) :: SEND時は OPENから再開
     72          #define	MAN_NET_REQ_STATE_DEV_BUSY			13		// SM7500JE のDEV BUSY      (+CIPERROR: 8) :: CLOSEから再開
     73          
     74          
     75          // 要求
     76          typedef enum {
     77          	MAN_NET_REQ_CMD_READY,				// 要求待ち
     78          	MAN_NET_REQ_CMD_OPEN,				// NET OPEN
     79          	MAN_NET_REQ_CMD_CLOSE,				// NET CLOSE
     80          	MAN_NET_REQ_CMD_STBY,				// NET STBY
     81          	MAN_NET_REQ_CMD_OFF,				// LTE POWER OFF
     82          } man_net_req_cmd_def;
     83          
     84          
     85          #define	MAN_NET_INIT_RETRY_WAIT		10000	// 10秒後にリトライ
     86          #define	MAN_NET_READY_RETRY_WAIT	10000	// 10秒後にリトライ
     87          #define	MAN_NET_START_RETRY_WAIT	10000	// 10秒後にNET OPEN リトライ
     88          #define	MAN_NET_NET_CLOSE_WAIT		15000	// NET CLOSE受信15秒後に再開する
     89          #define	MAN_NET_RESET_START_WAIT	2000	// 2秒後にRESETを開始する
     90          
     91          
     92          // ネットワーク管理シーケンス
     93          typedef enum {
     94          	MAN_NET_SEQ_READY,					// 00 : 要求待ち
     95          
     96          	MAN_NET_SEQ_WUP_REQ,				// 01 : WAKE UP要求
     97          	MAN_NET_SEQ_WUP,					// 02 : WAKE UP中
     98          	MAN_NET_SEQ_WUP_OK,					// 03 : WAKE UP完了
     99          	MAN_NET_SEQ_WUP_NG,					// 04 : WAKE UP異常
    100          	MAN_NET_SEQ_RESET_REQ,				// 05 : RESET開始要求
    101          	MAN_NET_SEQ_RESET_REQ_WAIT,			// 06 : RESET開始待ち
    102          	MAN_NET_SEQ_RESET_REQ_WAIT_OK,		// 07 : RESET開始待ち完了
    103          	MAN_NET_SEQ_RESET_REQ_WAIT_NG,		// 08 : RESET開始待ち完了
    104          	MAN_NET_SEQ_RESET,					// 09 : RESET実行開始
    105          	MAN_NET_SEQ_RESET_OK,				// 10 : RESET実行成功
    106          	MAN_NET_SEQ_RESET_NG,				// 11 : RESET実行失敗
    107          
    108          	MAN_NET_SEQ_OPEN_REQ,				// 12 : OPEN要求
    109          	MAN_NET_SEQ_LTE_INIT,				// 13 : NETWORK使用初期化
    110          	MAN_NET_SEQ_LTE_INIT_OK,			// 14 : NETWORK使用初期化完了
    111          	MAN_NET_SEQ_LTE_INIT_NG,			// 15 : NETWORK使用初期化異常
    112          	MAN_NET_SEQ_LTE_INIT_NG_WKUP_REQ,	// 16 : NETWORK使用初期化異常(WAKE UP送信)
    113          	MAN_NET_SEQ_LTE_INIT_NG_WKUP,		// 17 : NETWORK使用初期化異常(WAKE UP中)
    114          	MAN_NET_SEQ_LTE_INIT_NG_WKUP_OK,	// 18 : NETWORK使用初期化異常(WAKE UP完了)
    115          	MAN_NET_SEQ_LTE_INIT_NG_WKUP_NG,	// 19 : NETWORK使用初期化異常(WAKE UP異常)
    116          	MAN_NET_SEQ_LTE_INIT_NG_WAIT,		// 20 : NETWORK使用初期化リトライ10秒待ち
    117          	MAN_NET_SEQ_LTE_INIT_NG_WAIT_OK,	// 21 : NETWORK使用初期化リトライ10秒待ち完了
    118          	MAN_NET_SEQ_LTE_INIT_NG_WAIT_NG,	// 22 : NETWORK使用初期化リトライ10秒待ち異常
    119          	MAN_NET_SEQ_LTE_READY_REQ,			// 23 : NETWORK使用準備要求
    120          	MAN_NET_SEQ_LTE_READY,				// 24 : NETWORK使用準備
    121          	MAN_NET_SEQ_LTE_READY_OK,			// 25 : NETWORK使用準備完了
    122          	MAN_NET_SEQ_LTE_READY_NG,			// 26 : NETWORK使用準備異常
    123          	MAN_NET_SEQ_LTE_READY_NG_WAIT,		// 27 : NETWORK使用準備異常リトライ待ち
    124          	MAN_NET_SEQ_LTE_READY_NG_WAIT_OK,	// 28 : NETWORK使用準備異常リトライ待ち完了
    125          	MAN_NET_SEQ_LTE_READY_NG_WAIT_NG,	// 29 : NETWORK使用準備異常リトライ待ち異常
    126          	MAN_NET_SEQ_LTE_START_REQ,			// 30 : NETWORK使用開始要求
    127          	MAN_NET_SEQ_LTE_START,				// 31 : NETWORK使用開始
    128          	MAN_NET_SEQ_LTE_START_OK,			// 32 : NETWORK使用開始完了
    129          	MAN_NET_SEQ_LTE_START_NG,			// 33 : NETWORK使用開始異常
    130          	MAN_NET_SEQ_LTE_START_NG_WAIT,		// 34 : NETWORK使用開始異常 リトライ待ち
    131          	MAN_NET_SEQ_LTE_START_NG_WAIT_OK,	// 35 : NETWORK使用開始異常 リトライ待ち完了
    132          	MAN_NET_SEQ_LTE_START_NG_WAIT_NG,	// 36 : NETWORK使用開始異常 リトライ待ち異常
    133          	MAN_NET_SEQ_MSG_START_REQ,			// 37 : メッセージ管理開始要求
    134          	MAN_NET_SEQ_MSG_START,				// 38 : メッセージ管理開始
    135          	MAN_NET_SEQ_MSG_START_OK,			// 39 : メッセージ管理開始完了
    136          	MAN_NET_SEQ_MSG_START_NG,			// 40 : メッセージ管理開始異常
    137          	MAN_NET_SEQ_CMD_START,				// 41 : コマンド受け付け開始
    138          	MAN_NET_SEQ_CMD_START_OK,			// 42 : コマンド受け付け開始完了
    139          	MAN_NET_SEQ_CMD_START_NG,			// 43 : コマンド受け付け開始異常
    140          
    141          	MAN_NET_SEQ_CLOSE_REQ,				// 44 : CLOSE要求
    142          	MAN_NET_SEQ_CMD_STOP,				// 45 : HTTP server機能停止
    143          	MAN_NET_SEQ_CMD_STOP_OK,			// 46 : HTTP server機能停止完了
    144          	MAN_NET_SEQ_CMD_STOP_NG,			// 47 : HTTP server機能停止異常
    145          	MAN_NET_SEQ_RPT_STOP,				// 48 : レポート機能停止
    146          	MAN_NET_SEQ_RPT_STOP_OK,			// 49 : レポート機能停止完了
    147          	MAN_NET_SEQ_RPT_STOP_NG,			// 50 : レポート機能停止異常
    148          	MAN_NET_SEQ_MSG_STOP,				// 51 : メッセージ機能停止
    149          	MAN_NET_SEQ_MSG_STOP_OK,			// 52 : メッセージ機能停止完了
    150          	MAN_NET_SEQ_MSG_STOP_NG,			// 53 : メッセージ機能停止異常
    151          	MAN_NET_SEQ_LTE_STOP,				// 54 : NETWORK使用終了
    152          	MAN_NET_SEQ_LTE_STOP_OK,			// 55 : NETWORK使用終了完了
    153          	MAN_NET_SEQ_LTE_STOP_NG,			// 56 : NETWORK使用終了異常
    154          	MAN_NET_SEQ_LTE_STBY_REQ,			// 57 : NETWORK STBY要求
    155          	MAN_NET_SEQ_LTE_STBY,				// 58 : NETWORK STBY
    156          	MAN_NET_SEQ_LTE_STBY_OK,			// 59 : NETWORK STBY完了
    157          	MAN_NET_SEQ_LTE_STBY_NG,			// 60 : NETWORK STBY異常
    158          
    159          	MAN_NET_SEQ_CLOSE_WAIT,				// 61 : NET CLOSE通知された場合は30秒待ってOPENから再開する
    160          	MAN_NET_SEQ_CLOSE_WAIT_OK,			// 62 : 待ち完了
    161          	MAN_NET_SEQ_CLOSE_WAIT_NG,			// 63 : 待ち完了
    162          
    163          	MAN_NET_SEQ_LTE_OFF_REQ,			// 64 : NETWORK POWER OFF要求
    164          	MAN_NET_SEQ_LTE_OFF,				// 65 : NETWORK POWER OFF
    165          	MAN_NET_SEQ_LTE_OFF_OK,				// 66 : NETWORK POWER OFF完了
    166          	MAN_NET_SEQ_LTE_OFF_NG,				// 67 : NETWORK POWER OFF異常
    167          } man_net_seq_def;
    168          
    169          #define	MAN_NET_NOTI_STATE			1000
    170          #define	MAN_NET_NOTI_ERR_RPT		1001
    171          #define	MAN_NET_NOTI_ERR_MSG		1002
    172          #define	MAN_NET_NOTI_ERR_CMD		1003
    173          #define	MAN_NET_NOTI_ERR_OTA		1004
    174          
    175          // 要求
    176          typedef struct _man_net_req_info_t {
    177          	man_net_req_cmd_def		req_cmd;			// 要求
    178          	int32_t					reset_cmd;			// リセット要求
    179          	man_net_req_cmd_def		gole_cmd;			// 目標のコマンド
    180          
    181          	int32_t					req_state;			// NETWORK状態通知
    182          } man_net_req_info_t;
    183          
    184          // 要求に対する応答
    185          typedef struct _man_net_resp_cmd_t {
    186          	int32_t					flag;
    187          	int32_t					id;
    188          	int32_t					status;
    189          } man_net_resp_cmd_t;
    190          
    191          // 状態変化通知先情報
    192          typedef struct _man_net_noti_info_t {
    193          	int32_t					id;					// ユニークID
    194          	func_man_net_state		callback_state;		//状態変化を通知するcallback関数
    195          	int32_t					state;				// 通知する状態
    196          } man_net_noti_info_t;
    197          
    198          
    199          // ネットワーク管理ワーク
    200          typedef struct _man_rpt_work_t {
    201          	int32_t					net_state;	// ネットワークの状態
    202          	int32_t					gole_state;	// 目標状態
    203          
    204          	int32_t					net_sts;
    205          	uint32_t				status;		// ステータス
    206          	man_net_seq_def			sequense;	// シーケンス
    207          	man_net_req_info_t		request;	// 要求
    208          	man_net_resp_cmd_t		resp_cmd;	// 要求に対する応答
    209          
    210          	man_net_noti_info_t		noti_info;	// 状態通知情報
    211          
    212          	man_data_rssi_sts_def	rssi_sts;	// 電波状況(圏内/圏外)
    213          
    214          	man_net_seq_def			seq_log[MAN_NET_SEQ_BUFF_MAX];
    215          	int32_t					seq_wp;
    216          
    217          	uint8_t					buff[100];
    218          } man_net_work_t;
    219          
    220          /************************************************************************/
    221          /* definition of variables                                              */
    222          /************************************************************************/
    223          

   \                                 In section .bss, align 4
    224          man_net_work_t	man_net_work;
   \                     man_net_work:
   \   00000000                      DS8 268
    225          
    226          
    227          
    228          
    229          /********************************************************************/
    230          /*	callback関数                                                    */
    231          /********************************************************************/
    232          
    233          /********************************************************************/
    234          /*!
    235           * \name	man_net_req_callback
    236           * \brief	要求に対するcallback処理
    237           * \param	id     : ユニークID
    238           *          status : 受信結果
    239           * \return  なし
    240           * \note	
    241           */
    242          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    243          static void man_net_req_callback(int32_t id, int32_t status)
    244          {
    245          	man_net_work.resp_cmd.flag = 1;
   \                     man_net_req_callback: (+1)
   \   00000000   0x2201             MOVS     R2,#+1
   \   00000002   0x....             LDR      R3,??DataTable4
   \   00000004   0x625A             STR      R2,[R3, #+36]
    246          	man_net_work.resp_cmd.id = id & TIMER_MAN_ID_MASK;
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x....             LDR      R2,??DataTable4
   \   0000000A   0x6290             STR      R0,[R2, #+40]
    247          	man_net_work.resp_cmd.status = status;
   \   0000000C   0x....             LDR      R0,??DataTable4
   \   0000000E   0x62C1             STR      R1,[R0, #+44]
    248          }
   \   00000010   0x4770             BX       LR               ;; return
    249          
    250          
    251          /********************************************************************/
    252          /*	static関数                                                      */
    253          /********************************************************************/
    254          
    255          /********************************************************************/
    256          /*!
    257           * \name	man_net_set_sequense
    258           * \brief	シーケンスを設定する
    259           * \param	sequense : 設定するシーケンス
    260           * \return  なし
    261           * \note	
    262           */
    263          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    264          static void man_net_set_sequense( man_net_seq_def sequense )
    265          {
   \                     man_net_set_sequense: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    266          	if (man_net_work.sequense != sequense) {
   \   00000002   0x....             LDR      R1,??DataTable4
   \   00000004   0x7C09             LDRB     R1,[R1, #+16]
   \   00000006   0x0002             MOVS     R2,R0
   \   00000008   0xB2D2             UXTB     R2,R2
   \   0000000A   0x4291             CMP      R1,R2
   \   0000000C   0xD019             BEQ      ??man_net_set_sequense_0
    267          		man_net_work.sequense = sequense;
   \   0000000E   0x....             LDR      R1,??DataTable4
   \   00000010   0x7408             STRB     R0,[R1, #+16]
    268          		man_net_work.seq_log[man_net_work.seq_wp] = sequense;
   \   00000012   0x....             LDR      R1,??DataTable4
   \   00000014   0x....             LDR      R2,??DataTable4_1
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0x1889             ADDS     R1,R1,R2
   \   0000001A   0x223D             MOVS     R2,#+61
   \   0000001C   0x5488             STRB     R0,[R1, R2]
    269          		man_net_work.seq_wp++;
   \   0000001E   0x....             LDR      R1,??DataTable4_1
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x1C49             ADDS     R1,R1,#+1
   \   00000024   0x....             LDR      R2,??DataTable4_1
   \   00000026   0x6011             STR      R1,[R2, #+0]
    270          		if (man_net_work.seq_wp >= MAN_NET_SEQ_BUFF_MAX) {
   \   00000028   0x....             LDR      R1,??DataTable4_1
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x2964             CMP      R1,#+100
   \   0000002E   0xDB02             BLT      ??man_net_set_sequense_1
    271          			man_net_work.seq_wp = 0;
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x....             LDR      R2,??DataTable4_1
   \   00000034   0x6011             STR      R1,[R2, #+0]
    272          		}
    273          
    274          		// デバックログに登録 
    275          		man_dbglog_setting(MAN_ERROR_DBG_MAN_NET, MAN_ERROR_DBG_TYPE_SEQ, sequense);
   \                     ??man_net_set_sequense_1: (+1)
   \   00000036   0xB2C0             UXTB     R0,R0
   \   00000038   0x0002             MOVS     R2,R0
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2003             MOVS     R0,#+3
   \   0000003E   0x.... 0x....      BL       man_dbglog_setting
    276          
    277          #ifdef GNSS_DEBUG_MAN_NET 
    278          			int32_t		length;
    279          			sprintf((char *)&man_net_work.buff[0], "NET SEQ(%d)\n", sequense);
    280          			length = strlen((char const *)&man_net_work.buff[0]);
    281          			man_usb_data_send(&man_net_work.buff[0], length);
    282          #endif
    283          
    284          	}
    285          }
   \                     ??man_net_set_sequense_0: (+1)
   \   00000042   0xBD01             POP      {R0,PC}          ;; return
    286          
    287          
    288          /********************************************************************/
    289          /*!
    290           * \name	man_net_set_cmd_end
    291           * \brief	コマンド終了処理
    292           * \param	なし
    293           * \return  なし
    294           * \note	
    295           */
    296          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    297          static void man_net_set_cmd_end( void )
    298          {
   \                     man_net_set_cmd_end: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    299          	man_net_set_sequense(MAN_NET_SEQ_READY);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       man_net_set_sequense
    300          	man_net_work.request.req_cmd = MAN_NET_REQ_CMD_READY;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR      R1,??DataTable4
   \   0000000C   0x7508             STRB     R0,[R1, #+20]
    301          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    302          
    303          
    304          /********************************************************************/
    305          /*!
    306           * \name	man_net_noti_callback
    307           * \brief	状態変化を通知する処理
    308           * \param	state : 通知する状態
    309           * \return  なし
    310           * \note	
    311           */
    312          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    313          static void man_net_noti_callback( int32_t state )
    314          {
   \                     man_net_noti_callback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    315          	if (man_net_work.noti_info.state != state) {
   \   00000002   0x....             LDR      R1,??DataTable4
   \   00000004   0x6B89             LDR      R1,[R1, #+56]
   \   00000006   0x4281             CMP      R1,R0
   \   00000008   0xD00B             BEQ      ??man_net_noti_callback_0
    316          		man_net_work.noti_info.state = state;
   \   0000000A   0x....             LDR      R1,??DataTable4
   \   0000000C   0x6388             STR      R0,[R1, #+56]
    317          		if (man_net_work.noti_info.callback_state != NULL) {
   \   0000000E   0x....             LDR      R1,??DataTable4
   \   00000010   0x6B49             LDR      R1,[R1, #+52]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD005             BEQ      ??man_net_noti_callback_0
    318          			man_net_work.noti_info.callback_state(man_net_work.noti_info.id, state);
   \   00000016   0x0001             MOVS     R1,R0
   \   00000018   0x....             LDR      R0,??DataTable4
   \   0000001A   0x6B00             LDR      R0,[R0, #+48]
   \   0000001C   0x....             LDR      R2,??DataTable4
   \   0000001E   0x6B52             LDR      R2,[R2, #+52]
   \   00000020   0x4790             BLX      R2
    319          		}
    320          	}
    321          }
   \                     ??man_net_noti_callback_0: (+1)
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
    322          
    323          
    324          /********************************************************************/
    325          /*	extern関数                                                      */
    326          /********************************************************************/
    327          
    328          /********************************************************************/
    329          /*!
    330           * \name	man_net_init
    331           * \brief	ネットワーク管理の初期化処理
    332           * \param	なし
    333           * \return  なし
    334           * \note	起動時に、呼ばれること
    335           */
    336          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    337          void man_net_init(void)
    338          {
   \                     man_net_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    339          	// 内部変数を初期化する
    340          	memset(&man_net_work, 0, sizeof(man_net_work_t));
   \   00000002   0x2186             MOVS     R1,#+134
   \   00000004   0x0049             LSLS     R1,R1,#+1        ;; #+268
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x....             LDR      R4,??DataTable4
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
    341          	
    342          	// 状態変化通知を依頼する
    343          	man_lte_noti_state(MAN_NET_NOTI_STATE, man_net_req_callback);
   \   00000010   0x....             LDR      R1,??DataTable4_2
   \   00000012   0x20FA             MOVS     R0,#+250
   \   00000014   0x0080             LSLS     R0,R0,#+2        ;; #+1000
   \   00000016   0x.... 0x....      BL       man_lte_noti_state
    344          	// RPTの異常通知を依頼する
    345          	man_rpt_noti_error(MAN_NET_NOTI_ERR_RPT, man_net_req_callback);
   \   0000001A   0x....             LDR      R1,??DataTable4_2
   \   0000001C   0x....             LDR      R0,??DataTable4_3  ;; 0x3e9
   \   0000001E   0x.... 0x....      BL       man_rpt_noti_error
    346          	// MSGの異常通知を依頼する
    347          	man_msg_noti_error(MAN_NET_NOTI_ERR_MSG, man_net_req_callback);
   \   00000022   0x....             LDR      R1,??DataTable4_2
   \   00000024   0x....             LDR      R0,??DataTable4_4  ;; 0x3ea
   \   00000026   0x.... 0x....      BL       man_msg_noti_error
    348          	// CMDの異常通知を依頼する
    349          	man_cmd_noti_error(MAN_NET_NOTI_ERR_CMD, man_net_req_callback);
   \   0000002A   0x....             LDR      R1,??DataTable4_2
   \   0000002C   0x....             LDR      R0,??DataTable4_5  ;; 0x3eb
   \   0000002E   0x.... 0x....      BL       man_cmd_noti_error
    350          	// OTAの異常通知を依頼する
    351          	man_ota_noti_error(MAN_NET_NOTI_ERR_OTA, man_net_req_callback);
   \   00000032   0x....             LDR      R1,??DataTable4_2
   \   00000034   0x20FB             MOVS     R0,#+251
   \   00000036   0x0080             LSLS     R0,R0,#+2        ;; #+1004
   \   00000038   0x.... 0x....      BL       man_ota_noti_error
    352          }
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
    353          
    354          
    355          /********************************************************************/
    356          /*!
    357           * \name	man_net_main
    358           * \brief	ネットワーク管理のメイン処理
    359           * \param	なし
    360           * \return  なし
    361           * \note	毎回、呼ばれること
    362           */
    363          /********************************************************************/

   \                                 In section .text, align 4, keep-with-next
    364          void man_net_main( void )
    365          {
   \                     man_net_main: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    366          	int32_t	ret;
    367          	man_data_get_sensor_t	*sensor = man_data_get_sensor();
   \   00000002   0x.... 0x....      BL       man_data_get_sensor
   \   00000006   0x0004             MOVS     R4,R0
    368          
    369          
    370          	// ***************************
    371          	// 応答処理
    372          	// ***************************
    373          	if (man_net_work.resp_cmd.flag == 1) {
   \   00000008   0x487E             LDR      R0,??man_net_main_0
   \   0000000A   0x6A40             LDR      R0,[R0, #+36]
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD000             BEQ      .+4
   \   00000010   0xE22B             B        ??man_net_main_1
    374          		man_net_work.resp_cmd.flag = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x497B             LDR      R1,??man_net_main_0
   \   00000016   0x6248             STR      R0,[R1, #+36]
    375          
    376          		// 状態通知処理
    377          		if (man_net_work.resp_cmd.id == MAN_NET_NOTI_STATE) {
   \   00000018   0x487A             LDR      R0,??man_net_main_0
   \   0000001A   0x6A80             LDR      R0,[R0, #+40]
   \   0000001C   0x21FA             MOVS     R1,#+250
   \   0000001E   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD151             BNE      ??man_net_main_2
    378          
    379          			// デバックログに登録 
    380          			man_dbglog_setting(MAN_ERROR_DBG_MAN_NET, MAN_ERROR_DBG_TYPE_NOTI, man_net_work.resp_cmd.status);
   \   00000024   0x4877             LDR      R0,??man_net_main_0
   \   00000026   0x6AC2             LDR      R2,[R0, #+44]
   \   00000028   0x2102             MOVS     R1,#+2
   \   0000002A   0x2003             MOVS     R0,#+3
   \   0000002C   0x.... 0x....      BL       man_dbglog_setting
    381          
    382          			switch (man_net_work.resp_cmd.status) {
   \   00000030   0x4874             LDR      R0,??man_net_main_0
   \   00000032   0x6AC0             LDR      R0,[R0, #+44]
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD008             BEQ      ??man_net_main_3
   \   00000038   0x280B             CMP      R0,#+11
   \   0000003A   0xD013             BEQ      ??man_net_main_4
   \   0000003C   0x280C             CMP      R0,#+12
   \   0000003E   0xD01E             BEQ      ??man_net_main_5
   \   00000040   0x280D             CMP      R0,#+13
   \   00000042   0xD029             BEQ      ??man_net_main_6
   \   00000044   0x280E             CMP      R0,#+14
   \   00000046   0xD034             BEQ      ??man_net_main_7
   \   00000048   0xE03D             B        ??man_net_main_8
    383          			// リセット発生
    384          			case MAN_LTE_STATE_RESET:
    385          				man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, man_net_work.request.req_state);
   \                     ??man_net_main_3: (+1)
   \   0000004A   0x23FF             MOVS     R3,#+255
   \   0000004C   0x3382             ADDS     R3,R3,#+130      ;; #+385
   \   0000004E   0x486D             LDR      R0,??man_net_main_0
   \   00000050   0x6A02             LDR      R2,[R0, #+32]
   \   00000052   0x486C             LDR      R0,??man_net_main_0
   \   00000054   0x7C01             LDRB     R1,[R0, #+16]
   \   00000056   0x2014             MOVS     R0,#+20
   \   00000058   0x.... 0x....      BL       man_error_set
    386          
    387          				// リセット処理を開始する
    388          				man_net_work.request.req_state = MAN_NET_REQ_STATE_RESET;
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x4969             LDR      R1,??man_net_main_0
   \   00000060   0x6208             STR      R0,[R1, #+32]
    389          				break;
   \   00000062   0xE202             B        ??man_net_main_1
    390          
    391          			// SM7500JE の自動 NET CLOSE(+CIPERROR: 2) :: NET OPENから再開
    392          			case MAN_LTE_STATE_NET_CLOSE:
    393          				man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, man_net_work.request.req_state);
   \                     ??man_net_main_4: (+1)
   \   00000064   0x23FF             MOVS     R3,#+255
   \   00000066   0x338A             ADDS     R3,R3,#+138      ;; #+393
   \   00000068   0x4866             LDR      R0,??man_net_main_0
   \   0000006A   0x6A02             LDR      R2,[R0, #+32]
   \   0000006C   0x4865             LDR      R0,??man_net_main_0
   \   0000006E   0x7C01             LDRB     R1,[R0, #+16]
   \   00000070   0x2014             MOVS     R0,#+20
   \   00000072   0x.... 0x....      BL       man_error_set
    394          				man_net_work.request.req_state = MAN_NET_REQ_STATE_NET_CLOSE;
   \   00000076   0x200B             MOVS     R0,#+11
   \   00000078   0x4962             LDR      R1,??man_net_main_0
   \   0000007A   0x6208             STR      R0,[R1, #+32]
    395          				break;
   \   0000007C   0xE1F5             B        ??man_net_main_1
    396          
    397          			// SM7500JE のNOT_SUPPORT   (+CIPERROR: 4) :: SEND時は OPENから再開
    398          			case MAN_LTE_STATE_DEV_NOT_SUPPORT:
    399          				man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, man_net_work.request.req_state);
   \                     ??man_net_main_5: (+1)
   \   0000007E   0x23FF             MOVS     R3,#+255
   \   00000080   0x3390             ADDS     R3,R3,#+144      ;; #+399
   \   00000082   0x4860             LDR      R0,??man_net_main_0
   \   00000084   0x6A02             LDR      R2,[R0, #+32]
   \   00000086   0x485F             LDR      R0,??man_net_main_0
   \   00000088   0x7C01             LDRB     R1,[R0, #+16]
   \   0000008A   0x2014             MOVS     R0,#+20
   \   0000008C   0x.... 0x....      BL       man_error_set
    400          				man_net_work.request.req_state = MAN_NET_REQ_STATE_DEV_NOT_SUPPORT;
   \   00000090   0x200C             MOVS     R0,#+12
   \   00000092   0x495C             LDR      R1,??man_net_main_0
   \   00000094   0x6208             STR      R0,[R1, #+32]
    401          				break;
   \   00000096   0xE1E8             B        ??man_net_main_1
    402          
    403          			// SM7500JE のDEV BUSY      (+CIPERROR: 8) :: CLOSEから再開
    404          			case MAN_LTE_STATE_DEV_BUSY:
    405          				man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, man_net_work.request.req_state);
   \                     ??man_net_main_6: (+1)
   \   00000098   0x23FF             MOVS     R3,#+255
   \   0000009A   0x3396             ADDS     R3,R3,#+150      ;; #+405
   \   0000009C   0x4859             LDR      R0,??man_net_main_0
   \   0000009E   0x6A02             LDR      R2,[R0, #+32]
   \   000000A0   0x4858             LDR      R0,??man_net_main_0
   \   000000A2   0x7C01             LDRB     R1,[R0, #+16]
   \   000000A4   0x2014             MOVS     R0,#+20
   \   000000A6   0x.... 0x....      BL       man_error_set
    406          				man_net_work.request.req_state = MAN_NET_REQ_STATE_DEV_BUSY;
   \   000000AA   0x200D             MOVS     R0,#+13
   \   000000AC   0x4955             LDR      R1,??man_net_main_0
   \   000000AE   0x6208             STR      R0,[R1, #+32]
    407          				break;
   \   000000B0   0xE1DB             B        ??man_net_main_1
    408          
    409          			// 使用できないSIMCARD
    410          			case MAN_LTE_STATE_SIMCARD_NG:
    411          				man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, man_net_work.request.req_state);
   \                     ??man_net_main_7: (+1)
   \   000000B2   0x23FF             MOVS     R3,#+255
   \   000000B4   0x339C             ADDS     R3,R3,#+156      ;; #+411
   \   000000B6   0x4853             LDR      R0,??man_net_main_0
   \   000000B8   0x6A02             LDR      R2,[R0, #+32]
   \   000000BA   0x4852             LDR      R0,??man_net_main_0
   \   000000BC   0x7C01             LDRB     R1,[R0, #+16]
   \   000000BE   0x2014             MOVS     R0,#+20
   \   000000C0   0x.... 0x....      BL       man_error_set
    412          				break;
   \   000000C4   0xE1D1             B        ??man_net_main_1
    413          
    414          			default:
    415          				break;
   \                     ??man_net_main_8: (+1)
   \   000000C6   0xE1D0             B        ??man_net_main_1
    416          			}
    417          		}
    418          
    419          		// RPTからの異常通知
    420          		else if (man_net_work.resp_cmd.id == MAN_NET_NOTI_ERR_RPT) {
   \                     ??man_net_main_2: (+1)
   \   000000C8   0x484E             LDR      R0,??man_net_main_0
   \   000000CA   0x6A80             LDR      R0,[R0, #+40]
   \   000000CC   0x494E             LDR      R1,??man_net_main_0+0x4  ;; 0x3e9
   \   000000CE   0x4288             CMP      R0,R1
   \   000000D0   0xD100             BNE      .+4
   \   000000D2   0xE1CA             B        ??man_net_main_1
    421          			// NETWORK状態が悪い場合は良くなるのを待つ
    422          			// NETWORK状態が良い場合はリセットして復活させる
    423          			;
    424          		}
    425          
    426          		// MSGからの異常通知
    427          		else if (man_net_work.resp_cmd.id == MAN_NET_NOTI_ERR_MSG) {
   \   000000D4   0x484B             LDR      R0,??man_net_main_0
   \   000000D6   0x6A80             LDR      R0,[R0, #+40]
   \   000000D8   0x494C             LDR      R1,??man_net_main_0+0x8  ;; 0x3ea
   \   000000DA   0x4288             CMP      R0,R1
   \   000000DC   0xD100             BNE      .+4
   \   000000DE   0xE1C4             B        ??man_net_main_1
    428          			// NETWORK状態が悪い場合は良くなるのを待つ
    429          			// NETWORK状態が良い場合はリセットして復活させる
    430          			;
    431          		}
    432          
    433          		// CMDからの異常通知
    434          		else if (man_net_work.resp_cmd.id == MAN_NET_NOTI_ERR_CMD) {
   \   000000E0   0x4848             LDR      R0,??man_net_main_0
   \   000000E2   0x6A80             LDR      R0,[R0, #+40]
   \   000000E4   0x494A             LDR      R1,??man_net_main_0+0xC  ;; 0x3eb
   \   000000E6   0x4288             CMP      R0,R1
   \   000000E8   0xD100             BNE      .+4
   \   000000EA   0xE1BE             B        ??man_net_main_1
    435          			// NETWORK状態が悪い場合は良くなるのを待つ
    436          			// NETWORK状態が良い場合はリセットして復活させる
    437          			;
    438          		}
    439          
    440          		// OTAからの異常通知
    441          		else if (man_net_work.resp_cmd.id == MAN_NET_NOTI_ERR_OTA) {
   \   000000EC   0x4845             LDR      R0,??man_net_main_0
   \   000000EE   0x6A80             LDR      R0,[R0, #+40]
   \   000000F0   0x21FB             MOVS     R1,#+251
   \   000000F2   0x0089             LSLS     R1,R1,#+2        ;; #+1004
   \   000000F4   0x4288             CMP      R0,R1
   \   000000F6   0xD100             BNE      .+4
   \   000000F8   0xE1B7             B        ??man_net_main_1
    442          			// NETWORK状態が悪い場合は良くなるのを待つ
    443          			// NETWORK状態が良い場合はリセットして復活させる
    444          			;
    445          		}
    446          
    447          
    448          		// コマンド応答処理
    449          		else {
    450          			// 正常応答
    451          			if (man_net_work.resp_cmd.status == MAN_LTE_STATUS_OK) {
   \   000000FA   0x4842             LDR      R0,??man_net_main_0
   \   000000FC   0x6AC0             LDR      R0,[R0, #+44]
   \   000000FE   0x2800             CMP      R0,#+0
   \   00000100   0xD000             BEQ      .+4
   \   00000102   0xE0DA             B        ??man_net_main_9
    452          				switch (man_net_work.resp_cmd.id) {
   \   00000104   0x483F             LDR      R0,??man_net_main_0
   \   00000106   0x6A80             LDR      R0,[R0, #+40]
   \   00000108   0x2802             CMP      R0,#+2
   \   0000010A   0xD02A             BEQ      ??man_net_main_10
   \   0000010C   0x2806             CMP      R0,#+6
   \   0000010E   0xD030             BEQ      ??man_net_main_11
   \   00000110   0x2809             CMP      R0,#+9
   \   00000112   0xD036             BEQ      ??man_net_main_12
   \   00000114   0x280D             CMP      R0,#+13
   \   00000116   0xD03C             BEQ      ??man_net_main_13
   \   00000118   0x2811             CMP      R0,#+17
   \   0000011A   0xD04A             BEQ      ??man_net_main_14
   \   0000011C   0x2814             CMP      R0,#+20
   \   0000011E   0xD040             BEQ      ??man_net_main_15
   \   00000120   0x2818             CMP      R0,#+24
   \   00000122   0xD04E             BEQ      ??man_net_main_16
   \   00000124   0x281B             CMP      R0,#+27
   \   00000126   0xD054             BEQ      ??man_net_main_17
   \   00000128   0x281F             CMP      R0,#+31
   \   0000012A   0xD05A             BEQ      ??man_net_main_18
   \   0000012C   0x2822             CMP      R0,#+34
   \   0000012E   0xD060             BEQ      ??man_net_main_19
   \   00000130   0x2826             CMP      R0,#+38
   \   00000132   0xD06F             BEQ      ??man_net_main_20
   \   00000134   0x2829             CMP      R0,#+41
   \   00000136   0xD075             BEQ      ??man_net_main_21
   \   00000138   0x282D             CMP      R0,#+45
   \   0000013A   0xD07B             BEQ      ??man_net_main_22
   \   0000013C   0x2830             CMP      R0,#+48
   \   0000013E   0xD100             BNE      .+4
   \   00000140   0xE080             B        ??man_net_main_23
   \   00000142   0x2833             CMP      R0,#+51
   \   00000144   0xD100             BNE      .+4
   \   00000146   0xE085             B        ??man_net_main_24
   \   00000148   0x2836             CMP      R0,#+54
   \   0000014A   0xD100             BNE      .+4
   \   0000014C   0xE08A             B        ??man_net_main_25
   \   0000014E   0x283A             CMP      R0,#+58
   \   00000150   0xD100             BNE      .+4
   \   00000152   0xE08F             B        ??man_net_main_26
   \   00000154   0x283D             CMP      R0,#+61
   \   00000156   0xD100             BNE      .+4
   \   00000158   0xE094             B        ??man_net_main_27
   \   0000015A   0x2841             CMP      R0,#+65
   \   0000015C   0xD100             BNE      .+4
   \   0000015E   0xE099             B        ??man_net_main_28
   \   00000160   0xE0A0             B        ??man_net_main_29
    453          				case MAN_NET_SEQ_WUP:
    454          					if (man_net_work.sequense == MAN_NET_SEQ_WUP) {
   \                     ??man_net_main_10: (+1)
   \   00000162   0x4828             LDR      R0,??man_net_main_0
   \   00000164   0x7C00             LDRB     R0,[R0, #+16]
   \   00000166   0x2802             CMP      R0,#+2
   \   00000168   0xD102             BNE      ??man_net_main_30
    455          						man_net_set_sequense(MAN_NET_SEQ_WUP_OK);
   \   0000016A   0x2003             MOVS     R0,#+3
   \   0000016C   0x.... 0x....      BL       man_net_set_sequense
    456          					}
    457          					break;
   \                     ??man_net_main_30: (+1)
   \   00000170   0xE17B             B        ??man_net_main_1
    458          
    459          				case MAN_NET_SEQ_RESET_REQ_WAIT:
    460          					if (man_net_work.sequense == MAN_NET_SEQ_RESET_REQ_WAIT) {
   \                     ??man_net_main_11: (+1)
   \   00000172   0x4824             LDR      R0,??man_net_main_0
   \   00000174   0x7C00             LDRB     R0,[R0, #+16]
   \   00000176   0x2806             CMP      R0,#+6
   \   00000178   0xD102             BNE      ??man_net_main_31
    461          						man_net_set_sequense(MAN_NET_SEQ_RESET_REQ_WAIT_OK);
   \   0000017A   0x2007             MOVS     R0,#+7
   \   0000017C   0x.... 0x....      BL       man_net_set_sequense
    462          					}
    463          					break;
   \                     ??man_net_main_31: (+1)
   \   00000180   0xE173             B        ??man_net_main_1
    464          
    465          				case MAN_NET_SEQ_RESET:
    466          					if (man_net_work.sequense == MAN_NET_SEQ_RESET) {
   \                     ??man_net_main_12: (+1)
   \   00000182   0x4820             LDR      R0,??man_net_main_0
   \   00000184   0x7C00             LDRB     R0,[R0, #+16]
   \   00000186   0x2809             CMP      R0,#+9
   \   00000188   0xD102             BNE      ??man_net_main_32
    467          						man_net_set_sequense(MAN_NET_SEQ_RESET_OK);
   \   0000018A   0x200A             MOVS     R0,#+10
   \   0000018C   0x.... 0x....      BL       man_net_set_sequense
    468          					}
    469          					break;
   \                     ??man_net_main_32: (+1)
   \   00000190   0xE16B             B        ??man_net_main_1
    470          					
    471          				case MAN_NET_SEQ_LTE_INIT:
    472          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_INIT) {
   \                     ??man_net_main_13: (+1)
   \   00000192   0x481C             LDR      R0,??man_net_main_0
   \   00000194   0x7C00             LDRB     R0,[R0, #+16]
   \   00000196   0x280D             CMP      R0,#+13
   \   00000198   0xD102             BNE      ??man_net_main_33
    473          						man_net_set_sequense(MAN_NET_SEQ_LTE_INIT_OK);
   \   0000019A   0x200E             MOVS     R0,#+14
   \   0000019C   0x.... 0x....      BL       man_net_set_sequense
    474          					}
    475          					break;
   \                     ??man_net_main_33: (+1)
   \   000001A0   0xE163             B        ??man_net_main_1
    476          
    477          				case MAN_NET_SEQ_LTE_INIT_NG_WAIT:
    478          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_INIT_NG_WAIT) {
   \                     ??man_net_main_15: (+1)
   \   000001A2   0x4818             LDR      R0,??man_net_main_0
   \   000001A4   0x7C00             LDRB     R0,[R0, #+16]
   \   000001A6   0x2814             CMP      R0,#+20
   \   000001A8   0xD102             BNE      ??man_net_main_34
    479          						man_net_set_sequense(MAN_NET_SEQ_LTE_INIT_NG_WAIT_OK);
   \   000001AA   0x2015             MOVS     R0,#+21
   \   000001AC   0x.... 0x....      BL       man_net_set_sequense
    480          					}
    481          					break;
   \                     ??man_net_main_34: (+1)
   \   000001B0   0xE15B             B        ??man_net_main_1
    482          
    483          				case MAN_NET_SEQ_LTE_INIT_NG_WKUP:
    484          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_INIT_NG_WKUP) {
   \                     ??man_net_main_14: (+1)
   \   000001B2   0x4814             LDR      R0,??man_net_main_0
   \   000001B4   0x7C00             LDRB     R0,[R0, #+16]
   \   000001B6   0x2811             CMP      R0,#+17
   \   000001B8   0xD102             BNE      ??man_net_main_35
    485          						man_net_set_sequense(MAN_NET_SEQ_LTE_INIT_NG_WKUP_OK);
   \   000001BA   0x2012             MOVS     R0,#+18
   \   000001BC   0x.... 0x....      BL       man_net_set_sequense
    486          					}
    487          					break;
   \                     ??man_net_main_35: (+1)
   \   000001C0   0xE153             B        ??man_net_main_1
    488          
    489          				case MAN_NET_SEQ_LTE_READY:
    490          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_READY) {
   \                     ??man_net_main_16: (+1)
   \   000001C2   0x4810             LDR      R0,??man_net_main_0
   \   000001C4   0x7C00             LDRB     R0,[R0, #+16]
   \   000001C6   0x2818             CMP      R0,#+24
   \   000001C8   0xD102             BNE      ??man_net_main_36
    491          						man_net_set_sequense(MAN_NET_SEQ_LTE_READY_OK);
   \   000001CA   0x2019             MOVS     R0,#+25
   \   000001CC   0x.... 0x....      BL       man_net_set_sequense
    492          					}
    493          					break;
   \                     ??man_net_main_36: (+1)
   \   000001D0   0xE14B             B        ??man_net_main_1
    494          
    495          				case MAN_NET_SEQ_LTE_READY_NG_WAIT:
    496          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_READY_NG_WAIT) {
   \                     ??man_net_main_17: (+1)
   \   000001D2   0x480C             LDR      R0,??man_net_main_0
   \   000001D4   0x7C00             LDRB     R0,[R0, #+16]
   \   000001D6   0x281B             CMP      R0,#+27
   \   000001D8   0xD102             BNE      ??man_net_main_37
    497          						man_net_set_sequense(MAN_NET_SEQ_LTE_READY_NG_WAIT_OK);
   \   000001DA   0x201C             MOVS     R0,#+28
   \   000001DC   0x.... 0x....      BL       man_net_set_sequense
    498          					}
    499          					break;
   \                     ??man_net_main_37: (+1)
   \   000001E0   0xE143             B        ??man_net_main_1
    500          
    501          				case MAN_NET_SEQ_LTE_START:
    502          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_START) {
   \                     ??man_net_main_18: (+1)
   \   000001E2   0x4808             LDR      R0,??man_net_main_0
   \   000001E4   0x7C00             LDRB     R0,[R0, #+16]
   \   000001E6   0x281F             CMP      R0,#+31
   \   000001E8   0xD102             BNE      ??man_net_main_38
    503          						man_net_set_sequense(MAN_NET_SEQ_LTE_START_OK);
   \   000001EA   0x2020             MOVS     R0,#+32
   \   000001EC   0x.... 0x....      BL       man_net_set_sequense
    504          					}
    505          					break;
   \                     ??man_net_main_38: (+1)
   \   000001F0   0xE13B             B        ??man_net_main_1
    506          
    507          				case MAN_NET_SEQ_LTE_START_NG_WAIT:
    508          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_START_NG_WAIT) {
   \                     ??man_net_main_19: (+1)
   \   000001F2   0x4804             LDR      R0,??man_net_main_0
   \   000001F4   0x7C00             LDRB     R0,[R0, #+16]
   \   000001F6   0x2822             CMP      R0,#+34
   \   000001F8   0xD102             BNE      ??man_net_main_39
    509          						man_net_set_sequense(MAN_NET_SEQ_LTE_START_NG_WAIT_OK);
   \   000001FA   0x2023             MOVS     R0,#+35
   \   000001FC   0x.... 0x....      BL       man_net_set_sequense
    510          					}
    511          					break;
   \                     ??man_net_main_39: (+1)
   \   00000200   0xE133             B        ??man_net_main_1
   \   00000202   0xBF00             Nop      
   \                     ??man_net_main_0:
   \   00000204   0x........         DC32     man_net_work
   \   00000208   0x000003E9         DC32     0x3e9
   \   0000020C   0x000003EA         DC32     0x3ea
   \   00000210   0x000003EB         DC32     0x3eb
    512          
    513          				case MAN_NET_SEQ_MSG_START:
    514          					if (man_net_work.sequense == MAN_NET_SEQ_MSG_START) {
   \                     ??man_net_main_20: (+1)
   \   00000214   0x48A5             LDR      R0,??man_net_main_40
   \   00000216   0x7C00             LDRB     R0,[R0, #+16]
   \   00000218   0x2826             CMP      R0,#+38
   \   0000021A   0xD102             BNE      ??man_net_main_41
    515          						man_net_set_sequense(MAN_NET_SEQ_MSG_START_OK);
   \   0000021C   0x2027             MOVS     R0,#+39
   \   0000021E   0x.... 0x....      BL       man_net_set_sequense
    516          					}
    517          					break;
   \                     ??man_net_main_41: (+1)
   \   00000222   0xE122             B        ??man_net_main_1
    518          
    519          				case MAN_NET_SEQ_CMD_START:
    520          					if (man_net_work.sequense == MAN_NET_SEQ_CMD_START) {
   \                     ??man_net_main_21: (+1)
   \   00000224   0x48A1             LDR      R0,??man_net_main_40
   \   00000226   0x7C00             LDRB     R0,[R0, #+16]
   \   00000228   0x2829             CMP      R0,#+41
   \   0000022A   0xD102             BNE      ??man_net_main_42
    521          						man_net_set_sequense(MAN_NET_SEQ_CMD_START_OK);
   \   0000022C   0x202A             MOVS     R0,#+42
   \   0000022E   0x.... 0x....      BL       man_net_set_sequense
    522          					}
    523          					break;
   \                     ??man_net_main_42: (+1)
   \   00000232   0xE11A             B        ??man_net_main_1
    524          
    525          				case MAN_NET_SEQ_CMD_STOP:
    526          					if (man_net_work.sequense == MAN_NET_SEQ_CMD_STOP) {
   \                     ??man_net_main_22: (+1)
   \   00000234   0x489D             LDR      R0,??man_net_main_40
   \   00000236   0x7C00             LDRB     R0,[R0, #+16]
   \   00000238   0x282D             CMP      R0,#+45
   \   0000023A   0xD102             BNE      ??man_net_main_43
    527          						man_net_set_sequense(MAN_NET_SEQ_CMD_STOP_OK);
   \   0000023C   0x202E             MOVS     R0,#+46
   \   0000023E   0x.... 0x....      BL       man_net_set_sequense
    528          					}
    529          					break;
   \                     ??man_net_main_43: (+1)
   \   00000242   0xE112             B        ??man_net_main_1
    530          
    531          				case MAN_NET_SEQ_RPT_STOP:
    532          					if (man_net_work.sequense == MAN_NET_SEQ_RPT_STOP) {
   \                     ??man_net_main_23: (+1)
   \   00000244   0x4899             LDR      R0,??man_net_main_40
   \   00000246   0x7C00             LDRB     R0,[R0, #+16]
   \   00000248   0x2830             CMP      R0,#+48
   \   0000024A   0xD102             BNE      ??man_net_main_44
    533          						man_net_set_sequense(MAN_NET_SEQ_RPT_STOP_OK);
   \   0000024C   0x2031             MOVS     R0,#+49
   \   0000024E   0x.... 0x....      BL       man_net_set_sequense
    534          					}
    535          					break;
   \                     ??man_net_main_44: (+1)
   \   00000252   0xE10A             B        ??man_net_main_1
    536          
    537          				case MAN_NET_SEQ_MSG_STOP:
    538          					if (man_net_work.sequense == MAN_NET_SEQ_MSG_STOP) {
   \                     ??man_net_main_24: (+1)
   \   00000254   0x4895             LDR      R0,??man_net_main_40
   \   00000256   0x7C00             LDRB     R0,[R0, #+16]
   \   00000258   0x2833             CMP      R0,#+51
   \   0000025A   0xD102             BNE      ??man_net_main_45
    539          						man_net_set_sequense(MAN_NET_SEQ_MSG_STOP_OK);
   \   0000025C   0x2034             MOVS     R0,#+52
   \   0000025E   0x.... 0x....      BL       man_net_set_sequense
    540          					}
    541          					break;
   \                     ??man_net_main_45: (+1)
   \   00000262   0xE102             B        ??man_net_main_1
    542          
    543          				case MAN_NET_SEQ_LTE_STOP:
    544          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_STOP) {
   \                     ??man_net_main_25: (+1)
   \   00000264   0x4891             LDR      R0,??man_net_main_40
   \   00000266   0x7C00             LDRB     R0,[R0, #+16]
   \   00000268   0x2836             CMP      R0,#+54
   \   0000026A   0xD102             BNE      ??man_net_main_46
    545          						man_net_set_sequense(MAN_NET_SEQ_LTE_STOP_OK);
   \   0000026C   0x2037             MOVS     R0,#+55
   \   0000026E   0x.... 0x....      BL       man_net_set_sequense
    546          					}
    547          					break;
   \                     ??man_net_main_46: (+1)
   \   00000272   0xE0FA             B        ??man_net_main_1
    548          
    549          				case MAN_NET_SEQ_LTE_STBY:
    550          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_STBY) {
   \                     ??man_net_main_26: (+1)
   \   00000274   0x488D             LDR      R0,??man_net_main_40
   \   00000276   0x7C00             LDRB     R0,[R0, #+16]
   \   00000278   0x283A             CMP      R0,#+58
   \   0000027A   0xD102             BNE      ??man_net_main_47
    551          						man_net_set_sequense(MAN_NET_SEQ_LTE_STBY_OK);
   \   0000027C   0x203B             MOVS     R0,#+59
   \   0000027E   0x.... 0x....      BL       man_net_set_sequense
    552          					}
    553          					break;
   \                     ??man_net_main_47: (+1)
   \   00000282   0xE0F2             B        ??man_net_main_1
    554          				
    555          				case MAN_NET_SEQ_CLOSE_WAIT:
    556          					if (man_net_work.sequense == MAN_NET_SEQ_CLOSE_WAIT) {
   \                     ??man_net_main_27: (+1)
   \   00000284   0x4889             LDR      R0,??man_net_main_40
   \   00000286   0x7C00             LDRB     R0,[R0, #+16]
   \   00000288   0x283D             CMP      R0,#+61
   \   0000028A   0xD102             BNE      ??man_net_main_48
    557          						man_net_set_sequense(MAN_NET_SEQ_CLOSE_WAIT_OK);
   \   0000028C   0x203E             MOVS     R0,#+62
   \   0000028E   0x.... 0x....      BL       man_net_set_sequense
    558          					}
    559          					break;
   \                     ??man_net_main_48: (+1)
   \   00000292   0xE0EA             B        ??man_net_main_1
    560          
    561          				case MAN_NET_SEQ_LTE_OFF:
    562          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_OFF) {
   \                     ??man_net_main_28: (+1)
   \   00000294   0x4885             LDR      R0,??man_net_main_40
   \   00000296   0x7C00             LDRB     R0,[R0, #+16]
   \   00000298   0x2841             CMP      R0,#+65
   \   0000029A   0xD102             BNE      ??man_net_main_49
    563          						man_net_set_sequense(MAN_NET_SEQ_LTE_OFF_OK);
   \   0000029C   0x2042             MOVS     R0,#+66
   \   0000029E   0x.... 0x....      BL       man_net_set_sequense
    564          					}
    565          					break;
   \                     ??man_net_main_49: (+1)
   \   000002A2   0xE0E2             B        ??man_net_main_1
    566          
    567          				default:
    568          					man_net_set_cmd_end();
   \                     ??man_net_main_29: (+1)
   \   000002A4   0x.... 0x....      BL       man_net_set_cmd_end
    569          					man_error_setting(MAN_ERROR_MAN_NET, man_net_work.resp_cmd.id, man_net_work.resp_cmd.status);
   \   000002A8   0x4B81             LDR      R3,??man_net_main_40+0x4  ;; 0x239
   \   000002AA   0x4880             LDR      R0,??man_net_main_40
   \   000002AC   0x6AC2             LDR      R2,[R0, #+44]
   \   000002AE   0x487F             LDR      R0,??man_net_main_40
   \   000002B0   0x6A81             LDR      R1,[R0, #+40]
   \   000002B2   0x2014             MOVS     R0,#+20
   \   000002B4   0x.... 0x....      BL       man_error_set
    570          					break;
   \   000002B8   0xE0D7             B        ??man_net_main_1
    571          				}
    572          			}
    573          			
    574          			// 異常応答
    575          			else {
    576          				man_error_setting(MAN_ERROR_MAN_NET, man_net_work.resp_cmd.id, man_net_work.resp_cmd.status);
   \                     ??man_net_main_9: (+1)
   \   000002BA   0x2390             MOVS     R3,#+144
   \   000002BC   0x009B             LSLS     R3,R3,#+2        ;; #+576
   \   000002BE   0x487B             LDR      R0,??man_net_main_40
   \   000002C0   0x6AC2             LDR      R2,[R0, #+44]
   \   000002C2   0x487A             LDR      R0,??man_net_main_40
   \   000002C4   0x6A81             LDR      R1,[R0, #+40]
   \   000002C6   0x2014             MOVS     R0,#+20
   \   000002C8   0x.... 0x....      BL       man_error_set
    577          
    578          				switch (man_net_work.resp_cmd.id) {
   \   000002CC   0x4877             LDR      R0,??man_net_main_40
   \   000002CE   0x6A80             LDR      R0,[R0, #+40]
   \   000002D0   0x2802             CMP      R0,#+2
   \   000002D2   0xD028             BEQ      ??man_net_main_50
   \   000002D4   0x2806             CMP      R0,#+6
   \   000002D6   0xD02E             BEQ      ??man_net_main_51
   \   000002D8   0x2809             CMP      R0,#+9
   \   000002DA   0xD034             BEQ      ??man_net_main_52
   \   000002DC   0x280D             CMP      R0,#+13
   \   000002DE   0xD03A             BEQ      ??man_net_main_53
   \   000002E0   0x2811             CMP      R0,#+17
   \   000002E2   0xD048             BEQ      ??man_net_main_54
   \   000002E4   0x2814             CMP      R0,#+20
   \   000002E6   0xD03E             BEQ      ??man_net_main_55
   \   000002E8   0x2818             CMP      R0,#+24
   \   000002EA   0xD04C             BEQ      ??man_net_main_56
   \   000002EC   0x281B             CMP      R0,#+27
   \   000002EE   0xD052             BEQ      ??man_net_main_57
   \   000002F0   0x281F             CMP      R0,#+31
   \   000002F2   0xD058             BEQ      ??man_net_main_58
   \   000002F4   0x2822             CMP      R0,#+34
   \   000002F6   0xD05E             BEQ      ??man_net_main_59
   \   000002F8   0x2826             CMP      R0,#+38
   \   000002FA   0xD064             BEQ      ??man_net_main_60
   \   000002FC   0x2829             CMP      R0,#+41
   \   000002FE   0xD06A             BEQ      ??man_net_main_61
   \   00000300   0x282D             CMP      R0,#+45
   \   00000302   0xD070             BEQ      ??man_net_main_62
   \   00000304   0x2830             CMP      R0,#+48
   \   00000306   0xD076             BEQ      ??man_net_main_63
   \   00000308   0x2833             CMP      R0,#+51
   \   0000030A   0xD07C             BEQ      ??man_net_main_64
   \   0000030C   0x2836             CMP      R0,#+54
   \   0000030E   0xD100             BNE      .+4
   \   00000310   0xE081             B        ??man_net_main_65
   \   00000312   0x283A             CMP      R0,#+58
   \   00000314   0xD100             BNE      .+4
   \   00000316   0xE086             B        ??man_net_main_66
   \   00000318   0x283D             CMP      R0,#+61
   \   0000031A   0xD100             BNE      .+4
   \   0000031C   0xE08B             B        ??man_net_main_67
   \   0000031E   0x2841             CMP      R0,#+65
   \   00000320   0xD100             BNE      .+4
   \   00000322   0xE090             B        ??man_net_main_68
   \   00000324   0xE097             B        ??man_net_main_69
    579          				case MAN_NET_SEQ_WUP:
    580          					if (man_net_work.sequense == MAN_NET_SEQ_WUP) {
   \                     ??man_net_main_50: (+1)
   \   00000326   0x4861             LDR      R0,??man_net_main_40
   \   00000328   0x7C00             LDRB     R0,[R0, #+16]
   \   0000032A   0x2802             CMP      R0,#+2
   \   0000032C   0xD102             BNE      ??man_net_main_70
    581          						man_net_set_sequense(MAN_NET_SEQ_WUP_NG);
   \   0000032E   0x2004             MOVS     R0,#+4
   \   00000330   0x.... 0x....      BL       man_net_set_sequense
    582          					}
    583          					break;
   \                     ??man_net_main_70: (+1)
   \   00000334   0xE099             B        ??man_net_main_1
    584          
    585          				case MAN_NET_SEQ_RESET_REQ_WAIT:
    586          					if (man_net_work.sequense == MAN_NET_SEQ_RESET_REQ_WAIT) {
   \                     ??man_net_main_51: (+1)
   \   00000336   0x485D             LDR      R0,??man_net_main_40
   \   00000338   0x7C00             LDRB     R0,[R0, #+16]
   \   0000033A   0x2806             CMP      R0,#+6
   \   0000033C   0xD102             BNE      ??man_net_main_71
    587          						man_net_set_sequense(MAN_NET_SEQ_RESET_REQ_WAIT_NG);
   \   0000033E   0x2008             MOVS     R0,#+8
   \   00000340   0x.... 0x....      BL       man_net_set_sequense
    588          					}
    589          					break;
   \                     ??man_net_main_71: (+1)
   \   00000344   0xE091             B        ??man_net_main_1
    590          
    591          				case MAN_NET_SEQ_RESET:
    592          					if (man_net_work.sequense == MAN_NET_SEQ_RESET) {
   \                     ??man_net_main_52: (+1)
   \   00000346   0x4859             LDR      R0,??man_net_main_40
   \   00000348   0x7C00             LDRB     R0,[R0, #+16]
   \   0000034A   0x2809             CMP      R0,#+9
   \   0000034C   0xD102             BNE      ??man_net_main_72
    593          						man_net_set_sequense(MAN_NET_SEQ_RESET_NG);
   \   0000034E   0x200B             MOVS     R0,#+11
   \   00000350   0x.... 0x....      BL       man_net_set_sequense
    594          					}
    595          					break;
   \                     ??man_net_main_72: (+1)
   \   00000354   0xE089             B        ??man_net_main_1
    596          
    597          				case MAN_NET_SEQ_LTE_INIT:
    598          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_INIT) {
   \                     ??man_net_main_53: (+1)
   \   00000356   0x4855             LDR      R0,??man_net_main_40
   \   00000358   0x7C00             LDRB     R0,[R0, #+16]
   \   0000035A   0x280D             CMP      R0,#+13
   \   0000035C   0xD102             BNE      ??man_net_main_73
    599          						man_net_set_sequense(MAN_NET_SEQ_LTE_INIT_NG);
   \   0000035E   0x200F             MOVS     R0,#+15
   \   00000360   0x.... 0x....      BL       man_net_set_sequense
    600          					}
    601          					break;
   \                     ??man_net_main_73: (+1)
   \   00000364   0xE081             B        ??man_net_main_1
    602          
    603          				case MAN_NET_SEQ_LTE_INIT_NG_WAIT:
    604          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_INIT_NG_WAIT) {
   \                     ??man_net_main_55: (+1)
   \   00000366   0x4851             LDR      R0,??man_net_main_40
   \   00000368   0x7C00             LDRB     R0,[R0, #+16]
   \   0000036A   0x2814             CMP      R0,#+20
   \   0000036C   0xD102             BNE      ??man_net_main_74
    605          						man_net_set_sequense(MAN_NET_SEQ_LTE_INIT_NG_WAIT_NG);
   \   0000036E   0x2016             MOVS     R0,#+22
   \   00000370   0x.... 0x....      BL       man_net_set_sequense
    606          					}
    607          					break;
   \                     ??man_net_main_74: (+1)
   \   00000374   0xE079             B        ??man_net_main_1
    608          
    609          				case MAN_NET_SEQ_LTE_INIT_NG_WKUP:
    610          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_INIT_NG_WKUP) {
   \                     ??man_net_main_54: (+1)
   \   00000376   0x484D             LDR      R0,??man_net_main_40
   \   00000378   0x7C00             LDRB     R0,[R0, #+16]
   \   0000037A   0x2811             CMP      R0,#+17
   \   0000037C   0xD102             BNE      ??man_net_main_75
    611          						man_net_set_sequense(MAN_NET_SEQ_LTE_INIT_NG_WKUP_NG);
   \   0000037E   0x2013             MOVS     R0,#+19
   \   00000380   0x.... 0x....      BL       man_net_set_sequense
    612          					}
    613          					break;
   \                     ??man_net_main_75: (+1)
   \   00000384   0xE071             B        ??man_net_main_1
    614          
    615          				case MAN_NET_SEQ_LTE_READY:
    616          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_READY) {
   \                     ??man_net_main_56: (+1)
   \   00000386   0x4849             LDR      R0,??man_net_main_40
   \   00000388   0x7C00             LDRB     R0,[R0, #+16]
   \   0000038A   0x2818             CMP      R0,#+24
   \   0000038C   0xD102             BNE      ??man_net_main_76
    617          						man_net_set_sequense(MAN_NET_SEQ_LTE_READY_NG);
   \   0000038E   0x201A             MOVS     R0,#+26
   \   00000390   0x.... 0x....      BL       man_net_set_sequense
    618          					}
    619          					break;
   \                     ??man_net_main_76: (+1)
   \   00000394   0xE069             B        ??man_net_main_1
    620          
    621          				case MAN_NET_SEQ_LTE_READY_NG_WAIT:
    622          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_READY_NG_WAIT) {
   \                     ??man_net_main_57: (+1)
   \   00000396   0x4845             LDR      R0,??man_net_main_40
   \   00000398   0x7C00             LDRB     R0,[R0, #+16]
   \   0000039A   0x281B             CMP      R0,#+27
   \   0000039C   0xD102             BNE      ??man_net_main_77
    623          						man_net_set_sequense(MAN_NET_SEQ_LTE_READY_NG_WAIT_NG);
   \   0000039E   0x201D             MOVS     R0,#+29
   \   000003A0   0x.... 0x....      BL       man_net_set_sequense
    624          					}
    625          					break;
   \                     ??man_net_main_77: (+1)
   \   000003A4   0xE061             B        ??man_net_main_1
    626          
    627          				case MAN_NET_SEQ_LTE_START:
    628          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_START) {
   \                     ??man_net_main_58: (+1)
   \   000003A6   0x4841             LDR      R0,??man_net_main_40
   \   000003A8   0x7C00             LDRB     R0,[R0, #+16]
   \   000003AA   0x281F             CMP      R0,#+31
   \   000003AC   0xD102             BNE      ??man_net_main_78
    629          						man_net_set_sequense(MAN_NET_SEQ_LTE_START_NG);
   \   000003AE   0x2021             MOVS     R0,#+33
   \   000003B0   0x.... 0x....      BL       man_net_set_sequense
    630          					}
    631          					break;
   \                     ??man_net_main_78: (+1)
   \   000003B4   0xE059             B        ??man_net_main_1
    632          
    633          				case MAN_NET_SEQ_LTE_START_NG_WAIT:
    634          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_START_NG_WAIT) {
   \                     ??man_net_main_59: (+1)
   \   000003B6   0x483D             LDR      R0,??man_net_main_40
   \   000003B8   0x7C00             LDRB     R0,[R0, #+16]
   \   000003BA   0x2822             CMP      R0,#+34
   \   000003BC   0xD102             BNE      ??man_net_main_79
    635          						man_net_set_sequense(MAN_NET_SEQ_LTE_START_NG_WAIT_NG);
   \   000003BE   0x2024             MOVS     R0,#+36
   \   000003C0   0x.... 0x....      BL       man_net_set_sequense
    636          					}
    637          					break;
   \                     ??man_net_main_79: (+1)
   \   000003C4   0xE051             B        ??man_net_main_1
    638          
    639          				case MAN_NET_SEQ_MSG_START:
    640          					if (man_net_work.sequense == MAN_NET_SEQ_MSG_START) {
   \                     ??man_net_main_60: (+1)
   \   000003C6   0x4839             LDR      R0,??man_net_main_40
   \   000003C8   0x7C00             LDRB     R0,[R0, #+16]
   \   000003CA   0x2826             CMP      R0,#+38
   \   000003CC   0xD102             BNE      ??man_net_main_80
    641          						man_net_set_sequense(MAN_NET_SEQ_MSG_START_NG);
   \   000003CE   0x2028             MOVS     R0,#+40
   \   000003D0   0x.... 0x....      BL       man_net_set_sequense
    642          					}
    643          					break;
   \                     ??man_net_main_80: (+1)
   \   000003D4   0xE049             B        ??man_net_main_1
    644          
    645          				case MAN_NET_SEQ_CMD_START:
    646          					if (man_net_work.sequense == MAN_NET_SEQ_CMD_START) {
   \                     ??man_net_main_61: (+1)
   \   000003D6   0x4835             LDR      R0,??man_net_main_40
   \   000003D8   0x7C00             LDRB     R0,[R0, #+16]
   \   000003DA   0x2829             CMP      R0,#+41
   \   000003DC   0xD102             BNE      ??man_net_main_81
    647          						man_net_set_sequense(MAN_NET_SEQ_CMD_START_NG);
   \   000003DE   0x202B             MOVS     R0,#+43
   \   000003E0   0x.... 0x....      BL       man_net_set_sequense
    648          					}
    649          					break;
   \                     ??man_net_main_81: (+1)
   \   000003E4   0xE041             B        ??man_net_main_1
    650          
    651          				case MAN_NET_SEQ_CMD_STOP:
    652          					if (man_net_work.sequense == MAN_NET_SEQ_CMD_STOP) {
   \                     ??man_net_main_62: (+1)
   \   000003E6   0x4831             LDR      R0,??man_net_main_40
   \   000003E8   0x7C00             LDRB     R0,[R0, #+16]
   \   000003EA   0x282D             CMP      R0,#+45
   \   000003EC   0xD102             BNE      ??man_net_main_82
    653          						man_net_set_sequense(MAN_NET_SEQ_CMD_STOP_NG);
   \   000003EE   0x202F             MOVS     R0,#+47
   \   000003F0   0x.... 0x....      BL       man_net_set_sequense
    654          					}
    655          					break;
   \                     ??man_net_main_82: (+1)
   \   000003F4   0xE039             B        ??man_net_main_1
    656          
    657          				case MAN_NET_SEQ_RPT_STOP:
    658          					if (man_net_work.sequense == MAN_NET_SEQ_RPT_STOP) {
   \                     ??man_net_main_63: (+1)
   \   000003F6   0x482D             LDR      R0,??man_net_main_40
   \   000003F8   0x7C00             LDRB     R0,[R0, #+16]
   \   000003FA   0x2830             CMP      R0,#+48
   \   000003FC   0xD102             BNE      ??man_net_main_83
    659          						man_net_set_sequense(MAN_NET_SEQ_RPT_STOP_NG);
   \   000003FE   0x2032             MOVS     R0,#+50
   \   00000400   0x.... 0x....      BL       man_net_set_sequense
    660          					}
    661          					break;
   \                     ??man_net_main_83: (+1)
   \   00000404   0xE031             B        ??man_net_main_1
    662          
    663          				case MAN_NET_SEQ_MSG_STOP:
    664          					if (man_net_work.sequense == MAN_NET_SEQ_MSG_STOP) {
   \                     ??man_net_main_64: (+1)
   \   00000406   0x4829             LDR      R0,??man_net_main_40
   \   00000408   0x7C00             LDRB     R0,[R0, #+16]
   \   0000040A   0x2833             CMP      R0,#+51
   \   0000040C   0xD102             BNE      ??man_net_main_84
    665          						man_net_set_sequense(MAN_NET_SEQ_MSG_STOP_NG);
   \   0000040E   0x2035             MOVS     R0,#+53
   \   00000410   0x.... 0x....      BL       man_net_set_sequense
    666          					}
    667          					break;
   \                     ??man_net_main_84: (+1)
   \   00000414   0xE029             B        ??man_net_main_1
    668          
    669          				case MAN_NET_SEQ_LTE_STOP:
    670          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_STOP) {
   \                     ??man_net_main_65: (+1)
   \   00000416   0x4825             LDR      R0,??man_net_main_40
   \   00000418   0x7C00             LDRB     R0,[R0, #+16]
   \   0000041A   0x2836             CMP      R0,#+54
   \   0000041C   0xD102             BNE      ??man_net_main_85
    671          						man_net_set_sequense(MAN_NET_SEQ_LTE_STOP_NG);
   \   0000041E   0x2038             MOVS     R0,#+56
   \   00000420   0x.... 0x....      BL       man_net_set_sequense
    672          					}
    673          					break;
   \                     ??man_net_main_85: (+1)
   \   00000424   0xE021             B        ??man_net_main_1
    674          
    675          				case MAN_NET_SEQ_LTE_STBY:
    676          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_STBY) {
   \                     ??man_net_main_66: (+1)
   \   00000426   0x4821             LDR      R0,??man_net_main_40
   \   00000428   0x7C00             LDRB     R0,[R0, #+16]
   \   0000042A   0x283A             CMP      R0,#+58
   \   0000042C   0xD102             BNE      ??man_net_main_86
    677          						man_net_set_sequense(MAN_NET_SEQ_LTE_STBY_NG);
   \   0000042E   0x203C             MOVS     R0,#+60
   \   00000430   0x.... 0x....      BL       man_net_set_sequense
    678          					}
    679          					break;
   \                     ??man_net_main_86: (+1)
   \   00000434   0xE019             B        ??man_net_main_1
    680          
    681          				case MAN_NET_SEQ_CLOSE_WAIT:
    682          					if (man_net_work.sequense == MAN_NET_SEQ_CLOSE_WAIT) {
   \                     ??man_net_main_67: (+1)
   \   00000436   0x481D             LDR      R0,??man_net_main_40
   \   00000438   0x7C00             LDRB     R0,[R0, #+16]
   \   0000043A   0x283D             CMP      R0,#+61
   \   0000043C   0xD102             BNE      ??man_net_main_87
    683          						man_net_set_sequense(MAN_NET_SEQ_CLOSE_WAIT_NG);
   \   0000043E   0x203F             MOVS     R0,#+63
   \   00000440   0x.... 0x....      BL       man_net_set_sequense
    684          					}
    685          					break;
   \                     ??man_net_main_87: (+1)
   \   00000444   0xE011             B        ??man_net_main_1
    686          
    687          				case MAN_NET_SEQ_LTE_OFF:
    688          					if (man_net_work.sequense == MAN_NET_SEQ_LTE_OFF) {
   \                     ??man_net_main_68: (+1)
   \   00000446   0x4819             LDR      R0,??man_net_main_40
   \   00000448   0x7C00             LDRB     R0,[R0, #+16]
   \   0000044A   0x2841             CMP      R0,#+65
   \   0000044C   0xD102             BNE      ??man_net_main_88
    689          						man_net_set_sequense(MAN_NET_SEQ_LTE_OFF_NG);
   \   0000044E   0x2043             MOVS     R0,#+67
   \   00000450   0x.... 0x....      BL       man_net_set_sequense
    690          					}
    691          					break;
   \                     ??man_net_main_88: (+1)
   \   00000454   0xE009             B        ??man_net_main_1
    692          
    693          				default:
    694          					man_net_set_cmd_end();
   \                     ??man_net_main_69: (+1)
   \   00000456   0x.... 0x....      BL       man_net_set_cmd_end
    695          					man_error_setting(MAN_ERROR_MAN_NET, man_net_work.resp_cmd.id, man_net_work.resp_cmd.status);
   \   0000045A   0x4B68             LDR      R3,??man_net_main_89  ;; 0x2b7
   \   0000045C   0x4813             LDR      R0,??man_net_main_40
   \   0000045E   0x6AC2             LDR      R2,[R0, #+44]
   \   00000460   0x4812             LDR      R0,??man_net_main_40
   \   00000462   0x6A81             LDR      R1,[R0, #+40]
   \   00000464   0x2014             MOVS     R0,#+20
   \   00000466   0x.... 0x....      BL       man_error_set
    696          					break;
    697          				}
    698          			}
    699          		}
    700          	}
    701          
    702          
    703          	// ***************************
    704          	// 電波状況(圏内/圏外)監視処理
    705          	// ***************************
    706          	// 状態通知処理が安定した時点で実施する
    707          	if ( (man_net_work.request.req_state != MAN_NET_REQ_STATE_RESET)
    708          		&& (man_net_work.request.req_state != MAN_NET_REQ_STATE_NET_CLOSE)
    709          		&& (man_net_work.request.req_state != MAN_NET_REQ_STATE_DEV_NOT_SUPPORT)
    710          		&& (man_net_work.request.req_state != MAN_NET_REQ_STATE_DEV_BUSY) ) {
   \                     ??man_net_main_1: (+1)
   \   0000046A   0x4810             LDR      R0,??man_net_main_40
   \   0000046C   0x6A00             LDR      R0,[R0, #+32]
   \   0000046E   0x2801             CMP      R0,#+1
   \   00000470   0xD027             BEQ      ??man_net_main_90
   \   00000472   0x480E             LDR      R0,??man_net_main_40
   \   00000474   0x6A00             LDR      R0,[R0, #+32]
   \   00000476   0x280B             CMP      R0,#+11
   \   00000478   0xD023             BEQ      ??man_net_main_90
   \   0000047A   0x480C             LDR      R0,??man_net_main_40
   \   0000047C   0x6A00             LDR      R0,[R0, #+32]
   \   0000047E   0x280C             CMP      R0,#+12
   \   00000480   0xD01F             BEQ      ??man_net_main_90
   \   00000482   0x480A             LDR      R0,??man_net_main_40
   \   00000484   0x6A00             LDR      R0,[R0, #+32]
   \   00000486   0x280D             CMP      R0,#+13
   \   00000488   0xD01B             BEQ      ??man_net_main_90
    711          
    712          		if (man_net_work.rssi_sts != sensor->rssi_sts) {
   \   0000048A   0x485D             LDR      R0,??man_net_main_89+0x4
   \   0000048C   0x7800             LDRB     R0,[R0, #+0]
   \   0000048E   0x495D             LDR      R1,??man_net_main_89+0x8  ;; 0xbd8
   \   00000490   0x5C61             LDRB     R1,[R4, R1]
   \   00000492   0x4288             CMP      R0,R1
   \   00000494   0xD015             BEQ      ??man_net_main_90
    713          			man_net_work.rssi_sts = sensor->rssi_sts;
   \   00000496   0x485B             LDR      R0,??man_net_main_89+0x8  ;; 0xbd8
   \   00000498   0x5C20             LDRB     R0,[R4, R0]
   \   0000049A   0x4959             LDR      R1,??man_net_main_89+0x4
   \   0000049C   0x7008             STRB     R0,[R1, #+0]
    714          
    715          #ifdef GNSS_DEBUG_MAN_NET 
    716          			int32_t		length;
    717          			sprintf((char *)&man_net_work.buff[0], "####  RSSI(%d)\n", man_net_work.rssi_sts);
    718          			length = strlen((char const *)&man_net_work.buff[0]);
    719          			man_usb_data_send(&man_net_work.buff[0], length);
    720          #endif
    721          
    722          			switch (man_net_work.rssi_sts) {
   \   0000049E   0x4858             LDR      R0,??man_net_main_89+0x4
   \   000004A0   0x7800             LDRB     R0,[R0, #+0]
   \   000004A2   0x2800             CMP      R0,#+0
   \   000004A4   0xD006             BEQ      ??man_net_main_91
   \   000004A6   0x2801             CMP      R0,#+1
   \   000004A8   0xD008             BEQ      ??man_net_main_92
   \   000004AA   0xE00A             B        ??man_net_main_90
   \                     ??man_net_main_40:
   \   000004AC   0x........         DC32     man_net_work
   \   000004B0   0x00000239         DC32     0x239
    723          			case MAN_DATA_RSSI_STS_NG:			// 圏外
    724          				// 内部的にNET CLOSEを開始する
    725          				man_net_work.request.req_state = MAN_NET_REQ_STATE_CSQ_NG;
   \                     ??man_net_main_91: (+1)
   \   000004B4   0x2005             MOVS     R0,#+5
   \   000004B6   0x4954             LDR      R1,??man_net_main_89+0xC
   \   000004B8   0x6208             STR      R0,[R1, #+32]
    726          				break;
   \   000004BA   0xE002             B        ??man_net_main_90
    727          
    728          			case MAN_DATA_RSSI_STS_OK:			// 圏内
    729          				// 内部的なNET CLOSEを解除する
    730          				man_net_work.request.req_state = MAN_NET_REQ_STATE_CSQ_OK;
   \                     ??man_net_main_92: (+1)
   \   000004BC   0x2004             MOVS     R0,#+4
   \   000004BE   0x4952             LDR      R1,??man_net_main_89+0xC
   \   000004C0   0x6208             STR      R0,[R1, #+32]
    731          				break;
    732          			}
    733          		}
    734          	}
    735          
    736          
    737          	// ***************************
    738          	// 要求処理
    739          	// ***************************
    740          	// リセット要求
    741          	// RESETをコマンドから除外する(コマンドは最終目標のため)
    742          	if (man_net_work.request.reset_cmd == 1) {
   \                     ??man_net_main_90: (+1)
   \   000004C2   0x4851             LDR      R0,??man_net_main_89+0xC
   \   000004C4   0x6980             LDR      R0,[R0, #+24]
   \   000004C6   0x2801             CMP      R0,#+1
   \   000004C8   0xD105             BNE      ??man_net_main_93
    743          		// 強制的にRESETを開始
    744          		man_net_set_sequense(MAN_NET_SEQ_RESET_REQ);
   \   000004CA   0x2005             MOVS     R0,#+5
   \   000004CC   0x.... 0x....      BL       man_net_set_sequense
    745          		man_net_work.request.reset_cmd = 0;
   \   000004D0   0x2000             MOVS     R0,#+0
   \   000004D2   0x494D             LDR      R1,??man_net_main_89+0xC
   \   000004D4   0x6188             STR      R0,[R1, #+24]
    746          	}
    747          
    748          
    749          	switch (man_net_work.request.req_cmd) {
   \                     ??man_net_main_93: (+1)
   \   000004D6   0x484C             LDR      R0,??man_net_main_89+0xC
   \   000004D8   0x7D00             LDRB     R0,[R0, #+20]
   \   000004DA   0x2800             CMP      R0,#+0
   \   000004DC   0xD006             BEQ      ??man_net_main_94
   \   000004DE   0x2802             CMP      R0,#+2
   \   000004E0   0xD02A             BEQ      ??man_net_main_95
   \   000004E2   0xD304             BCC      ??man_net_main_96
   \   000004E4   0x2804             CMP      R0,#+4
   \   000004E6   0xD063             BEQ      ??man_net_main_97
   \   000004E8   0xD33D             BCC      ??man_net_main_98
   \   000004EA   0xE08F             B        ??man_net_main_99
    750          	case MAN_NET_REQ_CMD_READY:
    751          		break;
   \                     ??man_net_main_94: (+1)
   \   000004EC   0xE08E             B        ??man_net_main_100
    752          
    753          	case MAN_NET_REQ_CMD_OPEN:
    754          		if (man_net_work.sequense == MAN_NET_SEQ_READY) {
   \                     ??man_net_main_96: (+1)
   \   000004EE   0x4846             LDR      R0,??man_net_main_89+0xC
   \   000004F0   0x7C00             LDRB     R0,[R0, #+16]
   \   000004F2   0x2800             CMP      R0,#+0
   \   000004F4   0xD11F             BNE      ??man_net_main_101
    755          			// 全てがOPEN状態で無い場合
    756          			if ( (man_net_work.net_sts & MAN_NET_STS_ALL) != MAN_NET_STS_ALL ) {
   \   000004F6   0x4844             LDR      R0,??man_net_main_89+0xC
   \   000004F8   0x7A00             LDRB     R0,[R0, #+8]
   \   000004FA   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   000004FC   0x0F00             LSRS     R0,R0,#+28
   \   000004FE   0x280F             CMP      R0,#+15
   \   00000500   0xD017             BEQ      ??man_net_main_102
    757          
    758          				// STBY時はWAKE UP後に実施する
    759          				if (man_net_work.net_state == MAN_NET_STATE_STBY) {
   \   00000502   0x4841             LDR      R0,??man_net_main_89+0xC
   \   00000504   0x6800             LDR      R0,[R0, #+0]
   \   00000506   0x2802             CMP      R0,#+2
   \   00000508   0xD109             BNE      ??man_net_main_103
    760          					// WAKE UP処理開始
    761          					man_net_set_sequense(MAN_NET_SEQ_WUP_REQ);
   \   0000050A   0x2001             MOVS     R0,#+1
   \   0000050C   0x.... 0x....      BL       man_net_set_sequense
    762          					// OPEN開始を通知
    763          					man_net_noti_callback(MAN_NET_NOTI_TO_OPEN);
   \   00000510   0x2001             MOVS     R0,#+1
   \   00000512   0x.... 0x....      BL       man_net_noti_callback
    764          					// 目標状態をNETWORK OPEN状態とする
    765          					man_net_work.gole_state = MAN_NET_STATE_OPEN;
   \   00000516   0x2001             MOVS     R0,#+1
   \   00000518   0x493B             LDR      R1,??man_net_main_89+0xC
   \   0000051A   0x6048             STR      R0,[R1, #+4]
   \   0000051C   0xE00B             B        ??man_net_main_101
    766          				}
    767          				else {
    768          					// OPEN処理開始
    769          					man_net_set_sequense(MAN_NET_SEQ_OPEN_REQ);
   \                     ??man_net_main_103: (+1)
   \   0000051E   0x200C             MOVS     R0,#+12
   \   00000520   0x.... 0x....      BL       man_net_set_sequense
    770          					// OPEN開始を通知
    771          					man_net_noti_callback(MAN_NET_NOTI_TO_OPEN);
   \   00000524   0x2001             MOVS     R0,#+1
   \   00000526   0x.... 0x....      BL       man_net_noti_callback
    772          					// 目標状態をNETWORK OPEN状態とする
    773          					man_net_work.gole_state = MAN_NET_STATE_OPEN;
   \   0000052A   0x2001             MOVS     R0,#+1
   \   0000052C   0x4936             LDR      R1,??man_net_main_89+0xC
   \   0000052E   0x6048             STR      R0,[R1, #+4]
   \   00000530   0xE001             B        ??man_net_main_101
    774          				}
    775          			}
    776          			// すでにOPEN状態
    777          			else {
    778          				man_net_set_cmd_end();
   \                     ??man_net_main_102: (+1)
   \   00000532   0x.... 0x....      BL       man_net_set_cmd_end
    779          			}
    780          		}
    781          		break;
   \                     ??man_net_main_101: (+1)
   \   00000536   0xE069             B        ??man_net_main_100
    782          
    783          	case MAN_NET_REQ_CMD_CLOSE:
    784          		if (man_net_work.sequense == MAN_NET_SEQ_READY) {
   \                     ??man_net_main_95: (+1)
   \   00000538   0x4833             LDR      R0,??man_net_main_89+0xC
   \   0000053A   0x7C00             LDRB     R0,[R0, #+16]
   \   0000053C   0x2800             CMP      R0,#+0
   \   0000053E   0xD111             BNE      ??man_net_main_104
    785          			// 全てがCLOSE状態で無い場合
    786          			if ( (man_net_work.net_sts & MAN_NET_STS_ALL) != 0 ) {
   \   00000540   0x4831             LDR      R0,??man_net_main_89+0xC
   \   00000542   0x7A00             LDRB     R0,[R0, #+8]
   \   00000544   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000546   0x0F00             LSRS     R0,R0,#+28
   \   00000548   0x2800             CMP      R0,#+0
   \   0000054A   0xD009             BEQ      ??man_net_main_105
    787          				// CLOSE処理開始
    788          				man_net_set_sequense(MAN_NET_SEQ_CLOSE_REQ);
   \   0000054C   0x202C             MOVS     R0,#+44
   \   0000054E   0x.... 0x....      BL       man_net_set_sequense
    789          				// CLOSE開始を通知
    790          				man_net_noti_callback(MAN_NET_NOTI_TO_CLOSE);
   \   00000552   0x2004             MOVS     R0,#+4
   \   00000554   0x.... 0x....      BL       man_net_noti_callback
    791          				// 目標状態をNETWORK CLOSE状態とする
    792          				man_net_work.gole_state = MAN_NET_STATE_CLOSE;
   \   00000558   0x2000             MOVS     R0,#+0
   \   0000055A   0x492B             LDR      R1,??man_net_main_89+0xC
   \   0000055C   0x6048             STR      R0,[R1, #+4]
   \   0000055E   0xE001             B        ??man_net_main_104
    793          			}
    794          			// すでにCLOSE状態
    795          			else {
    796          				man_net_set_cmd_end();
   \                     ??man_net_main_105: (+1)
   \   00000560   0x.... 0x....      BL       man_net_set_cmd_end
    797          			}
    798          		}
    799          		break;
   \                     ??man_net_main_104: (+1)
   \   00000564   0xE052             B        ??man_net_main_100
    800          
    801          
    802          	case MAN_NET_REQ_CMD_STBY:
    803          		if (man_net_work.sequense == MAN_NET_SEQ_READY) {
   \                     ??man_net_main_98: (+1)
   \   00000566   0x4828             LDR      R0,??man_net_main_89+0xC
   \   00000568   0x7C00             LDRB     R0,[R0, #+16]
   \   0000056A   0x2800             CMP      R0,#+0
   \   0000056C   0xD11F             BNE      ??man_net_main_106
    804          			// 全てがCLOSE状態で無い場合
    805          			if ( (man_net_work.net_sts & MAN_NET_STS_ALL) != 0 ) {
   \   0000056E   0x4826             LDR      R0,??man_net_main_89+0xC
   \   00000570   0x7A00             LDRB     R0,[R0, #+8]
   \   00000572   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000574   0x0F00             LSRS     R0,R0,#+28
   \   00000576   0x2800             CMP      R0,#+0
   \   00000578   0xD009             BEQ      ??man_net_main_107
    806          				// CLOSE処理開始
    807          				man_net_set_sequense(MAN_NET_SEQ_CLOSE_REQ);
   \   0000057A   0x202C             MOVS     R0,#+44
   \   0000057C   0x.... 0x....      BL       man_net_set_sequense
    808          				// STBY開始を通知
    809          				man_net_noti_callback(MAN_NET_NOTI_TO_CLOSE);
   \   00000580   0x2004             MOVS     R0,#+4
   \   00000582   0x.... 0x....      BL       man_net_noti_callback
    810          				// 目標状態をNETWORK STBY IN状態とする
    811          				man_net_work.gole_state = MAN_NET_STATE_STBY;
   \   00000586   0x2002             MOVS     R0,#+2
   \   00000588   0x491F             LDR      R1,??man_net_main_89+0xC
   \   0000058A   0x6048             STR      R0,[R1, #+4]
   \   0000058C   0xE00F             B        ??man_net_main_106
    812          			}
    813          
    814          			// すでにCLOSE状態
    815          			else {
    816          				// 既にSTBY状態の場合
    817          				if (man_net_work.net_state == MAN_NET_STATE_STBY) {
   \                     ??man_net_main_107: (+1)
   \   0000058E   0x481E             LDR      R0,??man_net_main_89+0xC
   \   00000590   0x6800             LDR      R0,[R0, #+0]
   \   00000592   0x2802             CMP      R0,#+2
   \   00000594   0xD102             BNE      ??man_net_main_108
    818          					man_net_set_cmd_end();
   \   00000596   0x.... 0x....      BL       man_net_set_cmd_end
   \   0000059A   0xE008             B        ??man_net_main_106
    819          				}
    820          				// スタンバイを開始
    821          				else {
    822          					// STBY開始
    823          					man_net_set_sequense(MAN_NET_SEQ_LTE_STBY_REQ);
   \                     ??man_net_main_108: (+1)
   \   0000059C   0x2039             MOVS     R0,#+57
   \   0000059E   0x.... 0x....      BL       man_net_set_sequense
    824          					// STBY開始を通知
    825          					man_net_noti_callback(MAN_NET_NOTI_TO_STBY);
   \   000005A2   0x2005             MOVS     R0,#+5
   \   000005A4   0x.... 0x....      BL       man_net_noti_callback
    826          					// 目標状態をNETWORK STBY IN状態とする
    827          					man_net_work.gole_state = MAN_NET_STATE_STBY;
   \   000005A8   0x2002             MOVS     R0,#+2
   \   000005AA   0x4917             LDR      R1,??man_net_main_89+0xC
   \   000005AC   0x6048             STR      R0,[R1, #+4]
    828          				}
    829          			}
    830          		}
    831          		break;
   \                     ??man_net_main_106: (+1)
   \   000005AE   0xE02D             B        ??man_net_main_100
    832          
    833          	case MAN_NET_REQ_CMD_OFF:
    834          		if (man_net_work.sequense == MAN_NET_SEQ_READY) {
   \                     ??man_net_main_97: (+1)
   \   000005B0   0x4815             LDR      R0,??man_net_main_89+0xC
   \   000005B2   0x7C00             LDRB     R0,[R0, #+16]
   \   000005B4   0x2800             CMP      R0,#+0
   \   000005B6   0xD11F             BNE      ??man_net_main_109
    835          			// 全てがCLOSE状態で無い場合
    836          			if ( (man_net_work.net_sts & MAN_NET_STS_ALL) != 0 ) {
   \   000005B8   0x4813             LDR      R0,??man_net_main_89+0xC
   \   000005BA   0x7A00             LDRB     R0,[R0, #+8]
   \   000005BC   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   000005BE   0x0F00             LSRS     R0,R0,#+28
   \   000005C0   0x2800             CMP      R0,#+0
   \   000005C2   0xD009             BEQ      ??man_net_main_110
    837          				// CLOSE処理開始
    838          				man_net_set_sequense(MAN_NET_SEQ_CLOSE_REQ);
   \   000005C4   0x202C             MOVS     R0,#+44
   \   000005C6   0x.... 0x....      BL       man_net_set_sequense
    839          				// OFF開始を通知
    840          				man_net_noti_callback(MAN_NET_NOTI_TO_CLOSE);
   \   000005CA   0x2004             MOVS     R0,#+4
   \   000005CC   0x.... 0x....      BL       man_net_noti_callback
    841          				// 目標状態をNETWORK POWER OFF状態とする
    842          				man_net_work.gole_state = MAN_NET_STATE_OFF;
   \   000005D0   0x2003             MOVS     R0,#+3
   \   000005D2   0x490D             LDR      R1,??man_net_main_89+0xC
   \   000005D4   0x6048             STR      R0,[R1, #+4]
   \   000005D6   0xE00F             B        ??man_net_main_109
    843          			}
    844          
    845          			// すでにCLOSE状態
    846          			else {
    847          				// 既にOFF状態の場合
    848          				if (man_net_work.net_state == MAN_NET_STATE_OFF) {
   \                     ??man_net_main_110: (+1)
   \   000005D8   0x480B             LDR      R0,??man_net_main_89+0xC
   \   000005DA   0x6800             LDR      R0,[R0, #+0]
   \   000005DC   0x2803             CMP      R0,#+3
   \   000005DE   0xD102             BNE      ??man_net_main_111
    849          					man_net_set_cmd_end();
   \   000005E0   0x.... 0x....      BL       man_net_set_cmd_end
   \   000005E4   0xE008             B        ??man_net_main_109
    850          				}
    851          				// POWER OFFを開始
    852          				else {
    853          					// OFF開始
    854          					man_net_set_sequense(MAN_NET_SEQ_LTE_OFF_REQ);
   \                     ??man_net_main_111: (+1)
   \   000005E6   0x2040             MOVS     R0,#+64
   \   000005E8   0x.... 0x....      BL       man_net_set_sequense
    855          					// OFF開始を通知
    856          					man_net_noti_callback(MAN_NET_NOTI_TO_OFF);
   \   000005EC   0x2008             MOVS     R0,#+8
   \   000005EE   0x.... 0x....      BL       man_net_noti_callback
    857          					// 目標状態をNETWORK POWER OFF状態とする
    858          					man_net_work.gole_state = MAN_NET_STATE_OFF;
   \   000005F2   0x2003             MOVS     R0,#+3
   \   000005F4   0x4904             LDR      R1,??man_net_main_89+0xC
   \   000005F6   0x6048             STR      R0,[R1, #+4]
    859          				}
    860          			}
    861          		}
    862          		break;
   \                     ??man_net_main_109: (+1)
   \   000005F8   0xE008             B        ??man_net_main_100
   \   000005FA   0xBF00             Nop      
   \                     ??man_net_main_89:
   \   000005FC   0x000002B7         DC32     0x2b7
   \   00000600   0x........         DC32     man_net_work+0x3C
   \   00000604   0x00000BD8         DC32     0xbd8
   \   00000608   0x........         DC32     man_net_work
    863          
    864          	default:
    865          		break;
    866          	}
    867          
    868          
    869          
    870          	// ***************************
    871          	// シーケンス管理処理
    872          	// ***************************
    873          	switch (man_net_work.sequense) {
   \                     ??man_net_main_99: (+1)
   \                     ??man_net_main_100: (+1)
   \   0000060C   0x48AA             LDR      R0,??man_net_main_112
   \   0000060E   0x7C00             LDRB     R0,[R0, #+16]
   \   00000610   0x2800             CMP      R0,#+0
   \   00000612   0xD100             BNE      .+4
   \   00000614   0xE0A8             B        ??man_net_main_113
   \   00000616   0x2802             CMP      R0,#+2
   \   00000618   0xD100             BNE      .+4
   \   0000061A   0xE0AE             B        ??man_net_main_114
   \   0000061C   0xD200             BCS      .+4
   \   0000061E   0xE0A4             B        ??man_net_main_115
   \   00000620   0x2804             CMP      R0,#+4
   \   00000622   0xD100             BNE      .+4
   \   00000624   0xE0B1             B        ??man_net_main_116
   \   00000626   0xD200             BCS      .+4
   \   00000628   0xE0A8             B        ??man_net_main_117
   \   0000062A   0x2806             CMP      R0,#+6
   \   0000062C   0xD100             BNE      .+4
   \   0000062E   0xE0D0             B        ??man_net_main_118
   \   00000630   0xD200             BCS      .+4
   \   00000632   0xE0B5             B        ??man_net_main_119
   \   00000634   0x2808             CMP      R0,#+8
   \   00000636   0xD100             BNE      .+4
   \   00000638   0xE0CC             B        ??man_net_main_120
   \   0000063A   0xD200             BCS      .+4
   \   0000063C   0xE0CA             B        ??man_net_main_120
   \   0000063E   0x280A             CMP      R0,#+10
   \   00000640   0xD100             BNE      .+4
   \   00000642   0xE0D0             B        ??man_net_main_121
   \   00000644   0xD200             BCS      .+4
   \   00000646   0xE0CD             B        ??man_net_main_122
   \   00000648   0x280C             CMP      R0,#+12
   \   0000064A   0xD100             BNE      .+4
   \   0000064C   0xE0D8             B        ??man_net_main_123
   \   0000064E   0xD200             BCS      .+4
   \   00000650   0xE0C9             B        ??man_net_main_121
   \   00000652   0x280E             CMP      R0,#+14
   \   00000654   0xD100             BNE      .+4
   \   00000656   0xE0F3             B        ??man_net_main_124
   \   00000658   0xD200             BCS      .+4
   \   0000065A   0xE0F0             B        ??man_net_main_125
   \   0000065C   0x2810             CMP      R0,#+16
   \   0000065E   0xD100             BNE      .+4
   \   00000660   0xE108             B        ??man_net_main_126
   \   00000662   0xD200             BCS      .+4
   \   00000664   0xE0F6             B        ??man_net_main_127
   \   00000666   0x2812             CMP      R0,#+18
   \   00000668   0xD100             BNE      .+4
   \   0000066A   0xE10C             B        ??man_net_main_128
   \   0000066C   0xD200             BCS      .+4
   \   0000066E   0xE109             B        ??man_net_main_129
   \   00000670   0x2814             CMP      R0,#+20
   \   00000672   0xD100             BNE      .+4
   \   00000674   0xE110             B        ??man_net_main_130
   \   00000676   0xD200             BCS      .+4
   \   00000678   0xE105             B        ??man_net_main_128
   \   0000067A   0x2816             CMP      R0,#+22
   \   0000067C   0xD100             BNE      .+4
   \   0000067E   0xE11D             B        ??man_net_main_131
   \   00000680   0xD200             BCS      .+4
   \   00000682   0xE11B             B        ??man_net_main_131
   \   00000684   0x2818             CMP      R0,#+24
   \   00000686   0xD100             BNE      .+4
   \   00000688   0xE127             B        ??man_net_main_132
   \   0000068A   0xD200             BCS      .+4
   \   0000068C   0xE11D             B        ??man_net_main_133
   \   0000068E   0x281A             CMP      R0,#+26
   \   00000690   0xD100             BNE      .+4
   \   00000692   0xE13B             B        ??man_net_main_134
   \   00000694   0xD200             BCS      .+4
   \   00000696   0xE121             B        ??man_net_main_135
   \   00000698   0x281C             CMP      R0,#+28
   \   0000069A   0xD100             BNE      .+4
   \   0000069C   0xE14F             B        ??man_net_main_136
   \   0000069E   0xD200             BCS      .+4
   \   000006A0   0xE14C             B        ??man_net_main_137
   \   000006A2   0x281E             CMP      R0,#+30
   \   000006A4   0xD100             BNE      .+4
   \   000006A6   0xE14E             B        ??man_net_main_138
   \   000006A8   0xD200             BCS      .+4
   \   000006AA   0xE148             B        ??man_net_main_136
   \   000006AC   0x2820             CMP      R0,#+32
   \   000006AE   0xD100             BNE      .+4
   \   000006B0   0xE165             B        ??man_net_main_139
   \   000006B2   0xD200             BCS      .+4
   \   000006B4   0xE162             B        ??man_net_main_140
   \   000006B6   0x2822             CMP      R0,#+34
   \   000006B8   0xD100             BNE      .+4
   \   000006BA   0xE18F             B        ??man_net_main_141
   \   000006BC   0xD200             BCS      .+4
   \   000006BE   0xE170             B        ??man_net_main_142
   \   000006C0   0x2824             CMP      R0,#+36
   \   000006C2   0xD100             BNE      .+4
   \   000006C4   0xE18B             B        ??man_net_main_143
   \   000006C6   0xD200             BCS      .+4
   \   000006C8   0xE189             B        ??man_net_main_143
   \   000006CA   0x2826             CMP      R0,#+38
   \   000006CC   0xD100             BNE      .+4
   \   000006CE   0xE19C             B        ??man_net_main_144
   \   000006D0   0xD200             BCS      .+4
   \   000006D2   0xE188             B        ??man_net_main_145
   \   000006D4   0x2828             CMP      R0,#+40
   \   000006D6   0xD100             BNE      .+4
   \   000006D8   0xE1A6             B        ??man_net_main_146
   \   000006DA   0xD200             BCS      .+4
   \   000006DC   0xE196             B        ??man_net_main_147
   \   000006DE   0x282A             CMP      R0,#+42
   \   000006E0   0xD100             BNE      .+4
   \   000006E2   0xE1AC             B        ??man_net_main_148
   \   000006E4   0xD200             BCS      .+4
   \   000006E6   0xE1A9             B        ??man_net_main_149
   \   000006E8   0x282C             CMP      R0,#+44
   \   000006EA   0xD100             BNE      .+4
   \   000006EC   0xE1D7             B        ??man_net_main_150
   \   000006EE   0xD200             BCS      .+4
   \   000006F0   0xE1C3             B        ??man_net_main_151
   \   000006F2   0x282E             CMP      R0,#+46
   \   000006F4   0xD100             BNE      .+4
   \   000006F6   0xE1E4             B        ??man_net_main_152
   \   000006F8   0xD200             BCS      .+4
   \   000006FA   0xE1E1             B        ??man_net_main_153
   \   000006FC   0x2830             CMP      R0,#+48
   \   000006FE   0xD100             BNE      .+4
   \   00000700   0xE204             B        ??man_net_main_154
   \   00000702   0xD200             BCS      .+4
   \   00000704   0xE1F7             B        ??man_net_main_155
   \   00000706   0x2832             CMP      R0,#+50
   \   00000708   0xD100             BNE      .+4
   \   0000070A   0xE21A             B        ??man_net_main_156
   \   0000070C   0xD200             BCS      .+4
   \   0000070E   0xE1FE             B        ??man_net_main_157
   \   00000710   0x2834             CMP      R0,#+52
   \   00000712   0xD100             BNE      .+4
   \   00000714   0xE221             B        ??man_net_main_158
   \   00000716   0xD200             BCS      .+4
   \   00000718   0xE21E             B        ??man_net_main_159
   \   0000071A   0x2836             CMP      R0,#+54
   \   0000071C   0xD100             BNE      .+4
   \   0000071E   0xE241             B        ??man_net_main_160
   \   00000720   0xD200             BCS      .+4
   \   00000722   0xE234             B        ??man_net_main_161
   \   00000724   0x2838             CMP      R0,#+56
   \   00000726   0xD100             BNE      .+4
   \   00000728   0xE25C             B        ??man_net_main_162
   \   0000072A   0xD200             BCS      .+4
   \   0000072C   0xE23B             B        ??man_net_main_163
   \   0000072E   0x283A             CMP      R0,#+58
   \   00000730   0xD100             BNE      .+4
   \   00000732   0xE26A             B        ??man_net_main_164
   \   00000734   0xD200             BCS      .+4
   \   00000736   0xE260             B        ??man_net_main_165
   \   00000738   0x283C             CMP      R0,#+60
   \   0000073A   0xD100             BNE      .+4
   \   0000073C   0xE266             B        ??man_net_main_166
   \   0000073E   0xD200             BCS      .+4
   \   00000740   0xE264             B        ??man_net_main_166
   \   00000742   0x283E             CMP      R0,#+62
   \   00000744   0xD100             BNE      .+4
   \   00000746   0xE26B             B        ??man_net_main_167
   \   00000748   0xD200             BCS      .+4
   \   0000074A   0xE268             B        ??man_net_main_168
   \   0000074C   0x2840             CMP      R0,#+64
   \   0000074E   0xD100             BNE      .+4
   \   00000750   0xE26A             B        ??man_net_main_169
   \   00000752   0xD200             BCS      .+4
   \   00000754   0xE264             B        ??man_net_main_167
   \   00000756   0x2842             CMP      R0,#+66
   \   00000758   0xD100             BNE      .+4
   \   0000075A   0xE272             B        ??man_net_main_170
   \   0000075C   0xD200             BCS      .+4
   \   0000075E   0xE26F             B        ??man_net_main_171
   \   00000760   0x2843             CMP      R0,#+67
   \   00000762   0xD100             BNE      .+4
   \   00000764   0xE26D             B        ??man_net_main_170
   \   00000766   0xE27B             B        ??man_net_main_172
    874          	case MAN_NET_SEQ_READY:				// 要求待ち
    875          		break;
   \                     ??man_net_main_113: (+1)
   \   00000768   0xE283             B        ??man_net_main_173
    876          
    877          	// WAKE UP
    878          	case MAN_NET_SEQ_WUP_REQ:
    879          		man_net_set_sequense(MAN_NET_SEQ_WUP);
   \                     ??man_net_main_115: (+1)
   \   0000076A   0x2002             MOVS     R0,#+2
   \   0000076C   0x.... 0x....      BL       man_net_set_sequense
    880          		man_lte_req_wakeup(MAN_NET_SEQ_WUP, man_net_req_callback);
   \   00000770   0x4998             LDR      R1,??man_net_main_174
   \   00000772   0x2002             MOVS     R0,#+2
   \   00000774   0x.... 0x....      BL       man_lte_req_wakeup
    881          		break;
   \   00000778   0xE27B             B        ??man_net_main_173
    882          
    883          	case MAN_NET_SEQ_WUP:					// WAKE UP中
    884          		break;
   \                     ??man_net_main_114: (+1)
   \   0000077A   0xE27A             B        ??man_net_main_173
    885          	case MAN_NET_SEQ_WUP_OK:				// WAKE UP完了
    886          #if 1
    887          		// NETWORK CLOSE状態に遷移
    888          		man_net_work.net_state = MAN_NET_STATE_CLOSE;
   \                     ??man_net_main_117: (+1)
   \   0000077C   0x2000             MOVS     R0,#+0
   \   0000077E   0x494E             LDR      R1,??man_net_main_112
   \   00000780   0x6008             STR      R0,[R1, #+0]
    889          		// OPEN処理開始
    890          		man_net_set_sequense(MAN_NET_SEQ_OPEN_REQ);
   \   00000782   0x200C             MOVS     R0,#+12
   \   00000784   0x.... 0x....      BL       man_net_set_sequense
    891          #else
    892          		// RESET処理後に再開する
    893          		man_net_set_sequense(MAN_NET_SEQ_RESET_REQ);
    894          #endif
    895          		break;
   \   00000788   0xE273             B        ??man_net_main_173
    896          	case MAN_NET_SEQ_WUP_NG:				// WAKE UP異常
    897          		man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, 0);
   \                     ??man_net_main_116: (+1)
   \   0000078A   0x4B93             LDR      R3,??man_net_main_174+0x4  ;; 0x381
   \   0000078C   0x2200             MOVS     R2,#+0
   \   0000078E   0x484A             LDR      R0,??man_net_main_112
   \   00000790   0x7C01             LDRB     R1,[R0, #+16]
   \   00000792   0x2014             MOVS     R0,#+20
   \   00000794   0x.... 0x....      BL       man_error_set
    898          		// RESET処理後に再開する
    899          		man_net_set_sequense(MAN_NET_SEQ_RESET_REQ);
   \   00000798   0x2005             MOVS     R0,#+5
   \   0000079A   0x.... 0x....      BL       man_net_set_sequense
    900          		break;
   \   0000079E   0xE268             B        ??man_net_main_173
    901          
    902          	case MAN_NET_SEQ_RESET_REQ:
    903          		// リセットの開始を通知する
    904          		man_lte_req_state(MAN_LTE_STATE_RESET);
   \                     ??man_net_main_119: (+1)
   \   000007A0   0x2001             MOVS     R0,#+1
   \   000007A2   0x.... 0x....      BL       man_lte_req_state
    905          		man_cmd_req_state(MAN_CMD_STATE_RESET);
   \   000007A6   0x2001             MOVS     R0,#+1
   \   000007A8   0x.... 0x....      BL       man_cmd_req_state
    906          		man_msg_req_state(MAN_MSG_STATE_RESET);
   \   000007AC   0x2001             MOVS     R0,#+1
   \   000007AE   0x.... 0x....      BL       man_msg_req_state
    907          		man_ota_req_state(MAN_OTA_STATE_RESET);
   \   000007B2   0x2001             MOVS     R0,#+1
   \   000007B4   0x.... 0x....      BL       man_ota_req_state
    908          		man_rpt_req_state(MAN_RPT_STATE_RESET);
   \   000007B8   0x2001             MOVS     R0,#+1
   \   000007BA   0x.... 0x....      BL       man_rpt_req_state
    909          
    910          		// 2秒後にRESETを開始する
    911          		man_timer_start_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_RESET_REQ_WAIT, MAN_NET_RESET_START_WAIT, man_net_req_callback);
   \   000007BE   0x4A85             LDR      R2,??man_net_main_174
   \   000007C0   0x21FA             MOVS     R1,#+250
   \   000007C2   0x00C9             LSLS     R1,R1,#+3        ;; #+2000
   \   000007C4   0x48BA             LDR      R0,??man_net_main_175  ;; 0x40800006
   \   000007C6   0x.... 0x....      BL       man_timer_start_wait
    912          		man_net_set_sequense(MAN_NET_SEQ_RESET_REQ_WAIT);
   \   000007CA   0x2006             MOVS     R0,#+6
   \   000007CC   0x.... 0x....      BL       man_net_set_sequense
    913          		break;
   \   000007D0   0xE24F             B        ??man_net_main_173
    914          
    915          	case MAN_NET_SEQ_RESET_REQ_WAIT:
    916          		break;
   \                     ??man_net_main_118: (+1)
   \   000007D2   0xE24E             B        ??man_net_main_173
    917          	case MAN_NET_SEQ_RESET_REQ_WAIT_OK:
    918          	case MAN_NET_SEQ_RESET_REQ_WAIT_NG:
    919          		// RESET実施
    920          		man_lte_req_reset(MAN_NET_SEQ_RESET, man_net_req_callback);
   \                     ??man_net_main_120: (+1)
   \   000007D4   0x497F             LDR      R1,??man_net_main_174
   \   000007D6   0x2009             MOVS     R0,#+9
   \   000007D8   0x.... 0x....      BL       man_lte_req_reset
    921          		// RESET処理開始
    922          		man_net_set_sequense(MAN_NET_SEQ_RESET);
   \   000007DC   0x2009             MOVS     R0,#+9
   \   000007DE   0x.... 0x....      BL       man_net_set_sequense
    923          		break;
   \   000007E2   0xE246             B        ??man_net_main_173
    924          	case MAN_NET_SEQ_RESET:
    925          		break;
   \                     ??man_net_main_122: (+1)
   \   000007E4   0xE245             B        ??man_net_main_173
    926          	case MAN_NET_SEQ_RESET_OK:
    927          	case MAN_NET_SEQ_RESET_NG:
    928          		// CLOSE状態とする
    929          		man_net_work.net_state = MAN_NET_STATE_CLOSE;
   \                     ??man_net_main_121: (+1)
   \   000007E6   0x2000             MOVS     R0,#+0
   \   000007E8   0x4933             LDR      R1,??man_net_main_112
   \   000007EA   0x6008             STR      R0,[R1, #+0]
    930          		// 全てがCLOSE状態
    931          		man_net_work.net_sts = 0;
   \   000007EC   0x2000             MOVS     R0,#+0
   \   000007EE   0x4932             LDR      R1,??man_net_main_112
   \   000007F0   0x6088             STR      R0,[R1, #+8]
    932          		// NET OPEN時に全ての初期化を行う
    933          		man_net_work.status = 0;
   \   000007F2   0x2000             MOVS     R0,#+0
   \   000007F4   0x4930             LDR      R1,??man_net_main_112
   \   000007F6   0x60C8             STR      R0,[R1, #+12]
    934          
    935          		// OPEN処理開始
    936          		man_net_set_sequense(MAN_NET_SEQ_OPEN_REQ);
   \   000007F8   0x200C             MOVS     R0,#+12
   \   000007FA   0x.... 0x....      BL       man_net_set_sequense
    937          		break;
   \   000007FE   0xE238             B        ??man_net_main_173
    938          
    939          
    940          	// ###########
    941          	// NET OPEN
    942          	// ###########
    943          	case MAN_NET_SEQ_OPEN_REQ:
    944          		//  network使用初期化が行われていない場合
    945          		if ( (man_net_work.status & MAN_NET_STATUS_LTE_INIT) == 0) {
   \                     ??man_net_main_123: (+1)
   \   00000800   0x482D             LDR      R0,??man_net_main_112
   \   00000802   0x7B00             LDRB     R0,[R0, #+12]
   \   00000804   0x07C0             LSLS     R0,R0,#+31
   \   00000806   0xD40A             BMI      ??man_net_main_176
    946          			// 要求を実施する
    947          			man_net_set_sequense(MAN_NET_SEQ_LTE_INIT);
   \   00000808   0x200D             MOVS     R0,#+13
   \   0000080A   0x.... 0x....      BL       man_net_set_sequense
    948          			man_lte_req_init(MAN_NET_SEQ_LTE_INIT, man_net_req_callback);
   \   0000080E   0x4971             LDR      R1,??man_net_main_174
   \   00000810   0x200D             MOVS     R0,#+13
   \   00000812   0x.... 0x....      BL       man_lte_req_init
    949          			// LTE電源ONするため、CLOSE状態とする
    950          			man_net_work.net_state = MAN_NET_STATE_CLOSE;
   \   00000816   0x2000             MOVS     R0,#+0
   \   00000818   0x4927             LDR      R1,??man_net_main_112
   \   0000081A   0x6008             STR      R0,[R1, #+0]
   \   0000081C   0xE00E             B        ??man_net_main_177
    951          		}
    952          
    953          		// network使用準備が行われていない場合
    954          		else if ( (man_net_work.status & MAN_NET_STATUS_LTE_READY) == 0 ) {
   \                     ??man_net_main_176: (+1)
   \   0000081E   0x4826             LDR      R0,??man_net_main_112
   \   00000820   0x7B00             LDRB     R0,[R0, #+12]
   \   00000822   0x0780             LSLS     R0,R0,#+30
   \   00000824   0xD407             BMI      ??man_net_main_178
    955          			// 要求を実施する
    956          			man_net_set_sequense(MAN_NET_SEQ_LTE_READY);
   \   00000826   0x2018             MOVS     R0,#+24
   \   00000828   0x.... 0x....      BL       man_net_set_sequense
    957          			man_lte_req_ready(MAN_NET_SEQ_LTE_READY, man_net_req_callback);
   \   0000082C   0x4969             LDR      R1,??man_net_main_174
   \   0000082E   0x2018             MOVS     R0,#+24
   \   00000830   0x.... 0x....      BL       man_lte_req_ready
   \   00000834   0xE002             B        ??man_net_main_177
    958          		}
    959          
    960          		// network使用準備が既に行われている場合
    961          		else {
    962          			// NETWORK使用開始要求
    963          			man_net_set_sequense(MAN_NET_SEQ_LTE_START_REQ);
   \                     ??man_net_main_178: (+1)
   \   00000836   0x201E             MOVS     R0,#+30
   \   00000838   0x.... 0x....      BL       man_net_set_sequense
    964          		}
    965          		break;
   \                     ??man_net_main_177: (+1)
   \   0000083C   0xE219             B        ??man_net_main_173
    966          
    967          	case MAN_NET_SEQ_LTE_INIT:			// network使用初期化
    968          		break;
   \                     ??man_net_main_125: (+1)
   \   0000083E   0xE218             B        ??man_net_main_173
    969          
    970          	case MAN_NET_SEQ_LTE_INIT_OK:		// network使用初期化完了
    971          		// network使用初期化完了
    972          		man_net_work.status |= MAN_NET_STATUS_LTE_INIT;
   \                     ??man_net_main_124: (+1)
   \   00000840   0x481D             LDR      R0,??man_net_main_112
   \   00000842   0x68C0             LDR      R0,[R0, #+12]
   \   00000844   0x2101             MOVS     R1,#+1
   \   00000846   0x4301             ORRS     R1,R1,R0
   \   00000848   0x481B             LDR      R0,??man_net_main_112
   \   0000084A   0x60C1             STR      R1,[R0, #+12]
    973          		// network使用準備開始
    974          		man_net_set_sequense(MAN_NET_SEQ_LTE_READY_REQ);
   \   0000084C   0x2017             MOVS     R0,#+23
   \   0000084E   0x.... 0x....      BL       man_net_set_sequense
    975          		break;
   \   00000852   0xE20E             B        ??man_net_main_173
    976          
    977          	case MAN_NET_SEQ_LTE_INIT_NG:		// network使用初期化異常
    978          		// 上位からの要求が発生した場合、中止する
    979          		if ( (man_net_work.request.req_cmd != MAN_NET_REQ_CMD_OPEN) && (man_net_work.request.req_cmd != MAN_NET_REQ_CMD_READY) ) {
   \                     ??man_net_main_127: (+1)
   \   00000854   0x4818             LDR      R0,??man_net_main_112
   \   00000856   0x7D00             LDRB     R0,[R0, #+20]
   \   00000858   0x2801             CMP      R0,#+1
   \   0000085A   0xD007             BEQ      ??man_net_main_179
   \   0000085C   0x4816             LDR      R0,??man_net_main_112
   \   0000085E   0x7D00             LDRB     R0,[R0, #+20]
   \   00000860   0x2800             CMP      R0,#+0
   \   00000862   0xD003             BEQ      ??man_net_main_179
    980          			// 中止
    981          			man_net_set_sequense(MAN_NET_SEQ_READY);
   \   00000864   0x2000             MOVS     R0,#+0
   \   00000866   0x.... 0x....      BL       man_net_set_sequense
   \   0000086A   0xE002             B        ??man_net_main_180
    982          		}
    983          		else {
    984          			// WAKE UP送信開始
    985          			man_net_set_sequense(MAN_NET_SEQ_LTE_INIT_NG_WKUP_REQ);
   \                     ??man_net_main_179: (+1)
   \   0000086C   0x2010             MOVS     R0,#+16
   \   0000086E   0x.... 0x....      BL       man_net_set_sequense
    986          		}
    987          		break;
   \                     ??man_net_main_180: (+1)
   \   00000872   0xE1FE             B        ??man_net_main_173
    988          
    989          	case MAN_NET_SEQ_LTE_INIT_NG_WKUP_REQ:
    990          		// STBY ONを発行後にリトライする
    991          		man_net_set_sequense(MAN_NET_SEQ_LTE_INIT_NG_WKUP);
   \                     ??man_net_main_126: (+1)
   \   00000874   0x2011             MOVS     R0,#+17
   \   00000876   0x.... 0x....      BL       man_net_set_sequense
    992          		man_lte_req_wakeup(MAN_NET_SEQ_LTE_INIT_NG_WKUP, man_net_req_callback);
   \   0000087A   0x4956             LDR      R1,??man_net_main_174
   \   0000087C   0x2011             MOVS     R0,#+17
   \   0000087E   0x.... 0x....      BL       man_lte_req_wakeup
    993          		break;
   \   00000882   0xE1F6             B        ??man_net_main_173
    994          	case MAN_NET_SEQ_LTE_INIT_NG_WKUP:
    995          		break;
   \                     ??man_net_main_129: (+1)
   \   00000884   0xE1F5             B        ??man_net_main_173
    996          	case MAN_NET_SEQ_LTE_INIT_NG_WKUP_OK:
    997          	case MAN_NET_SEQ_LTE_INIT_NG_WKUP_NG:
    998          		// 10秒後にリトライする
    999          		man_timer_start_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_LTE_INIT_NG_WAIT, MAN_NET_INIT_RETRY_WAIT, man_net_req_callback);
   \                     ??man_net_main_128: (+1)
   \   00000886   0x4A53             LDR      R2,??man_net_main_174
   \   00000888   0x498A             LDR      R1,??man_net_main_175+0x4  ;; 0x2710
   \   0000088A   0x488B             LDR      R0,??man_net_main_175+0x8  ;; 0x40800014
   \   0000088C   0x.... 0x....      BL       man_timer_start_wait
   1000          		man_net_set_sequense(MAN_NET_SEQ_LTE_INIT_NG_WAIT);
   \   00000890   0x2014             MOVS     R0,#+20
   \   00000892   0x.... 0x....      BL       man_net_set_sequense
   1001          		break;
   \   00000896   0xE1EC             B        ??man_net_main_173
   1002          
   1003          	case MAN_NET_SEQ_LTE_INIT_NG_WAIT:
   1004          		// 上位からの要求が発生した場合、中止する
   1005          		if ( (man_net_work.request.req_cmd != MAN_NET_REQ_CMD_OPEN) && (man_net_work.request.req_cmd != MAN_NET_REQ_CMD_READY) ) {
   \                     ??man_net_main_130: (+1)
   \   00000898   0x4807             LDR      R0,??man_net_main_112
   \   0000089A   0x7D00             LDRB     R0,[R0, #+20]
   \   0000089C   0x2801             CMP      R0,#+1
   \   0000089E   0xD00A             BEQ      ??man_net_main_181
   \   000008A0   0x4805             LDR      R0,??man_net_main_112
   \   000008A2   0x7D00             LDRB     R0,[R0, #+20]
   \   000008A4   0x2800             CMP      R0,#+0
   \   000008A6   0xD006             BEQ      ??man_net_main_181
   1006          			// タイマーを中止する
   1007          			man_timer_cancel_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_LTE_INIT_NG_WAIT, MAN_NET_INIT_RETRY_WAIT);
   \   000008A8   0x4982             LDR      R1,??man_net_main_175+0x4  ;; 0x2710
   \   000008AA   0x4883             LDR      R0,??man_net_main_175+0x8  ;; 0x40800014
   \   000008AC   0x.... 0x....      BL       man_timer_cancel_wait
   1008          			// 中止
   1009          			man_net_set_sequense(MAN_NET_SEQ_READY);
   \   000008B0   0x2000             MOVS     R0,#+0
   \   000008B2   0x.... 0x....      BL       man_net_set_sequense
   1010          		}
   1011          		break;
   \                     ??man_net_main_181: (+1)
   \   000008B6   0xE1DC             B        ??man_net_main_173
   \                     ??man_net_main_112:
   \   000008B8   0x........         DC32     man_net_work
   1012          
   1013          	case MAN_NET_SEQ_LTE_INIT_NG_WAIT_OK:
   1014          	case MAN_NET_SEQ_LTE_INIT_NG_WAIT_NG:
   1015          		// OPEN移行リトライ中を通知
   1016          		man_net_noti_callback(MAN_NET_NOTI_TO_OPEN_RETRY);
   \                     ??man_net_main_131: (+1)
   \   000008BC   0x2007             MOVS     R0,#+7
   \   000008BE   0x.... 0x....      BL       man_net_noti_callback
   1017          		// 再度、OPEN処理開始する
   1018          		man_net_set_sequense(MAN_NET_SEQ_OPEN_REQ);
   \   000008C2   0x200C             MOVS     R0,#+12
   \   000008C4   0x.... 0x....      BL       man_net_set_sequense
   1019          		break;
   \   000008C8   0xE1D3             B        ??man_net_main_173
   1020          
   1021          
   1022          	// network使用準備
   1023          	case MAN_NET_SEQ_LTE_READY_REQ:		// network使用準備要求
   1024          		man_net_set_sequense(MAN_NET_SEQ_LTE_READY);
   \                     ??man_net_main_133: (+1)
   \   000008CA   0x2018             MOVS     R0,#+24
   \   000008CC   0x.... 0x....      BL       man_net_set_sequense
   1025          		man_lte_req_ready(MAN_NET_SEQ_LTE_READY, man_net_req_callback);
   \   000008D0   0x4940             LDR      R1,??man_net_main_174
   \   000008D2   0x2018             MOVS     R0,#+24
   \   000008D4   0x.... 0x....      BL       man_lte_req_ready
   1026          		break;
   \   000008D8   0xE1CB             B        ??man_net_main_173
   1027          	case MAN_NET_SEQ_LTE_READY:			// network使用準備
   1028          		break;
   \                     ??man_net_main_132: (+1)
   \   000008DA   0xE1CA             B        ??man_net_main_173
   1029          	case MAN_NET_SEQ_LTE_READY_OK:		// network使用準備完了
   1030          		// network使用準備完了
   1031          		man_net_work.status |= MAN_NET_STATUS_LTE_READY;
   \                     ??man_net_main_135: (+1)
   \   000008DC   0x4877             LDR      R0,??man_net_main_175+0xC
   \   000008DE   0x68C0             LDR      R0,[R0, #+12]
   \   000008E0   0x2102             MOVS     R1,#+2
   \   000008E2   0x4301             ORRS     R1,R1,R0
   \   000008E4   0x4875             LDR      R0,??man_net_main_175+0xC
   \   000008E6   0x60C1             STR      R1,[R0, #+12]
   1032          
   1033          		// 目標状態に向けて進む
   1034          		switch (man_net_work.gole_state) {
   \   000008E8   0x4874             LDR      R0,??man_net_main_175+0xC
   \   000008EA   0x6840             LDR      R0,[R0, #+4]
   \   000008EC   0x2800             CMP      R0,#+0
   \   000008EE   0xD009             BEQ      ??man_net_main_182
   \   000008F0   0x2802             CMP      R0,#+2
   \   000008F2   0xD007             BEQ      ??man_net_main_182
   \   000008F4   0xD302             BCC      ??man_net_main_183
   \   000008F6   0x2803             CMP      R0,#+3
   \   000008F8   0xD004             BEQ      ??man_net_main_182
   \   000008FA   0xE006             B        ??man_net_main_184
   1035          		case MAN_NET_STATE_OPEN:
   1036          			// NETWORK使用開始要求
   1037          			man_net_set_sequense(MAN_NET_SEQ_LTE_START_REQ);
   \                     ??man_net_main_183: (+1)
   \   000008FC   0x201E             MOVS     R0,#+30
   \   000008FE   0x.... 0x....      BL       man_net_set_sequense
   1038          			break;
   \   00000902   0xE002             B        ??man_net_main_184
   1039          		case MAN_NET_STATE_CLOSE:
   1040          		case MAN_NET_STATE_STBY:
   1041          		case MAN_NET_STATE_OFF:
   1042          			man_net_set_sequense(MAN_NET_SEQ_CLOSE_REQ);
   \                     ??man_net_main_182: (+1)
   \   00000904   0x202C             MOVS     R0,#+44
   \   00000906   0x.... 0x....      BL       man_net_set_sequense
   1043          			break;
   1044          		}
   1045          		break;
   \                     ??man_net_main_184: (+1)
   \   0000090A   0xE1B2             B        ??man_net_main_173
   1046          	case MAN_NET_SEQ_LTE_READY_NG:		// network使用準備異常
   1047          		// 上位からの要求が発生した場合、中止する
   1048          		if ( (man_net_work.request.req_cmd != MAN_NET_REQ_CMD_OPEN) && (man_net_work.request.req_cmd != MAN_NET_REQ_CMD_READY) ) {
   \                     ??man_net_main_134: (+1)
   \   0000090C   0x486B             LDR      R0,??man_net_main_175+0xC
   \   0000090E   0x7D00             LDRB     R0,[R0, #+20]
   \   00000910   0x2801             CMP      R0,#+1
   \   00000912   0xD007             BEQ      ??man_net_main_185
   \   00000914   0x4869             LDR      R0,??man_net_main_175+0xC
   \   00000916   0x7D00             LDRB     R0,[R0, #+20]
   \   00000918   0x2800             CMP      R0,#+0
   \   0000091A   0xD003             BEQ      ??man_net_main_185
   1049          			// 中止
   1050          			man_net_set_sequense(MAN_NET_SEQ_READY);
   \   0000091C   0x2000             MOVS     R0,#+0
   \   0000091E   0x.... 0x....      BL       man_net_set_sequense
   \   00000922   0xE00A             B        ??man_net_main_186
   1051          		}
   1052          		else {
   1053          			// OPEN移行リトライ中を通知
   1054          			man_net_noti_callback(MAN_NET_NOTI_TO_OPEN_RETRY);
   \                     ??man_net_main_185: (+1)
   \   00000924   0x2007             MOVS     R0,#+7
   \   00000926   0x.... 0x....      BL       man_net_noti_callback
   1055          			// 10秒後にリトライする
   1056          			man_timer_start_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_LTE_READY_NG_WAIT, MAN_NET_READY_RETRY_WAIT, man_net_req_callback);
   \   0000092A   0x4A2A             LDR      R2,??man_net_main_174
   \   0000092C   0x4961             LDR      R1,??man_net_main_175+0x4  ;; 0x2710
   \   0000092E   0x48C2             LDR      R0,??man_net_main_187  ;; 0x4080001b
   \   00000930   0x.... 0x....      BL       man_timer_start_wait
   1057          			man_net_set_sequense(MAN_NET_SEQ_LTE_READY_NG_WAIT);
   \   00000934   0x201B             MOVS     R0,#+27
   \   00000936   0x.... 0x....      BL       man_net_set_sequense
   1058          		}
   1059          		break;
   \                     ??man_net_main_186: (+1)
   \   0000093A   0xE19A             B        ??man_net_main_173
   1060          	case MAN_NET_SEQ_LTE_READY_NG_WAIT:
   1061          		break;
   \                     ??man_net_main_137: (+1)
   \   0000093C   0xE199             B        ??man_net_main_173
   1062          	case MAN_NET_SEQ_LTE_READY_NG_WAIT_OK:
   1063          	case MAN_NET_SEQ_LTE_READY_NG_WAIT_NG:
   1064          		// network使用準備再開
   1065          		man_net_set_sequense(MAN_NET_SEQ_LTE_READY_REQ);
   \                     ??man_net_main_136: (+1)
   \   0000093E   0x2017             MOVS     R0,#+23
   \   00000940   0x.... 0x....      BL       man_net_set_sequense
   1066          		break;
   \   00000944   0xE195             B        ??man_net_main_173
   1067          
   1068          
   1069          	// NETWORK使用開始
   1070          	case MAN_NET_SEQ_LTE_START_REQ:		// NETWORK使用開始要求
   1071          		// NET OPEN移行中を通知
   1072          		man_net_noti_callback(MAN_NET_NOTI_TO_NET_OPEN);
   \                     ??man_net_main_138: (+1)
   \   00000946   0x2002             MOVS     R0,#+2
   \   00000948   0x.... 0x....      BL       man_net_noti_callback
   1073          		// 電波状況が圏内になるのを待ってNET OPENを開始する
   1074          		if (man_net_work.rssi_sts == MAN_DATA_RSSI_STS_OK) {
   \   0000094C   0x48BB             LDR      R0,??man_net_main_187+0x4
   \   0000094E   0x7800             LDRB     R0,[R0, #+0]
   \   00000950   0x2801             CMP      R0,#+1
   \   00000952   0xD107             BNE      ??man_net_main_188
   1075          			man_net_set_sequense(MAN_NET_SEQ_LTE_START);
   \   00000954   0x201F             MOVS     R0,#+31
   \   00000956   0x.... 0x....      BL       man_net_set_sequense
   1076          			man_lte_req_start(MAN_NET_SEQ_LTE_START, man_net_req_callback);
   \   0000095A   0x491E             LDR      R1,??man_net_main_174
   \   0000095C   0x201F             MOVS     R0,#+31
   \   0000095E   0x.... 0x....      BL       man_lte_req_start
   \   00000962   0xE00A             B        ??man_net_main_189
   1077          		}
   1078          		
   1079          		// 上位からの要求が発生した場合、中止する
   1080          		else {
   1081          			// 上位からの要求が発生した場合、中止する
   1082          			if ( (man_net_work.request.req_cmd != MAN_NET_REQ_CMD_OPEN) && (man_net_work.request.req_cmd != MAN_NET_REQ_CMD_READY) ) {
   \                     ??man_net_main_188: (+1)
   \   00000964   0x4855             LDR      R0,??man_net_main_175+0xC
   \   00000966   0x7D00             LDRB     R0,[R0, #+20]
   \   00000968   0x2801             CMP      R0,#+1
   \   0000096A   0xD006             BEQ      ??man_net_main_189
   \   0000096C   0x4853             LDR      R0,??man_net_main_175+0xC
   \   0000096E   0x7D00             LDRB     R0,[R0, #+20]
   \   00000970   0x2800             CMP      R0,#+0
   \   00000972   0xD002             BEQ      ??man_net_main_189
   1083          				// 中止
   1084          				man_net_set_sequense(MAN_NET_SEQ_READY);
   \   00000974   0x2000             MOVS     R0,#+0
   \   00000976   0x.... 0x....      BL       man_net_set_sequense
   1085          			}
   1086          		}
   1087          		break;
   \                     ??man_net_main_189: (+1)
   \   0000097A   0xE17A             B        ??man_net_main_173
   1088          	case MAN_NET_SEQ_LTE_START:			// NETWORK使用開始
   1089          		break;
   \                     ??man_net_main_140: (+1)
   \   0000097C   0xE179             B        ??man_net_main_173
   1090          	case MAN_NET_SEQ_LTE_START_OK:		// NETWORK使用開始完了
   1091          		man_net_work.net_sts |= MAN_NET_STS_LTE;		// LTE open完了
   \                     ??man_net_main_139: (+1)
   \   0000097E   0x484F             LDR      R0,??man_net_main_175+0xC
   \   00000980   0x6880             LDR      R0,[R0, #+8]
   \   00000982   0x2101             MOVS     R1,#+1
   \   00000984   0x4301             ORRS     R1,R1,R0
   \   00000986   0x484D             LDR      R0,??man_net_main_175+0xC
   \   00000988   0x6081             STR      R1,[R0, #+8]
   1092          		man_rpt_req_udp_start();
   \   0000098A   0x.... 0x....      BL       man_rpt_req_udp_start
   1093          		man_net_work.net_sts |= MAN_NET_STS_UDP;		// UDP open完了
   \   0000098E   0x484B             LDR      R0,??man_net_main_175+0xC
   \   00000990   0x6880             LDR      R0,[R0, #+8]
   \   00000992   0x2102             MOVS     R1,#+2
   \   00000994   0x4301             ORRS     R1,R1,R0
   \   00000996   0x4849             LDR      R0,??man_net_main_175+0xC
   \   00000998   0x6081             STR      R1,[R0, #+8]
   1094          
   1095          		// メッセージ管理開始
   1096          		man_net_set_sequense(MAN_NET_SEQ_MSG_START_REQ);
   \   0000099A   0x2025             MOVS     R0,#+37
   \   0000099C   0x.... 0x....      BL       man_net_set_sequense
   1097          		break;
   \   000009A0   0xE167             B        ??man_net_main_173
   1098          	case MAN_NET_SEQ_LTE_START_NG:		// NETWORK使用開始異常
   1099          		// 上位からの要求が発生した場合、中止する
   1100          		if ( (man_net_work.request.req_cmd != MAN_NET_REQ_CMD_OPEN) && (man_net_work.request.req_cmd != MAN_NET_REQ_CMD_READY) ) {
   \                     ??man_net_main_142: (+1)
   \   000009A2   0x4846             LDR      R0,??man_net_main_175+0xC
   \   000009A4   0x7D00             LDRB     R0,[R0, #+20]
   \   000009A6   0x2801             CMP      R0,#+1
   \   000009A8   0xD007             BEQ      ??man_net_main_190
   \   000009AA   0x4844             LDR      R0,??man_net_main_175+0xC
   \   000009AC   0x7D00             LDRB     R0,[R0, #+20]
   \   000009AE   0x2800             CMP      R0,#+0
   \   000009B0   0xD003             BEQ      ??man_net_main_190
   1101          			// 中止
   1102          			man_net_set_sequense(MAN_NET_SEQ_READY);
   \   000009B2   0x2000             MOVS     R0,#+0
   \   000009B4   0x.... 0x....      BL       man_net_set_sequense
   \   000009B8   0xE00A             B        ??man_net_main_191
   1103          		}
   1104          		else {
   1105          			// OPEN移行リトライ中を通知
   1106          			man_net_noti_callback(MAN_NET_NOTI_TO_OPEN_RETRY);
   \                     ??man_net_main_190: (+1)
   \   000009BA   0x2007             MOVS     R0,#+7
   \   000009BC   0x.... 0x....      BL       man_net_noti_callback
   1107          			// 10秒後にリトライする
   1108          			man_timer_start_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_LTE_START_NG_WAIT, MAN_NET_START_RETRY_WAIT, man_net_req_callback);
   \   000009C0   0x4A04             LDR      R2,??man_net_main_174
   \   000009C2   0x493C             LDR      R1,??man_net_main_175+0x4  ;; 0x2710
   \   000009C4   0x48B7             LDR      R0,??man_net_main_192  ;; 0x40800022
   \   000009C6   0x.... 0x....      BL       man_timer_start_wait
   1109          			man_net_set_sequense(MAN_NET_SEQ_LTE_START_NG_WAIT);
   \   000009CA   0x2022             MOVS     R0,#+34
   \   000009CC   0x.... 0x....      BL       man_net_set_sequense
   1110          		}
   1111          		break;
   \                     ??man_net_main_191: (+1)
   \   000009D0   0xE14F             B        ??man_net_main_173
   \   000009D2   0xBF00             Nop      
   \                     ??man_net_main_174:
   \   000009D4   0x........         DC32     man_net_req_callback
   \   000009D8   0x00000381         DC32     0x381
   1112          
   1113          	case MAN_NET_SEQ_LTE_START_NG_WAIT:
   1114          		break;
   \                     ??man_net_main_141: (+1)
   \   000009DC   0xE149             B        ??man_net_main_173
   1115          	case MAN_NET_SEQ_LTE_START_NG_WAIT_OK:
   1116          	case MAN_NET_SEQ_LTE_START_NG_WAIT_NG:
   1117          		// NETWORK使用開始要求
   1118          		man_net_set_sequense(MAN_NET_SEQ_LTE_START_REQ);
   \                     ??man_net_main_143: (+1)
   \   000009DE   0x201E             MOVS     R0,#+30
   \   000009E0   0x.... 0x....      BL       man_net_set_sequense
   1119          		break;
   \   000009E4   0xE145             B        ??man_net_main_173
   1120          
   1121          
   1122          	// メッセージ管理開始
   1123          	case MAN_NET_SEQ_MSG_START_REQ:
   1124          		ret = man_msg_req_start(MAN_NET_SEQ_MSG_START, man_net_req_callback);
   \                     ??man_net_main_145: (+1)
   \   000009E6   0x49B0             LDR      R1,??man_net_main_192+0x4
   \   000009E8   0x2026             MOVS     R0,#+38
   \   000009EA   0x.... 0x....      BL       man_msg_req_start
   1125          		if (ret < 0) {
   \   000009EE   0x2800             CMP      R0,#+0
   \   000009F0   0xD507             BPL      ??man_net_main_193
   1126          			man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, 0);
   \   000009F2   0x4BAE             LDR      R3,??man_net_main_192+0x8  ;; 0x466
   \   000009F4   0x2200             MOVS     R2,#+0
   \   000009F6   0x4831             LDR      R0,??man_net_main_175+0xC
   \   000009F8   0x7C01             LDRB     R1,[R0, #+16]
   \   000009FA   0x2014             MOVS     R0,#+20
   \   000009FC   0x.... 0x....      BL       man_error_set
   \   00000A00   0xE002             B        ??man_net_main_194
   1127          		}
   1128          		else {
   1129          			man_net_set_sequense(MAN_NET_SEQ_MSG_START);
   \                     ??man_net_main_193: (+1)
   \   00000A02   0x2026             MOVS     R0,#+38
   \   00000A04   0x.... 0x....      BL       man_net_set_sequense
   1130          		}
   1131          		break;
   \                     ??man_net_main_194: (+1)
   \   00000A08   0xE133             B        ??man_net_main_173
   1132          	case MAN_NET_SEQ_MSG_START:			// メッセージ管理開始
   1133          		break;
   \                     ??man_net_main_144: (+1)
   \   00000A0A   0xE132             B        ??man_net_main_173
   1134          	case MAN_NET_SEQ_MSG_START_OK:		// メッセージ管理開始完了
   1135          		man_net_work.net_sts |= MAN_NET_STS_CLIENT;		// CLIENT open完了
   \                     ??man_net_main_147: (+1)
   \   00000A0C   0x482B             LDR      R0,??man_net_main_175+0xC
   \   00000A0E   0x6880             LDR      R0,[R0, #+8]
   \   00000A10   0x2104             MOVS     R1,#+4
   \   00000A12   0x4301             ORRS     R1,R1,R0
   \   00000A14   0x4829             LDR      R0,??man_net_main_175+0xC
   \   00000A16   0x6081             STR      R1,[R0, #+8]
   1136          		man_net_set_sequense(MAN_NET_SEQ_CMD_START);
   \   00000A18   0x2029             MOVS     R0,#+41
   \   00000A1A   0x.... 0x....      BL       man_net_set_sequense
   1137          		man_cmd_receive_start(MAN_NET_SEQ_CMD_START, man_net_req_callback);
   \   00000A1E   0x49A2             LDR      R1,??man_net_main_192+0x4
   \   00000A20   0x2029             MOVS     R0,#+41
   \   00000A22   0x.... 0x....      BL       man_cmd_receive_start
   1138          		break;
   \   00000A26   0xE124             B        ??man_net_main_173
   1139          
   1140          	case MAN_NET_SEQ_MSG_START_NG:		// メッセージ管理開始異常
   1141          		man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, 0);
   \                     ??man_net_main_146: (+1)
   \   00000A28   0x4BA1             LDR      R3,??man_net_main_192+0xC  ;; 0x475
   \   00000A2A   0x2200             MOVS     R2,#+0
   \   00000A2C   0x4823             LDR      R0,??man_net_main_175+0xC
   \   00000A2E   0x7C01             LDRB     R1,[R0, #+16]
   \   00000A30   0x2014             MOVS     R0,#+20
   \   00000A32   0x.... 0x....      BL       man_error_set
   1142          		man_net_set_cmd_end();
   \   00000A36   0x.... 0x....      BL       man_net_set_cmd_end
   1143          		break;
   \   00000A3A   0xE11A             B        ??man_net_main_173
   1144          
   1145          	case MAN_NET_SEQ_CMD_START:			// コマンド受け付け開始
   1146          		break;
   \                     ??man_net_main_149: (+1)
   \   00000A3C   0xE119             B        ??man_net_main_173
   1147          	case MAN_NET_SEQ_CMD_START_OK:		// コマンド受け付け開始完了
   1148          		man_net_work.net_sts |= MAN_NET_STS_SERVER;		// SERVER open完了
   \                     ??man_net_main_148: (+1)
   \   00000A3E   0x481F             LDR      R0,??man_net_main_175+0xC
   \   00000A40   0x6880             LDR      R0,[R0, #+8]
   \   00000A42   0x2108             MOVS     R1,#+8
   \   00000A44   0x4301             ORRS     R1,R1,R0
   \   00000A46   0x481D             LDR      R0,??man_net_main_175+0xC
   \   00000A48   0x6081             STR      R1,[R0, #+8]
   1149          		man_net_work.net_state = MAN_NET_STATE_OPEN;
   \   00000A4A   0x2001             MOVS     R0,#+1
   \   00000A4C   0x491B             LDR      R1,??man_net_main_175+0xC
   \   00000A4E   0x6008             STR      R0,[R1, #+0]
   1150          		// OPEN状態を通知
   1151          		man_net_noti_callback(MAN_NET_NOTI_NOW_OPEN);
   \   00000A50   0x2003             MOVS     R0,#+3
   \   00000A52   0x.... 0x....      BL       man_net_noti_callback
   1152          		// OPEN要求の場合は終了する
   1153          		if (man_net_work.request.req_cmd == MAN_NET_REQ_CMD_OPEN) {
   \   00000A56   0x4819             LDR      R0,??man_net_main_175+0xC
   \   00000A58   0x7D00             LDRB     R0,[R0, #+20]
   \   00000A5A   0x2801             CMP      R0,#+1
   \   00000A5C   0xD102             BNE      ??man_net_main_195
   1154          			man_net_set_cmd_end();
   \   00000A5E   0x.... 0x....      BL       man_net_set_cmd_end
   \   00000A62   0xE009             B        ??man_net_main_196
   1155          		}
   1156          		else {
   1157          			man_error_setting(MAN_ERROR_MAN_NET, man_net_work.request.req_cmd, 0);
   \                     ??man_net_main_195: (+1)
   \   00000A64   0x4B93             LDR      R3,??man_net_main_192+0x10  ;; 0x485
   \   00000A66   0x2200             MOVS     R2,#+0
   \   00000A68   0x4814             LDR      R0,??man_net_main_175+0xC
   \   00000A6A   0x7D01             LDRB     R1,[R0, #+20]
   \   00000A6C   0x2014             MOVS     R0,#+20
   \   00000A6E   0x.... 0x....      BL       man_error_set
   1158          			man_net_set_sequense(MAN_NET_SEQ_READY);
   \   00000A72   0x2000             MOVS     R0,#+0
   \   00000A74   0x.... 0x....      BL       man_net_set_sequense
   1159          		}
   1160          		break;
   \                     ??man_net_main_196: (+1)
   \   00000A78   0xE0FB             B        ??man_net_main_173
   1161          	case MAN_NET_SEQ_CMD_START_NG:		// コマンド受け付け開始異常
   1162          		man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, 0);
   \                     ??man_net_main_151: (+1)
   \   00000A7A   0x4B8F             LDR      R3,??man_net_main_192+0x14  ;; 0x48a
   \   00000A7C   0x2200             MOVS     R2,#+0
   \   00000A7E   0x480F             LDR      R0,??man_net_main_175+0xC
   \   00000A80   0x7C01             LDRB     R1,[R0, #+16]
   \   00000A82   0x2014             MOVS     R0,#+20
   \   00000A84   0x.... 0x....      BL       man_error_set
   1163          		// OPEN要求の場合は終了する
   1164          		if (man_net_work.request.req_cmd == MAN_NET_REQ_CMD_OPEN) {
   \   00000A88   0x480C             LDR      R0,??man_net_main_175+0xC
   \   00000A8A   0x7D00             LDRB     R0,[R0, #+20]
   \   00000A8C   0x2801             CMP      R0,#+1
   \   00000A8E   0xD102             BNE      ??man_net_main_197
   1165          			man_net_set_cmd_end();
   \   00000A90   0x.... 0x....      BL       man_net_set_cmd_end
   \   00000A94   0xE002             B        ??man_net_main_198
   1166          		}
   1167          		else {
   1168          			man_net_set_sequense(MAN_NET_SEQ_READY);
   \                     ??man_net_main_197: (+1)
   \   00000A96   0x2000             MOVS     R0,#+0
   \   00000A98   0x.... 0x....      BL       man_net_set_sequense
   1169          		}
   1170          		break;
   \                     ??man_net_main_198: (+1)
   \   00000A9C   0xE0E9             B        ??man_net_main_173
   1171          
   1172          
   1173          
   1174          	// #############
   1175          	// NET CLOSE開始処理
   1176          	// #############
   1177          	case MAN_NET_SEQ_CLOSE_REQ:
   1178          		// 要求を実施する
   1179          		man_net_set_sequense(MAN_NET_SEQ_CMD_STOP);
   \                     ??man_net_main_150: (+1)
   \   00000A9E   0x202D             MOVS     R0,#+45
   \   00000AA0   0x.... 0x....      BL       man_net_set_sequense
   1180          		man_cmd_receive_stop(MAN_NET_SEQ_CMD_STOP, man_net_req_callback);
   \   00000AA4   0x4980             LDR      R1,??man_net_main_192+0x4
   \   00000AA6   0x202D             MOVS     R0,#+45
   \   00000AA8   0x.... 0x....      BL       man_cmd_receive_stop
   1181          		break;
   \   00000AAC   0xE0E1             B        ??man_net_main_173
   \   00000AAE   0xBF00             Nop      
   \                     ??man_net_main_175:
   \   00000AB0   0x40800006         DC32     0x40800006
   \   00000AB4   0x00002710         DC32     0x2710
   \   00000AB8   0x40800014         DC32     0x40800014
   \   00000ABC   0x........         DC32     man_net_work
   1182          
   1183          	case MAN_NET_SEQ_CMD_STOP:			// HTTP server機能停止
   1184          		break;
   \                     ??man_net_main_153: (+1)
   \   00000AC0   0xE0D7             B        ??man_net_main_173
   1185          	case MAN_NET_SEQ_CMD_STOP_OK:		// HTTP server機能停止完了
   1186          		man_net_work.net_sts &= ~MAN_NET_STS_SERVER;		// SERVER close完了
   \                     ??man_net_main_152: (+1)
   \   00000AC2   0x487E             LDR      R0,??man_net_main_192+0x18
   \   00000AC4   0x6880             LDR      R0,[R0, #+8]
   \   00000AC6   0x2108             MOVS     R1,#+8
   \   00000AC8   0x4388             BICS     R0,R0,R1
   \   00000ACA   0x497C             LDR      R1,??man_net_main_192+0x18
   \   00000ACC   0x6088             STR      R0,[R1, #+8]
   1187          		man_net_set_sequense(MAN_NET_SEQ_RPT_STOP);
   \   00000ACE   0x2030             MOVS     R0,#+48
   \   00000AD0   0x.... 0x....      BL       man_net_set_sequense
   1188          		ret = man_rpt_req_udp_stop(MAN_NET_SEQ_RPT_STOP, man_net_req_callback);
   \   00000AD4   0x4974             LDR      R1,??man_net_main_192+0x4
   \   00000AD6   0x2030             MOVS     R0,#+48
   \   00000AD8   0x.... 0x....      BL       man_rpt_req_udp_stop
   1189          		if (ret < 0) {
   \   00000ADC   0x2800             CMP      R0,#+0
   \   00000ADE   0xD509             BPL      ??man_net_main_199
   1190          			man_net_set_cmd_end();
   \   00000AE0   0x.... 0x....      BL       man_net_set_cmd_end
   1191          			man_error_setting(MAN_ERROR_MAN_NET, man_net_work.resp_cmd.id, man_net_work.resp_cmd.status);
   \   00000AE4   0x4B76             LDR      R3,??man_net_main_192+0x1C  ;; 0x4a7
   \   00000AE6   0x4875             LDR      R0,??man_net_main_192+0x18
   \   00000AE8   0x6AC2             LDR      R2,[R0, #+44]
   \   00000AEA   0x4874             LDR      R0,??man_net_main_192+0x18
   \   00000AEC   0x6A81             LDR      R1,[R0, #+40]
   \   00000AEE   0x2014             MOVS     R0,#+20
   \   00000AF0   0x.... 0x....      BL       man_error_set
   1192          		}
   1193          		break;
   \                     ??man_net_main_199: (+1)
   \   00000AF4   0xE0BD             B        ??man_net_main_173
   1194          	case MAN_NET_SEQ_CMD_STOP_NG:		// HTTP server機能停止異常
   1195          		// 失敗をログに残す
   1196          		man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, 0);
   \                     ??man_net_main_155: (+1)
   \   00000AF6   0x4B73             LDR      R3,??man_net_main_192+0x20  ;; 0x4ac
   \   00000AF8   0x2200             MOVS     R2,#+0
   \   00000AFA   0x4870             LDR      R0,??man_net_main_192+0x18
   \   00000AFC   0x7C01             LDRB     R1,[R0, #+16]
   \   00000AFE   0x2014             MOVS     R0,#+20
   \   00000B00   0x.... 0x....      BL       man_error_set
   1197          		// RESET処理後に再開する
   1198          		man_net_set_sequense(MAN_NET_SEQ_RESET_REQ);
   \   00000B04   0x2005             MOVS     R0,#+5
   \   00000B06   0x.... 0x....      BL       man_net_set_sequense
   1199          		break;
   \   00000B0A   0xE0B2             B        ??man_net_main_173
   1200          
   1201          	case MAN_NET_SEQ_RPT_STOP:			// レポート機能停止
   1202          		break;
   \                     ??man_net_main_154: (+1)
   \   00000B0C   0xE0B1             B        ??man_net_main_173
   1203          	case MAN_NET_SEQ_RPT_STOP_OK:		// レポート機能停止完了
   1204          		man_net_work.net_sts &= ~MAN_NET_STS_UDP;		// UDP close完了
   \                     ??man_net_main_157: (+1)
   \   00000B0E   0x486B             LDR      R0,??man_net_main_192+0x18
   \   00000B10   0x6880             LDR      R0,[R0, #+8]
   \   00000B12   0x2102             MOVS     R1,#+2
   \   00000B14   0x4388             BICS     R0,R0,R1
   \   00000B16   0x4969             LDR      R1,??man_net_main_192+0x18
   \   00000B18   0x6088             STR      R0,[R1, #+8]
   1205          		man_net_set_sequense(MAN_NET_SEQ_MSG_STOP);
   \   00000B1A   0x2033             MOVS     R0,#+51
   \   00000B1C   0x.... 0x....      BL       man_net_set_sequense
   1206          		ret = man_msg_req_stop(MAN_NET_SEQ_MSG_STOP, man_net_req_callback);
   \   00000B20   0x4961             LDR      R1,??man_net_main_192+0x4
   \   00000B22   0x2033             MOVS     R0,#+51
   \   00000B24   0x.... 0x....      BL       man_msg_req_stop
   1207          		if (ret < 0) {
   \   00000B28   0x2800             CMP      R0,#+0
   \   00000B2A   0xD509             BPL      ??man_net_main_200
   1208          			man_net_set_cmd_end();
   \   00000B2C   0x.... 0x....      BL       man_net_set_cmd_end
   1209          			man_error_setting(MAN_ERROR_MAN_NET, man_net_work.resp_cmd.id, man_net_work.resp_cmd.status);
   \   00000B30   0x4B65             LDR      R3,??man_net_main_192+0x24  ;; 0x4b9
   \   00000B32   0x4862             LDR      R0,??man_net_main_192+0x18
   \   00000B34   0x6AC2             LDR      R2,[R0, #+44]
   \   00000B36   0x4861             LDR      R0,??man_net_main_192+0x18
   \   00000B38   0x6A81             LDR      R1,[R0, #+40]
   \   00000B3A   0x2014             MOVS     R0,#+20
   \   00000B3C   0x.... 0x....      BL       man_error_set
   1210          		}
   1211          		break;
   \                     ??man_net_main_200: (+1)
   \   00000B40   0xE097             B        ??man_net_main_173
   1212          	case MAN_NET_SEQ_RPT_STOP_NG:		// レポート機能停止異常
   1213          		man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, 0);
   \                     ??man_net_main_156: (+1)
   \   00000B42   0x4B62             LDR      R3,??man_net_main_192+0x28  ;; 0x4bd
   \   00000B44   0x2200             MOVS     R2,#+0
   \   00000B46   0x485D             LDR      R0,??man_net_main_192+0x18
   \   00000B48   0x7C01             LDRB     R1,[R0, #+16]
   \   00000B4A   0x2014             MOVS     R0,#+20
   \   00000B4C   0x.... 0x....      BL       man_error_set
   1214          		// RESET処理後に再開する
   1215          		man_net_set_sequense(MAN_NET_SEQ_RESET_REQ);
   \   00000B50   0x2005             MOVS     R0,#+5
   \   00000B52   0x.... 0x....      BL       man_net_set_sequense
   1216          		break;
   \   00000B56   0xE08C             B        ??man_net_main_173
   1217          
   1218          	case MAN_NET_SEQ_MSG_STOP:			// メッセージ機能停止
   1219          		break;
   \                     ??man_net_main_159: (+1)
   \   00000B58   0xE08B             B        ??man_net_main_173
   1220          	case MAN_NET_SEQ_MSG_STOP_OK:		// メッセージ機能停止完了
   1221          		man_net_work.net_sts &= ~MAN_NET_STS_CLIENT;		// CLIENT close完了
   \                     ??man_net_main_158: (+1)
   \   00000B5A   0x4858             LDR      R0,??man_net_main_192+0x18
   \   00000B5C   0x6880             LDR      R0,[R0, #+8]
   \   00000B5E   0x2104             MOVS     R1,#+4
   \   00000B60   0x4388             BICS     R0,R0,R1
   \   00000B62   0x4956             LDR      R1,??man_net_main_192+0x18
   \   00000B64   0x6088             STR      R0,[R1, #+8]
   1222          		man_net_set_sequense(MAN_NET_SEQ_LTE_STOP);
   \   00000B66   0x2036             MOVS     R0,#+54
   \   00000B68   0x.... 0x....      BL       man_net_set_sequense
   1223          		ret = man_lte_req_stop(MAN_NET_SEQ_LTE_STOP, man_net_req_callback);
   \   00000B6C   0x494E             LDR      R1,??man_net_main_192+0x4
   \   00000B6E   0x2036             MOVS     R0,#+54
   \   00000B70   0x.... 0x....      BL       man_lte_req_stop
   1224          		if (ret < 0) {
   \   00000B74   0x2800             CMP      R0,#+0
   \   00000B76   0xD509             BPL      ??man_net_main_201
   1225          			man_net_set_cmd_end();
   \   00000B78   0x.... 0x....      BL       man_net_set_cmd_end
   1226          			man_error_setting(MAN_ERROR_MAN_NET, man_net_work.resp_cmd.id, man_net_work.resp_cmd.status);
   \   00000B7C   0x4B54             LDR      R3,??man_net_main_192+0x2C  ;; 0x4ca
   \   00000B7E   0x484F             LDR      R0,??man_net_main_192+0x18
   \   00000B80   0x6AC2             LDR      R2,[R0, #+44]
   \   00000B82   0x484E             LDR      R0,??man_net_main_192+0x18
   \   00000B84   0x6A81             LDR      R1,[R0, #+40]
   \   00000B86   0x2014             MOVS     R0,#+20
   \   00000B88   0x.... 0x....      BL       man_error_set
   1227          		}
   1228          		break;
   \                     ??man_net_main_201: (+1)
   \   00000B8C   0xE071             B        ??man_net_main_173
   1229          
   1230          	case MAN_NET_SEQ_MSG_STOP_NG:		// メッセージ機能停止異常
   1231          		man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, 0);
   \                     ??man_net_main_161: (+1)
   \   00000B8E   0x4B51             LDR      R3,??man_net_main_192+0x30  ;; 0x4cf
   \   00000B90   0x2200             MOVS     R2,#+0
   \   00000B92   0x484A             LDR      R0,??man_net_main_192+0x18
   \   00000B94   0x7C01             LDRB     R1,[R0, #+16]
   \   00000B96   0x2014             MOVS     R0,#+20
   \   00000B98   0x.... 0x....      BL       man_error_set
   1232          		// RESET処理後に再開する
   1233          		man_net_set_sequense(MAN_NET_SEQ_RESET_REQ);
   \   00000B9C   0x2005             MOVS     R0,#+5
   \   00000B9E   0x.... 0x....      BL       man_net_set_sequense
   1234          		break;
   \   00000BA2   0xE066             B        ??man_net_main_173
   1235          
   1236          	case MAN_NET_SEQ_LTE_STOP:			// NETWORK使用終了
   1237          		break;
   \                     ??man_net_main_160: (+1)
   \   00000BA4   0xE065             B        ??man_net_main_173
   1238          	case MAN_NET_SEQ_LTE_STOP_OK:		// NETWORK使用終了完了
   1239          		man_net_work.net_sts &= ~MAN_NET_STS_LTE;			// LTE close完了
   \                     ??man_net_main_163: (+1)
   \   00000BA6   0x4845             LDR      R0,??man_net_main_192+0x18
   \   00000BA8   0x6880             LDR      R0,[R0, #+8]
   \   00000BAA   0x2101             MOVS     R1,#+1
   \   00000BAC   0x4388             BICS     R0,R0,R1
   \   00000BAE   0x4943             LDR      R1,??man_net_main_192+0x18
   \   00000BB0   0x6088             STR      R0,[R1, #+8]
   1240          		man_net_work.net_state = MAN_NET_STATE_CLOSE;
   \   00000BB2   0x2000             MOVS     R0,#+0
   \   00000BB4   0x4941             LDR      R1,??man_net_main_192+0x18
   \   00000BB6   0x6008             STR      R0,[R1, #+0]
   1241          
   1242          		// スタンバイ遷移時はSTBYコマンドを発行する
   1243          		if (man_net_work.request.req_cmd == MAN_NET_REQ_CMD_STBY) {
   \   00000BB8   0x4840             LDR      R0,??man_net_main_192+0x18
   \   00000BBA   0x7D00             LDRB     R0,[R0, #+20]
   \   00000BBC   0x2803             CMP      R0,#+3
   \   00000BBE   0xD103             BNE      ??man_net_main_202
   1244          			man_net_set_sequense(MAN_NET_SEQ_LTE_STBY_REQ);
   \   00000BC0   0x2039             MOVS     R0,#+57
   \   00000BC2   0x.... 0x....      BL       man_net_set_sequense
   \   00000BC6   0xE00C             B        ??man_net_main_203
   1245          		}
   1246          		// POWER OFF遷移時はOFFコマンドを発行する
   1247          		else if (man_net_work.request.req_cmd == MAN_NET_REQ_CMD_OFF) {
   \                     ??man_net_main_202: (+1)
   \   00000BC8   0x483C             LDR      R0,??man_net_main_192+0x18
   \   00000BCA   0x7D00             LDRB     R0,[R0, #+20]
   \   00000BCC   0x2804             CMP      R0,#+4
   \   00000BCE   0xD103             BNE      ??man_net_main_204
   1248          			man_net_set_sequense(MAN_NET_SEQ_LTE_OFF_REQ);
   \   00000BD0   0x2040             MOVS     R0,#+64
   \   00000BD2   0x.... 0x....      BL       man_net_set_sequense
   \   00000BD6   0xE004             B        ??man_net_main_203
   1249          		}
   1250          		else {
   1251          			man_net_set_cmd_end();
   \                     ??man_net_main_204: (+1)
   \   00000BD8   0x.... 0x....      BL       man_net_set_cmd_end
   1252          			// CLOSE状態を通知
   1253          			man_net_noti_callback(MAN_NET_NOTI_NOW_CLOSE);
   \   00000BDC   0x2000             MOVS     R0,#+0
   \   00000BDE   0x.... 0x....      BL       man_net_noti_callback
   1254          		}
   1255          		break;
   \                     ??man_net_main_203: (+1)
   \   00000BE2   0xE046             B        ??man_net_main_173
   1256          	case MAN_NET_SEQ_LTE_STOP_NG:		// NETWORK使用終了異常
   1257          		man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, 0);
   \                     ??man_net_main_162: (+1)
   \   00000BE4   0x4B3C             LDR      R3,??man_net_main_192+0x34  ;; 0x4e9
   \   00000BE6   0x2200             MOVS     R2,#+0
   \   00000BE8   0x4834             LDR      R0,??man_net_main_192+0x18
   \   00000BEA   0x7C01             LDRB     R1,[R0, #+16]
   \   00000BEC   0x2014             MOVS     R0,#+20
   \   00000BEE   0x.... 0x....      BL       man_error_set
   1258          		// RESET処理後に再開する
   1259          		man_net_set_sequense(MAN_NET_SEQ_RESET_REQ);
   \   00000BF2   0x2005             MOVS     R0,#+5
   \   00000BF4   0x.... 0x....      BL       man_net_set_sequense
   1260          		break;
   \   00000BF8   0xE03B             B        ??man_net_main_173
   1261          
   1262          
   1263          	// #############
   1264          	// STBY遷移
   1265          	// #############
   1266          	case MAN_NET_SEQ_LTE_STBY_REQ:
   1267          		man_net_set_sequense(MAN_NET_SEQ_LTE_STBY);
   \                     ??man_net_main_165: (+1)
   \   00000BFA   0x203A             MOVS     R0,#+58
   \   00000BFC   0x.... 0x....      BL       man_net_set_sequense
   1268          		man_lte_req_stby(MAN_NET_SEQ_LTE_STBY, man_net_req_callback);
   \   00000C00   0x4929             LDR      R1,??man_net_main_192+0x4
   \   00000C02   0x203A             MOVS     R0,#+58
   \   00000C04   0x.... 0x....      BL       man_lte_req_stby
   1269          		break;
   \   00000C08   0xE033             B        ??man_net_main_173
   1270          	case MAN_NET_SEQ_LTE_STBY:				// NETWORK STBY
   1271          		break;
   \                     ??man_net_main_164: (+1)
   \   00000C0A   0xE032             B        ??man_net_main_173
   1272          	case MAN_NET_SEQ_LTE_STBY_OK:			// NETWORK STBY完了
   1273          	case MAN_NET_SEQ_LTE_STBY_NG:			// NETWORK STBY異常
   1274          		man_net_work.net_state = MAN_NET_STATE_STBY;
   \                     ??man_net_main_166: (+1)
   \   00000C0C   0x2002             MOVS     R0,#+2
   \   00000C0E   0x492B             LDR      R1,??man_net_main_192+0x18
   \   00000C10   0x6008             STR      R0,[R1, #+0]
   1275          		man_net_set_cmd_end();
   \   00000C12   0x.... 0x....      BL       man_net_set_cmd_end
   1276          		// STBY状態を通知
   1277          		man_net_noti_callback(MAN_NET_NOTI_NOW_STBY);
   \   00000C16   0x2006             MOVS     R0,#+6
   \   00000C18   0x.... 0x....      BL       man_net_noti_callback
   1278          		break;
   \   00000C1C   0xE029             B        ??man_net_main_173
   1279          
   1280          
   1281          
   1282          	// 初期化処理
   1283          	case MAN_NET_SEQ_CLOSE_WAIT:
   1284          		break;
   \                     ??man_net_main_168: (+1)
   \   00000C1E   0xE028             B        ??man_net_main_173
   1285          	case MAN_NET_SEQ_CLOSE_WAIT_OK:
   1286          	case MAN_NET_SEQ_CLOSE_WAIT_NG:
   1287          		// 準備完了処理から再開する
   1288          		man_net_set_sequense(MAN_NET_SEQ_LTE_READY_OK);
   \                     ??man_net_main_167: (+1)
   \   00000C20   0x2019             MOVS     R0,#+25
   \   00000C22   0x.... 0x....      BL       man_net_set_sequense
   1289          		break;
   \   00000C26   0xE024             B        ??man_net_main_173
   1290          
   1291          
   1292          	// #################
   1293          	// POWER OFF開始処理
   1294          	// #################
   1295          	case MAN_NET_SEQ_LTE_OFF_REQ:
   1296          		man_net_set_sequense(MAN_NET_SEQ_LTE_OFF);
   \                     ??man_net_main_169: (+1)
   \   00000C28   0x2041             MOVS     R0,#+65
   \   00000C2A   0x.... 0x....      BL       man_net_set_sequense
   1297          		man_lte_req_off(MAN_NET_SEQ_LTE_OFF, man_net_req_callback);
   \   00000C2E   0x491E             LDR      R1,??man_net_main_192+0x4
   \   00000C30   0x2041             MOVS     R0,#+65
   \   00000C32   0x.... 0x....      BL       man_lte_req_off
   1298          		break;
   \   00000C36   0xE01C             B        ??man_net_main_173
   \                     ??man_net_main_187:
   \   00000C38   0x4080001B         DC32     0x4080001b
   \   00000C3C   0x........         DC32     man_net_work+0x3C
   1299          	case MAN_NET_SEQ_LTE_OFF:
   1300          		break;
   \                     ??man_net_main_171: (+1)
   \   00000C40   0xE017             B        ??man_net_main_173
   1301          	case MAN_NET_SEQ_LTE_OFF_OK:
   1302          	case MAN_NET_SEQ_LTE_OFF_NG:
   1303          		man_net_set_cmd_end();
   \                     ??man_net_main_170: (+1)
   \   00000C42   0x.... 0x....      BL       man_net_set_cmd_end
   1304          		// POWER OFF状態を通知
   1305          		man_net_noti_callback(MAN_NET_NOTI_NOW_OFF);
   \   00000C46   0x2009             MOVS     R0,#+9
   \   00000C48   0x.... 0x....      BL       man_net_noti_callback
   1306          		// 内部情報の初期化
   1307          		man_net_work.net_sts = 0;
   \   00000C4C   0x2000             MOVS     R0,#+0
   \   00000C4E   0x491B             LDR      R1,??man_net_main_192+0x18
   \   00000C50   0x6088             STR      R0,[R1, #+8]
   1308          		man_net_work.net_state = MAN_NET_STATE_OFF;
   \   00000C52   0x2003             MOVS     R0,#+3
   \   00000C54   0x4919             LDR      R1,??man_net_main_192+0x18
   \   00000C56   0x6008             STR      R0,[R1, #+0]
   1309          		man_net_work.status = 0;
   \   00000C58   0x2000             MOVS     R0,#+0
   \   00000C5A   0x4918             LDR      R1,??man_net_main_192+0x18
   \   00000C5C   0x60C8             STR      R0,[R1, #+12]
   1310          		break;
   \   00000C5E   0xE008             B        ??man_net_main_173
   1311          
   1312          
   1313          
   1314          	default:
   1315          		man_error_setting(MAN_ERROR_MAN_NET, man_net_work.sequense, 0);
   \                     ??man_net_main_172: (+1)
   \   00000C60   0x4BAE             LDR      R3,??man_net_main_205  ;; 0x523
   \   00000C62   0x2200             MOVS     R2,#+0
   \   00000C64   0x4815             LDR      R0,??man_net_main_192+0x18
   \   00000C66   0x7C01             LDRB     R1,[R0, #+16]
   \   00000C68   0x2014             MOVS     R0,#+20
   \   00000C6A   0x.... 0x....      BL       man_error_set
   1316          		man_net_set_cmd_end();
   \   00000C6E   0x.... 0x....      BL       man_net_set_cmd_end
   1317          		break;
   1318          	}
   1319          
   1320          
   1321          
   1322          	// ***************************
   1323          	// 状態通知時の処理
   1324          	// ***************************
   1325          	if (man_net_work.request.req_state != MAN_NET_REQ_STATE_NON) {
   \                     ??man_net_main_173: (+1)
   \   00000C72   0x4812             LDR      R0,??man_net_main_192+0x18
   \   00000C74   0x6A00             LDR      R0,[R0, #+32]
   \   00000C76   0x2800             CMP      R0,#+0
   \   00000C78   0xD100             BNE      .+4
   \   00000C7A   0xE196             B        ??man_net_main_206
   1326          
   1327          		switch (man_net_work.request.req_state) {
   \   00000C7C   0x480F             LDR      R0,??man_net_main_192+0x18
   \   00000C7E   0x6A00             LDR      R0,[R0, #+32]
   \   00000C80   0x2801             CMP      R0,#+1
   \   00000C82   0xD02B             BEQ      ??man_net_main_207
   \   00000C84   0x2804             CMP      R0,#+4
   \   00000C86   0xD100             BNE      .+4
   \   00000C88   0xE100             B        ??man_net_main_208
   \   00000C8A   0x2805             CMP      R0,#+5
   \   00000C8C   0xD100             BNE      .+4
   \   00000C8E   0xE0E9             B        ??man_net_main_209
   \   00000C90   0x280B             CMP      R0,#+11
   \   00000C92   0xD100             BNE      .+4
   \   00000C94   0xE110             B        ??man_net_main_210
   \   00000C96   0x280C             CMP      R0,#+12
   \   00000C98   0xD100             BNE      .+4
   \   00000C9A   0xE15D             B        ??man_net_main_211
   \   00000C9C   0x280D             CMP      R0,#+13
   \   00000C9E   0xD100             BNE      .+4
   \   00000CA0   0xE16D             B        ??man_net_main_212
   \   00000CA2   0xE17F             B        ??man_net_main_213
   \                     ??man_net_main_192:
   \   00000CA4   0x40800022         DC32     0x40800022
   \   00000CA8   0x........         DC32     man_net_req_callback
   \   00000CAC   0x00000466         DC32     0x466
   \   00000CB0   0x00000475         DC32     0x475
   \   00000CB4   0x00000485         DC32     0x485
   \   00000CB8   0x0000048A         DC32     0x48a
   \   00000CBC   0x........         DC32     man_net_work
   \   00000CC0   0x000004A7         DC32     0x4a7
   \   00000CC4   0x000004AC         DC32     0x4ac
   \   00000CC8   0x000004B9         DC32     0x4b9
   \   00000CCC   0x000004BD         DC32     0x4bd
   \   00000CD0   0x000004CA         DC32     0x4ca
   \   00000CD4   0x000004CF         DC32     0x4cf
   \   00000CD8   0x000004E9         DC32     0x4e9
   1328          		case MAN_NET_REQ_STATE_RESET:
   1329          			// リセットの発生を通知する
   1330          			man_lte_req_state(MAN_LTE_STATE_RESET);
   \                     ??man_net_main_207: (+1)
   \   00000CDC   0x2001             MOVS     R0,#+1
   \   00000CDE   0x.... 0x....      BL       man_lte_req_state
   1331          			man_cmd_req_state(MAN_CMD_STATE_RESET);
   \   00000CE2   0x2001             MOVS     R0,#+1
   \   00000CE4   0x.... 0x....      BL       man_cmd_req_state
   1332          			man_msg_req_state(MAN_MSG_STATE_RESET);
   \   00000CE8   0x2001             MOVS     R0,#+1
   \   00000CEA   0x.... 0x....      BL       man_msg_req_state
   1333          			man_ota_req_state(MAN_OTA_STATE_RESET);
   \   00000CEE   0x2001             MOVS     R0,#+1
   \   00000CF0   0x.... 0x....      BL       man_ota_req_state
   1334          			man_rpt_req_state(MAN_RPT_STATE_RESET);
   \   00000CF4   0x2001             MOVS     R0,#+1
   \   00000CF6   0x.... 0x....      BL       man_rpt_req_state
   1335          			
   1336          			// 要求を発行している場合は応答が無いため、異常扱いとして進める
   1337          			switch (man_net_work.sequense) {
   \   00000CFA   0x....             LDR      R0,??DataTable7
   \   00000CFC   0x7C00             LDRB     R0,[R0, #+16]
   \   00000CFE   0x2802             CMP      R0,#+2
   \   00000D00   0xD01A             BEQ      ??man_net_main_214
   \   00000D02   0x2809             CMP      R0,#+9
   \   00000D04   0xD01C             BEQ      ??man_net_main_215
   \   00000D06   0x280D             CMP      R0,#+13
   \   00000D08   0xD01E             BEQ      ??man_net_main_216
   \   00000D0A   0x2811             CMP      R0,#+17
   \   00000D0C   0xD020             BEQ      ??man_net_main_217
   \   00000D0E   0x2818             CMP      R0,#+24
   \   00000D10   0xD022             BEQ      ??man_net_main_218
   \   00000D12   0x281F             CMP      R0,#+31
   \   00000D14   0xD024             BEQ      ??man_net_main_219
   \   00000D16   0x2826             CMP      R0,#+38
   \   00000D18   0xD026             BEQ      ??man_net_main_220
   \   00000D1A   0x2829             CMP      R0,#+41
   \   00000D1C   0xD028             BEQ      ??man_net_main_221
   \   00000D1E   0x282D             CMP      R0,#+45
   \   00000D20   0xD02A             BEQ      ??man_net_main_222
   \   00000D22   0x2830             CMP      R0,#+48
   \   00000D24   0xD02C             BEQ      ??man_net_main_223
   \   00000D26   0x2833             CMP      R0,#+51
   \   00000D28   0xD02E             BEQ      ??man_net_main_224
   \   00000D2A   0x2836             CMP      R0,#+54
   \   00000D2C   0xD030             BEQ      ??man_net_main_225
   \   00000D2E   0x283A             CMP      R0,#+58
   \   00000D30   0xD032             BEQ      ??man_net_main_226
   \   00000D32   0x2841             CMP      R0,#+65
   \   00000D34   0xD034             BEQ      ??man_net_main_227
   \   00000D36   0xE037             B        ??man_net_main_228
   1338          			case MAN_NET_SEQ_WUP:
   1339          				man_net_set_sequense(MAN_NET_SEQ_WUP_NG);
   \                     ??man_net_main_214: (+1)
   \   00000D38   0x2004             MOVS     R0,#+4
   \   00000D3A   0x.... 0x....      BL       man_net_set_sequense
   1340          				break;
   \   00000D3E   0xE033             B        ??man_net_main_229
   1341          			case MAN_NET_SEQ_RESET:
   1342          				man_net_set_sequense(MAN_NET_SEQ_RESET_NG);
   \                     ??man_net_main_215: (+1)
   \   00000D40   0x200B             MOVS     R0,#+11
   \   00000D42   0x.... 0x....      BL       man_net_set_sequense
   1343          				break;
   \   00000D46   0xE02F             B        ??man_net_main_229
   1344          			case MAN_NET_SEQ_LTE_INIT:
   1345          				man_net_set_sequense(MAN_NET_SEQ_LTE_INIT_NG);
   \                     ??man_net_main_216: (+1)
   \   00000D48   0x200F             MOVS     R0,#+15
   \   00000D4A   0x.... 0x....      BL       man_net_set_sequense
   1346          				break;
   \   00000D4E   0xE02B             B        ??man_net_main_229
   1347          			case MAN_NET_SEQ_LTE_INIT_NG_WKUP:
   1348          				man_net_set_sequense(MAN_NET_SEQ_LTE_INIT_NG_WKUP_NG);
   \                     ??man_net_main_217: (+1)
   \   00000D50   0x2013             MOVS     R0,#+19
   \   00000D52   0x.... 0x....      BL       man_net_set_sequense
   1349          				break;
   \   00000D56   0xE027             B        ??man_net_main_229
   1350          			case MAN_NET_SEQ_LTE_READY:
   1351          				man_net_set_sequense(MAN_NET_SEQ_LTE_READY_NG);
   \                     ??man_net_main_218: (+1)
   \   00000D58   0x201A             MOVS     R0,#+26
   \   00000D5A   0x.... 0x....      BL       man_net_set_sequense
   1352          				break;
   \   00000D5E   0xE023             B        ??man_net_main_229
   1353          			case MAN_NET_SEQ_LTE_START:
   1354          				man_net_set_sequense(MAN_NET_SEQ_LTE_START_NG);
   \                     ??man_net_main_219: (+1)
   \   00000D60   0x2021             MOVS     R0,#+33
   \   00000D62   0x.... 0x....      BL       man_net_set_sequense
   1355          				break;
   \   00000D66   0xE01F             B        ??man_net_main_229
   1356          			case MAN_NET_SEQ_MSG_START:
   1357          				man_net_set_sequense(MAN_NET_SEQ_MSG_START_NG);
   \                     ??man_net_main_220: (+1)
   \   00000D68   0x2028             MOVS     R0,#+40
   \   00000D6A   0x.... 0x....      BL       man_net_set_sequense
   1358          				break;
   \   00000D6E   0xE01B             B        ??man_net_main_229
   1359          			case MAN_NET_SEQ_CMD_START:
   1360          				man_net_set_sequense(MAN_NET_SEQ_CMD_START_NG);
   \                     ??man_net_main_221: (+1)
   \   00000D70   0x202B             MOVS     R0,#+43
   \   00000D72   0x.... 0x....      BL       man_net_set_sequense
   1361          				break;
   \   00000D76   0xE017             B        ??man_net_main_229
   1362          			case MAN_NET_SEQ_CMD_STOP:
   1363          				man_net_set_sequense(MAN_NET_SEQ_CMD_STOP_NG);
   \                     ??man_net_main_222: (+1)
   \   00000D78   0x202F             MOVS     R0,#+47
   \   00000D7A   0x.... 0x....      BL       man_net_set_sequense
   1364          				break;
   \   00000D7E   0xE013             B        ??man_net_main_229
   1365          			case MAN_NET_SEQ_RPT_STOP:
   1366          				man_net_set_sequense(MAN_NET_SEQ_RPT_STOP_NG);
   \                     ??man_net_main_223: (+1)
   \   00000D80   0x2032             MOVS     R0,#+50
   \   00000D82   0x.... 0x....      BL       man_net_set_sequense
   1367          				break;
   \   00000D86   0xE00F             B        ??man_net_main_229
   1368          			case MAN_NET_SEQ_MSG_STOP:
   1369          				man_net_set_sequense(MAN_NET_SEQ_MSG_STOP_NG);
   \                     ??man_net_main_224: (+1)
   \   00000D88   0x2035             MOVS     R0,#+53
   \   00000D8A   0x.... 0x....      BL       man_net_set_sequense
   1370          				break;
   \   00000D8E   0xE00B             B        ??man_net_main_229
   1371          			case MAN_NET_SEQ_LTE_STOP:
   1372          				man_net_set_sequense(MAN_NET_SEQ_LTE_STOP_NG);
   \                     ??man_net_main_225: (+1)
   \   00000D90   0x2038             MOVS     R0,#+56
   \   00000D92   0x.... 0x....      BL       man_net_set_sequense
   1373          				break;
   \   00000D96   0xE007             B        ??man_net_main_229
   1374          			case MAN_NET_SEQ_LTE_STBY:
   1375          				man_net_set_sequense(MAN_NET_SEQ_LTE_STBY_NG);
   \                     ??man_net_main_226: (+1)
   \   00000D98   0x203C             MOVS     R0,#+60
   \   00000D9A   0x.... 0x....      BL       man_net_set_sequense
   1376          				break;
   \   00000D9E   0xE003             B        ??man_net_main_229
   1377          			case MAN_NET_SEQ_LTE_OFF:
   1378          				man_net_set_sequense(MAN_NET_SEQ_LTE_OFF_NG);
   \                     ??man_net_main_227: (+1)
   \   00000DA0   0x2043             MOVS     R0,#+67
   \   00000DA2   0x.... 0x....      BL       man_net_set_sequense
   1379          				break;
   \   00000DA6   0xE7FF             B        ??man_net_main_229
   1380          			default:
   1381          				break;
   1382          			}
   1383          
   1384          
   1385          
   1386          			switch (man_net_work.request.req_cmd) {
   \                     ??man_net_main_228: (+1)
   \                     ??man_net_main_229: (+1)
   \   00000DA8   0x....             LDR      R0,??DataTable7
   \   00000DAA   0x7D00             LDRB     R0,[R0, #+20]
   \   00000DAC   0x2800             CMP      R0,#+0
   \   00000DAE   0xD006             BEQ      ??man_net_main_230
   \   00000DB0   0x2802             CMP      R0,#+2
   \   00000DB2   0xD040             BEQ      ??man_net_main_231
   \   00000DB4   0xD31C             BCC      ??man_net_main_232
   \   00000DB6   0x2804             CMP      R0,#+4
   \   00000DB8   0xD046             BEQ      ??man_net_main_233
   \   00000DBA   0xD33D             BCC      ??man_net_main_234
   \   00000DBC   0xE045             B        ??man_net_main_235
   1387          			case MAN_NET_REQ_CMD_READY:
   1388          				// 目標に向かって遷移する
   1389          				switch (man_net_work.request.gole_cmd) {
   \                     ??man_net_main_230: (+1)
   \   00000DBE   0x....             LDR      R0,??DataTable7
   \   00000DC0   0x7F00             LDRB     R0,[R0, #+28]
   \   00000DC2   0x2801             CMP      R0,#+1
   \   00000DC4   0xD006             BEQ      ??man_net_main_236
   \   00000DC6   0xD312             BCC      ??man_net_main_237
   \   00000DC8   0x2803             CMP      R0,#+3
   \   00000DCA   0xD008             BEQ      ??man_net_main_238
   \   00000DCC   0xD306             BCC      ??man_net_main_239
   \   00000DCE   0x2804             CMP      R0,#+4
   \   00000DD0   0xD009             BEQ      ??man_net_main_240
   \   00000DD2   0xE00C             B        ??man_net_main_237
   1390          				case MAN_NET_REQ_CMD_OPEN:
   1391          					// OPEN処理開始
   1392          					man_net_set_sequense(MAN_NET_SEQ_OPEN_REQ);
   \                     ??man_net_main_236: (+1)
   \   00000DD4   0x200C             MOVS     R0,#+12
   \   00000DD6   0x.... 0x....      BL       man_net_set_sequense
   1393          					break;
   \   00000DDA   0xE008             B        ??man_net_main_241
   1394          				case MAN_NET_REQ_CMD_CLOSE:
   1395          					// 何も行わない
   1396          					break;
   \                     ??man_net_main_239: (+1)
   \   00000DDC   0xE007             B        ??man_net_main_241
   1397          				case MAN_NET_REQ_CMD_STBY:
   1398          					// スタンバイ処理開始
   1399          					man_net_set_sequense(MAN_NET_SEQ_LTE_STBY_REQ);
   \                     ??man_net_main_238: (+1)
   \   00000DDE   0x2039             MOVS     R0,#+57
   \   00000DE0   0x.... 0x....      BL       man_net_set_sequense
   1400          					break;
   \   00000DE4   0xE003             B        ??man_net_main_241
   1401          				case MAN_NET_REQ_CMD_OFF:
   1402          					// POWER OFF処理開始
   1403          					man_net_set_sequense(MAN_NET_SEQ_LTE_OFF_REQ);
   \                     ??man_net_main_240: (+1)
   \   00000DE6   0x2040             MOVS     R0,#+64
   \   00000DE8   0x.... 0x....      BL       man_net_set_sequense
   1404          					break;
   \   00000DEC   0xE7FF             B        ??man_net_main_241
   1405          				default:
   1406          					break;
   1407          				}
   1408          				break;
   \                     ??man_net_main_237: (+1)
   \                     ??man_net_main_241: (+1)
   \   00000DEE   0xE02C             B        ??man_net_main_242
   1409          
   1410          			case MAN_NET_REQ_CMD_OPEN:			// NET OPEN
   1411          				// 動作中のタイマを停止させる
   1412          				switch (man_net_work.sequense) {
   \                     ??man_net_main_232: (+1)
   \   00000DF0   0x....             LDR      R0,??DataTable7
   \   00000DF2   0x7C00             LDRB     R0,[R0, #+16]
   \   00000DF4   0x2814             CMP      R0,#+20
   \   00000DF6   0xD006             BEQ      ??man_net_main_243
   \   00000DF8   0x281B             CMP      R0,#+27
   \   00000DFA   0xD009             BEQ      ??man_net_main_244
   \   00000DFC   0x2822             CMP      R0,#+34
   \   00000DFE   0xD00C             BEQ      ??man_net_main_245
   \   00000E00   0x283D             CMP      R0,#+61
   \   00000E02   0xD00F             BEQ      ??man_net_main_246
   \   00000E04   0xE013             B        ??man_net_main_247
   1413          				case MAN_NET_SEQ_LTE_INIT_NG_WAIT:
   1414          					man_timer_cancel_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_LTE_INIT_NG_WAIT, MAN_NET_INIT_RETRY_WAIT);
   \                     ??man_net_main_243: (+1)
   \   00000E06   0x....             LDR      R1,??DataTable11  ;; 0x2710
   \   00000E08   0x....             LDR      R0,??DataTable11_1  ;; 0x40800014
   \   00000E0A   0x.... 0x....      BL       man_timer_cancel_wait
   1415          					break;
   \   00000E0E   0xE00E             B        ??man_net_main_248
   1416          				case MAN_NET_SEQ_LTE_READY_NG_WAIT:
   1417          					man_timer_cancel_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_LTE_READY_NG_WAIT, MAN_NET_READY_RETRY_WAIT);
   \                     ??man_net_main_244: (+1)
   \   00000E10   0x....             LDR      R1,??DataTable11  ;; 0x2710
   \   00000E12   0x....             LDR      R0,??DataTable11_2  ;; 0x4080001b
   \   00000E14   0x.... 0x....      BL       man_timer_cancel_wait
   1418          					break;
   \   00000E18   0xE009             B        ??man_net_main_248
   1419          				case MAN_NET_SEQ_LTE_START_NG_WAIT:
   1420          					man_timer_cancel_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_LTE_START_NG_WAIT, MAN_NET_START_RETRY_WAIT);
   \                     ??man_net_main_245: (+1)
   \   00000E1A   0x....             LDR      R1,??DataTable11  ;; 0x2710
   \   00000E1C   0x....             LDR      R0,??DataTable11_3  ;; 0x40800022
   \   00000E1E   0x.... 0x....      BL       man_timer_cancel_wait
   1421          					break;
   \   00000E22   0xE004             B        ??man_net_main_248
   1422          				case MAN_NET_SEQ_CLOSE_WAIT:
   1423          					man_timer_cancel_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_CLOSE_WAIT, MAN_NET_NET_CLOSE_WAIT);
   \                     ??man_net_main_246: (+1)
   \   00000E24   0x....             LDR      R1,??DataTable11_4  ;; 0x3a98
   \   00000E26   0x....             LDR      R0,??DataTable11_5  ;; 0x4080003d
   \   00000E28   0x.... 0x....      BL       man_timer_cancel_wait
   1424          					break;
   \   00000E2C   0xE7FF             B        ??man_net_main_248
   1425          				default:
   1426          					break;
   1427          				}
   1428          				
   1429          				// OPEN処理開始
   1430          				man_net_set_sequense(MAN_NET_SEQ_OPEN_REQ);
   \                     ??man_net_main_247: (+1)
   \                     ??man_net_main_248: (+1)
   \   00000E2E   0x200C             MOVS     R0,#+12
   \   00000E30   0x.... 0x....      BL       man_net_set_sequense
   1431          				break;
   \   00000E34   0xE009             B        ??man_net_main_242
   1432          			case MAN_NET_REQ_CMD_CLOSE:			// NET CLOSE
   1433          				break;
   \                     ??man_net_main_231: (+1)
   \   00000E36   0xE008             B        ??man_net_main_242
   1434          			case MAN_NET_REQ_CMD_STBY:			// NET STBY
   1435          				if (man_net_work.sequense != MAN_NET_SEQ_READY) {
   \                     ??man_net_main_234: (+1)
   \   00000E38   0x....             LDR      R0,??DataTable7
   \   00000E3A   0x7C00             LDRB     R0,[R0, #+16]
   \   00000E3C   0x2800             CMP      R0,#+0
   \   00000E3E   0xD002             BEQ      ??man_net_main_249
   1436          					man_net_set_sequense(MAN_NET_SEQ_LTE_STBY_REQ);
   \   00000E40   0x2039             MOVS     R0,#+57
   \   00000E42   0x.... 0x....      BL       man_net_set_sequense
   1437          				}
   1438          				break;
   \                     ??man_net_main_249: (+1)
   \   00000E46   0xE000             B        ??man_net_main_242
   1439          			case MAN_NET_REQ_CMD_OFF:
   1440          				break;
   \                     ??man_net_main_233: (+1)
   \   00000E48   0xE7FF             B        ??man_net_main_242
   1441          			default:
   1442          				break;
   1443          			}
   1444          
   1445          			// CLOSE状態とする
   1446          			man_net_work.net_state = MAN_NET_STATE_CLOSE;
   \                     ??man_net_main_235: (+1)
   \                     ??man_net_main_242: (+1)
   \   00000E4A   0x2000             MOVS     R0,#+0
   \   00000E4C   0x....             LDR      R1,??DataTable7
   \   00000E4E   0x6008             STR      R0,[R1, #+0]
   1447          			// 全てがCLOSE状態
   1448          			man_net_work.net_sts = 0;
   \   00000E50   0x2000             MOVS     R0,#+0
   \   00000E52   0x....             LDR      R1,??DataTable7
   \   00000E54   0x6088             STR      R0,[R1, #+8]
   1449          			// NET OPEN時に全ての初期化を行う
   1450          			man_net_work.status = 0;
   \   00000E56   0x2000             MOVS     R0,#+0
   \   00000E58   0x....             LDR      R1,??DataTable7
   \   00000E5A   0x60C8             STR      R0,[R1, #+12]
   1451          			man_net_work.request.req_state = MAN_NET_REQ_STATE_NON;
   \   00000E5C   0x2000             MOVS     R0,#+0
   \   00000E5E   0x....             LDR      R1,??DataTable7
   \   00000E60   0x6208             STR      R0,[R1, #+32]
   1452          			break;
   \   00000E62   0xE0A2             B        ??man_net_main_206
   1453          
   1454          //		case MAN_NET_REQ_STATE_NETCLOSE:
   1455          //			man_net_work.request.req_state = MAN_NET_REQ_STATE_NON;
   1456          //			break;
   1457          //
   1458          //		case MAN_NET_REQ_STATE_NETOPEN:
   1459          //			man_net_work.request.req_state = MAN_NET_REQ_STATE_NON;
   1460          //			break;
   1461          
   1462          		case MAN_NET_REQ_STATE_CSQ_NG:
   1463          			// 圏外状態の場合、NETCLOSE処理を実行する
   1464          			if (man_net_work.sequense == MAN_NET_SEQ_READY) {
   \                     ??man_net_main_209: (+1)
   \   00000E64   0x....             LDR      R0,??DataTable7
   \   00000E66   0x7C00             LDRB     R0,[R0, #+16]
   \   00000E68   0x2800             CMP      R0,#+0
   \   00000E6A   0xD10E             BNE      ??man_net_main_250
   1465          				// 全てがCLOSE状態で無い場合
   1466          				if ( (man_net_work.net_sts & MAN_NET_STS_ALL) != 0 ) {
   \   00000E6C   0x....             LDR      R0,??DataTable7
   \   00000E6E   0x7A00             LDRB     R0,[R0, #+8]
   \   00000E70   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000E72   0x0F00             LSRS     R0,R0,#+28
   \   00000E74   0x2800             CMP      R0,#+0
   \   00000E76   0xD005             BEQ      ??man_net_main_251
   1467          					// CLOSE処理開始
   1468          					man_net_set_sequense(MAN_NET_SEQ_CLOSE_REQ);
   \   00000E78   0x202C             MOVS     R0,#+44
   \   00000E7A   0x.... 0x....      BL       man_net_set_sequense
   1469          					// CLOSE開始を通知
   1470          					man_net_noti_callback(MAN_NET_NOTI_TO_CLOSE);
   \   00000E7E   0x2004             MOVS     R0,#+4
   \   00000E80   0x.... 0x....      BL       man_net_noti_callback
   1471          				}
   1472          				man_net_work.request.req_state = MAN_NET_REQ_STATE_NON;
   \                     ??man_net_main_251: (+1)
   \   00000E84   0x2000             MOVS     R0,#+0
   \   00000E86   0x....             LDR      R1,??DataTable7
   \   00000E88   0x6208             STR      R0,[R1, #+32]
   1473          			}
   1474          			break;
   \                     ??man_net_main_250: (+1)
   \   00000E8A   0xE08E             B        ??man_net_main_206
   1475          
   1476          		case MAN_NET_REQ_STATE_CSQ_OK:
   1477          			// 圏内状態に復帰の場合、NETOPENE処理を実行する
   1478          			if (man_net_work.sequense == MAN_NET_SEQ_READY) {
   \                     ??man_net_main_208: (+1)
   \   00000E8C   0x....             LDR      R0,??DataTable7
   \   00000E8E   0x7C00             LDRB     R0,[R0, #+16]
   \   00000E90   0x2800             CMP      R0,#+0
   \   00000E92   0xD110             BNE      ??man_net_main_252
   1479          
   1480          				// 元の状態がNETOPENの場合
   1481          				if ( (man_net_work.net_state == MAN_NET_STATE_CLOSE) && (man_net_work.gole_state == MAN_NET_STATE_OPEN) ) {
   \   00000E94   0x....             LDR      R0,??DataTable7
   \   00000E96   0x6800             LDR      R0,[R0, #+0]
   \   00000E98   0x2800             CMP      R0,#+0
   \   00000E9A   0xD109             BNE      ??man_net_main_253
   \   00000E9C   0x....             LDR      R0,??DataTable7
   \   00000E9E   0x6840             LDR      R0,[R0, #+4]
   \   00000EA0   0x2801             CMP      R0,#+1
   \   00000EA2   0xD105             BNE      ??man_net_main_253
   1482          					// OPEN処理開始
   1483          					man_net_set_sequense(MAN_NET_SEQ_OPEN_REQ);
   \   00000EA4   0x200C             MOVS     R0,#+12
   \   00000EA6   0x.... 0x....      BL       man_net_set_sequense
   1484          					// OPEN開始を通知
   1485          					man_net_noti_callback(MAN_NET_NOTI_TO_OPEN);
   \   00000EAA   0x2001             MOVS     R0,#+1
   \   00000EAC   0x.... 0x....      BL       man_net_noti_callback
   1486          				}
   1487          				man_net_work.request.req_state = MAN_NET_REQ_STATE_NON;
   \                     ??man_net_main_253: (+1)
   \   00000EB0   0x2000             MOVS     R0,#+0
   \   00000EB2   0x....             LDR      R1,??DataTable7
   \   00000EB4   0x6208             STR      R0,[R1, #+32]
   1488          			}
   1489          			break;
   \                     ??man_net_main_252: (+1)
   \   00000EB6   0xE078             B        ??man_net_main_206
   1490          
   1491          		case MAN_NET_REQ_STATE_NET_CLOSE:
   1492          			// NET CLOSEの発生を通知する
   1493          			man_lte_req_state(MAN_LTE_STATE_NET_CLOSE);
   \                     ??man_net_main_210: (+1)
   \   00000EB8   0x200B             MOVS     R0,#+11
   \   00000EBA   0x.... 0x....      BL       man_lte_req_state
   1494          			man_cmd_req_state(MAN_CMD_STATE_NET_CLOSE);
   \   00000EBE   0x200B             MOVS     R0,#+11
   \   00000EC0   0x.... 0x....      BL       man_cmd_req_state
   1495          			man_msg_req_state(MAN_MSG_STATE_NET_CLOSE);
   \   00000EC4   0x200B             MOVS     R0,#+11
   \   00000EC6   0x.... 0x....      BL       man_msg_req_state
   1496          			man_ota_req_state(MAN_OTA_STATE_NET_CLOSE);
   \   00000ECA   0x200B             MOVS     R0,#+11
   \   00000ECC   0x.... 0x....      BL       man_ota_req_state
   1497          			man_rpt_req_state(MAN_RPT_STATE_NET_CLOSE);
   \   00000ED0   0x200B             MOVS     R0,#+11
   \   00000ED2   0x.... 0x....      BL       man_rpt_req_state
   1498          
   1499          			if (man_net_work.request.req_cmd == MAN_NET_REQ_CMD_OPEN) {
   \   00000ED6   0x....             LDR      R0,??DataTable7
   \   00000ED8   0x7D00             LDRB     R0,[R0, #+20]
   \   00000EDA   0x2801             CMP      R0,#+1
   \   00000EDC   0xD120             BNE      ??man_net_main_254
   1500          				// 動作中のタイマを停止させる
   1501          				switch (man_net_work.sequense) {
   \   00000EDE   0x....             LDR      R0,??DataTable7
   \   00000EE0   0x7C00             LDRB     R0,[R0, #+16]
   \   00000EE2   0x2814             CMP      R0,#+20
   \   00000EE4   0xD006             BEQ      ??man_net_main_255
   \   00000EE6   0x281B             CMP      R0,#+27
   \   00000EE8   0xD009             BEQ      ??man_net_main_256
   \   00000EEA   0x2822             CMP      R0,#+34
   \   00000EEC   0xD00C             BEQ      ??man_net_main_257
   \   00000EEE   0x283D             CMP      R0,#+61
   \   00000EF0   0xD00F             BEQ      ??man_net_main_258
   \   00000EF2   0xE015             B        ??man_net_main_259
   1502          				case MAN_NET_SEQ_LTE_INIT_NG_WAIT:
   1503          					man_timer_cancel_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_LTE_INIT_NG_WAIT, MAN_NET_INIT_RETRY_WAIT);
   \                     ??man_net_main_255: (+1)
   \   00000EF4   0x....             LDR      R1,??DataTable11  ;; 0x2710
   \   00000EF6   0x....             LDR      R0,??DataTable11_1  ;; 0x40800014
   \   00000EF8   0x.... 0x....      BL       man_timer_cancel_wait
   1504          					break;
   \   00000EFC   0xE010             B        ??man_net_main_254
   1505          				case MAN_NET_SEQ_LTE_READY_NG_WAIT:
   1506          					man_timer_cancel_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_LTE_READY_NG_WAIT, MAN_NET_READY_RETRY_WAIT);
   \                     ??man_net_main_256: (+1)
   \   00000EFE   0x....             LDR      R1,??DataTable11  ;; 0x2710
   \   00000F00   0x....             LDR      R0,??DataTable11_2  ;; 0x4080001b
   \   00000F02   0x.... 0x....      BL       man_timer_cancel_wait
   1507          					break;
   \   00000F06   0xE00B             B        ??man_net_main_254
   1508          				case MAN_NET_SEQ_LTE_START_NG_WAIT:
   1509          					man_timer_cancel_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_LTE_START_NG_WAIT, MAN_NET_START_RETRY_WAIT);
   \                     ??man_net_main_257: (+1)
   \   00000F08   0x....             LDR      R1,??DataTable11  ;; 0x2710
   \   00000F0A   0x....             LDR      R0,??DataTable11_3  ;; 0x40800022
   \   00000F0C   0x.... 0x....      BL       man_timer_cancel_wait
   1510          					break;
   \   00000F10   0xE006             B        ??man_net_main_254
   1511          				case MAN_NET_SEQ_CLOSE_WAIT:
   1512          					man_timer_cancel_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_CLOSE_WAIT, MAN_NET_NET_CLOSE_WAIT);
   \                     ??man_net_main_258: (+1)
   \   00000F12   0x....             LDR      R1,??DataTable11_4  ;; 0x3a98
   \   00000F14   0x....             LDR      R0,??DataTable11_5  ;; 0x4080003d
   \   00000F16   0x.... 0x....      BL       man_timer_cancel_wait
   1513          					break;
   \   00000F1A   0xE001             B        ??man_net_main_254
   \                     ??man_net_main_205:
   \   00000F1C   0x00000523         DC32     0x523
   1514          				default:
   1515          					break;
   1516          				}
   1517          			}
   1518          
   1519          			// 全てがCLOSE状態
   1520          			man_net_work.net_sts = 0;
   \                     ??man_net_main_259: (+1)
   \                     ??man_net_main_254: (+1)
   \   00000F20   0x2000             MOVS     R0,#+0
   \   00000F22   0x....             LDR      R1,??DataTable7
   \   00000F24   0x6088             STR      R0,[R1, #+8]
   1521          			if (man_net_work.net_state == MAN_NET_STATE_OPEN) {
   \   00000F26   0x....             LDR      R0,??DataTable7
   \   00000F28   0x6800             LDR      R0,[R0, #+0]
   \   00000F2A   0x2801             CMP      R0,#+1
   \   00000F2C   0xD110             BNE      ??man_net_main_260
   1522          				// CLOSE状態とする
   1523          				man_net_work.net_sts &= ~MAN_NET_STS_LTE;			// LTE close完了
   \   00000F2E   0x....             LDR      R0,??DataTable7
   \   00000F30   0x6880             LDR      R0,[R0, #+8]
   \   00000F32   0x2101             MOVS     R1,#+1
   \   00000F34   0x4388             BICS     R0,R0,R1
   \   00000F36   0x....             LDR      R1,??DataTable7
   \   00000F38   0x6088             STR      R0,[R1, #+8]
   1524          				man_net_work.net_state = MAN_NET_STATE_CLOSE;
   \   00000F3A   0x2000             MOVS     R0,#+0
   \   00000F3C   0x....             LDR      R1,??DataTable7
   \   00000F3E   0x6008             STR      R0,[R1, #+0]
   1525          				
   1526          				// OPEN処理から再開する
   1527          //				man_net_set_sequense(MAN_NET_SEQ_OPEN_REQ);
   1528          				// 15秒待って再開する
   1529          				man_timer_start_wait(TIMER_MAN_ID_APL_NET + MAN_NET_SEQ_CLOSE_WAIT, MAN_NET_NET_CLOSE_WAIT, man_net_req_callback);
   \   00000F40   0x....             LDR      R2,??DataTable11_6
   \   00000F42   0x....             LDR      R1,??DataTable11_4  ;; 0x3a98
   \   00000F44   0x....             LDR      R0,??DataTable11_5  ;; 0x4080003d
   \   00000F46   0x.... 0x....      BL       man_timer_start_wait
   1530          				man_net_set_sequense(MAN_NET_SEQ_CLOSE_WAIT);
   \   00000F4A   0x203D             MOVS     R0,#+61
   \   00000F4C   0x.... 0x....      BL       man_net_set_sequense
   1531          			}
   1532          			man_net_work.request.req_state = MAN_NET_REQ_STATE_NON;
   \                     ??man_net_main_260: (+1)
   \   00000F50   0x2000             MOVS     R0,#+0
   \   00000F52   0x....             LDR      R1,??DataTable7
   \   00000F54   0x6208             STR      R0,[R1, #+32]
   1533          			break;
   \   00000F56   0xE028             B        ??man_net_main_206
   1534          
   1535          		case MAN_NET_REQ_STATE_DEV_NOT_SUPPORT:
   1536          			// DEV_NOT_SUPPORTの発生を通知する
   1537          			man_lte_req_state(MAN_LTE_STATE_DEV_NOT_SUPPORT);
   \                     ??man_net_main_211: (+1)
   \   00000F58   0x200C             MOVS     R0,#+12
   \   00000F5A   0x.... 0x....      BL       man_lte_req_state
   1538          			man_cmd_req_state(MAN_CMD_STATE_DEV_NOT_SUPPORT);
   \   00000F5E   0x200C             MOVS     R0,#+12
   \   00000F60   0x.... 0x....      BL       man_cmd_req_state
   1539          			man_msg_req_state(MAN_MSG_STATE_DEV_NOT_SUPPORT);
   \   00000F64   0x200C             MOVS     R0,#+12
   \   00000F66   0x.... 0x....      BL       man_msg_req_state
   1540          			man_ota_req_state(MAN_OTA_STATE_DEV_NOT_SUPPORT);
   \   00000F6A   0x200C             MOVS     R0,#+12
   \   00000F6C   0x.... 0x....      BL       man_ota_req_state
   1541          			man_rpt_req_state(MAN_RPT_STATE_DEV_NOT_SUPPORT);
   \   00000F70   0x200C             MOVS     R0,#+12
   \   00000F72   0x.... 0x....      BL       man_rpt_req_state
   1542          			man_net_work.request.req_state = MAN_NET_REQ_STATE_NON;
   \   00000F76   0x2000             MOVS     R0,#+0
   \   00000F78   0x....             LDR      R1,??DataTable7
   \   00000F7A   0x6208             STR      R0,[R1, #+32]
   1543          			break;
   \   00000F7C   0xE015             B        ??man_net_main_206
   1544          
   1545          		case MAN_NET_REQ_STATE_DEV_BUSY:
   1546          			// DEV_BUSYの発生を通知する
   1547          			man_lte_req_state(MAN_LTE_STATE_DEV_BUSY);
   \                     ??man_net_main_212: (+1)
   \   00000F7E   0x200D             MOVS     R0,#+13
   \   00000F80   0x.... 0x....      BL       man_lte_req_state
   1548          			man_cmd_req_state(MAN_CMD_STATE_DEV_BUSY);
   \   00000F84   0x200D             MOVS     R0,#+13
   \   00000F86   0x.... 0x....      BL       man_cmd_req_state
   1549          			man_msg_req_state(MAN_MSG_STATE_DEV_BUSY);
   \   00000F8A   0x200D             MOVS     R0,#+13
   \   00000F8C   0x.... 0x....      BL       man_msg_req_state
   1550          			man_ota_req_state(MAN_OTA_STATE_DEV_BUSY);
   \   00000F90   0x200D             MOVS     R0,#+13
   \   00000F92   0x.... 0x....      BL       man_ota_req_state
   1551          			man_rpt_req_state(MAN_RPT_STATE_DEV_BUSY);
   \   00000F96   0x200D             MOVS     R0,#+13
   \   00000F98   0x.... 0x....      BL       man_rpt_req_state
   1552          			man_net_work.request.req_state = MAN_NET_REQ_STATE_NON;
   \   00000F9C   0x2000             MOVS     R0,#+0
   \   00000F9E   0x....             LDR      R1,??DataTable7
   \   00000FA0   0x6208             STR      R0,[R1, #+32]
   1553          			break;
   \   00000FA2   0xE002             B        ??man_net_main_206
   1554          
   1555          		default:
   1556          			man_net_work.request.req_state = MAN_NET_REQ_STATE_NON;
   \                     ??man_net_main_213: (+1)
   \   00000FA4   0x2000             MOVS     R0,#+0
   \   00000FA6   0x....             LDR      R1,??DataTable7
   \   00000FA8   0x6208             STR      R0,[R1, #+32]
   1557          			break;
   1558          		}
   1559          
   1560          	}
   1561          }
   \                     ??man_net_main_206: (+1)
   \   00000FAA   0xBD10             POP      {R4,PC}          ;; return
   1562          
   1563          
   1564          
   1565          
   1566          /********************************************************************/
   1567          /*!
   1568           * \name	man_net_req_open
   1569           * \brief	NETWORK開始処理
   1570           * \param	なし
   1571           * \return  なし
   1572           * \note	必要時に、呼ばれること
   1573           */
   1574          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1575          void man_net_req_open( void )
   1576          {
   1577          	// 要求を保存する
   1578          	man_net_work.request.req_cmd = MAN_NET_REQ_CMD_OPEN;
   \                     man_net_req_open: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR      R1,??DataTable7
   \   00000004   0x7508             STRB     R0,[R1, #+20]
   1579          	man_net_work.request.gole_cmd = MAN_NET_REQ_CMD_OPEN;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x....             LDR      R1,??DataTable7
   \   0000000A   0x7708             STRB     R0,[R1, #+28]
   1580          }
   \   0000000C   0x4770             BX       LR               ;; return
   1581          
   1582          
   1583          /********************************************************************/
   1584          /*!
   1585           * \name	man_net_req_close
   1586           * \brief	NETWORK終了処理
   1587           * \param	なし
   1588           * \return  なし
   1589           * \note	必要時に、呼ばれること
   1590           */
   1591          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1592          void man_net_req_close( void )
   1593          {
   1594          	// 要求を保存する
   1595          	man_net_work.request.req_cmd = MAN_NET_REQ_CMD_CLOSE;
   \                     man_net_req_close: (+1)
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0x....             LDR      R1,??DataTable7
   \   00000004   0x7508             STRB     R0,[R1, #+20]
   1596          	man_net_work.request.gole_cmd = MAN_NET_REQ_CMD_CLOSE;
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0x....             LDR      R1,??DataTable7
   \   0000000A   0x7708             STRB     R0,[R1, #+28]
   1597          }
   \   0000000C   0x4770             BX       LR               ;; return
   1598          
   1599          
   1600          /********************************************************************/
   1601          /*!
   1602           * \name	man_net_req_stby
   1603           * \brief	NETWORK スタンバイ処理
   1604           * \param	なし
   1605           * \return  なし
   1606           * \note	必要時に、呼ばれること
   1607           */
   1608          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1609          void man_net_req_stby( void )
   1610          {
   1611          	// 要求を保存する
   1612          	man_net_work.request.req_cmd = MAN_NET_REQ_CMD_STBY;
   \                     man_net_req_stby: (+1)
   \   00000000   0x2003             MOVS     R0,#+3
   \   00000002   0x....             LDR      R1,??DataTable11_7
   \   00000004   0x7508             STRB     R0,[R1, #+20]
   1613          	man_net_work.request.gole_cmd = MAN_NET_REQ_CMD_STBY;
   \   00000006   0x2003             MOVS     R0,#+3
   \   00000008   0x....             LDR      R1,??DataTable11_7
   \   0000000A   0x7708             STRB     R0,[R1, #+28]
   1614          }
   \   0000000C   0x4770             BX       LR               ;; return
   1615          
   1616          
   1617          /********************************************************************/
   1618          /*!
   1619           * \name	man_net_req_reset
   1620           * \brief	NETWORK RESET処理
   1621           * \param	なし
   1622           * \return  なし
   1623           * \note	必要時に、呼ばれること
   1624           */
   1625          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1626          void man_net_req_reset( void )
   1627          {
   1628          	// 要求を保存する
   1629          	man_net_work.request.reset_cmd = 1;
   \                     man_net_req_reset: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR      R1,??DataTable11_7
   \   00000004   0x6188             STR      R0,[R1, #+24]
   1630          }
   \   00000006   0x4770             BX       LR               ;; return
   1631          
   1632          
   1633          /********************************************************************/
   1634          /*!
   1635           * \name	man_net_req_off
   1636           * \brief	NETWORK POWER OFF処理
   1637           * \param	なし
   1638           * \return  なし
   1639           * \note	必要時に、呼ばれること
   1640           */
   1641          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1642          void man_net_req_off( void )
   1643          {
   1644          	// 要求を保存する
   1645          	man_net_work.request.req_cmd = MAN_NET_REQ_CMD_OFF;
   \                     man_net_req_off: (+1)
   \   00000000   0x2004             MOVS     R0,#+4
   \   00000002   0x....             LDR      R1,??DataTable11_7
   \   00000004   0x7508             STRB     R0,[R1, #+20]
   1646          	man_net_work.request.gole_cmd = MAN_NET_REQ_CMD_OFF;
   \   00000006   0x2004             MOVS     R0,#+4
   \   00000008   0x....             LDR      R1,??DataTable11_7
   \   0000000A   0x7708             STRB     R0,[R1, #+28]
   1647          }
   \   0000000C   0x4770             BX       LR               ;; return
   1648          
   1649          
   1650          /********************************************************************/
   1651          /*!
   1652           * \name	man_net_req_noti
   1653           * \brief	NETの状態変化を通知する
   1654           * \param	id             : ユニーク番号
   1655           *          callback_state : 状態変化を通知するcallback関数
   1656           * \return   0: 成功
   1657           *          -1:失敗
   1658           * \note	必要時に、呼ばれること
   1659           */
   1660          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1661          int32_t man_net_req_noti(int32_t id, func_man_net_state callback_state)
   1662          {
   \                     man_net_req_noti: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0002             MOVS     R2,R0
   1663          	int32_t		ret = -1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
   1664          	
   1665          	if (callback_state != NULL) {
   \   00000008   0x000B             MOVS     R3,R1
   \   0000000A   0x2B00             CMP      R3,#+0
   \   0000000C   0xD004             BEQ      ??man_net_req_noti_0
   1666          		man_net_work.noti_info.id = id;
   \   0000000E   0x....             LDR      R0,??DataTable11_7
   \   00000010   0x6302             STR      R2,[R0, #+48]
   1667          		man_net_work.noti_info.callback_state = callback_state;
   \   00000012   0x....             LDR      R0,??DataTable11_7
   \   00000014   0x6341             STR      R1,[R0, #+52]
   1668          		ret = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   1669          	}
   1670          	return ret;
   \                     ??man_net_req_noti_0: (+1)
   \   00000018   0xBD00             POP      {PC}             ;; return
   1671          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     man_net_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     man_net_work+0xA4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     man_net_req_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x000003E9         DC32     0x3e9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x000003EA         DC32     0x3ea

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x000003EB         DC32     0x3eb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     man_net_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x00002710         DC32     0x2710

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x40800014         DC32     0x40800014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x4080001B         DC32     0x4080001b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x40800022         DC32     0x40800022

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x00003A98         DC32     0x3a98

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x4080003D         DC32     0x4080003d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     man_net_req_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     man_net_work
   1672          
   1673          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   man_net_init
         8   -> __aeabi_memset
         8   -> man_cmd_noti_error
         8   -> man_lte_noti_state
         8   -> man_msg_noti_error
         8   -> man_ota_noti_error
         8   -> man_rpt_noti_error
       8   man_net_main
         8   -> man_cmd_receive_start
         8   -> man_cmd_receive_stop
         8   -> man_cmd_req_state
         8   -> man_data_get_sensor
         8   -> man_dbglog_setting
         8   -> man_error_set
         8   -> man_lte_req_init
         8   -> man_lte_req_off
         8   -> man_lte_req_ready
         8   -> man_lte_req_reset
         8   -> man_lte_req_start
         8   -> man_lte_req_state
         8   -> man_lte_req_stby
         8   -> man_lte_req_stop
         8   -> man_lte_req_wakeup
         8   -> man_msg_req_start
         8   -> man_msg_req_state
         8   -> man_msg_req_stop
         8   -> man_net_noti_callback
         8   -> man_net_set_cmd_end
         8   -> man_net_set_sequense
         8   -> man_ota_req_state
         8   -> man_rpt_req_state
         8   -> man_rpt_req_udp_start
         8   -> man_rpt_req_udp_stop
         8   -> man_timer_cancel_wait
         8   -> man_timer_start_wait
       8   man_net_noti_callback
         8   -- Indirect call
       0   man_net_req_callback
       0   man_net_req_close
       4   man_net_req_noti
       0   man_net_req_off
       0   man_net_req_open
       0   man_net_req_reset
       0   man_net_req_stby
       8   man_net_set_cmd_end
         8   -> man_net_set_sequense
       8   man_net_set_sequense
         8   -> man_dbglog_setting


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable7
      62  man_net_init
    4012  man_net_main
      36  man_net_noti_callback
      18  man_net_req_callback
      14  man_net_req_close
      26  man_net_req_noti
      14  man_net_req_off
      14  man_net_req_open
       8  man_net_req_reset
      14  man_net_req_stby
      16  man_net_set_cmd_end
      68  man_net_set_sequense
     268  man_net_work

 
   268 bytes in section .bss
 4 362 bytes in section .text
 
 4 362 bytes of CODE memory
   268 bytes of DATA memory

Errors: none
Warnings: none
