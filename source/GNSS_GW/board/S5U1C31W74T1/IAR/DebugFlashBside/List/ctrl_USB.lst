###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       21/May/2019  17:01:17
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\GNSS\Software\rJ105\source\GNSS_GW\hal\ctrl_USB.c
#    Command line =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\hal\ctrl_USB.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_B -lCN
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        -lA
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List\ctrl_USB.lst
#    Object file  =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj\ctrl_USB.o
#
###############################################################################

C:\GNSS\Software\rJ105\source\GNSS_GW\hal\ctrl_USB.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    ctrl_USB.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    2017.10.2
      8            * @brief   このファイルはシリアルUSBを制御するソフトウェアです。
      9            ******************************************************************************
     10            $Id: ctrl_USB.c 255 2018-08-01 07:28:31Z shitaoka $
     11            * @attention
     12            *
     13            *****************************************************************************
     14          */ 
     15          
     16          
     17          #include <string.h>
     18          #include <stdio.h>
     19          #include <stdlib.h>
     20          #include "board.h"
     21          
     22          #include "drv_usb.h"
     23          #include "ctrl_USB.h"
     24          #include "gnss_gw_common.h"
     25          
     26          
     27          #pragma section = "CTRL_PRG_BLOCK"
     28          
     29          /************************************************************************/
     30          /* declaration of structure                                             */
     31          /************************************************************************/
     32          
     33          #define	CTRL_USB_RECV_BUFF_MAX		2048
     34          
     35          
     36          // 応答受信バッファ
     37          typedef struct _ctrl_usb_recv_info_t {
     38          	uint8_t		rcv_buff[CTRL_USB_RECV_BUFF_MAX];
     39          	uint32_t	write_p;
     40          } ctrl_usb_recv_info_t;
     41          
     42          // データ受信要求
     43          typedef struct _ctrl_usb_req_info_t {
     44          	int32_t		id;
     45          	func_usb	callback;
     46          } ctrl_usb_req_info_t;
     47          
     48          
     49          
     50          // USBワーク
     51          typedef struct _ctrl_usb_work_t {
     52          	int32_t						status;
     53          	ctrl_usb_recv_info_t		recv_info;			// 受信バッファ
     54          	ctrl_usb_recv_info_t		save_info;			// 保存バッファ
     55          
     56          	ctrl_usb_req_info_t			req_recv;			// データ受信
     57          } ctrl_usb_work_t;
     58          
     59          /************************************************************************/
     60          /* definition of variables                                              */
     61          /************************************************************************/
     62          

   \                                 In section .bss, align 4
     63          static ctrl_usb_work_t		ctrl_usb_work;			// USB制御用変数
   \                     ctrl_usb_work:
   \   00000000                      DS8 4116
     64          
     65          
     66          
     67          /********************************************************************/
     68          /*	static関数                                                      */
     69          /********************************************************************/
     70          
     71          
     72          
     73          /********************************************************************/
     74          /*	extern関数                                                      */
     75          /********************************************************************/
     76          
     77          
     78          /********************************************************************/
     79          /*!
     80           * \name	ctrl_USB_init
     81           * \brief	USB初期化処理
     82           * \param	なし
     83           * \return   0: 正常
     84           *          -1: 異常
     85           * \note	起動時に、呼ばれること
     86           */
     87          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     88          int32_t ctrl_USB_init(void)
     89          {
   \                     ctrl_USB_init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     90          	int32_t	ret;
     91          
     92          	// US Driver初期化処理
     93          	ret = serial_usb_init();
   \   00000002   0x.... 0x....      BL       serial_usb_init
   \   00000006   0x0004             MOVS     R4,R0
     94          
     95          	// 内部変数を初期化する
     96          	memset(&ctrl_usb_work, 0, sizeof(ctrl_usb_work_t));
   \   00000008   0x....             LDR      R1,??DataTable3  ;; 0x1014
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x....             LDR      R5,??DataTable3_1
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x.... 0x....      BL       __aeabi_memset
     97          	
     98          	return ret;
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     99          }
    100          
    101          /********************************************************************/
    102          /*!
    103           * \name	ctrl_USB_main
    104           * \brief	USBからの応答を監視する
    105           * \param	なし
    106           * \return  なし
    107           * \note	毎回、呼ばれること
    108           */
    109          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    110          void ctrl_USB_main(void)
    111          {
   \                     ctrl_USB_main: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    112          	int32_t		read_data;
    113          	int32_t		ret;
    114          	int32_t		loop;
    115          
    116          
    117          	// 12回ずつ受信バッファをチェックする
    118          	for (loop=0; loop<12; loop++) {
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE000             B        ??ctrl_USB_main_0
   \                     ??ctrl_USB_main_1: (+1)
   \   00000006   0x1C64             ADDS     R4,R4,#+1
   \                     ??ctrl_USB_main_0: (+1)
   \   00000008   0x2C0C             CMP      R4,#+12
   \   0000000A   0xDA42             BGE      ??ctrl_USB_main_2
    119          		read_data = drv_usb_GetChar();
   \   0000000C   0x.... 0x....      BL       drv_usb_GetChar
    120          		if (read_data != -1) {
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000014   0x4288             CMP      R0,R1
   \   00000016   0xD03C             BEQ      ??ctrl_USB_main_3
    121          			if (ctrl_usb_work.recv_info.write_p <= CTRL_USB_RECV_BUFF_MAX) {
   \   00000018   0x....             LDR      R1,??DataTable3_2
   \   0000001A   0x6809             LDR      R1,[R1, #+0]
   \   0000001C   0x....             LDR      R2,??DataTable3_3  ;; 0x801
   \   0000001E   0x4291             CMP      R1,R2
   \   00000020   0xD2F1             BCS      ??ctrl_USB_main_1
    122          				// 受信バッファに保存
    123          				ctrl_usb_work.recv_info.rcv_buff[ctrl_usb_work.recv_info.write_p] = read_data;
   \   00000022   0x....             LDR      R1,??DataTable3_1
   \   00000024   0x....             LDR      R2,??DataTable3_2
   \   00000026   0x6812             LDR      R2,[R2, #+0]
   \   00000028   0x1889             ADDS     R1,R1,R2
   \   0000002A   0x7108             STRB     R0,[R1, #+4]
    124          				ctrl_usb_work.recv_info.write_p++;
   \   0000002C   0x....             LDR      R0,??DataTable3_2
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0x....             LDR      R1,??DataTable3_2
   \   00000034   0x6008             STR      R0,[R1, #+0]
    125          
    126          				// １行チェック
    127          				if ( (ctrl_usb_work.recv_info.write_p > 1)
    128          					&& (ctrl_usb_work.recv_info.rcv_buff[ctrl_usb_work.recv_info.write_p-2] == ASCII_CR)
    129          					&& (ctrl_usb_work.recv_info.rcv_buff[ctrl_usb_work.recv_info.write_p-1] == ASCII_LF) ) {
   \   00000036   0x....             LDR      R0,??DataTable3_2
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x2802             CMP      R0,#+2
   \   0000003C   0xD3E3             BCC      ??ctrl_USB_main_1
   \   0000003E   0x....             LDR      R0,??DataTable3_1
   \   00000040   0x....             LDR      R1,??DataTable3_2
   \   00000042   0x6809             LDR      R1,[R1, #+0]
   \   00000044   0x1840             ADDS     R0,R0,R1
   \   00000046   0x7880             LDRB     R0,[R0, #+2]
   \   00000048   0x280D             CMP      R0,#+13
   \   0000004A   0xD1DC             BNE      ??ctrl_USB_main_1
   \   0000004C   0x....             LDR      R0,??DataTable3_1
   \   0000004E   0x....             LDR      R1,??DataTable3_2
   \   00000050   0x6809             LDR      R1,[R1, #+0]
   \   00000052   0x1840             ADDS     R0,R0,R1
   \   00000054   0x78C0             LDRB     R0,[R0, #+3]
   \   00000056   0x280A             CMP      R0,#+10
   \   00000058   0xD1D5             BNE      ??ctrl_USB_main_1
    130          
    131          					// 通知する
    132          					// 保存領域にコピー
    133          					memcpy(&ctrl_usb_work.save_info.rcv_buff[0],
    134          							&ctrl_usb_work.recv_info.rcv_buff[0],
    135          							ctrl_usb_work.recv_info.write_p);
   \   0000005A   0x....             LDR      R0,??DataTable3_2
   \   0000005C   0x6802             LDR      R2,[R0, #+0]
   \   0000005E   0x....             LDR      R1,??DataTable3_4
   \   00000060   0x....             LDR      R4,??DataTable3_5
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0x.... 0x....      BL       __aeabi_memcpy
    136          					ctrl_usb_work.save_info.write_p = ctrl_usb_work.recv_info.write_p;
   \   00000068   0x....             LDR      R0,??DataTable3_2
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x....             LDR      R1,??DataTable3_6
   \   0000006E   0x6008             STR      R0,[R1, #+0]
    137          
    138          					// 登録先にcallback通知
    139          					if (ctrl_usb_work.req_recv.callback != NULL) {
   \   00000070   0x....             LDR      R0,??DataTable3_7
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD008             BEQ      ??ctrl_USB_main_4
    140          						ctrl_usb_work.req_recv.callback(&ctrl_usb_work.save_info.rcv_buff[0], 
    141          														ctrl_usb_work.save_info.write_p,
    142          														ctrl_usb_work.req_recv.id,
    143          														CTRL_USB_STATUS_OK);
   \   00000078   0x2300             MOVS     R3,#+0
   \   0000007A   0x....             LDR      R0,??DataTable3_8
   \   0000007C   0x6802             LDR      R2,[R0, #+0]
   \   0000007E   0x....             LDR      R0,??DataTable3_6
   \   00000080   0x6801             LDR      R1,[R0, #+0]
   \   00000082   0x....             LDR      R0,??DataTable3_5
   \   00000084   0x....             LDR      R4,??DataTable3_7
   \   00000086   0x6824             LDR      R4,[R4, #+0]
   \   00000088   0x47A0             BLX      R4
    144          					}
    145          				
    146          					// 通知先が無い場合は通知しない
    147          					else {
    148          						;
    149          					}
    150          					ctrl_usb_work.recv_info.write_p=0;
   \                     ??ctrl_USB_main_4: (+1)
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x....             LDR      R1,??DataTable3_2
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    151          					break;
   \   00000090   0xE7FF             B        ??ctrl_USB_main_2
    152          				}
    153          				
    154          				// 入力途中の場合は継続
    155          				else {
    156          				}
    157          			}
    158          		
    159          			// 入力バッファを超えた場合は異常
    160          			else {
    161          			}
    162          		}
    163          	
    164          		// 入力なし時は何も行わない
    165          		else {
    166          			break;
    167          		}
    168          	}
    169          }
   \                     ??ctrl_USB_main_3: (+1)
   \                     ??ctrl_USB_main_2: (+1)
   \   00000092   0xBD10             POP      {R4,PC}          ;; return
    170          
    171          
    172          /********************************************************************/
    173          /*!
    174           * \name	ctrl_USB_recv_start
    175           * \brief	USB受信開始処理
    176           * \param	callback : USBデータ受信時に通知するcallback関数
    177           * \return   0: 成功
    178           *          -1:失敗
    179           * \note	
    180           */
    181          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    182          int32_t ctrl_USB_recv_start(int32_t id, func_usb callback)
    183          {
   \                     ctrl_USB_recv_start: (+1)
   \   00000000   0xB500             PUSH     {LR}
    184          	int32_t		ret=-1;
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x43D2             MVNS     R2,R2            ;; #-1
    185          
    186          	if (ctrl_usb_work.req_recv.callback == NULL) {
   \   00000006   0x....             LDR      R3,??DataTable3_7
   \   00000008   0x681B             LDR      R3,[R3, #+0]
   \   0000000A   0x2B00             CMP      R3,#+0
   \   0000000C   0xD104             BNE      ??ctrl_USB_recv_start_0
    187          		ctrl_usb_work.req_recv.callback = callback;
   \   0000000E   0x....             LDR      R2,??DataTable3_7
   \   00000010   0x6011             STR      R1,[R2, #+0]
    188          		ctrl_usb_work.req_recv.id = id;
   \   00000012   0x....             LDR      R1,??DataTable3_8
   \   00000014   0x6008             STR      R0,[R1, #+0]
    189          		ret=0;
   \   00000016   0x2200             MOVS     R2,#+0
    190          	}
    191           
    192          	return ret;
   \                     ??ctrl_USB_recv_start_0: (+1)
   \   00000018   0x0010             MOVS     R0,R2
   \   0000001A   0xBD00             POP      {PC}             ;; return
    193          }
    194          
    195          
    196          /********************************************************************/
    197          /*!
    198           * \name	ctrl_USB_recv_stop
    199           * \brief	USB受信停止処理
    200           * \param	
    201           * \return   0: 成功
    202           *          -1:失敗
    203           * \note	
    204           */
    205          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    206          int32_t ctrl_USB_recv_stop( void )
    207          {
   \                     ctrl_USB_recv_stop: (+1)
   \   00000000   0xB500             PUSH     {LR}
    208          	int32_t		ret=-1;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x43C0             MVNS     R0,R0            ;; #-1
    209          
    210          	if (ctrl_usb_work.req_recv.callback != NULL) {
   \   00000006   0x....             LDR      R1,??DataTable3_7
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD006             BEQ      ??ctrl_USB_recv_stop_0
    211          		ctrl_usb_work.req_recv.callback = NULL;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR      R1,??DataTable3_7
   \   00000012   0x6008             STR      R0,[R1, #+0]
    212          		ctrl_usb_work.req_recv.id = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR      R1,??DataTable3_8
   \   00000018   0x6008             STR      R0,[R1, #+0]
    213          		ret=0;
   \   0000001A   0x2000             MOVS     R0,#+0
    214          	}
    215           
    216          	return ret;
   \                     ??ctrl_USB_recv_stop_0: (+1)
   \   0000001C   0xBD00             POP      {PC}             ;; return
    217          }
    218          
    219          
    220          /********************************************************************/
    221          /*!
    222           * \name	ctrl_USB_send
    223           * \brief	USB送信処理
    224           * \param	data      : 送信するデータ
    225           * 			data_len  : データ長
    226           * \return   0: 成功
    227           *          -1:失敗
    228           * \note	データ送信。
    229           *          送信バッファに登録されます。
    230           *          送信バッファを超える場合は失敗で帰ります。
    231           */
    232          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    233          int32_t ctrl_USB_send(uint8_t *data, int32_t data_len)
    234          {
   \                     ctrl_USB_send: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    235          	int32_t	ret=-1;
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x43F6             MVNS     R6,R6            ;; #-1
    236          	int32_t	free_size = serial_usb_get_size_sbuff();
   \   0000000A   0x.... 0x....      BL       serial_usb_get_size_sbuff
    237          
    238          	// パラメータチェック
    239          	if ( (data != NULL) && (data_len > 0) && (data_len <= free_size) ) {
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xD008             BEQ      ??ctrl_USB_send_0
   \   00000012   0x2C01             CMP      R4,#+1
   \   00000014   0xDB06             BLT      ??ctrl_USB_send_0
   \   00000016   0x42A0             CMP      R0,R4
   \   00000018   0xDB04             BLT      ??ctrl_USB_send_0
    240          		ret = serial_usb_send(data, data_len);
   \   0000001A   0x0021             MOVS     R1,R4
   \   0000001C   0x0028             MOVS     R0,R5
   \   0000001E   0x.... 0x....      BL       serial_usb_send
   \   00000022   0x0006             MOVS     R6,R0
    241          	}
    242          
    243          	return ret;
   \                     ??ctrl_USB_send_0: (+1)
   \   00000024   0x0030             MOVS     R0,R6
   \   00000026   0xBD70             POP      {R4-R6,PC}       ;; return
    244          }
    245          
    246          
    247          /********************************************************************/
    248          /*!
    249           * \name	ctrl_USB_chk_config
    250           * \brief	USBデバイスの設定を確認する
    251           * \param	なし
    252           * \return  0 : 設定
    253           *          -1: 未設定
    254           * \note	設定後はUSBの使用が可能となります
    255           */
    256          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    257          int32_t ctrl_USB_chk_config( void )
    258          {
   \                     ctrl_USB_chk_config: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    259          	int32_t	ret;
    260          	
    261          	ret = drv_usb_chk_config();
   \   00000002   0x.... 0x....      BL       drv_usb_chk_config
    262          	return ret;
   \   00000006   0xBD02             POP      {R1,PC}          ;; return
    263          }
    264          
    265          /********************************************************************/
    266          /*!
    267           * \name	ctrl_usb_req_reset
    268           * \brief	USBデバイスをリセットする処理
    269           * \param	なし
    270           * \return  なし
    271           * \note	必要時に、呼ばれること
    272           */
    273          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    274          void ctrl_usb_req_reset( void )
    275          {
   \                     ctrl_usb_req_reset: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    276          	drv_usb_exec_reset();
   \   00000002   0x.... 0x....      BL       drv_usb_exec_reset
    277          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x00001014         DC32     0x1014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ctrl_usb_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     ctrl_usb_work+0x804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x00000801         DC32     0x801

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ctrl_usb_work+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ctrl_usb_work+0x808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     ctrl_usb_work+0x1008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     ctrl_usb_work+0x1010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     ctrl_usb_work+0x100C
    278          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ctrl_USB_chk_config
         8   -> drv_usb_chk_config
      16   ctrl_USB_init
        16   -> __aeabi_memset
        16   -> serial_usb_init
       8   ctrl_USB_main
         8   -- Indirect call
         8   -> __aeabi_memcpy
         8   -> drv_usb_GetChar
       4   ctrl_USB_recv_start
       4   ctrl_USB_recv_stop
      16   ctrl_USB_send
        16   -> serial_usb_get_size_sbuff
        16   -> serial_usb_send
       8   ctrl_usb_req_reset
         8   -> drv_usb_exec_reset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       8  ctrl_USB_chk_config
      24  ctrl_USB_init
     148  ctrl_USB_main
      28  ctrl_USB_recv_start
      30  ctrl_USB_recv_stop
      40  ctrl_USB_send
       8  ctrl_usb_req_reset
    4116  ctrl_usb_work

 
 4 116 bytes in section .bss
   322 bytes in section .text
 
   322 bytes of CODE memory
 4 116 bytes of DATA memory

Errors: none
Warnings: none
