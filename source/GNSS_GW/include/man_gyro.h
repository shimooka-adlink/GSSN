/**
  ******************************************************************************
  * @file    man_gyro.h
  * @author  コア
  * @version V1.0
  * @date    2017.10.2
  * @brief   角速度・加速度データを管理する
  ******************************************************************************
  $Id: man_gyro.h 182 2018-05-25 04:55:18Z shitaoka $
  * @attention
  *
  *****************************************************************************
*/


#ifndef _MAN_GYRO_H_
#define _MAN_GYRO_H_

// 角速度・加速度データ構造
typedef struct _man_gyro_data_t {
	int32_t		raw_gyro_x;			// センサー値  :: 角速度(X軸)
	int32_t		raw_gyro_y;			// センサー値  :: 角速度(Y軸)
	int32_t		raw_gyro_z;			// センサー値  :: 角速度(Z軸)
	int32_t		raw_accel_x;		// センサー値  :: 加速度(X軸)
	int32_t		raw_accel_y;		// センサー値  :: 加速度(Y軸)
	int32_t		raw_accel_z;		// センサー値  :: 加速度(Z軸)
	int32_t		raw_GravAccel_x;	// センサー値  :: 重力加速度(X軸)
	int32_t		raw_GravAccel_y;	// センサー値  :: 重力加速度(X軸)
	int32_t		raw_GravAccel_z;	// センサー値  :: 重力加速度(X軸)

	int32_t		gyro_x;				// 計算値  :: 角速度(X軸)
	int32_t		gyro_y;				// 計算値  :: 角速度(Y軸)
	int32_t		gyro_z;				// 計算値  :: 角速度(Z軸)
	int32_t		accel_x;			// 計算値  :: 加速度(X軸)
	int32_t		accel_y;			// 計算値  :: 加速度(Y軸)
	int32_t		accel_z;			// 計算値  :: 加速度(Z軸)
	int32_t		GravAccel_x;		// 計算値  :: 重力加速度(X軸)
	int32_t		GravAccel_y;		// 計算値  :: 重力加速度(Y軸)
	int32_t		GravAccel_z;		// 計算値  :: 重力加速度(Z軸)
} man_gyro_data_t;

/********************************************************************/
/*!
 * \name	man_gyro_init
 * \brief	角速度・加速度データ管理の初期化処理
 * \param	なし
 * \return   0: 正常
 *          -1: 異常
 * \note	起動時に、呼ばれること
 */
/********************************************************************/
extern int32_t man_gyro_init(void);


/********************************************************************/
/*!
 * \name	man_gyro_main
 * \brief	角速度・加速度データ管理のmain処理
 * \param	なし
 * \return  なし
 * \note	100ms毎に呼ばれること
 */
/********************************************************************/
extern void man_gyro_main(void);


/********************************************************************/
/*!
 * \name	man_gyro_get_data
 * \brief	現在保持している角速度・加速度データの取得
 * \param	gyro    : 角速度・加速度データ
 * \return   0: 取得
 *          -1: 未取得
 * \note	必要時に呼ばれること
 */
/********************************************************************/
extern int32_t man_gyro_get_data(man_gyro_data_t *gyro);

/********************************************************************/
/*!
 * \name	man_gyro_get_new_data
 * \brief	新しい角速度・加速度データの取得
 * \param	gyro    : 角速度・加速度データ
 * \return   0: 取得
 *          -1: 未取得
 * \note	必要時に呼ばれること
 */
/********************************************************************/
extern int32_t man_gyro_get_new_data(man_gyro_data_t *gyro);

/********************************************************************/
/*!
 * \name	man_gyro_standby
 * \brief	角速度・加速度データ管理のスタンバイモード処理
 * \param	なし
 * \return   0: 正常
 *          -1: 異常
 * \note	アクティブ -> スタンバイ時に、呼ばれること
 */
/********************************************************************/
extern int32_t man_gyro_standby(void);

/********************************************************************/
/*!
 * \name	man_gyro_active
 * \brief	角速度・加速度データ管理のアクティブモード処理
 * \param	なし
 * \return   0: 正常
 *          -1: 異常
 * \note	スタンバイ -> アクティブ時に、呼ばれること
 */
/********************************************************************/
extern int32_t man_gyro_active(void);

/********************************************************************/
/*!
 * \name	man_gyro_off
 * \brief	角速度・加速度データ管理のOFFモード処理
 * \param	なし
 * \return   0: 正常
 * \note	アクティブ -> OFF時に、呼ばれること
 */
/********************************************************************/
extern int32_t man_gyro_off(void);

/********************************************************************/
/*!
 * \name	man_gyro_on
 * \brief	角速度・加速度データ管理のONモード処理
 * \param	なし
 * \return   0: 正常
 * \note	OFF -> アクティブ時に、呼ばれること
 */
/********************************************************************/
extern int32_t man_gyro_on(void);

#endif // _MAN_GYRO_H_

