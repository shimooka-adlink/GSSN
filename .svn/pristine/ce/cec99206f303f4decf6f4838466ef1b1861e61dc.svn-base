###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       17/May/2019  13:32:00
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\hal\ctrl_BQ24160A.c
#    Command line =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\hal\ctrl_BQ24160A.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_B -lCN
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        -lA
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List\ctrl_BQ24160A.lst
#    Object file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj\ctrl_BQ24160A.o
#
###############################################################################

C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\hal\ctrl_BQ24160A.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    ctrl_BQ24160A.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    05-August-2016
      8            * @brief   このファイルはI2C CH1を使用してデバイス(BQ24160A)を制御するソフトウェアです。
      9            ******************************************************************************
     10            $Id: ctrl_BQ24160A.c 246 2018-07-27 06:18:43Z shitaoka $
     11            * @attention
     12            *
     13            *****************************************************************************
     14          */ 
     15          
     16          #include <string.h>
     17          #include <stdio.h>
     18          #include <stdlib.h>
     19          #include "board.h"
     20          #include "system_manager.h"
     21          #include "drv_i2c_1.h"
     22          #include "ctrl_BQ24160A.h"
     23          #include "ctrl_BQ28Z610.h"
     24          
     25          #pragma section = "CTRL_PRG_BLOCK"
     26          

   \                                 In section .data, align 1
     27          static uint8_t slave_addr = 0x6b;
   \                     slave_addr:
   \   00000000   0x6B               DC8 107
     28          
     29          #define	CTRL_BQ24160A_RETRY	(1+1)		// リトライ回数  1回
     30          
     31          
     32          /********************************************************************/
     33          /*	static関数                                                      */
     34          /********************************************************************/
     35          
     36          
     37          
     38          /********************************************************************/
     39          /*!
     40           * \name	BQ24160A_set_ctrl_reg
     41           * \brief	制御レジスタ設定処理
     42           * \return   0: 成功
     43           *          -1:失敗
     44           * \note	制御レジスタ
     45           *			  RESET        = 0 : 
     46           *			  IUSB_LIMIT_2 = 1 : 電流制限が1500mAのUSBホスト/充電器
     47           *			  IUSB_LIMIT_1 = 0 : 
     48           *			  IUSB_LIMIT_0 = 1 : 
     49           *			  EN_STAT      = 1 : STAT出力を有効にして充電ステータスを表示する
     50          *			  TE           = 1 : 充電電流終了を有効にする(電池電圧が3.6V以上の場合)
     51           *			  CE           = 0 : 充電が有効
     52           *			  HZ_MODE      = 0 : 高インピーダンスモードではない
     53           */
     54          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     55          static int32_t BQ24160A_set_ctrl_reg(void)
     56          {
   \                     BQ24160A_set_ctrl_reg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     57          	int32_t	status=0;
   \   00000002   0x2500             MOVS     R5,#+0
     58          	uint8_t hz_mode_cmd[] = {0x02, 0x5D};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x1C80             ADDS     R0,R0,#+2
   \   00000008   0x....             LDR      R1,??DataTable4
   \   0000000A   0x880A             LDRH     R2,[R1, #0]
   \   0000000C   0x8002             STRH     R2,[R0, #0]
     59          	uint8_t cmd[] = {0x02, 0x5C};
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0x....             LDR      R1,??DataTable4_1
   \   00000012   0x880A             LDRH     R2,[R1, #0]
   \   00000014   0x8002             STRH     R2,[R0, #0]
     60          	int32_t	i;
     61          	
     62          	for (i=0; i<CTRL_BQ24160A_RETRY; i++) {
   \   00000016   0x2400             MOVS     R4,#+0
   \   00000018   0xE000             B        ??BQ24160A_set_ctrl_reg_0
   \                     ??BQ24160A_set_ctrl_reg_1: (+1)
   \   0000001A   0x1C64             ADDS     R4,R4,#+1
   \                     ??BQ24160A_set_ctrl_reg_0: (+1)
   \   0000001C   0x2C02             CMP      R4,#+2
   \   0000001E   0xDA0E             BGE      ??BQ24160A_set_ctrl_reg_2
     63          		seSysSleepMS(5);
   \   00000020   0x2005             MOVS     R0,#+5
   \   00000022   0x.... 0x....      BL       seSysSleepMS
     64          		status = i2c1_SendData(slave_addr, &hz_mode_cmd[0], 2, seDISABLE);
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x2202             MOVS     R2,#+2
   \   0000002A   0xA900             ADD      R1,SP,#+0
   \   0000002C   0x1C89             ADDS     R1,R1,#+2
   \   0000002E   0x....             LDR      R0,??DataTable5
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0xB280             UXTH     R0,R0
   \   00000034   0x.... 0x....      BL       i2c1_SendData
   \   00000038   0x0005             MOVS     R5,R0
     65          		if (status == 0) break;
   \   0000003A   0x2D00             CMP      R5,#+0
   \   0000003C   0xD1ED             BNE      ??BQ24160A_set_ctrl_reg_1
     66          	}
     67          	for (i=0; i<CTRL_BQ24160A_RETRY; i++) {
   \                     ??BQ24160A_set_ctrl_reg_2: (+1)
   \   0000003E   0x2400             MOVS     R4,#+0
   \   00000040   0xE000             B        ??BQ24160A_set_ctrl_reg_3
   \                     ??BQ24160A_set_ctrl_reg_4: (+1)
   \   00000042   0x1C64             ADDS     R4,R4,#+1
   \                     ??BQ24160A_set_ctrl_reg_3: (+1)
   \   00000044   0x2C02             CMP      R4,#+2
   \   00000046   0xDA0D             BGE      ??BQ24160A_set_ctrl_reg_5
     68          		seSysSleepMS(5);
   \   00000048   0x2005             MOVS     R0,#+5
   \   0000004A   0x.... 0x....      BL       seSysSleepMS
     69          		status = i2c1_SendData(slave_addr, &cmd[0], 2, seDISABLE);
   \   0000004E   0x2300             MOVS     R3,#+0
   \   00000050   0x2202             MOVS     R2,#+2
   \   00000052   0x4669             MOV      R1,SP
   \   00000054   0x....             LDR      R0,??DataTable5
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0xB280             UXTH     R0,R0
   \   0000005A   0x.... 0x....      BL       i2c1_SendData
   \   0000005E   0x0005             MOVS     R5,R0
     70          		if (status == 0) break;
   \   00000060   0x2D00             CMP      R5,#+0
   \   00000062   0xD1EE             BNE      ??BQ24160A_set_ctrl_reg_4
     71          	}
     72                  if(usb_log_flag & LOG_FLAG_BATTERY)
   \                     ??BQ24160A_set_ctrl_reg_5: (+1)
   \   00000064   0x....             LDR      R0,??DataTable5_1
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x0700             LSLS     R0,R0,#+28
   \   0000006A   0xD50B             BPL      ??BQ24160A_set_ctrl_reg_6
     73                  { 
     74                    sprintf(print_buf, "BQ24160A_set_ctrl_reg() Status:%d\r\n",status);
   \   0000006C   0x002A             MOVS     R2,R5
   \   0000006E   0x....             LDR      R1,??DataTable5_2
   \   00000070   0x....             LDR      R0,??DataTable6
   \   00000072   0x.... 0x....      BL       sprintf
     75                    sysmgr_log(print_buf,strlen(print_buf));
   \   00000076   0x....             LDR      R0,??DataTable6
   \   00000078   0x.... 0x....      BL       strlen
   \   0000007C   0x0001             MOVS     R1,R0
   \   0000007E   0x....             LDR      R0,??DataTable6
   \   00000080   0x.... 0x....      BL       sysmgr_log
     76          
     77                  }
     78          
     79          	return status;
   \                     ??BQ24160A_set_ctrl_reg_6: (+1)
   \   00000084   0x0028             MOVS     R0,R5
   \   00000086   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     80          }
     81          
     82          /********************************************************************/
     83          /*!
     84           * \name	BQ24160A_set_ctrl_reg
     85           * \brief	制御レジスタ設定処理
     86           * \return   0: 成功
     87           *          -1:失敗
     88           * \note	制御レジスタ
     89           *			  RESET        = 0 : 
     90           *			  IUSB_LIMIT_2 = 1 : 電流制限が1500mAのUSBホスト/充電器
     91           *			  IUSB_LIMIT_1 = 0 : 
     92           *			  IUSB_LIMIT_0 = 1 : 
     93           *			  EN_STAT      = 1 : STAT出力を有効にして充電ステータスを表示する
     94          *			  TE           = 0 : 充電電流終了を有効にする(電池電圧が3.6V以上の場合)
     95           *			  CE           = 0 : 充電が有効
     96           *			  HZ_MODE      = 0 : 高インピーダンスモードではない
     97           */
     98          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     99          static int32_t BQ24160A_set_ctrl_reg_teoff(void)
    100          {
   \                     BQ24160A_set_ctrl_reg_teoff: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    101          	int32_t	status=0;
   \   00000002   0x2500             MOVS     R5,#+0
    102          	uint8_t hz_mode_cmd[] = {0x02, 0x59};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x1C80             ADDS     R0,R0,#+2
   \   00000008   0x....             LDR      R1,??DataTable6_1
   \   0000000A   0x880A             LDRH     R2,[R1, #0]
   \   0000000C   0x8002             STRH     R2,[R0, #0]
    103          	uint8_t cmd[] = {0x02, 0x58};
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0x....             LDR      R1,??DataTable6_2
   \   00000012   0x880A             LDRH     R2,[R1, #0]
   \   00000014   0x8002             STRH     R2,[R0, #0]
    104          	int32_t	i;
    105          	
    106          	for (i=0; i<CTRL_BQ24160A_RETRY; i++) {
   \   00000016   0x2400             MOVS     R4,#+0
   \   00000018   0xE000             B        ??BQ24160A_set_ctrl_reg_teoff_0
   \                     ??BQ24160A_set_ctrl_reg_teoff_1: (+1)
   \   0000001A   0x1C64             ADDS     R4,R4,#+1
   \                     ??BQ24160A_set_ctrl_reg_teoff_0: (+1)
   \   0000001C   0x2C02             CMP      R4,#+2
   \   0000001E   0xDA0E             BGE      ??BQ24160A_set_ctrl_reg_teoff_2
    107          		seSysSleepMS(5);
   \   00000020   0x2005             MOVS     R0,#+5
   \   00000022   0x.... 0x....      BL       seSysSleepMS
    108          		status = i2c1_SendData(slave_addr, &hz_mode_cmd[0], 2, seDISABLE);
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x2202             MOVS     R2,#+2
   \   0000002A   0xA900             ADD      R1,SP,#+0
   \   0000002C   0x1C89             ADDS     R1,R1,#+2
   \   0000002E   0x....             LDR      R0,??DataTable5
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0xB280             UXTH     R0,R0
   \   00000034   0x.... 0x....      BL       i2c1_SendData
   \   00000038   0x0005             MOVS     R5,R0
    109          		if (status == 0) break;
   \   0000003A   0x2D00             CMP      R5,#+0
   \   0000003C   0xD1ED             BNE      ??BQ24160A_set_ctrl_reg_teoff_1
    110          	}
    111          	for (i=0; i<CTRL_BQ24160A_RETRY; i++) {
   \                     ??BQ24160A_set_ctrl_reg_teoff_2: (+1)
   \   0000003E   0x2400             MOVS     R4,#+0
   \   00000040   0xE000             B        ??BQ24160A_set_ctrl_reg_teoff_3
   \                     ??BQ24160A_set_ctrl_reg_teoff_4: (+1)
   \   00000042   0x1C64             ADDS     R4,R4,#+1
   \                     ??BQ24160A_set_ctrl_reg_teoff_3: (+1)
   \   00000044   0x2C02             CMP      R4,#+2
   \   00000046   0xDA0D             BGE      ??BQ24160A_set_ctrl_reg_teoff_5
    112          		seSysSleepMS(5);
   \   00000048   0x2005             MOVS     R0,#+5
   \   0000004A   0x.... 0x....      BL       seSysSleepMS
    113          		status = i2c1_SendData(slave_addr, &cmd[0], 2, seDISABLE);
   \   0000004E   0x2300             MOVS     R3,#+0
   \   00000050   0x2202             MOVS     R2,#+2
   \   00000052   0x4669             MOV      R1,SP
   \   00000054   0x....             LDR      R0,??DataTable5
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0xB280             UXTH     R0,R0
   \   0000005A   0x.... 0x....      BL       i2c1_SendData
   \   0000005E   0x0005             MOVS     R5,R0
    114          		if (status == 0) break;
   \   00000060   0x2D00             CMP      R5,#+0
   \   00000062   0xD1EE             BNE      ??BQ24160A_set_ctrl_reg_teoff_4
    115          	}
    116                  if(usb_log_flag & LOG_FLAG_BATTERY)
   \                     ??BQ24160A_set_ctrl_reg_teoff_5: (+1)
   \   00000064   0x....             LDR      R0,??DataTable5_1
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x0700             LSLS     R0,R0,#+28
   \   0000006A   0xD50B             BPL      ??BQ24160A_set_ctrl_reg_teoff_6
    117                  { 
    118                    sprintf(print_buf, "BQ24160A_set_ctrl_reg() Status:%d\r\n",status);
   \   0000006C   0x002A             MOVS     R2,R5
   \   0000006E   0x....             LDR      R1,??DataTable5_2
   \   00000070   0x....             LDR      R0,??DataTable6
   \   00000072   0x.... 0x....      BL       sprintf
    119                    sysmgr_log(print_buf,strlen(print_buf));
   \   00000076   0x....             LDR      R0,??DataTable6
   \   00000078   0x.... 0x....      BL       strlen
   \   0000007C   0x0001             MOVS     R1,R0
   \   0000007E   0x....             LDR      R0,??DataTable6
   \   00000080   0x.... 0x....      BL       sysmgr_log
    120          
    121                  }
    122          
    123          	return status;
   \                     ??BQ24160A_set_ctrl_reg_teoff_6: (+1)
   \   00000084   0x0028             MOVS     R0,R5
   \   00000086   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    124          }
    125          
    126          /********************************************************************/
    127          /*!
    128           * \name	BQ24160A_set_ctrl_charge_disable
    129           * \brief	制御レジスタ設定処理
    130           * \return   0: 成功
    131           *          -1:失敗
    132           * \note	制御レジスタ
    133           *			  RESET        = 0 : 
    134           *			  IUSB_LIMIT_2 = 1 : 電流制限が1500mAのUSBホスト/充電器
    135           *			  IUSB_LIMIT_1 = 0 : 
    136           *			  IUSB_LIMIT_0 = 1 : 
    137           *			  EN_STAT      = 1 : STAT出力を有効にして充電ステータスを表示する
    138          *			  TE           = 1 : 充電電流終了を有効にする(電池電圧が3.6V以上の場合)
    139           *			  CE           = 1 : 充電が有効
    140           *			  HZ_MODE      = 0 : 高インピーダンスモードではない
    141           */
    142          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    143          static int32_t BQ24160A_set_ctrl_reg_charge_disable(void)
    144          {
   \                     BQ24160A_set_ctrl_reg_charge_disable: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    145          	int32_t	status=0;
   \   00000002   0x2500             MOVS     R5,#+0
    146          	uint8_t hz_mode_cmd[] = {0x02, 0x5F};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x1C80             ADDS     R0,R0,#+2
   \   00000008   0x....             LDR      R1,??DataTable6_3
   \   0000000A   0x880A             LDRH     R2,[R1, #0]
   \   0000000C   0x8002             STRH     R2,[R0, #0]
    147          	uint8_t cmd[] = {0x02, 0x5E};
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0x....             LDR      R1,??DataTable6_4
   \   00000012   0x880A             LDRH     R2,[R1, #0]
   \   00000014   0x8002             STRH     R2,[R0, #0]
    148          	int32_t	i;
    149          	
    150          	for (i=0; i<CTRL_BQ24160A_RETRY; i++) {
   \   00000016   0x2400             MOVS     R4,#+0
   \   00000018   0xE000             B        ??BQ24160A_set_ctrl_reg_charge_disable_0
   \                     ??BQ24160A_set_ctrl_reg_charge_disable_1: (+1)
   \   0000001A   0x1C64             ADDS     R4,R4,#+1
   \                     ??BQ24160A_set_ctrl_reg_charge_disable_0: (+1)
   \   0000001C   0x2C02             CMP      R4,#+2
   \   0000001E   0xDA0E             BGE      ??BQ24160A_set_ctrl_reg_charge_disable_2
    151          		seSysSleepMS(5);
   \   00000020   0x2005             MOVS     R0,#+5
   \   00000022   0x.... 0x....      BL       seSysSleepMS
    152          		status = i2c1_SendData(slave_addr, &hz_mode_cmd[0], 2, seDISABLE);
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x2202             MOVS     R2,#+2
   \   0000002A   0xA900             ADD      R1,SP,#+0
   \   0000002C   0x1C89             ADDS     R1,R1,#+2
   \   0000002E   0x....             LDR      R0,??DataTable5
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0xB280             UXTH     R0,R0
   \   00000034   0x.... 0x....      BL       i2c1_SendData
   \   00000038   0x0005             MOVS     R5,R0
    153          		if (status == 0) break;
   \   0000003A   0x2D00             CMP      R5,#+0
   \   0000003C   0xD1ED             BNE      ??BQ24160A_set_ctrl_reg_charge_disable_1
    154          	}
    155           	for (i=0; i<CTRL_BQ24160A_RETRY; i++) {
   \                     ??BQ24160A_set_ctrl_reg_charge_disable_2: (+1)
   \   0000003E   0x2400             MOVS     R4,#+0
   \   00000040   0xE000             B        ??BQ24160A_set_ctrl_reg_charge_disable_3
   \                     ??BQ24160A_set_ctrl_reg_charge_disable_4: (+1)
   \   00000042   0x1C64             ADDS     R4,R4,#+1
   \                     ??BQ24160A_set_ctrl_reg_charge_disable_3: (+1)
   \   00000044   0x2C02             CMP      R4,#+2
   \   00000046   0xDA0D             BGE      ??BQ24160A_set_ctrl_reg_charge_disable_5
    156          		seSysSleepMS(5);
   \   00000048   0x2005             MOVS     R0,#+5
   \   0000004A   0x.... 0x....      BL       seSysSleepMS
    157          		status = i2c1_SendData(slave_addr, &cmd[0], 2, seDISABLE);
   \   0000004E   0x2300             MOVS     R3,#+0
   \   00000050   0x2202             MOVS     R2,#+2
   \   00000052   0x4669             MOV      R1,SP
   \   00000054   0x....             LDR      R0,??DataTable5
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0xB280             UXTH     R0,R0
   \   0000005A   0x.... 0x....      BL       i2c1_SendData
   \   0000005E   0x0005             MOVS     R5,R0
    158          		if (status == 0) break;
   \   00000060   0x2D00             CMP      R5,#+0
   \   00000062   0xD1EE             BNE      ??BQ24160A_set_ctrl_reg_charge_disable_4
    159          	}
    160                  if(usb_log_flag & LOG_FLAG_BATTERY)
   \                     ??BQ24160A_set_ctrl_reg_charge_disable_5: (+1)
   \   00000064   0x....             LDR      R0,??DataTable5_1
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x0700             LSLS     R0,R0,#+28
   \   0000006A   0xD50B             BPL      ??BQ24160A_set_ctrl_reg_charge_disable_6
    161                  { 
    162                    sprintf(print_buf, "BQ24160A_set_ctrl_reg() Status:%d\r\n",status);
   \   0000006C   0x002A             MOVS     R2,R5
   \   0000006E   0x....             LDR      R1,??DataTable5_2
   \   00000070   0x....             LDR      R0,??DataTable6
   \   00000072   0x.... 0x....      BL       sprintf
    163                    sysmgr_log(print_buf,strlen(print_buf));
   \   00000076   0x....             LDR      R0,??DataTable6
   \   00000078   0x.... 0x....      BL       strlen
   \   0000007C   0x0001             MOVS     R1,R0
   \   0000007E   0x....             LDR      R0,??DataTable6
   \   00000080   0x.... 0x....      BL       sysmgr_log
    164          
    165                  }
    166          
    167          	return status;
   \                     ??BQ24160A_set_ctrl_reg_charge_disable_6: (+1)
   \   00000084   0x0028             MOVS     R0,R5
   \   00000086   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    168          }
    169          
    170          //#define	MAN_CHARGE_TE_VOLTAGE		3600	// 3.6V
    171          
    172          /********************************************************************/
    173          /*!
    174           * \name	BQ24160A_set_batt_reg
    175           * \brief	制御/バッテリ電圧レジスタ設定処理
    176           * \return   0: 成功
    177           *          -1:失敗
    178           * \note	制御/バッテリ電圧レジスタ
    179           *			  VBREG5   = 1 : バッテリ調整電圧：640 mV
    180           *			  VBREG4   = 0 : バッテリ調整電圧：320 mV
    181           *			  VBREG3   = 1 : バッテリ調整電圧：160 mV
    182           *			  VBREG2   = 0 : バッテリ調整電圧：80 mV
    183           *			  VBREG1   = 1 : バッテリ調整電圧：40 mV
    184           *			  VBREG0   = 1 : バッテリ調整電圧：20 mV
    185           *			  IINLIMIT = 1 : IN入力の入力制限 2.5A
    186           *			  D+/D-_EN = 0 : 正常状態、D + / D-検出完了
    187           */
    188          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    189          static int32_t BQ24160A_set_batt_reg(void)
    190          {
   \                     BQ24160A_set_batt_reg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    191          	int32_t	status=0;
   \   00000002   0x2500             MOVS     R5,#+0
    192          	uint8_t cmd[] = {0x03, 0xAE};
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x....             LDR      R1,??DataTable6_5
   \   00000008   0x880A             LDRH     R2,[R1, #0]
   \   0000000A   0x8002             STRH     R2,[R0, #0]
    193          	int32_t	i;
    194          	
    195          	for (i=0; i<CTRL_BQ24160A_RETRY; i++) {
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xE000             B        ??BQ24160A_set_batt_reg_0
   \                     ??BQ24160A_set_batt_reg_1: (+1)
   \   00000010   0x1C64             ADDS     R4,R4,#+1
   \                     ??BQ24160A_set_batt_reg_0: (+1)
   \   00000012   0x2C02             CMP      R4,#+2
   \   00000014   0xDA0D             BGE      ??BQ24160A_set_batt_reg_2
    196          		seSysSleepMS(2);
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       seSysSleepMS
    197          		status = i2c1_SendData(slave_addr, &cmd[0], 2, seDISABLE);
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x2202             MOVS     R2,#+2
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x....             LDR      R0,??DataTable5
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0xB280             UXTH     R0,R0
   \   00000028   0x.... 0x....      BL       i2c1_SendData
   \   0000002C   0x0005             MOVS     R5,R0
    198          		if (status == 0) break;
   \   0000002E   0x2D00             CMP      R5,#+0
   \   00000030   0xD1EE             BNE      ??BQ24160A_set_batt_reg_1
    199          	}
    200                  if(usb_log_flag & LOG_FLAG_BATTERY)
   \                     ??BQ24160A_set_batt_reg_2: (+1)
   \   00000032   0x....             LDR      R0,??DataTable5_1
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x0700             LSLS     R0,R0,#+28
   \   00000038   0xD50B             BPL      ??BQ24160A_set_batt_reg_3
    201                  { 
    202                    sprintf(print_buf, "BQ24160A_set_batt_reg() Status:%d\r\n",status);
   \   0000003A   0x002A             MOVS     R2,R5
   \   0000003C   0x....             LDR      R1,??DataTable6_6
   \   0000003E   0x....             LDR      R0,??DataTable8
   \   00000040   0x.... 0x....      BL       sprintf
    203                    sysmgr_log(print_buf,strlen(print_buf));
   \   00000044   0x....             LDR      R0,??DataTable8
   \   00000046   0x.... 0x....      BL       strlen
   \   0000004A   0x0001             MOVS     R1,R0
   \   0000004C   0x....             LDR      R0,??DataTable8
   \   0000004E   0x.... 0x....      BL       sysmgr_log
    204          
    205                  }
    206          	return status;
   \                     ??BQ24160A_set_batt_reg_3: (+1)
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    207          }
    208          
    209          
    210          /********************************************************************/
    211          /*!
    212           * \name	BQ24160A_set_charge_reg
    213           * \brief	バッテリ終端/高速充電電流レジスタ設定処理
    214           * \return   0: 成功
    215           *          -1:失敗
    216           * \note	バッテリ終端/高速充電電流レジスタ
    217           *			  ICHRG4   = 0 : 充電電流：1200mA
    218           *			  ICHRG3   = 0 : 充電電流：600mA
    219           *			  ICHRG2   = 0 : 充電電流：300mA
    220           *			  ICHRG1   = 0 : 充電電流：150mA 
    221           *			  ICHRG0   = 0 : 充電電流：75mA
    222           *			  ITERM2   = 0 : 終端電流検出電圧：200mA
    223           *			  ITERM1   = 1 : 終端電流検出電圧：100mA
    224           *			  ITERM0   = 1 : 終端電流検出電圧：50mA
    225           */
    226          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    227          static int32_t BQ24160A_set_charge_reg(void)
    228          {
   \                     BQ24160A_set_charge_reg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    229          	int32_t	status=0;
   \   00000002   0x2500             MOVS     R5,#+0
    230          //	uint8_t cmd[] = {0x05, 0x03};
    231          	uint8_t cmd[] = {0x05, 0x01};
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x....             LDR      R1,??DataTable6_7
   \   00000008   0x880A             LDRH     R2,[R1, #0]
   \   0000000A   0x8002             STRH     R2,[R0, #0]
    232          	int32_t	i;
    233          	
    234          	for (i=0; i<CTRL_BQ24160A_RETRY; i++) {
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xE000             B        ??BQ24160A_set_charge_reg_0
   \                     ??BQ24160A_set_charge_reg_1: (+1)
   \   00000010   0x1C64             ADDS     R4,R4,#+1
   \                     ??BQ24160A_set_charge_reg_0: (+1)
   \   00000012   0x2C02             CMP      R4,#+2
   \   00000014   0xDA0D             BGE      ??BQ24160A_set_charge_reg_2
    235          		seSysSleepMS(2);
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       seSysSleepMS
    236          		status = i2c1_SendData(slave_addr, &cmd[0], 2, seDISABLE);
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x2202             MOVS     R2,#+2
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x....             LDR      R0,??DataTable5
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0xB280             UXTH     R0,R0
   \   00000028   0x.... 0x....      BL       i2c1_SendData
   \   0000002C   0x0005             MOVS     R5,R0
    237          		if (status == 0) break;
   \   0000002E   0x2D00             CMP      R5,#+0
   \   00000030   0xD1EE             BNE      ??BQ24160A_set_charge_reg_1
    238          	}
    239                  if(usb_log_flag & LOG_FLAG_BATTERY)
   \                     ??BQ24160A_set_charge_reg_2: (+1)
   \   00000032   0x....             LDR      R0,??DataTable5_1
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x0700             LSLS     R0,R0,#+28
   \   00000038   0xD50B             BPL      ??BQ24160A_set_charge_reg_3
    240                  { 
    241                    sprintf(print_buf, "BQ24160A_set_charge_reg() Status:%d\r\n",status);
   \   0000003A   0x002A             MOVS     R2,R5
   \   0000003C   0x....             LDR      R1,??DataTable8_1
   \   0000003E   0x....             LDR      R0,??DataTable8
   \   00000040   0x.... 0x....      BL       sprintf
    242                    sysmgr_log(print_buf,strlen(print_buf));
   \   00000044   0x....             LDR      R0,??DataTable8
   \   00000046   0x.... 0x....      BL       strlen
   \   0000004A   0x0001             MOVS     R1,R0
   \   0000004C   0x....             LDR      R0,??DataTable8
   \   0000004E   0x.... 0x....      BL       sysmgr_log
    243          
    244                  }
    245          	return status;
   \                     ??BQ24160A_set_charge_reg_3: (+1)
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    246          }
    247          
    248          /********************************************************************/
    249          /*!
    250           * \name	BQ24160A_set_dppm_reg
    251           * \brief	Vin-dpm 電圧/DPPMステータスレジスタ設定処理
    252           * \return   0: 成功
    253           *          -1:失敗
    254           * \note	Vin-dpm 電圧/DPPMステータスレジスタ
    255           *			  MINSYS_STATUS   = x : 最小システム電圧モード有効・無効(read only)
    256           *			  DPM_STATUS      = x : DPMモード有効・無効(read only)
    257           *			  Vindpm2(usb)    = 1 : USBからのVin-dpm電圧:320[mv]
    258           *			  Vindpm1(usb)    = 0 : USBからのVin-dpm電圧:160[mv] 
    259           *			  Vindpm0(usb)    = 1 : USBからのVin-dpm電圧:80[mv]
    260           *			  Vindpm2(in)     = 1 : INからのVin-dpm電圧:320[mv]
    261           *			  Vindpm1(in)     = 0 : INからのVin-dpm電圧:160[mv] 
    262           *			  Vindpm0(in)     = 1 : INからのVin-dpm電圧:80[mv]
    263           */
    264          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    265          static int32_t BQ24160A_set_dppm_reg(void)
    266          {
   \                     BQ24160A_set_dppm_reg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    267          	int32_t	status=0;
   \   00000002   0x2500             MOVS     R5,#+0
    268          //	uint8_t cmd[] = {0x06, 0x38};
    269          //	uint8_t cmd[] = {0x06, 0x3f};
    270          	uint8_t cmd[] = {0x06, 0x2d};
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x....             LDR      R1,??DataTable8_2
   \   00000008   0x880A             LDRH     R2,[R1, #0]
   \   0000000A   0x8002             STRH     R2,[R0, #0]
    271          	int32_t	i;
    272          	
    273          	for (i=0; i<CTRL_BQ24160A_RETRY; i++) {
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xE000             B        ??BQ24160A_set_dppm_reg_0
   \                     ??BQ24160A_set_dppm_reg_1: (+1)
   \   00000010   0x1C64             ADDS     R4,R4,#+1
   \                     ??BQ24160A_set_dppm_reg_0: (+1)
   \   00000012   0x2C02             CMP      R4,#+2
   \   00000014   0xDA0D             BGE      ??BQ24160A_set_dppm_reg_2
    274          		seSysSleepMS(2);
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       seSysSleepMS
    275          		status = i2c1_SendData(slave_addr, &cmd[0], 2, seDISABLE);
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x2202             MOVS     R2,#+2
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x....             LDR      R0,??DataTable5
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0xB280             UXTH     R0,R0
   \   00000028   0x.... 0x....      BL       i2c1_SendData
   \   0000002C   0x0005             MOVS     R5,R0
    276          		if (status == 0) break;
   \   0000002E   0x2D00             CMP      R5,#+0
   \   00000030   0xD1EE             BNE      ??BQ24160A_set_dppm_reg_1
    277          	}
    278                  if(usb_log_flag & LOG_FLAG_BATTERY)
   \                     ??BQ24160A_set_dppm_reg_2: (+1)
   \   00000032   0x....             LDR      R0,??DataTable5_1
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x0700             LSLS     R0,R0,#+28
   \   00000038   0xD50B             BPL      ??BQ24160A_set_dppm_reg_3
    279                  { 
    280                    sprintf(print_buf, "BQ24160A_set_dppm_reg() Status:%d\r\n",status);
   \   0000003A   0x002A             MOVS     R2,R5
   \   0000003C   0x....             LDR      R1,??DataTable8_3
   \   0000003E   0x....             LDR      R0,??DataTable8
   \   00000040   0x.... 0x....      BL       sprintf
    281                    sysmgr_log(print_buf,strlen(print_buf));
   \   00000044   0x....             LDR      R0,??DataTable8
   \   00000046   0x.... 0x....      BL       strlen
   \   0000004A   0x0001             MOVS     R1,R0
   \   0000004C   0x....             LDR      R0,??DataTable8
   \   0000004E   0x.... 0x....      BL       sysmgr_log
    282          
    283                  }
    284          	return status;
   \                     ??BQ24160A_set_dppm_reg_3: (+1)
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    285          }
    286          
    287          
    288          /********************************************************************/
    289          /*!
    290           * \name	BQ24160A_set_safety_reg
    291           * \brief	安全タイマ/ NTCモニタレジスタ設定処理
    292           *              ※ 安全タイマーを無効にする
    293           * \return   0: 成功
    294           *          -1:失敗
    295           * \note	安全タイマ/ NTCモニタレジスタ
    296           *			  2XTMR_EN    = 0 : タイマ未使用
    297           *			  TMR_1       = 1 : 安全タイマーを無効にする
    298           *			  TMR_2       = 1 : 
    299           *			  ----        = 0 : 
    300           *			  TS_EN       = 1 : TS機能が有効
    301           *			  TS_FAULT1   = 0 : TSフォルトモード(ノーマル、TSフォルトなし)
    302           *			  TS_FAULT0   = 0 : 
    303           *			  LOW_CHG     = 0 : 充電電流はレジスタ0x05
    304           */
    305          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    306          static int32_t BQ24160A_set_safety_reg(void)
    307          {
   \                     BQ24160A_set_safety_reg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    308          	int32_t	status=0;
   \   00000002   0x2500             MOVS     R5,#+0
    309          	uint8_t cmd[] = {0x07, 0x68};
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x....             LDR      R1,??DataTable8_4
   \   00000008   0x880A             LDRH     R2,[R1, #0]
   \   0000000A   0x8002             STRH     R2,[R0, #0]
    310          	int32_t	i;
    311          	
    312          	for (i=0; i<CTRL_BQ24160A_RETRY; i++) {
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xE000             B        ??BQ24160A_set_safety_reg_0
   \                     ??BQ24160A_set_safety_reg_1: (+1)
   \   00000010   0x1C64             ADDS     R4,R4,#+1
   \                     ??BQ24160A_set_safety_reg_0: (+1)
   \   00000012   0x2C02             CMP      R4,#+2
   \   00000014   0xDA0D             BGE      ??BQ24160A_set_safety_reg_2
    313          		seSysSleepMS(2);
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       seSysSleepMS
    314          		status = i2c1_SendData(slave_addr, &cmd[0], 2, seDISABLE);
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x2202             MOVS     R2,#+2
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x....             LDR      R0,??DataTable8_5
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0xB280             UXTH     R0,R0
   \   00000028   0x.... 0x....      BL       i2c1_SendData
   \   0000002C   0x0005             MOVS     R5,R0
    315          		if (status == 0) break;
   \   0000002E   0x2D00             CMP      R5,#+0
   \   00000030   0xD1EE             BNE      ??BQ24160A_set_safety_reg_1
    316          	}
    317                 if(usb_log_flag & LOG_FLAG_BATTERY)
   \                     ??BQ24160A_set_safety_reg_2: (+1)
   \   00000032   0x....             LDR      R0,??DataTable8_6
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x0700             LSLS     R0,R0,#+28
   \   00000038   0xD50B             BPL      ??BQ24160A_set_safety_reg_3
    318                  { 
    319                    sprintf(print_buf, "BQ24160A_set_safety_reg() Status:%d\r\n",status);
   \   0000003A   0x002A             MOVS     R2,R5
   \   0000003C   0x....             LDR      R1,??DataTable8_7
   \   0000003E   0x....             LDR      R0,??DataTable6
   \   00000040   0x.... 0x....      BL       sprintf
    320                    sysmgr_log(print_buf,strlen(print_buf));
   \   00000044   0x....             LDR      R0,??DataTable6
   \   00000046   0x.... 0x....      BL       strlen
   \   0000004A   0x0001             MOVS     R1,R0
   \   0000004C   0x....             LDR      R0,??DataTable6
   \   0000004E   0x.... 0x....      BL       sysmgr_log
    321          
    322                  }
    323          	return status;
   \                     ??BQ24160A_set_safety_reg_3: (+1)
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    324          }
    325          
    326          
    327          /********************************************************************/
    328          /*	extern関数                                                      */
    329          /********************************************************************/
    330          
    331          /********************************************************************/
    332          /*!
    333           * \name	ctrl_BQ24160A_start
    334           * \brief	BQ24160Aの開始処理
    335           * \return   0: 成功
    336           *          -1:失敗
    337           * \note	なし
    338           */
    339          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    340          int32_t ctrl_BQ24160A_start(void)
    341          {
   \                     ctrl_BQ24160A_start: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    342          	int32_t	status;
    343          
    344          
    345          	// 制御レジスタ設定
    346          	status = BQ24160A_set_ctrl_reg();
   \   00000002   0x.... 0x....      BL       BQ24160A_set_ctrl_reg
   \   00000006   0x0004             MOVS     R4,R0
    347          
    348          	// 制御/バッテリ電圧レジスタ設定
    349          	if (status >= 0) {
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD402             BMI      ??ctrl_BQ24160A_start_0
    350          		status = BQ24160A_set_batt_reg();
   \   0000000C   0x.... 0x....      BL       BQ24160A_set_batt_reg
   \   00000010   0x0004             MOVS     R4,R0
    351          	}
    352          
    353          	// バッテリ終端/高速充電電流レジスタ設定
    354          	if (status >= 0) {
   \                     ??ctrl_BQ24160A_start_0: (+1)
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD402             BMI      ??ctrl_BQ24160A_start_1
    355          		status = BQ24160A_set_charge_reg();
   \   00000016   0x.... 0x....      BL       BQ24160A_set_charge_reg
   \   0000001A   0x0004             MOVS     R4,R0
    356          	}
    357          	
    358          	// Vin-dpm 電圧/DPPMステータスレジスタ設定
    359          	if (status >= 0){
   \                     ??ctrl_BQ24160A_start_1: (+1)
   \   0000001C   0x2C00             CMP      R4,#+0
   \   0000001E   0xD401             BMI      ??ctrl_BQ24160A_start_2
    360          		BQ24160A_set_dppm_reg();
   \   00000020   0x.... 0x....      BL       BQ24160A_set_dppm_reg
    361          	}
    362          	
    363          	// 安全タイマ/ NTCモニタレジスタ設定
    364          	if (status >= 0) {
   \                     ??ctrl_BQ24160A_start_2: (+1)
   \   00000024   0x2C00             CMP      R4,#+0
   \   00000026   0xD402             BMI      ??ctrl_BQ24160A_start_3
    365          		status = BQ24160A_set_safety_reg();
   \   00000028   0x.... 0x....      BL       BQ24160A_set_safety_reg
   \   0000002C   0x0004             MOVS     R4,R0
    366          	}
    367          
    368          	return status;
   \                     ??ctrl_BQ24160A_start_3: (+1)
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
    369          }
    370          

   \                                 In section .bss, align 4
    371          int32_t b0flag;
   \                     b0flag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    372          int32_t b6flag;
   \                     b6flag:
   \   00000000                      DS8 4
    373          

   \                                 In section .bss, align 4
    374          int32_t testflag=0;
   \                     testflag:
   \   00000000                      DS8 4
    375          /********************************************************************/
    376          /*!
    377           * \name	ctrl_BQ24160A_get_charge_status
    378           * \brief	充電ステータスを取得する
    379           * \param	charge_status : 充電ステータス
    380           *          ext_status    : 外部電源ON/OFFステータス
    381           *          usb_status    : USB電源ON/OFFステータス
    382           *          fault_status  : 異常状態
    383           * \return   0: 成功
    384           *          -1: 失敗
    385           * \note	
    386           */

   \                                 In section .bss, align 4
    387          char ctrl_BQ24160A_get_charge_status_buf[64];
   \                     ctrl_BQ24160A_get_charge_status_buf:
   \   00000000                      DS8 64
    388          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    389          int32_t ctrl_BQ24160A_get_charge_status(int32_t *charge_status, int32_t *ext_status, int32_t *usb_status, int32_t *fault_status)
    390          {
   \                     ctrl_BQ24160A_get_charge_status: (+1)
   \   00000000   0xB5F9             PUSH     {R0,R3-R7,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0016             MOVS     R6,R2
    391          	int32_t		ret=0;
   \   00000008   0x2500             MOVS     R5,#+0
    392          	int32_t		status;
    393          	uint8_t 	buf[10] = {0};
   \   0000000A   0xA807             ADD      R0,SP,#+28
   \   0000000C   0x210C             MOVS     R1,#+12
   \   0000000E   0x.... 0x....      BL       __aeabi_memclr4
    394          	uint8_t 	cmd[]  = {0x00};			// ステータスレジスタ
   \   00000012   0xA806             ADD      R0,SP,#+24
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x7001             STRB     R1,[R0, #0]
    395          	int32_t		i;
    396                  int16_t         battery_current=0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x4669             MOV      R1,SP
   \   0000001C   0x8348             STRH     R0,[R1, #+26]
    397          
    398          
    399          	// ステータス情報取得
    400          	ret = -1;
   \   0000001E   0x2500             MOVS     R5,#+0
   \   00000020   0x43ED             MVNS     R5,R5            ;; #-1
    401          	for (i=0; i<CTRL_BQ24160A_RETRY; i++) {
   \   00000022   0x2400             MOVS     R4,#+0
   \   00000024   0xE000             B        ??ctrl_BQ24160A_get_charge_status_0
   \                     ??ctrl_BQ24160A_get_charge_status_1: (+1)
   \   00000026   0x1C64             ADDS     R4,R4,#+1
   \                     ??ctrl_BQ24160A_get_charge_status_0: (+1)
   \   00000028   0x2C02             CMP      R4,#+2
   \   0000002A   0xDA33             BGE      ??ctrl_BQ24160A_get_charge_status_2
    402          		seSysSleepMS(2);
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0x.... 0x....      BL       seSysSleepMS
    403          		status = i2c1_SendData(slave_addr, &cmd[0], 1, seENABLE);
   \   00000032   0x2301             MOVS     R3,#+1
   \   00000034   0x2201             MOVS     R2,#+1
   \   00000036   0xA906             ADD      R1,SP,#+24
   \   00000038   0x....             LDR      R0,??DataTable8_5
   \   0000003A   0x7800             LDRB     R0,[R0, #+0]
   \   0000003C   0xB280             UXTH     R0,R0
   \   0000003E   0x.... 0x....      BL       i2c1_SendData
    404          		if (status >= 0) {
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD4EF             BMI      ??ctrl_BQ24160A_get_charge_status_1
    405          			seSysSleepMS(1);
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x.... 0x....      BL       seSysSleepMS
    406          			status = i2c1_ReceiveData(slave_addr, &buf[0], 8, seDISABLE);
   \   0000004C   0x2300             MOVS     R3,#+0
   \   0000004E   0x2208             MOVS     R2,#+8
   \   00000050   0xA907             ADD      R1,SP,#+28
   \   00000052   0x....             LDR      R0,??DataTable8_5
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0xB280             UXTH     R0,R0
   \   00000058   0x.... 0x....      BL       i2c1_ReceiveData
    407          			if (status >= 0) {
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD4E2             BMI      ??ctrl_BQ24160A_get_charge_status_1
    408          				*charge_status = (buf[0] >> 4) & 0x7;
   \   00000060   0x4668             MOV      R0,SP
   \   00000062   0x7F00             LDRB     R0,[R0, #+28]
   \   00000064   0x1100             ASRS     R0,R0,#+4
   \   00000066   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000068   0x0F40             LSRS     R0,R0,#+29
   \   0000006A   0x990B             LDR      R1,[SP, #+44]
   \   0000006C   0x6008             STR      R0,[R1, #+0]
    409          				*ext_status = (buf[1] >> 6) & 0x03;
   \   0000006E   0xA807             ADD      R0,SP,#+28
   \   00000070   0x7840             LDRB     R0,[R0, #+1]
   \   00000072   0xB2C0             UXTB     R0,R0
   \   00000074   0x0980             LSRS     R0,R0,#+6
   \   00000076   0xB2C0             UXTB     R0,R0
   \   00000078   0x6038             STR      R0,[R7, #+0]
    410          				*usb_status = (buf[1] >> 4) & 0x03;
   \   0000007A   0xA807             ADD      R0,SP,#+28
   \   0000007C   0x7840             LDRB     R0,[R0, #+1]
   \   0000007E   0x1100             ASRS     R0,R0,#+4
   \   00000080   0x0780             LSLS     R0,R0,#+30       ;; ZeroExtS R0,R0,#+30,#+30
   \   00000082   0x0F80             LSRS     R0,R0,#+30
   \   00000084   0x6030             STR      R0,[R6, #+0]
    411          				*fault_status = buf[0] & 0x7;
   \   00000086   0x4668             MOV      R0,SP
   \   00000088   0x7F00             LDRB     R0,[R0, #+28]
   \   0000008A   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   0000008C   0x0F40             LSRS     R0,R0,#+29
   \   0000008E   0x990C             LDR      R1,[SP, #+48]
   \   00000090   0x6008             STR      R0,[R1, #+0]
    412          				ret = 0;
   \   00000092   0x2500             MOVS     R5,#+0
    413          				break;
    414          			}
    415          		}
    416          	}
    417          
    418                  if(usb_log_flag & LOG_FLAG_BATTERY)
   \                     ??ctrl_BQ24160A_get_charge_status_2: (+1)
   \   00000094   0x....             LDR      R0,??DataTable8_6
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0x0700             LSLS     R0,R0,#+28
   \   0000009A   0xD533             BPL      ??ctrl_BQ24160A_get_charge_status_3
    419                  { 
    420                       sprintf(print_buf, "(24160 Reg) 00:%x 01:%x 02:%x 03:%x 04:%x 05:%x 06:%x 07:%x\r\n",
    421                                      buf[0],buf[1],buf[2],buf[3],buf[4],buf[5],buf[6],buf[7]);
   \   0000009C   0xA807             ADD      R0,SP,#+28
   \   0000009E   0x79C0             LDRB     R0,[R0, #+7]
   \   000000A0   0x9005             STR      R0,[SP, #+20]
   \   000000A2   0xA807             ADD      R0,SP,#+28
   \   000000A4   0x7980             LDRB     R0,[R0, #+6]
   \   000000A6   0x9004             STR      R0,[SP, #+16]
   \   000000A8   0xA807             ADD      R0,SP,#+28
   \   000000AA   0x7940             LDRB     R0,[R0, #+5]
   \   000000AC   0x9003             STR      R0,[SP, #+12]
   \   000000AE   0xA807             ADD      R0,SP,#+28
   \   000000B0   0x7900             LDRB     R0,[R0, #+4]
   \   000000B2   0x9002             STR      R0,[SP, #+8]
   \   000000B4   0xA807             ADD      R0,SP,#+28
   \   000000B6   0x78C0             LDRB     R0,[R0, #+3]
   \   000000B8   0x9001             STR      R0,[SP, #+4]
   \   000000BA   0xA807             ADD      R0,SP,#+28
   \   000000BC   0x7880             LDRB     R0,[R0, #+2]
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0xA807             ADD      R0,SP,#+28
   \   000000C2   0x7843             LDRB     R3,[R0, #+1]
   \   000000C4   0x4668             MOV      R0,SP
   \   000000C6   0x7F02             LDRB     R2,[R0, #+28]
   \   000000C8   0x....             LDR      R1,??DataTable8_8
   \   000000CA   0x....             LDR      R0,??DataTable8
   \   000000CC   0x.... 0x....      BL       sprintf
    422                       if(memcmp(print_buf,ctrl_BQ24160A_get_charge_status_buf,strlen(print_buf)) != 0)
   \   000000D0   0x....             LDR      R0,??DataTable8
   \   000000D2   0x.... 0x....      BL       strlen
   \   000000D6   0x0002             MOVS     R2,R0
   \   000000D8   0x....             LDR      R1,??DataTable8_9
   \   000000DA   0x....             LDR      R0,??DataTable8
   \   000000DC   0x.... 0x....      BL       memcmp
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD006             BEQ      ??ctrl_BQ24160A_get_charge_status_4
    423                       {
    424                          sysmgr_log(print_buf,strlen(print_buf));
   \   000000E4   0x....             LDR      R0,??DataTable8
   \   000000E6   0x.... 0x....      BL       strlen
   \   000000EA   0x0001             MOVS     R1,R0
   \   000000EC   0x....             LDR      R0,??DataTable8
   \   000000EE   0x.... 0x....      BL       sysmgr_log
    425                       }
    426                       memcpy(ctrl_BQ24160A_get_charge_status_buf,print_buf,strlen(print_buf)); 
   \                     ??ctrl_BQ24160A_get_charge_status_4: (+1)
   \   000000F2   0x....             LDR      R0,??DataTable8
   \   000000F4   0x.... 0x....      BL       strlen
   \   000000F8   0x....             LDR      R1,??DataTable8
   \   000000FA   0x....             LDR      R4,??DataTable8_9
   \   000000FC   0x0002             MOVS     R2,R0
   \   000000FE   0x0020             MOVS     R0,R4
   \   00000100   0x.... 0x....      BL       __aeabi_memcpy
    427                  }
    428                  if(buf[0] & 0xf == 7)
    429                  {
    430                    b0flag++;
    431                  }
    432                  else 
    433                    b0flag=0;
   \                     ??ctrl_BQ24160A_get_charge_status_3: (+1)
   \   00000104   0x2000             MOVS     R0,#+0
   \   00000106   0x....             LDR      R1,??DataTable8_10
   \   00000108   0x6008             STR      R0,[R1, #+0]
    434                  if(buf[6] == 0)
   \   0000010A   0xA807             ADD      R0,SP,#+28
   \   0000010C   0x7980             LDRB     R0,[R0, #+6]
   \   0000010E   0x2800             CMP      R0,#+0
   \   00000110   0xD105             BNE      ??ctrl_BQ24160A_get_charge_status_5
    435                  {
    436                    b6flag++;
   \   00000112   0x....             LDR      R0,??DataTable8_11
   \   00000114   0x6800             LDR      R0,[R0, #+0]
   \   00000116   0x1C40             ADDS     R0,R0,#+1
   \   00000118   0x....             LDR      R1,??DataTable8_11
   \   0000011A   0x6008             STR      R0,[R1, #+0]
   \   0000011C   0xE002             B        ??ctrl_BQ24160A_get_charge_status_6
    437                  }
    438                  else 
    439                    b6flag=0;
   \                     ??ctrl_BQ24160A_get_charge_status_5: (+1)
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0x....             LDR      R1,??DataTable8_11
   \   00000122   0x6008             STR      R0,[R1, #+0]
    440                  if(testflag == 1)
   \                     ??ctrl_BQ24160A_get_charge_status_6: (+1)
   \   00000124   0x....             LDR      R0,??DataTable8_12
   \   00000126   0x6800             LDR      R0,[R0, #+0]
   \   00000128   0x2801             CMP      R0,#+1
   \   0000012A   0xD101             BNE      ??ctrl_BQ24160A_get_charge_status_7
    441                  {
    442                    ctrl_BQ24160A_start();
   \   0000012C   0x.... 0x....      BL       ctrl_BQ24160A_start
    443                  }
    444                  // バッテリの電流値を取得する。マイナス（Discharge)の場合は外部電源（DC/USB）が接続されていないとみなす。
    445                  // シガーライトソケットからの給電時に外部電源がOFFになったことがすぐに判断できないケースがあるため、
    446                  // 本処理を追加
    447                  
    448                  if((ctrl_BQ28Z610_get_current(&battery_current) == 0) && (battery_current < 0))
   \                     ??ctrl_BQ24160A_get_charge_status_7: (+1)
   \   00000130   0xA806             ADD      R0,SP,#+24
   \   00000132   0x1C80             ADDS     R0,R0,#+2
   \   00000134   0x.... 0x....      BL       ctrl_BQ28Z610_get_current
   \   00000138   0x2800             CMP      R0,#+0
   \   0000013A   0xD107             BNE      ??ctrl_BQ24160A_get_charge_status_8
   \   0000013C   0x9806             LDR      R0,[SP, #+24]
   \   0000013E   0x1400             ASRS     R0,R0,#+16
   \   00000140   0x2800             CMP      R0,#+0
   \   00000142   0xD503             BPL      ??ctrl_BQ24160A_get_charge_status_8
    449                  {
    450           
    451                    *ext_status = BQ24160A_REG_STAT_OFF;
   \   00000144   0x2003             MOVS     R0,#+3
   \   00000146   0x6038             STR      R0,[R7, #+0]
    452          	  *usb_status = BQ24160A_REG_STAT_OFF;
   \   00000148   0x2003             MOVS     R0,#+3
   \   0000014A   0x6030             STR      R0,[R6, #+0]
    453                  }
    454          
    455          	return ret;
   \                     ??ctrl_BQ24160A_get_charge_status_8: (+1)
   \   0000014C   0x0028             MOVS     R0,R5
   \   0000014E   0xB00D             ADD      SP,SP,#+52
   \   00000150   0xBDF0             POP      {R4-R7,PC}       ;; return
    456          }
    457          
    458          
    459          
    460          
    461          /********************************************************************/
    462          /*!
    463           * \name	BQ24160A_set_ctrl_wdt
    464           * \brief	WDTクリア処理
    465           * \return   0: 成功
    466           *          -1:失敗
    467           * \note	制御レジスタ
    468           *			  TMR_RST      = 1 : ウォッチドッグ・タイマをリセット
    469           *			  STAT_2       = 0 : READ
    470           *			  STAT_1       = 0 : READ
    471           *			  STAT_0       = 0 : READ
    472           *			  SUPPLY_SEL   = 0 : 0-両方(IN, USB)の電源が接続されているとINが優先されます
    473           *			  FAULT_2      = 0 : READ
    474           *			  FAULT_1      = 0 : READ
    475           *			  FAULT_0      = 0 : READ
    476           *   ※ 30秒以内に発行すること
    477           */
    478          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    479          int32_t BQ24160A_set_ctrl_wdt(void)
    480          {
   \                     BQ24160A_set_ctrl_wdt: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    481          	int32_t	status=0;
   \   00000004   0x2000             MOVS     R0,#+0
    482          	uint8_t cmd[] = {0x00, 0x80};
   \   00000006   0x4669             MOV      R1,SP
   \   00000008   0x....             LDR      R2,??DataTable8_13
   \   0000000A   0x8813             LDRH     R3,[R2, #0]
   \   0000000C   0x800B             STRH     R3,[R1, #0]
    483          	int32_t	i;
    484          	
    485          	for (i=0; i<CTRL_BQ24160A_RETRY; i++) {
   \   0000000E   0x2400             MOVS     R4,#+0
   \   00000010   0xE000             B        ??BQ24160A_set_ctrl_wdt_0
   \                     ??BQ24160A_set_ctrl_wdt_1: (+1)
   \   00000012   0x1C64             ADDS     R4,R4,#+1
   \                     ??BQ24160A_set_ctrl_wdt_0: (+1)
   \   00000014   0x2C02             CMP      R4,#+2
   \   00000016   0xDA0C             BGE      ??BQ24160A_set_ctrl_wdt_2
    486          		seSysSleepMS(2);
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0x.... 0x....      BL       seSysSleepMS
    487          		status = i2c1_SendData(slave_addr, &cmd[0], 2, seDISABLE);
   \   0000001E   0x2300             MOVS     R3,#+0
   \   00000020   0x2202             MOVS     R2,#+2
   \   00000022   0x4669             MOV      R1,SP
   \   00000024   0x....             LDR      R0,??DataTable8_5
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0xB280             UXTH     R0,R0
   \   0000002A   0x.... 0x....      BL       i2c1_SendData
    488          		if (status == 0) break;
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD1EF             BNE      ??BQ24160A_set_ctrl_wdt_1
    489          	}
    490          #if 0
    491                  if(usb_log_flag & LOG_FLAG_BATTERY)
    492                  { 
    493                    sprintf(print_buf, "(24160 Wdt) Reset Status:%d\r\n",status);
    494                    sysmgr_log(print_buf,strlen(print_buf));
    495          
    496                  }
    497          #endif
    498          	return status;
   \                     ??BQ24160A_set_ctrl_wdt_2: (+1)
   \   00000032   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    499          }
    500          
    501          
    502          /********************************************************************/
    503          /*!
    504           * \name	ctrl_BQ24160A_init_setting
    505           * \brief	BQ24160Aの再初期化を行う
    506           * \param	te_req :: BQ24160A_REQ_TE_ON  :: 充電電流終了を有効にする
    507           *                    BQ24160A_REQ_TE_OFF :: 充電電流終了を無効にする
    508           * \return   0: 成功
    509           *          -1: 失敗
    510           * \note	
    511           */
    512          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    513          int32_t ctrl_BQ24160A_init_setting( int32_t	te_req )
    514          {
   \                     ctrl_BQ24160A_init_setting: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    515          	int32_t	status;
    516          
    517          	
    518          	// 制御レジスタ設定
    519          	if (te_req == BQ24160A_REQ_TE_ON) {
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD103             BNE      ??ctrl_BQ24160A_init_setting_0
    520          		status = BQ24160A_set_ctrl_reg();
   \   00000006   0x.... 0x....      BL       BQ24160A_set_ctrl_reg
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0xE008             B        ??ctrl_BQ24160A_init_setting_1
    521          	}
    522          	else if (te_req == BQ24160A_REQ_TE_OFF) {
   \                     ??ctrl_BQ24160A_init_setting_0: (+1)
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD103             BNE      ??ctrl_BQ24160A_init_setting_2
    523          		status = BQ24160A_set_ctrl_reg_teoff();
   \   00000012   0x.... 0x....      BL       BQ24160A_set_ctrl_reg_teoff
   \   00000016   0x0004             MOVS     R4,R0
   \   00000018   0xE002             B        ??ctrl_BQ24160A_init_setting_1
    524          	}
    525                  else
    526                  {
    527           		status = BQ24160A_set_ctrl_reg_charge_disable();
   \                     ??ctrl_BQ24160A_init_setting_2: (+1)
   \   0000001A   0x.... 0x....      BL       BQ24160A_set_ctrl_reg_charge_disable
   \   0000001E   0x0004             MOVS     R4,R0
    528                   }
    529          
    530          	// 制御/バッテリ電圧レジスタ設定
    531          	if (status >= 0) {
   \                     ??ctrl_BQ24160A_init_setting_1: (+1)
   \   00000020   0x2C00             CMP      R4,#+0
   \   00000022   0xD402             BMI      ??ctrl_BQ24160A_init_setting_3
    532          		status = BQ24160A_set_batt_reg();
   \   00000024   0x.... 0x....      BL       BQ24160A_set_batt_reg
   \   00000028   0x0004             MOVS     R4,R0
    533          	}
    534          
    535          	// バッテリ終端/高速充電電流レジスタ設定
    536          	if (status >= 0) {
   \                     ??ctrl_BQ24160A_init_setting_3: (+1)
   \   0000002A   0x2C00             CMP      R4,#+0
   \   0000002C   0xD402             BMI      ??ctrl_BQ24160A_init_setting_4
    537          		status = BQ24160A_set_charge_reg();
   \   0000002E   0x.... 0x....      BL       BQ24160A_set_charge_reg
   \   00000032   0x0004             MOVS     R4,R0
    538          	}
    539          
    540          	// 安全タイマ/ NTCモニタレジスタ設定
    541          	if (status >= 0) {
   \                     ??ctrl_BQ24160A_init_setting_4: (+1)
   \   00000034   0x2C00             CMP      R4,#+0
   \   00000036   0xD402             BMI      ??ctrl_BQ24160A_init_setting_5
    542          		status = BQ24160A_set_safety_reg();
   \   00000038   0x.... 0x....      BL       BQ24160A_set_safety_reg
   \   0000003C   0x0004             MOVS     R4,R0
    543          	}
    544          
    545          	// Vin-dpm 電圧/DPPMステータスレジスタ設定
    546          	if (status >= 0){
   \                     ??ctrl_BQ24160A_init_setting_5: (+1)
   \   0000003E   0x2C00             CMP      R4,#+0
   \   00000040   0xD401             BMI      ??ctrl_BQ24160A_init_setting_6
    547          		BQ24160A_set_dppm_reg();
   \   00000042   0x.... 0x....      BL       BQ24160A_set_dppm_reg
    548          	}
    549          
    550          	return status;
   \                     ??ctrl_BQ24160A_init_setting_6: (+1)
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0xBD10             POP      {R4,PC}          ;; return
    551          
    552          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     slave_addr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     usb_log_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     print_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     print_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     slave_addr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     usb_log_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     ctrl_BQ24160A_get_charge_status_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     b0flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x........         DC32     b6flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x........         DC32     testflag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x........         DC32     ?_18

   \                                 In section .rodata, align 2
   \                     ?_0:
   \   00000000   0x02 0x5D          DC8 2, 93

   \                                 In section .rodata, align 2
   \                     ?_1:
   \   00000000   0x02 0x5C          DC8 2, 92

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x42 0x51          DC8 "BQ24160A_set_ctrl_reg() Status:%d\015\012"
   \              0x32 0x34    
   \              0x31 0x36    
   \              0x30 0x41    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x5F 0x63    
   \              0x74 0x72    
   \              0x6C 0x5F    
   \              0x72 0x65    
   \              0x67 0x28    
   \              0x29 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3A 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 2
   \                     ?_3:
   \   00000000   0x02 0x59          DC8 2, 89

   \                                 In section .rodata, align 2
   \                     ?_4:
   \   00000000   0x02 0x58          DC8 2, 88

   \                                 In section .rodata, align 2
   \                     ?_5:
   \   00000000   0x02 0x5F          DC8 2, 95

   \                                 In section .rodata, align 2
   \                     ?_6:
   \   00000000   0x02 0x5E          DC8 2, 94

   \                                 In section .rodata, align 2
   \                     ?_7:
   \   00000000   0x03 0xAE          DC8 3, 174

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x42 0x51          DC8 "BQ24160A_set_batt_reg() Status:%d\015\012"
   \              0x32 0x34    
   \              0x31 0x36    
   \              0x30 0x41    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x5F 0x62    
   \              0x61 0x74    
   \              0x74 0x5F    
   \              0x72 0x65    
   \              0x67 0x28    
   \              0x29 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3A 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 2
   \                     ?_9:
   \   00000000   0x05 0x01          DC8 5, 1

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x42 0x51          DC8 "BQ24160A_set_charge_reg() Status:%d\015\012"
   \              0x32 0x34    
   \              0x31 0x36    
   \              0x30 0x41    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x5F 0x63    
   \              0x68 0x61    
   \              0x72 0x67    
   \              0x65 0x5F    
   \              0x72 0x65    
   \              0x67 0x28    
   \              0x29 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3A 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2
   \                     ?_11:
   \   00000000   0x06 0x2D          DC8 6, 45

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x42 0x51          DC8 "BQ24160A_set_dppm_reg() Status:%d\015\012"
   \              0x32 0x34    
   \              0x31 0x36    
   \              0x30 0x41    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x5F 0x64    
   \              0x70 0x70    
   \              0x6D 0x5F    
   \              0x72 0x65    
   \              0x67 0x28    
   \              0x29 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3A 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 2
   \                     ?_13:
   \   00000000   0x07 0x68          DC8 7, 104

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x42 0x51          DC8 "BQ24160A_set_safety_reg() Status:%d\015\012"
   \              0x32 0x34    
   \              0x31 0x36    
   \              0x30 0x41    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x5F 0x73    
   \              0x61 0x66    
   \              0x65 0x74    
   \              0x79 0x5F    
   \              0x72 0x65    
   \              0x67 0x28    
   \              0x29 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3A 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x28 0x32          DC8 28H, 32H, 34H, 31H, 36H, 30H, 20H, 52H
   \              0x34 0x31    
   \              0x36 0x30    
   \              0x20 0x52    
   \   00000008   0x65 0x67          DC8 65H, 67H, 29H, 20H, 30H, 30H, 3AH, 25H
   \              0x29 0x20    
   \              0x30 0x30    
   \              0x3A 0x25    
   \   00000010   0x78 0x20          DC8 78H, 20H, 30H, 31H, 3AH, 25H, 78H, 20H
   \              0x30 0x31    
   \              0x3A 0x25    
   \              0x78 0x20    
   \   00000018   0x30 0x32          DC8 30H, 32H, 3AH, 25H, 78H, 20H, 30H, 33H
   \              0x3A 0x25    
   \              0x78 0x20    
   \              0x30 0x33    
   \   00000020   0x3A 0x25          DC8 3AH, 25H, 78H, 20H, 30H, 34H, 3AH, 25H
   \              0x78 0x20    
   \              0x30 0x34    
   \              0x3A 0x25    
   \   00000028   0x78 0x20          DC8 78H, 20H, 30H, 35H, 3AH, 25H, 78H, 20H
   \              0x30 0x35    
   \              0x3A 0x25    
   \              0x78 0x20    
   \   00000030   0x30 0x36          DC8 30H, 36H, 3AH, 25H, 78H, 20H, 30H, 37H
   \              0x3A 0x25    
   \              0x78 0x20    
   \              0x30 0x37    
   \   00000038   0x3A 0x25          DC8 3AH, 25H, 78H, 0DH, 0AH, 0
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2
   \                     ?_18:
   \   00000000   0x00 0x80          DC8 0, 128
    553          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   BQ24160A_set_batt_reg
        16   -> i2c1_SendData
        16   -> seSysSleepMS
        16   -> sprintf
        16   -> strlen
        16   -> sysmgr_log
      16   BQ24160A_set_charge_reg
        16   -> i2c1_SendData
        16   -> seSysSleepMS
        16   -> sprintf
        16   -> strlen
        16   -> sysmgr_log
      16   BQ24160A_set_ctrl_reg
        16   -> i2c1_SendData
        16   -> seSysSleepMS
        16   -> sprintf
        16   -> strlen
        16   -> sysmgr_log
      16   BQ24160A_set_ctrl_reg_charge_disable
        16   -> i2c1_SendData
        16   -> seSysSleepMS
        16   -> sprintf
        16   -> strlen
        16   -> sysmgr_log
      16   BQ24160A_set_ctrl_reg_teoff
        16   -> i2c1_SendData
        16   -> seSysSleepMS
        16   -> sprintf
        16   -> strlen
        16   -> sysmgr_log
      16   BQ24160A_set_ctrl_wdt
        16   -> i2c1_SendData
        16   -> seSysSleepMS
      16   BQ24160A_set_dppm_reg
        16   -> i2c1_SendData
        16   -> seSysSleepMS
        16   -> sprintf
        16   -> strlen
        16   -> sysmgr_log
      16   BQ24160A_set_safety_reg
        16   -> i2c1_SendData
        16   -> seSysSleepMS
        16   -> sprintf
        16   -> strlen
        16   -> sysmgr_log
      72   ctrl_BQ24160A_get_charge_status
        72   -> __aeabi_memclr4
        72   -> __aeabi_memcpy
        72   -> ctrl_BQ24160A_start
        72   -> ctrl_BQ28Z610_get_current
        72   -> i2c1_ReceiveData
        72   -> i2c1_SendData
        72   -> memcmp
        72   -> seSysSleepMS
        72   -> sprintf
        72   -> strlen
        72   -> sysmgr_log
       8   ctrl_BQ24160A_init_setting
         8   -> BQ24160A_set_batt_reg
         8   -> BQ24160A_set_charge_reg
         8   -> BQ24160A_set_ctrl_reg
         8   -> BQ24160A_set_ctrl_reg_charge_disable
         8   -> BQ24160A_set_ctrl_reg_teoff
         8   -> BQ24160A_set_dppm_reg
         8   -> BQ24160A_set_safety_reg
       8   ctrl_BQ24160A_start
         8   -> BQ24160A_set_batt_reg
         8   -> BQ24160A_set_charge_reg
         8   -> BQ24160A_set_ctrl_reg
         8   -> BQ24160A_set_dppm_reg
         8   -> BQ24160A_set_safety_reg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
       2  ?_0
       2  ?_1
      40  ?_10
       2  ?_11
      36  ?_12
       2  ?_13
      40  ?_14
      12  ?_15
       1  ?_16
      64  ?_17
       2  ?_18
      36  ?_2
       2  ?_3
       2  ?_4
       2  ?_5
       2  ?_6
       2  ?_7
      36  ?_8
       2  ?_9
      86  BQ24160A_set_batt_reg
      86  BQ24160A_set_charge_reg
     136  BQ24160A_set_ctrl_reg
     136  BQ24160A_set_ctrl_reg_charge_disable
     136  BQ24160A_set_ctrl_reg_teoff
      52  BQ24160A_set_ctrl_wdt
      86  BQ24160A_set_dppm_reg
      86  BQ24160A_set_safety_reg
       4  b0flag
       4  b6flag
     338  ctrl_BQ24160A_get_charge_status
      64  ctrl_BQ24160A_get_charge_status_buf
      74  ctrl_BQ24160A_init_setting
      50  ctrl_BQ24160A_start
       1  slave_addr
       4  testflag

 
    76 bytes in section .bss
     1 byte  in section .data
   287 bytes in section .rodata
 1 374 bytes in section .text
 
 1 374 bytes of CODE  memory
   287 bytes of CONST memory
    77 bytes of DATA  memory

Errors: none
Warnings: none
