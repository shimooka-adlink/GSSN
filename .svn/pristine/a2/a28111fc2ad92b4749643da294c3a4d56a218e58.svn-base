///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM      17/May/2019  13:31:40
// Copyright 1999-2017 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\hal\ctrl_W25Q.c
//    Command line =  
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\hal\ctrl_W25Q.c -D
//        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_A -lCN
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
//        -lA
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
//        --diag_suppress Pe177,Pe111,Pa082 -o
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --no_clustering --no_scheduling --debug --endian=little
//        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
//        (x86)\IAR Systems\Embedded Workbench
//        7.5\arm\INC\c\DLib_Config_Normal.h" -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
//        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
//        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
//        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
//        -Ol
//    Locale       =  Japanese_Japan.932
//    List file    =  
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List\ctrl_W25Q.s
//
///////////////////////////////////////////////////////////////////////////////

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__dlib_full_locale_support", "0"
        AAPCS BASE,INTERWORK
        PRESERVE8
        REQUIRE8

        #define SHT_PROGBITS 0x1

        EXTERN spi_init
        EXTERN spia_ASSERT_MST_CS
        EXTERN spia_NEGATE_MST_CS
        EXTERN spia_ReceiveData
        EXTERN spia_SendData
        EXTERN spia_Start
        EXTERN spia_Stop
        EXTERN spia_end
        EXTERN spia_re_start

        PUBLIC clrl_W25Q_WriteEnable
        PUBLIC ctrl_SPIA_end
        PUBLIC ctrl_SPIA_re_start
        PUBLIC ctrl_W25Q_IsBusy
        PUBLIC ctrl_W25Q_erase_32k_block_req
        PUBLIC ctrl_W25Q_erase_64k_block_req
        PUBLIC ctrl_W25Q_erase_all_req
        PUBLIC ctrl_W25Q_erase_sector_req
        PUBLIC ctrl_W25Q_init
        PUBLIC ctrl_W25Q_read
        PUBLIC ctrl_W25Q_write_page
        
          CFI Names cfiNames0
          CFI StackFrame CFA R13 DATA
          CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
          CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, R13:32, R14:32
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 4
          CFI ReturnAddress R14 CODE
          CFI CFA R13+0
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 Undefined
          CFI R14 SameValue
          CFI EndCommon cfiCommon0
        
// C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\hal\ctrl_W25Q.c
//    1 
//    2 /**
//    3   ******************************************************************************
//    4   * @file    ctrl_W25Q.c
//    5   * @author  コア
//    6   * @version V1.0
//    7   * @date    2018.3.19
//    8   * @brief   このファイルはW25Qを制御するソフトウェアです。
//    9   ******************************************************************************
//   10   * @attention
//   11   *
//   12   *****************************************************************************
//   13 */ 
//   14 
//   15 
//   16 #include <string.h>
//   17 #include <stdio.h>
//   18 #include <stdlib.h>
//   19 #include "board.h"
//   20 #include "se_spia.h" 
//   21 
//   22 #include "drv_spi.h"
//   23 #include "ctrl_GPIO.h"
//   24 #include "gnss_gw_common.h"
//   25 #include "ctrl_W25Q.h"
//   26 
//   27 
//   28 #pragma section = "CTRL_PRG_BLOCK"
//   29 
//   30 
//   31 /************************************************************************/
//   32 /* declaration of structure                                             */
//   33 /************************************************************************/
//   34 
//   35 
//   36 #define	W25Q_PAGE_SIZE			256		// PAGEサイズ
//   37 
//   38 
//   39 #define MAX_BLOCKSIZE        128    // ブロック総数
//   40 #define MAX_SECTORSIZE       2048   // 総セクタ数
//   41 #define CMD_WRIRE_ENABLE      0x06
//   42 #define CMD_WRITE_DISABLE     0x04
//   43 #define CMD_READ_STATUS_R1    0x05
//   44 #define CMD_READ_STATUS_R2    0x35
//   45 #define CMD_READ_STATUS_R3    0x15
//   46 #define CMD_WRITE_STATUS_R    0x01 // 未実装
//   47 #define CMD_PAGE_PROGRAM      0x02
//   48 #define CMD_QUAD_PAGE_PROGRAM 0x32 // 未実装
//   49 #define CMD_BLOCK_ERASE64KB   0xd8
//   50 #define CMD_BLOCK_ERASE32KB   0x52
//   51 #define CMD_SECTOR_ERASE      0x20
//   52 #define CMD_CHIP_ERASE        0xC7
//   53 #define CMD_ERASE_SUPPEND     0x75 // 未実装
//   54 #define CMD_ERASE_RESUME      0x7A // 未実装
//   55 #define CMD_POWER_DOWN        0xB9
//   56 #define CMD_HIGH_PERFORM_MODE 0xA3 // 未実装
//   57 #define CMD_CNT_READ_MODE_RST 0xFF // 未実装
//   58 #define CMD_RELEASE_PDOWN_ID  0xAB // 未実装
//   59 #define CMD_MANUFACURER_ID    0x90
//   60 #define CMD_READ_UNIQUE_ID    0x4B
//   61 #define CMD_JEDEC_ID          0x9f
//   62 
//   63 #define CMD_READ_DATA         0x03
//   64 #define CMD_FAST_READ         0x0B
//   65 #define CMD_READ_DUAL_OUTPUT  0x3B // 未実装
//   66 #define CMD_READ_DUAL_IO      0xBB // 未実装
//   67 #define CMD_READ_QUAD_OUTPUT  0x6B // 未実装
//   68 #define CMD_READ_QUAD_IO      0xEB // 未実装
//   69 #define CMD_WORD_READ         0xE3 // 未実装
//   70 
//   71 
//   72 
//   73 #define SR1_BUSY_MASK	0x01
//   74 #define SR1_WEN_MASK	0x02
//   75 
//   76 
//   77 
//   78 //************************************************************************/
//   79 /* definition of variables                                              */
//   80 /************************************************************************/
//   81 
//   82 /********************************************************************/
//   83 /*	static関数                                                      */
//   84 /********************************************************************/
//   85 
//   86 
//   87 /********************************************************************/
//   88 /*!
//   89  * \name	ctrl_W25Q_readStatusReg1
//   90  * \brief	FLASHのステータスレジスタ1の値取得
//   91  * \param	なし
//   92  * \return  ステータスレジスタ１の値
//   93  * \note	
//   94  */
//   95 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ctrl_W25Q_readStatusReg1
        THUMB
//   96 static uint8_t ctrl_W25Q_readStatusReg1( void ) 
//   97 {
ctrl_W25Q_readStatusReg1:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//   98 	uint8_t		rc;
//   99 	uint8_t		sbuf[1];
//  100 
//  101 
//  102 	spia_ASSERT_MST_CS();
          CFI FunCall spia_ASSERT_MST_CS
        BL       spia_ASSERT_MST_CS
//  103 
//  104 	// ステータスレジスタ2の値取得コマンド送信
//  105 	sbuf[0] = CMD_READ_STATUS_R1;
        MOVS     R0,#+5
        MOV      R1,SP
        STRB     R0,[R1, #+0]
//  106 	spia_SendData(sbuf, 1);
        MOVS     R1,#+1
        MOV      R0,SP
          CFI FunCall spia_SendData
        BL       spia_SendData
//  107 
//  108 	// ステータスレジスタ1の受信
//  109 	spia_ReceiveData(&rc ,1);
        MOVS     R1,#+1
        ADD      R0,SP,#+0
        ADDS     R0,R0,#+1
          CFI FunCall spia_ReceiveData
        BL       spia_ReceiveData
//  110 	spia_NEGATE_MST_CS();
          CFI FunCall spia_NEGATE_MST_CS
        BL       spia_NEGATE_MST_CS
//  111 	return rc;
        MOV      R0,SP
        LDRB     R0,[R0, #+1]
        POP      {R1,PC}          ;; return
//  112 }
          CFI EndBlock cfiBlock0
//  113 
//  114 
//  115 
//  116 /********************************************************************/
//  117 /*	extern関数                                                      */
//  118 /********************************************************************/
//  119 
//  120 /********************************************************************/
//  121 /*!
//  122  * \name	ctrl_W25Q_init
//  123  * \brief	USB初期化処理
//  124  * \param	なし
//  125  * \return  なし
//  126  * \note	起動時に、呼ばれること
//  127  */
//  128 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ctrl_W25Q_init
        THUMB
//  129 void ctrl_W25Q_init(void)
//  130 {
ctrl_W25Q_init:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//  131 	// FLASH Driver初期化処理
//  132 	spi_init();
          CFI FunCall spi_init
        BL       spi_init
//  133 }
        POP      {R0,PC}          ;; return
          CFI EndBlock cfiBlock1
//  134 
//  135 
//  136 
//  137 /********************************************************************/
//  138 /*!
//  139  * \name	ctrl_W25Q_erase_all_req
//  140  * \brief	FLASH 全消去コマンドの発行処理
//  141  * \param	なし
//  142  * \return   0: 成功
//  143  *          -1: 失敗
//  144  * \note	全消去コマンドを発行します
//  145  */
//  146 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ctrl_W25Q_erase_all_req
        THUMB
//  147 int32_t  ctrl_W25Q_erase_all_req( void )
//  148 {
ctrl_W25Q_erase_all_req:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
//  149 	int32_t		ret;
//  150 	uint8_t		sbuf[1];
//  151 
//  152 	spia_ASSERT_MST_CS();
          CFI FunCall spia_ASSERT_MST_CS
        BL       spia_ASSERT_MST_CS
//  153 	sbuf[0] = CMD_CHIP_ERASE;
        MOVS     R0,#+199
        MOV      R1,SP
        STRB     R0,[R1, #+0]
//  154 	ret = spia_SendData(sbuf, 1);
        MOVS     R1,#+1
        MOV      R0,SP
          CFI FunCall spia_SendData
        BL       spia_SendData
        MOVS     R4,R0
//  155 	spia_NEGATE_MST_CS();
          CFI FunCall spia_NEGATE_MST_CS
        BL       spia_NEGATE_MST_CS
//  156 
//  157 	return ret;
        MOVS     R0,R4
        POP      {R1,R2,R4,PC}    ;; return
//  158 }
          CFI EndBlock cfiBlock2
//  159 
//  160 
//  161 /********************************************************************/
//  162 /*!
//  163  * \name	ctrl_W25Q_erase_sector_req
//  164  * \brief	FLASH sector消去コマンドの発行処理
//  165  * \param	addr  : sector消去する先頭アドレス
//  166  * \return   0: 成功
//  167  *          -1: 失敗
//  168  * \note	sector(256バイト)消去コマンドを発行します
//  169  */
//  170 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ctrl_W25Q_erase_sector_req
        THUMB
//  171 int32_t  ctrl_W25Q_erase_sector_req( uint32_t addr )
//  172 {
ctrl_W25Q_erase_sector_req:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
        MOVS     R4,R0
//  173 	int32_t		ret;
//  174 	uint8_t		sbuf[4];
//  175 
//  176 	spia_ASSERT_MST_CS();
          CFI FunCall spia_ASSERT_MST_CS
        BL       spia_ASSERT_MST_CS
//  177 	sbuf[0] = CMD_SECTOR_ERASE;
        MOVS     R0,#+32
        MOV      R1,SP
        STRB     R0,[R1, #+0]
//  178 	sbuf[1] = ((addr>>16) & 0xff);			// A23-A16
        MOVS     R0,R4
        LSRS     R0,R0,#+16
        MOV      R1,SP
        STRB     R0,[R1, #+1]
//  179 	sbuf[2] = ((addr>>8) & 0xff);			// A15-A08
        LSRS     R0,R4,#+8
        MOV      R1,SP
        STRB     R0,[R1, #+2]
//  180 	sbuf[3] = (addr & 0xff);				// A07-A00
        MOV      R0,SP
        STRB     R4,[R0, #+3]
//  181 	ret = spia_SendData(sbuf, 4);
        MOVS     R1,#+4
        MOV      R0,SP
          CFI FunCall spia_SendData
        BL       spia_SendData
        MOVS     R4,R0
//  182 	spia_NEGATE_MST_CS();
          CFI FunCall spia_NEGATE_MST_CS
        BL       spia_NEGATE_MST_CS
//  183 
//  184 	return ret;
        MOVS     R0,R4
        POP      {R1,R2,R4,PC}    ;; return
//  185 }
          CFI EndBlock cfiBlock3
//  186 
//  187 
//  188 /********************************************************************/
//  189 /*!
//  190  * \name	ctrl_W25Q_erase_32k_block_req
//  191  * \brief	FLASH 32kB block消去コマンドの発行処理
//  192  * \param	addr  : block消去する先頭アドレス
//  193  * \return   0: 成功
//  194  *          -1: 失敗
//  195  * \note	block(32kバイト)消去コマンドを発行します
//  196  */
//  197 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ctrl_W25Q_erase_32k_block_req
        THUMB
//  198 int32_t  ctrl_W25Q_erase_32k_block_req( uint32_t addr )
//  199 {
ctrl_W25Q_erase_32k_block_req:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
        MOVS     R4,R0
//  200 	int32_t		ret;
//  201 	uint8_t		sbuf[4];
//  202 
//  203 	spia_ASSERT_MST_CS();
          CFI FunCall spia_ASSERT_MST_CS
        BL       spia_ASSERT_MST_CS
//  204 	sbuf[0] = CMD_BLOCK_ERASE32KB;
        MOVS     R0,#+82
        MOV      R1,SP
        STRB     R0,[R1, #+0]
//  205 	sbuf[1] = ((addr>>16) & 0xff);			// A23-A16
        MOVS     R0,R4
        LSRS     R0,R0,#+16
        MOV      R1,SP
        STRB     R0,[R1, #+1]
//  206 	sbuf[2] = ((addr>>8) & 0xff);			// A15-A08
        LSRS     R0,R4,#+8
        MOV      R1,SP
        STRB     R0,[R1, #+2]
//  207 	sbuf[3] = (addr & 0xff);				// A07-A00
        MOV      R0,SP
        STRB     R4,[R0, #+3]
//  208 	ret = spia_SendData(sbuf, 4);
        MOVS     R1,#+4
        MOV      R0,SP
          CFI FunCall spia_SendData
        BL       spia_SendData
        MOVS     R4,R0
//  209 	spia_NEGATE_MST_CS();
          CFI FunCall spia_NEGATE_MST_CS
        BL       spia_NEGATE_MST_CS
//  210 
//  211 	return ret;
        MOVS     R0,R4
        POP      {R1,R2,R4,PC}    ;; return
//  212 }
          CFI EndBlock cfiBlock4
//  213 
//  214 
//  215 /********************************************************************/
//  216 /*!
//  217  * \name	ctrl_W25Q_erase_64k_block_req
//  218  * \brief	FLASH 64kB block消去コマンドの発行処理
//  219  * \param	addr  : block消去する先頭アドレス
//  220  * \return   0: 成功
//  221  *          -1: 失敗
//  222  * \note	block(64kバイト)消去コマンドを発行します
//  223  */
//  224 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ctrl_W25Q_erase_64k_block_req
        THUMB
//  225 int32_t  ctrl_W25Q_erase_64k_block_req( uint32_t addr )
//  226 {
ctrl_W25Q_erase_64k_block_req:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
        MOVS     R4,R0
//  227 	int32_t		ret;
//  228 	uint8_t		sbuf[4];
//  229 
//  230 	spia_ASSERT_MST_CS();
          CFI FunCall spia_ASSERT_MST_CS
        BL       spia_ASSERT_MST_CS
//  231 	sbuf[0] = CMD_BLOCK_ERASE64KB;
        MOVS     R0,#+216
        MOV      R1,SP
        STRB     R0,[R1, #+0]
//  232 	sbuf[1] = ((addr>>16) & 0xff);			// A23-A16
        MOVS     R0,R4
        LSRS     R0,R0,#+16
        MOV      R1,SP
        STRB     R0,[R1, #+1]
//  233 	sbuf[2] = ((addr>>8) & 0xff);			// A15-A08
        LSRS     R0,R4,#+8
        MOV      R1,SP
        STRB     R0,[R1, #+2]
//  234 	sbuf[3] = (addr & 0xff);				// A07-A00
        MOV      R0,SP
        STRB     R4,[R0, #+3]
//  235 	ret = spia_SendData(sbuf, 4);
        MOVS     R1,#+4
        MOV      R0,SP
          CFI FunCall spia_SendData
        BL       spia_SendData
        MOVS     R4,R0
//  236 	spia_NEGATE_MST_CS();
          CFI FunCall spia_NEGATE_MST_CS
        BL       spia_NEGATE_MST_CS
//  237 
//  238 	return ret;
        MOVS     R0,R4
        POP      {R1,R2,R4,PC}    ;; return
//  239 }
          CFI EndBlock cfiBlock5
//  240 
//  241 
//  242 /********************************************************************/
//  243 /*!
//  244  * \name	ctrl_W25Q_write_page
//  245  * \brief	FLASH PAGE(512Byte)書き込み処理
//  246  * \param	addr   : flash 書き込みアドレス
//  247  *          data   : flash 書き込みデータ
//  248  *          length : データ長
//  249  * \return  0: 成功  -1:失敗
//  250  * \note	
//  251  */
//  252 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function ctrl_W25Q_write_page
        THUMB
//  253 int32_t   ctrl_W25Q_write_page(uint32_t addr , uint8_t *data, int32_t length)
//  254 {
ctrl_W25Q_write_page:
        PUSH     {R1,R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        SUB      SP,SP,#+264
          CFI CFA R13+288
        MOVS     R7,R0
        MOVS     R4,R2
//  255 	uint8_t		sbuf[W25Q_PAGE_SIZE+5];
//  256 	int			i;
//  257 	int32_t		ret = -1;
        MOVS     R6,#+0
        MVNS     R6,R6            ;; #-1
//  258 	uint32_t	Timer = 1000;		// 正常時は10程度
        MOVS     R5,#+250
        LSLS     R5,R5,#+2        ;; #+1000
//  259 
//  260 
//  261 	if ( (0 < length) && (length <= W25Q_PAGE_SIZE) ) {
        MOVS     R0,R4
        SUBS     R0,R0,#+1
        CMP      R0,#+255
        BHI      ??ctrl_W25Q_write_page_0
//  262 
//  263 		// 書込み許可コマンド送信
//  264 		ret = clrl_W25Q_WriteEnable();
          CFI FunCall clrl_W25Q_WriteEnable
        BL       clrl_W25Q_WriteEnable
        MOVS     R6,R0
//  265 
//  266 		if (ret >= 0) {
        CMP      R6,#+0
        BMI      ??ctrl_W25Q_write_page_1
//  267 			// BUSY待ち
//  268 			if (ctrl_W25Q_IsBusy() == 0) {
          CFI FunCall ctrl_W25Q_IsBusy
        BL       ctrl_W25Q_IsBusy
        CMP      R0,#+0
        BNE      ??ctrl_W25Q_write_page_1
//  269 				ret = -1;
        MOVS     R6,#+0
        MVNS     R6,R6            ;; #-1
//  270 			}
//  271 		}
//  272 
//  273 		if (ret >= 0) {
??ctrl_W25Q_write_page_1:
        CMP      R6,#+0
        BMI      ??ctrl_W25Q_write_page_0
//  274 			// PAGE WRITEコマンド送信
//  275 			spia_ASSERT_MST_CS();
          CFI FunCall spia_ASSERT_MST_CS
        BL       spia_ASSERT_MST_CS
//  276 			sbuf[0] = CMD_PAGE_PROGRAM;
        MOVS     R0,#+2
        MOV      R1,SP
        STRB     R0,[R1, #+0]
//  277 			sbuf[1] = ((addr>>16) & 0xff);
        MOVS     R0,R7
        LSRS     R0,R0,#+16
        MOV      R1,SP
        STRB     R0,[R1, #+1]
//  278 			sbuf[2] = ((addr>>8) & 0xff); 
        LSRS     R0,R7,#+8
        MOV      R1,SP
        STRB     R0,[R1, #+2]
//  279 			sbuf[3] = (addr & 0xff);
        MOV      R0,SP
        STRB     R7,[R0, #+3]
//  280 			// 書き込みデータセット
//  281 			for ( i=0; i < length; i++) {
        MOVS     R0,#+0
        B        ??ctrl_W25Q_write_page_2
//  282 				sbuf[4+i] = data[i];
??ctrl_W25Q_write_page_3:
        LDR      R1,[SP, #+264]
        LDRB     R1,[R1, R0]
        MOV      R2,SP
        ADDS     R2,R2,R0
        STRB     R1,[R2, #+4]
//  283 			}
        ADDS     R0,R0,#+1
??ctrl_W25Q_write_page_2:
        CMP      R0,R4
        BLT      ??ctrl_W25Q_write_page_3
//  284 			ret = spia_SendData(sbuf, length + 4);
        ADDS     R4,R4,#+4
        MOVS     R1,R4
        MOV      R0,SP
          CFI FunCall spia_SendData
        BL       spia_SendData
        MOVS     R6,R0
//  285 			spia_NEGATE_MST_CS();
          CFI FunCall spia_NEGATE_MST_CS
        BL       spia_NEGATE_MST_CS
//  286 
//  287 			if (ret >= 0) {
        CMP      R6,#+0
        BMI      ??ctrl_W25Q_write_page_0
//  288 				// 完了待ち
//  289 				while (ctrl_W25Q_IsBusy() == 0) {
??ctrl_W25Q_write_page_4:
          CFI FunCall ctrl_W25Q_IsBusy
        BL       ctrl_W25Q_IsBusy
        CMP      R0,#+0
        BNE      ??ctrl_W25Q_write_page_0
//  290 					if (--Timer == 0) {
        SUBS     R5,R5,#+1
        CMP      R5,#+0
        BNE      ??ctrl_W25Q_write_page_4
//  291 						ret = -1;
        MOVS     R6,#+0
        MVNS     R6,R6            ;; #-1
//  292 						break;
//  293 					}
//  294 				}
//  295 			}
//  296 		}
//  297 	}
//  298 	return ret;
??ctrl_W25Q_write_page_0:
        MOVS     R0,R6
        ADD      SP,SP,#+268
          CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
//  299 }
          CFI EndBlock cfiBlock6
//  300 
//  301 
//  302 
//  303 /********************************************************************/
//  304 /*!
//  305  * \name	ctrl_W25Q_read
//  306  * \brief	FLASH 読み込み処理
//  307  * \param	addr    :: 読み出しアドレス
//  308  *          data    :: 格納アドレス
//  309  *          nBytes  :: 読み出しサイズ
//  310  * \return   0: 成功
//  311  *          -1: 失敗
//  312  * \note	
//  313  */
//  314 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function ctrl_W25Q_read
        THUMB
//  315 int32_t ctrl_W25Q_read(uint32_t addr ,  uint8_t *data ,  uint32_t nBytes )
//  316 {
ctrl_W25Q_read:
        PUSH     {R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+20
        SUB      SP,SP,#+12
          CFI CFA R13+32
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R7,R2
//  317 	int32_t		ret=0;
        MOVS     R6,#+0
//  318 	uint8_t		sbuf[5];
//  319 
//  320 
//  321 	spia_ASSERT_MST_CS();
          CFI FunCall spia_ASSERT_MST_CS
        BL       spia_ASSERT_MST_CS
//  322 
//  323 	// READコマンド設定
//  324 	sbuf[0] = CMD_READ_DATA;				// READコマンド
        MOVS     R0,#+3
        MOV      R1,SP
        STRB     R0,[R1, #+0]
//  325 	sbuf[1] = ((addr>>16) & 0xff);			// A23-A16
        MOVS     R0,R4
        LSRS     R0,R0,#+16
        MOV      R1,SP
        STRB     R0,[R1, #+1]
//  326 	sbuf[2] = ((addr>>8) & 0xff);			// A15-A08
        LSRS     R0,R4,#+8
        MOV      R1,SP
        STRB     R0,[R1, #+2]
//  327 	sbuf[3] = (addr & 0xff);				// A07-A00
        MOV      R0,SP
        STRB     R4,[R0, #+3]
//  328 
//  329 	// READコマンド送信
//  330 	spia_SendData(sbuf, 4);
        MOVS     R1,#+4
        MOV      R0,SP
          CFI FunCall spia_SendData
        BL       spia_SendData
//  331 
//  332 	// データ取得
//  333 	ret = spia_ReceiveData(data, nBytes);
        MOVS     R1,R7
        MOVS     R0,R5
          CFI FunCall spia_ReceiveData
        BL       spia_ReceiveData
        MOVS     R6,R0
//  334   
//  335 	spia_NEGATE_MST_CS();
          CFI FunCall spia_NEGATE_MST_CS
        BL       spia_NEGATE_MST_CS
//  336 
//  337 	return ret;
        MOVS     R0,R6
        POP      {R1-R7,PC}       ;; return
//  338 }
          CFI EndBlock cfiBlock7
//  339 
//  340 
//  341 
//  342 /********************************************************************/
//  343 /*!
//  344  * \name	clrl_W25Q_WriteEnable
//  345  * \brief	FLASH 書込み許可コマンド送信処理
//  346  * \param	なし
//  347  * \return   0: 成功
//  348  *          -1: 失敗
//  349  * \note	ERASE, WRITE実行前に呼び出す必要があります。
//  350  */
//  351 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function clrl_W25Q_WriteEnable
        THUMB
//  352 int32_t clrl_W25Q_WriteEnable( void )
//  353 {
clrl_W25Q_WriteEnable:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
//  354 	int32_t		ret=-1;
        MOVS     R0,#+0
        MVNS     R0,R0            ;; #-1
//  355 	uint8_t		r1=0;
        MOVS     R0,#+0
//  356 	uint8_t		sbuf[1];
//  357 	uint32_t	Timer = 1000;		// 正常時は0程度
        MOVS     R4,#+250
        LSLS     R4,R4,#+2        ;; #+1000
//  358 
//  359 
//  360 	// WRITE ENABLEコマンド送信
//  361 	spia_ASSERT_MST_CS();
          CFI FunCall spia_ASSERT_MST_CS
        BL       spia_ASSERT_MST_CS
//  362 	sbuf[0] = CMD_WRIRE_ENABLE;
        MOVS     R0,#+6
        MOV      R1,SP
        STRB     R0,[R1, #+0]
//  363 	spia_SendData(sbuf, 1);
        MOVS     R1,#+1
        MOV      R0,SP
          CFI FunCall spia_SendData
        BL       spia_SendData
//  364 	spia_NEGATE_MST_CS();
          CFI FunCall spia_NEGATE_MST_CS
        BL       spia_NEGATE_MST_CS
//  365 
//  366 	// WRITE ENABLE完了待ち
//  367 	while(1) {
//  368 		r1 = ctrl_W25Q_readStatusReg1();
??clrl_W25Q_WriteEnable_0:
          CFI FunCall ctrl_W25Q_readStatusReg1
        BL       ctrl_W25Q_readStatusReg1
//  369 		if (r1 & SR1_WEN_MASK) {
        LSLS     R0,R0,#+30
        BPL      ??clrl_W25Q_WriteEnable_1
//  370 			ret = 0;
        MOVS     R0,#+0
//  371 			break;
        B        ??clrl_W25Q_WriteEnable_2
//  372 		}
//  373 		if (--Timer == 0) {
??clrl_W25Q_WriteEnable_1:
        SUBS     R4,R4,#+1
        CMP      R4,#+0
        BNE      ??clrl_W25Q_WriteEnable_0
//  374 			ret = -1;
        MOVS     R0,#+0
        MVNS     R0,R0            ;; #-1
//  375 			break;
//  376 		}
//  377 	}
//  378 
//  379 	return ret;
??clrl_W25Q_WriteEnable_2:
        POP      {R1,R2,R4,PC}    ;; return
//  380 }
          CFI EndBlock cfiBlock8
//  381 
//  382 
//  383 /********************************************************************/
//  384 /*!
//  385  * \name	ctrl_W25Q_IsBusy
//  386  * \brief	FLASH 書込み等の処理中チェック
//  387  * \param	なし
//  388  * \return  0 : 作業中, -1 : アイドル中
//  389  * \note	ERASE, WRITEの書き込みの終了が確認できます。
//  390  */
//  391 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function ctrl_W25Q_IsBusy
        THUMB
//  392 int32_t ctrl_W25Q_IsBusy( void )
//  393 {
ctrl_W25Q_IsBusy:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
//  394 	int32_t		ret=-1;
        MOVS     R4,#+0
        MVNS     R4,R4            ;; #-1
//  395 	uint8_t		r1;
//  396 
//  397 	// レジスタ１取得
//  398 	r1 = ctrl_W25Q_readStatusReg1();
          CFI FunCall ctrl_W25Q_readStatusReg1
        BL       ctrl_W25Q_readStatusReg1
//  399 
//  400 	if ( (r1 != 0xff) && (r1 & SR1_BUSY_MASK) ) {
        UXTB     R0,R0
        CMP      R0,#+255
        BEQ      ??ctrl_W25Q_IsBusy_0
        LSLS     R0,R0,#+31
        BPL      ??ctrl_W25Q_IsBusy_0
//  401 		ret = 0;
        MOVS     R4,#+0
//  402 	}
//  403 
//  404 	return ret;
??ctrl_W25Q_IsBusy_0:
        MOVS     R0,R4
        POP      {R4,PC}          ;; return
//  405 }
          CFI EndBlock cfiBlock9
//  406 
//  407 
//  408 /********************************************************************/
//  409 /*!
//  410  * \name	ctrl_SPIA_end
//  411  * \brief	SPIA Ch0 の使用を中止する
//  412  *          CS, SDI, SDO, CLK端子をHi-Z stateとする
//  413  * \param	なし
//  414  * \return  なし
//  415  * \note	必要時に、呼ばれること
//  416  */
//  417 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function ctrl_SPIA_end
        THUMB
//  418 void ctrl_SPIA_end(void)
//  419 {
ctrl_SPIA_end:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//  420 	spia_Stop();
          CFI FunCall spia_Stop
        BL       spia_Stop
//  421 	spia_end();
          CFI FunCall spia_end
        BL       spia_end
//  422 }
        POP      {R0,PC}          ;; return
          CFI EndBlock cfiBlock10
//  423 
//  424 /********************************************************************/
//  425 /*!
//  426  * \name	ctrl_SPIA_re_start
//  427  * \brief	SPIA Ch0 の使用を再開する
//  428  *          CS, SDI, SDO, CLK端子を再設定する
//  429  * \param	なし
//  430  * \return  なし
//  431  * \note	ctrl_SPIA_endの復活時に、呼ばれること
//  432  */
//  433 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function ctrl_SPIA_re_start
        THUMB
//  434 void ctrl_SPIA_re_start(void)
//  435 {
ctrl_SPIA_re_start:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//  436 	spia_re_start();
          CFI FunCall spia_re_start
        BL       spia_re_start
//  437 	spia_Start();
          CFI FunCall spia_Start
        BL       spia_Start
//  438 }
        POP      {R0,PC}          ;; return
          CFI EndBlock cfiBlock11

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION CTRL_PRG_BLOCK:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
//  439 
// 
// 554 bytes in section .text
// 
// 554 bytes of CODE memory
//
//Errors: none
//Warnings: none
