###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       17/May/2019  13:31:39
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\hal\ctrl_SM7500JE.c
#    Command line =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\hal\ctrl_SM7500JE.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_A -lCN
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        -lA
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List\ctrl_SM7500JE.lst
#    Object file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj\ctrl_SM7500JE.o
#
###############################################################################

C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\hal\ctrl_SM7500JE.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    ctrl_SM7500JE.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    2017.10.2
      8            * @brief   このファイルはUART CH0を使用してデバイス(SM7500JE)を制御するソフトウェアです。
      9            ******************************************************************************
     10            $Id: ctrl_SM7500JE.c 255 2018-08-01 07:28:31Z shitaoka $
     11            * @attention
     12            *
     13            *****************************************************************************
     14          */ 
     15          
     16          
     17          #include <string.h>
     18          #include <stdio.h>
     19          #include <stdlib.h>
     20          #include "board.h"
     21          #include "drv_uart2_0.h"
     22          #include "ctrl_SM7500JE.h"
     23          #include "gnss_gw_common.h"
     24          #include "man_timer.h"
     25          #include "man_memory.h"
     26          #include "man_usb.h"
     27          #include "man_error.h"
     28          
     29          
     30          #pragma section = "CTRL_PRG_BLOCK"
     31          
     32          /************************************************************************/
     33          /* declaration of structure                                             */
     34          /************************************************************************/
     35          
     36          
     37          #define	CTRL_SM7500JE_TIMER_ID_CMD1	(TIMER_MAN_ID_CTRL_LTE + 0)
     38          #define	CTRL_SM7500JE_TIMER_ID_CMD2	(TIMER_MAN_ID_CTRL_LTE + 1)
     39          #define	CTRL_SM7500JE_TIMER_ID_CMD0	(TIMER_MAN_ID_CTRL_LTE + 2)
     40          
     41          
     42          #define	CTRL_SM7500JE_RECV_BUFF_MAX		1024
     43          #define	CTRL_SM7500JE_READY_BUFF_MAX	10
     44          
     45          #define	CTRL_SM7500JE_SAVE_BUFF_MAX		3
     46          
     47          #define	CTRL_SM7500JE_DEBUG_BUFF_MAX	1024
     48          
     49          
     50          
     51          #define	CTRL_SM7500JE_STS_READY			0		// 要求待ち
     52          #define	CTRL_SM7500JE_STS_RESP			1		// 通常応答待ち
     53          #define	CTRL_SM7500JE_STS_WRESP1		2		// ２行応答待ち(１行目)
     54          #define	CTRL_SM7500JE_STS_WRESP2		3		// ２行応答待ち(２行目)
     55          #define	CTRL_SM7500JE_STS_ACK			4		// '>'応答待ち
     56          
     57          #define	TIMER_MAN_USED		1		// 使用中
     58          
     59          
     60          #define		ASCII_CR		0x0d
     61          #define		ASCII_LF		0x0a
     62          #define		ASCII_CTR_Z		0x1a
     63          
     64          
     65          // 応答受信バッファ
     66          typedef struct _ctrl_sm7500_recv_info_t {
     67          	uint8_t		rcv_buff[CTRL_SM7500JE_RECV_BUFF_MAX];
     68          	uint32_t	write_p;
     69          } ctrl_sm7500_recv_info_t;
     70          
     71          
     72          // コマンド０要求
     73          typedef struct _ctrl_sm7500_req0_info_t {
     74          	uint8_t		resp[CTRL_SM7500JE_READY_BUFF_MAX];
     75          	int32_t		resp_len;
     76          	int32_t		id;
     77          	func_sim1	callback1;
     78          
     79          	int32_t		timeout;
     80          	uint32_t	start_time;			// コマンド開始時間
     81          } ctrl_sm7500_req0_info_t;
     82          
     83          // コマンド１要求
     84          typedef struct _ctrl_sm7500_req1_info_t {
     85          	int32_t		id;
     86          
     87          //	int32_t		end_len;								// 終了を判断する数
     88          //	uint8_t		end_code[CTRL_SM7500JE_END_BUFF_MAX];	// 終了を判断する文字コード
     89          	func_sim1	callback1;
     90          
     91          	int32_t		timeout;
     92          	uint32_t	start_time;			// コマンド開始時間
     93          } ctrl_sm7500_req1_info_t;
     94          
     95          // コマンド２要求
     96          typedef struct _ctrl_sm7500_req2_info_t {
     97          	int32_t		id;
     98          	func_sim2	callback2;
     99          
    100          	int32_t		timeout;
    101          	uint32_t	start_time;			// コマンド開始時間
    102          } ctrl_sm7500_req2_info_t;
    103          
    104          // 受信通知先
    105          typedef struct _ctrl_sm7500_noti_info_t {
    106          	int32_t		id;
    107          	func_sim3	callback3;
    108          } ctrl_sm7500_noti_info_t;
    109          
    110          
    111          // 要求に対する応答
    112          typedef struct _ctrl_sm7500_resp_cmd_t {
    113          	int32_t					flag;
    114          	int32_t					id;
    115          	int32_t					status;
    116          } ctrl_sm7500_resp_cmd_t;
    117          
    118          // sm7500ワーク
    119          typedef struct _ctrl_sm7500_work_t {
    120          	int32_t						status;
    121          	uint8_t						data_buff[3];	// 受信データ保存
    122          	int32_t						save_cnt;
    123          	ctrl_sm7500_recv_info_t		save_info[CTRL_SM7500JE_SAVE_BUFF_MAX];		// 保存バッファ
    124          
    125          	ctrl_sm7500_req1_info_t		request1;		// コマンド１
    126          	ctrl_sm7500_req2_info_t		request2;		// コマンド２
    127          	ctrl_sm7500_req0_info_t		request0;		// コマンド０
    128          	ctrl_sm7500_noti_info_t		recv_noti;		// 受信通知先
    129          	ctrl_sm7500_resp_cmd_t		resp_cmd;		// 要求に対する応答
    130          	uint8_t						rcv_data[CTRL_SM7500JE_DEBUG_BUFF_MAX];
    131          	uint32_t					write_p;
    132          	uint8_t						snd_data[CTRL_SM7500JE_DEBUG_BUFF_MAX];
    133          	uint32_t					write_p_snd;
    134          } ctrl_sm7500_work_t;
    135          
    136          
    137          /************************************************************************/
    138          /* definition of variables                                              */
    139          /************************************************************************/
    140          

   \                                 In section .bss, align 4
    141          static ctrl_sm7500_work_t		ctrl_sm7500_work;			// sm7500用変数
   \                     ctrl_sm7500_work:
   \   00000000                      DS8 5236
    142          
    143          
    144          
    145          /********************************************************************/
    146          /*	callback関数                                                    */
    147          /********************************************************************/
    148          
    149          /********************************************************************/
    150          /*!
    151           * \name	ctrl_SM7500JE_cmd_callback
    152           * \brief	要求に対するcallback処理
    153           * \param	id     : ユニークID
    154           *          status : 受信結果
    155           * \return  なし
    156           * \note	
    157           */
    158          /********************************************************************/
    159          static void ctrl_SM7500JE_cmd_callback(int32_t id, int32_t status)
    160          {
    161          	ctrl_sm7500_work.resp_cmd.flag = 1;
    162          	ctrl_sm7500_work.resp_cmd.id = id;
    163          	ctrl_sm7500_work.resp_cmd.status = status;
    164          }
    165          
    166          /********************************************************************/
    167          /*	static関数                                                      */
    168          /********************************************************************/
    169          
    170          /********************************************************************/
    171          /*!
    172           * \name	ctrl_SM7500JE_get_char
    173           * \brief	応答取得処理
    174           * \param	
    175           * \return  
    176           * \note	
    177           */
    178          /********************************************************************/

   \                                 In section .text, align 4, keep-with-next
    179          static void ctrl_SM7500JE_get_char( void )
    180          {
   \                     ctrl_SM7500JE_get_char: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
    181          	int32_t		read_data;
    182          	int32_t		i;
    183          	int32_t		ret;
    184          	uint32_t	end_time, time;
    185          	int32_t		loop;
    186          
    187          	// 12回ずつ受信バッファをチェックする
    188          	for (loop=0; loop<12; loop++) {
   \   00000002   0x2500             MOVS     R5,#+0
   \   00000004   0xE000             B        ??ctrl_SM7500JE_get_char_0
   \                     ??ctrl_SM7500JE_get_char_1: (+1)
   \   00000006   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ctrl_SM7500JE_get_char_0: (+1)
   \   00000008   0x2D0C             CMP      R5,#+12
   \   0000000A   0xDB00             BLT      .+4
   \   0000000C   0xE110             B        ??ctrl_SM7500JE_get_char_2
    189          		read_data = UART2_0_GetChar();
   \   0000000E   0x.... 0x....      BL       UART2_0_GetChar
   \   00000012   0x0004             MOVS     R4,R0
    190          		if (read_data != -1) {
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD100             BNE      .+4
   \   0000001C   0xE108             B        ??ctrl_SM7500JE_get_char_3
    191          
    192          			ctrl_sm7500_work.rcv_data[ctrl_sm7500_work.write_p] = read_data;
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x499C             LDR      R1,??ctrl_SM7500JE_get_char_4
   \   00000022   0x4A9D             LDR      R2,??ctrl_SM7500JE_get_char_4+0x4
   \   00000024   0x6812             LDR      R2,[R2, #+0]
   \   00000026   0x1889             ADDS     R1,R1,R2
   \   00000028   0x4A9C             LDR      R2,??ctrl_SM7500JE_get_char_4+0x8  ;; 0xc6c
   \   0000002A   0x5488             STRB     R0,[R1, R2]
    193          			ctrl_sm7500_work.write_p++;
   \   0000002C   0x489A             LDR      R0,??ctrl_SM7500JE_get_char_4+0x4
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0x4999             LDR      R1,??ctrl_SM7500JE_get_char_4+0x4
   \   00000034   0x6008             STR      R0,[R1, #+0]
    194          			if (ctrl_sm7500_work.write_p >= 1024) {
   \   00000036   0x4898             LDR      R0,??ctrl_SM7500JE_get_char_4+0x4
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x2180             MOVS     R1,#+128
   \   0000003C   0x00C9             LSLS     R1,R1,#+3        ;; #+1024
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD302             BCC      ??ctrl_SM7500JE_get_char_5
    195          				ctrl_sm7500_work.write_p = 0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x4994             LDR      R1,??ctrl_SM7500JE_get_char_4+0x4
   \   00000046   0x6008             STR      R0,[R1, #+0]
    196          			}
    197          
    198          			// 受信データを保存する
    199          			ctrl_sm7500_work.data_buff[2] = ctrl_sm7500_work.data_buff[1];
   \                     ??ctrl_SM7500JE_get_char_5: (+1)
   \   00000048   0x4892             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   0000004A   0x7940             LDRB     R0,[R0, #+5]
   \   0000004C   0x4991             LDR      R1,??ctrl_SM7500JE_get_char_4
   \   0000004E   0x7188             STRB     R0,[R1, #+6]
    200          			ctrl_sm7500_work.data_buff[1] = ctrl_sm7500_work.data_buff[0];
   \   00000050   0x4890             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   00000052   0x7900             LDRB     R0,[R0, #+4]
   \   00000054   0x498F             LDR      R1,??ctrl_SM7500JE_get_char_4
   \   00000056   0x7148             STRB     R0,[R1, #+5]
    201          			ctrl_sm7500_work.data_buff[0] = read_data;
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x498E             LDR      R1,??ctrl_SM7500JE_get_char_4
   \   0000005C   0x7108             STRB     R0,[R1, #+4]
    202          
    203          			// ACK待ちの場合
    204          			if (ctrl_sm7500_work.status == CTRL_SM7500JE_STS_ACK) {
   \   0000005E   0x488D             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x2804             CMP      R0,#+4
   \   00000064   0xD116             BNE      ??ctrl_SM7500JE_get_char_6
    205          				if (read_data == '>') {
   \   00000066   0x2C3E             CMP      R4,#+62
   \   00000068   0xD000             BEQ      .+4
   \   0000006A   0xE0B7             B        ??ctrl_SM7500JE_get_char_7
    206          					if (ctrl_sm7500_work.request0.callback1 != NULL) {
   \   0000006C   0x....             LDR      R0,??DataTable0
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD100             BNE      .+4
   \   00000074   0xE0B2             B        ??ctrl_SM7500JE_get_char_7
    207          						ctrl_sm7500_work.request0.callback1(&ctrl_sm7500_work.data_buff[0], 
    208          															1,
    209          															ctrl_sm7500_work.request0.id,
    210          															CTRL_SM7500JE_STATUS_OK);
   \   00000076   0x2300             MOVS     R3,#+0
   \   00000078   0x....             LDR      R0,??DataTable0_1
   \   0000007A   0x6802             LDR      R2,[R0, #+0]
   \   0000007C   0x2101             MOVS     R1,#+1
   \   0000007E   0x....             LDR      R0,??DataTable0_2
   \   00000080   0x....             LDR      R6,??DataTable0
   \   00000082   0x6836             LDR      R6,[R6, #+0]
   \   00000084   0x47B0             BLX      R6
    211          						ctrl_sm7500_work.request0.callback1 = NULL;
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x....             LDR      R1,??DataTable0
   \   0000008A   0x6008             STR      R0,[R1, #+0]
    212          
    213          						// コマンド待ち状態に戻す
    214          						ctrl_sm7500_work.status = CTRL_SM7500JE_STS_READY;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x4981             LDR      R1,??ctrl_SM7500JE_get_char_4
   \   00000090   0x6008             STR      R0,[R1, #+0]
   \   00000092   0xE0A3             B        ??ctrl_SM7500JE_get_char_7
    215          						// タイマ停止
    216          //						man_timer_cancel_wait(CTRL_SM7500JE_TIMER_ID_CMD0, ctrl_sm7500_work.request0.timeout);
    217          					}
    218          				}
    219          			}
    220          
    221          			else if (ctrl_sm7500_work.status == CTRL_SM7500JE_STS_RESP) {
   \                     ??ctrl_SM7500JE_get_char_6: (+1)
   \   00000094   0x487F             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0x2801             CMP      R0,#+1
   \   0000009A   0xD136             BNE      ??ctrl_SM7500JE_get_char_8
    222          				ctrl_sm7500_work.save_info[1].rcv_buff[ctrl_sm7500_work.save_info[1].write_p] = read_data;
   \   0000009C   0x0020             MOVS     R0,R4
   \   0000009E   0x497D             LDR      R1,??ctrl_SM7500JE_get_char_4
   \   000000A0   0x....             LDR      R2,??DataTable0_3
   \   000000A2   0x6812             LDR      R2,[R2, #+0]
   \   000000A4   0x1889             ADDS     R1,R1,R2
   \   000000A6   0x2282             MOVS     R2,#+130
   \   000000A8   0x00D2             LSLS     R2,R2,#+3        ;; #+1040
   \   000000AA   0x5488             STRB     R0,[R1, R2]
    223          				if (ctrl_sm7500_work.save_info[1].write_p < CTRL_SM7500JE_RECV_BUFF_MAX-1) {
   \   000000AC   0x....             LDR      R0,??DataTable0_3
   \   000000AE   0x6800             LDR      R0,[R0, #+0]
   \   000000B0   0x....             LDR      R1,??DataTable0_4  ;; 0x3ff
   \   000000B2   0x4288             CMP      R0,R1
   \   000000B4   0xD204             BCS      ??ctrl_SM7500JE_get_char_9
    224          					ctrl_sm7500_work.save_info[1].write_p++;
   \   000000B6   0x....             LDR      R0,??DataTable0_3
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0x1C40             ADDS     R0,R0,#+1
   \   000000BC   0x....             LDR      R1,??DataTable0_3
   \   000000BE   0x6008             STR      R0,[R1, #+0]
    225          				}
    226          
    227          				// 改行コード
    228          				if ( (ctrl_sm7500_work.data_buff[1] == ASCII_CR) && (ctrl_sm7500_work.data_buff[0] == ASCII_LF) ) {
   \                     ??ctrl_SM7500JE_get_char_9: (+1)
   \   000000C0   0x4874             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   000000C2   0x7940             LDRB     R0,[R0, #+5]
   \   000000C4   0x280D             CMP      R0,#+13
   \   000000C6   0xD000             BEQ      .+4
   \   000000C8   0xE088             B        ??ctrl_SM7500JE_get_char_7
   \   000000CA   0x4872             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   000000CC   0x7900             LDRB     R0,[R0, #+4]
   \   000000CE   0x280A             CMP      R0,#+10
   \   000000D0   0xD000             BEQ      .+4
   \   000000D2   0xE083             B        ??ctrl_SM7500JE_get_char_7
    229          					// CR+LFのみはパスする
    230          					if (ctrl_sm7500_work.save_info[1].write_p > 2) {
   \   000000D4   0x....             LDR      R0,??DataTable0_3
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0x2803             CMP      R0,#+3
   \   000000DA   0xD312             BCC      ??ctrl_SM7500JE_get_char_10
    231          						// 登録先にcallback1通知
    232          						if (ctrl_sm7500_work.request1.callback1 != NULL) {
   \   000000DC   0x....             LDR      R0,??DataTable0_5
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD00B             BEQ      ??ctrl_SM7500JE_get_char_11
    233          							ctrl_sm7500_work.request1.callback1(&ctrl_sm7500_work.save_info[1].rcv_buff[0], 
    234          																ctrl_sm7500_work.save_info[1].write_p,
    235          																ctrl_sm7500_work.request1.id,
    236          																CTRL_SM7500JE_STATUS_OK);
   \   000000E4   0x2300             MOVS     R3,#+0
   \   000000E6   0x....             LDR      R0,??DataTable0_6
   \   000000E8   0x6802             LDR      R2,[R0, #+0]
   \   000000EA   0x....             LDR      R0,??DataTable0_3
   \   000000EC   0x6801             LDR      R1,[R0, #+0]
   \   000000EE   0x....             LDR      R0,??DataTable0_7
   \   000000F0   0x....             LDR      R6,??DataTable0_5
   \   000000F2   0x6836             LDR      R6,[R6, #+0]
   \   000000F4   0x47B0             BLX      R6
    237          							ctrl_sm7500_work.request1.callback1 = NULL;
   \   000000F6   0x2000             MOVS     R0,#+0
   \   000000F8   0x....             LDR      R1,??DataTable0_5
   \   000000FA   0x6008             STR      R0,[R1, #+0]
    238          						}
    239          						// コマンド待ち状態に戻す
    240          						ctrl_sm7500_work.status = CTRL_SM7500JE_STS_READY;
   \                     ??ctrl_SM7500JE_get_char_11: (+1)
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x4965             LDR      R1,??ctrl_SM7500JE_get_char_4
   \   00000100   0x6008             STR      R0,[R1, #+0]
    241          						// タイマ１停止
    242          //						man_timer_cancel_wait(CTRL_SM7500JE_TIMER_ID_CMD1, ctrl_sm7500_work.request1.timeout);
    243          					}
    244          
    245          					// 保存領域1ポインタクリア
    246          					ctrl_sm7500_work.save_info[1].write_p = 0;
   \                     ??ctrl_SM7500JE_get_char_10: (+1)
   \   00000102   0x2000             MOVS     R0,#+0
   \   00000104   0x....             LDR      R1,??DataTable0_3
   \   00000106   0x6008             STR      R0,[R1, #+0]
   \   00000108   0xE068             B        ??ctrl_SM7500JE_get_char_7
    247          
    248          				}
    249          			}
    250          
    251          			else if (ctrl_sm7500_work.status == CTRL_SM7500JE_STS_WRESP1) {
   \                     ??ctrl_SM7500JE_get_char_8: (+1)
   \   0000010A   0x4862             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0x2802             CMP      R0,#+2
   \   00000110   0xD125             BNE      ??ctrl_SM7500JE_get_char_12
    252          				ctrl_sm7500_work.save_info[1].rcv_buff[ctrl_sm7500_work.save_info[1].write_p] = read_data;
   \   00000112   0x0020             MOVS     R0,R4
   \   00000114   0x495F             LDR      R1,??ctrl_SM7500JE_get_char_4
   \   00000116   0x....             LDR      R2,??DataTable0_3
   \   00000118   0x6812             LDR      R2,[R2, #+0]
   \   0000011A   0x1889             ADDS     R1,R1,R2
   \   0000011C   0x2282             MOVS     R2,#+130
   \   0000011E   0x00D2             LSLS     R2,R2,#+3        ;; #+1040
   \   00000120   0x5488             STRB     R0,[R1, R2]
    253          				if (ctrl_sm7500_work.save_info[1].write_p < CTRL_SM7500JE_RECV_BUFF_MAX-1) {
   \   00000122   0x....             LDR      R0,??DataTable0_3
   \   00000124   0x6800             LDR      R0,[R0, #+0]
   \   00000126   0x....             LDR      R1,??DataTable0_4  ;; 0x3ff
   \   00000128   0x4288             CMP      R0,R1
   \   0000012A   0xD204             BCS      ??ctrl_SM7500JE_get_char_13
    254          					ctrl_sm7500_work.save_info[1].write_p++;
   \   0000012C   0x....             LDR      R0,??DataTable0_3
   \   0000012E   0x6800             LDR      R0,[R0, #+0]
   \   00000130   0x1C40             ADDS     R0,R0,#+1
   \   00000132   0x....             LDR      R1,??DataTable0_3
   \   00000134   0x6008             STR      R0,[R1, #+0]
    255          				}
    256          
    257          				// 改行コード
    258          				if ( (ctrl_sm7500_work.data_buff[1] == ASCII_CR) && (ctrl_sm7500_work.data_buff[0] == ASCII_LF) ) {
   \                     ??ctrl_SM7500JE_get_char_13: (+1)
   \   00000136   0x4857             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   00000138   0x7940             LDRB     R0,[R0, #+5]
   \   0000013A   0x280D             CMP      R0,#+13
   \   0000013C   0xD14E             BNE      ??ctrl_SM7500JE_get_char_7
   \   0000013E   0x4855             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   00000140   0x7900             LDRB     R0,[R0, #+4]
   \   00000142   0x280A             CMP      R0,#+10
   \   00000144   0xD14A             BNE      ??ctrl_SM7500JE_get_char_7
    259          					// CR+LFのみはパスする
    260          					if (ctrl_sm7500_work.save_info[1].write_p > 2) {
   \   00000146   0x....             LDR      R0,??DataTable0_3
   \   00000148   0x6800             LDR      R0,[R0, #+0]
   \   0000014A   0x2803             CMP      R0,#+3
   \   0000014C   0xD303             BCC      ??ctrl_SM7500JE_get_char_14
    261          						ctrl_sm7500_work.status = CTRL_SM7500JE_STS_WRESP2;
   \   0000014E   0x2003             MOVS     R0,#+3
   \   00000150   0x4950             LDR      R1,??ctrl_SM7500JE_get_char_4
   \   00000152   0x6008             STR      R0,[R1, #+0]
   \   00000154   0xE042             B        ??ctrl_SM7500JE_get_char_7
    262          					}
    263          					else {
    264          						// 保存領域1ポインタクリア
    265          						ctrl_sm7500_work.save_info[1].write_p = 0;
   \                     ??ctrl_SM7500JE_get_char_14: (+1)
   \   00000156   0x2000             MOVS     R0,#+0
   \   00000158   0x....             LDR      R1,??DataTable0_3
   \   0000015A   0x6008             STR      R0,[R1, #+0]
   \   0000015C   0xE03E             B        ??ctrl_SM7500JE_get_char_7
    266          					}
    267          				}
    268          			}
    269          
    270          			else if (ctrl_sm7500_work.status == CTRL_SM7500JE_STS_WRESP2) {
   \                     ??ctrl_SM7500JE_get_char_12: (+1)
   \   0000015E   0x484D             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   00000160   0x6800             LDR      R0,[R0, #+0]
   \   00000162   0x2803             CMP      R0,#+3
   \   00000164   0xD13A             BNE      ??ctrl_SM7500JE_get_char_7
    271          				ctrl_sm7500_work.save_info[2].rcv_buff[ctrl_sm7500_work.save_info[2].write_p] = read_data;
   \   00000166   0x0020             MOVS     R0,R4
   \   00000168   0x494A             LDR      R1,??ctrl_SM7500JE_get_char_4
   \   0000016A   0x....             LDR      R2,??DataTable2
   \   0000016C   0x6812             LDR      R2,[R2, #+0]
   \   0000016E   0x1889             ADDS     R1,R1,R2
   \   00000170   0x....             LDR      R2,??DataTable0_8  ;; 0x814
   \   00000172   0x5488             STRB     R0,[R1, R2]
    272          				if (ctrl_sm7500_work.save_info[2].write_p < CTRL_SM7500JE_RECV_BUFF_MAX-1) {
   \   00000174   0x....             LDR      R0,??DataTable2
   \   00000176   0x6800             LDR      R0,[R0, #+0]
   \   00000178   0x....             LDR      R1,??DataTable0_4  ;; 0x3ff
   \   0000017A   0x4288             CMP      R0,R1
   \   0000017C   0xD204             BCS      ??ctrl_SM7500JE_get_char_15
    273          					ctrl_sm7500_work.save_info[2].write_p++;
   \   0000017E   0x....             LDR      R0,??DataTable2
   \   00000180   0x6800             LDR      R0,[R0, #+0]
   \   00000182   0x1C40             ADDS     R0,R0,#+1
   \   00000184   0x....             LDR      R1,??DataTable2
   \   00000186   0x6008             STR      R0,[R1, #+0]
    274          				}
    275          
    276          				// 改行コード
    277          				if ( (ctrl_sm7500_work.data_buff[1] == ASCII_CR) && (ctrl_sm7500_work.data_buff[0] == ASCII_LF) ) {
   \                     ??ctrl_SM7500JE_get_char_15: (+1)
   \   00000188   0x4842             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   0000018A   0x7940             LDRB     R0,[R0, #+5]
   \   0000018C   0x280D             CMP      R0,#+13
   \   0000018E   0xD125             BNE      ??ctrl_SM7500JE_get_char_7
   \   00000190   0x4840             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   00000192   0x7900             LDRB     R0,[R0, #+4]
   \   00000194   0x280A             CMP      R0,#+10
   \   00000196   0xD121             BNE      ??ctrl_SM7500JE_get_char_7
    278          					// CR+LFのみはパスする
    279          					if (ctrl_sm7500_work.save_info[2].write_p > 2) {
   \   00000198   0x....             LDR      R0,??DataTable2
   \   0000019A   0x6800             LDR      R0,[R0, #+0]
   \   0000019C   0x2803             CMP      R0,#+3
   \   0000019E   0xD31A             BCC      ??ctrl_SM7500JE_get_char_16
    280          						// 登録先にcallback2通知
    281          						if (ctrl_sm7500_work.request2.callback2 != NULL) {
   \   000001A0   0x....             LDR      R0,??DataTable3
   \   000001A2   0x6800             LDR      R0,[R0, #+0]
   \   000001A4   0x2800             CMP      R0,#+0
   \   000001A6   0xD010             BEQ      ??ctrl_SM7500JE_get_char_17
    282          							ctrl_sm7500_work.request2.callback2(  &ctrl_sm7500_work.save_info[1].rcv_buff[0],
    283          																	ctrl_sm7500_work.save_info[1].write_p,
    284          																	&ctrl_sm7500_work.save_info[2].rcv_buff[0],
    285          																	ctrl_sm7500_work.save_info[2].write_p,
    286          																	ctrl_sm7500_work.request2.id,
    287          																	CTRL_SM7500JE_STATUS_OK);
   \   000001A8   0x2000             MOVS     R0,#+0
   \   000001AA   0x9001             STR      R0,[SP, #+4]
   \   000001AC   0x....             LDR      R0,??DataTable3_1
   \   000001AE   0x6800             LDR      R0,[R0, #+0]
   \   000001B0   0x9000             STR      R0,[SP, #+0]
   \   000001B2   0x....             LDR      R0,??DataTable2
   \   000001B4   0x6803             LDR      R3,[R0, #+0]
   \   000001B6   0x....             LDR      R2,??DataTable3_2
   \   000001B8   0x....             LDR      R0,??DataTable0_3
   \   000001BA   0x6801             LDR      R1,[R0, #+0]
   \   000001BC   0x....             LDR      R0,??DataTable0_7
   \   000001BE   0x....             LDR      R6,??DataTable3
   \   000001C0   0x6836             LDR      R6,[R6, #+0]
   \   000001C2   0x47B0             BLX      R6
    288          							ctrl_sm7500_work.request2.callback2 = NULL;
   \   000001C4   0x2000             MOVS     R0,#+0
   \   000001C6   0x....             LDR      R1,??DataTable3
   \   000001C8   0x6008             STR      R0,[R1, #+0]
    289          						}
    290          						// コマンド待ち状態に戻す
    291          						ctrl_sm7500_work.status = CTRL_SM7500JE_STS_READY;
   \                     ??ctrl_SM7500JE_get_char_17: (+1)
   \   000001CA   0x2000             MOVS     R0,#+0
   \   000001CC   0x4931             LDR      R1,??ctrl_SM7500JE_get_char_4
   \   000001CE   0x6008             STR      R0,[R1, #+0]
    292          						// タイマ停止
    293          //						man_timer_cancel_wait(CTRL_SM7500JE_TIMER_ID_CMD2, ctrl_sm7500_work.request2.timeout);
    294          						// 保存領域1, 2ポインタクリア
    295          						ctrl_sm7500_work.save_info[1].write_p = 0;
   \   000001D0   0x2000             MOVS     R0,#+0
   \   000001D2   0x....             LDR      R1,??DataTable0_3
   \   000001D4   0x6008             STR      R0,[R1, #+0]
    296          					}
    297          					// 保存領域2ポインタクリア
    298          					ctrl_sm7500_work.save_info[2].write_p = 0;
   \                     ??ctrl_SM7500JE_get_char_16: (+1)
   \   000001D6   0x2000             MOVS     R0,#+0
   \   000001D8   0x....             LDR      R1,??DataTable2
   \   000001DA   0x6008             STR      R0,[R1, #+0]
    299          				}
    300          			}
    301          
    302          			
    303          			ctrl_sm7500_work.save_info[0].rcv_buff[ctrl_sm7500_work.save_info[0].write_p] = read_data;
   \                     ??ctrl_SM7500JE_get_char_7: (+1)
   \   000001DC   0x482D             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   000001DE   0x....             LDR      R1,??DataTable2_1
   \   000001E0   0x6809             LDR      R1,[R1, #+0]
   \   000001E2   0x1840             ADDS     R0,R0,R1
   \   000001E4   0x7304             STRB     R4,[R0, #+12]
    304          			if (ctrl_sm7500_work.save_info[0].write_p < CTRL_SM7500JE_RECV_BUFF_MAX-1) {
   \   000001E6   0x....             LDR      R0,??DataTable2_1
   \   000001E8   0x6800             LDR      R0,[R0, #+0]
   \   000001EA   0x....             LDR      R1,??DataTable0_4  ;; 0x3ff
   \   000001EC   0x4288             CMP      R0,R1
   \   000001EE   0xD204             BCS      ??ctrl_SM7500JE_get_char_18
    305          				ctrl_sm7500_work.save_info[0].write_p++;
   \   000001F0   0x....             LDR      R0,??DataTable2_1
   \   000001F2   0x6800             LDR      R0,[R0, #+0]
   \   000001F4   0x1C40             ADDS     R0,R0,#+1
   \   000001F6   0x....             LDR      R1,??DataTable2_1
   \   000001F8   0x6008             STR      R0,[R1, #+0]
    306          			}
    307          
    308          			// 改行コード
    309          			if ( (ctrl_sm7500_work.data_buff[1] == ASCII_CR) && (ctrl_sm7500_work.data_buff[0] == ASCII_LF) ) {
   \                     ??ctrl_SM7500JE_get_char_18: (+1)
   \   000001FA   0x4826             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   000001FC   0x7940             LDRB     R0,[R0, #+5]
   \   000001FE   0x280D             CMP      R0,#+13
   \   00000200   0xD000             BEQ      .+4
   \   00000202   0xE700             B        ??ctrl_SM7500JE_get_char_1
   \   00000204   0x4823             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   00000206   0x7900             LDRB     R0,[R0, #+4]
   \   00000208   0x280A             CMP      R0,#+10
   \   0000020A   0xD000             BEQ      .+4
   \   0000020C   0xE6FB             B        ??ctrl_SM7500JE_get_char_1
    310          				// 全てのデータを通知する
    311          				// 登録先にcallback3で通知
    312          				if (ctrl_sm7500_work.recv_noti.callback3 != NULL) {
   \   0000020E   0x....             LDR      R0,??DataTable3_3
   \   00000210   0x6800             LDR      R0,[R0, #+0]
   \   00000212   0x2800             CMP      R0,#+0
   \   00000214   0xD008             BEQ      ??ctrl_SM7500JE_get_char_19
    313          					ctrl_sm7500_work.recv_noti.callback3(&ctrl_sm7500_work.save_info[0].rcv_buff[0], 
    314          														ctrl_sm7500_work.save_info[0].write_p,
    315          														ctrl_sm7500_work.recv_noti.id,
    316          														CTRL_SM7500JE_STATUS_OK);
   \   00000216   0x2300             MOVS     R3,#+0
   \   00000218   0x....             LDR      R0,??DataTable3_4
   \   0000021A   0x6802             LDR      R2,[R0, #+0]
   \   0000021C   0x....             LDR      R0,??DataTable2_1
   \   0000021E   0x6801             LDR      R1,[R0, #+0]
   \   00000220   0x....             LDR      R0,??DataTable3_5
   \   00000222   0x....             LDR      R4,??DataTable3_3
   \   00000224   0x6824             LDR      R4,[R4, #+0]
   \   00000226   0x47A0             BLX      R4
    317          				}
    318          				// 保存領域1ポインタクリア
    319          				ctrl_sm7500_work.save_info[0].write_p = 0;
   \                     ??ctrl_SM7500JE_get_char_19: (+1)
   \   00000228   0x2000             MOVS     R0,#+0
   \   0000022A   0x....             LDR      R1,??DataTable2_1
   \   0000022C   0x6008             STR      R0,[R1, #+0]
    320          				
    321          				// 上位に権限を渡すために一旦終了させる
    322          				break;
   \   0000022E   0xE7FF             B        ??ctrl_SM7500JE_get_char_2
    323          			}
    324          		}
    325          
    326          		// 受信データなし
    327          		else {
    328          			break;
    329          		}
    330          	}
    331          
    332          	end_time = man_timer_get_1ms_count();
   \                     ??ctrl_SM7500JE_get_char_3: (+1)
   \                     ??ctrl_SM7500JE_get_char_2: (+1)
   \   00000230   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000234   0x0004             MOVS     R4,R0
    333          
    334          	// ACK待ちのタイムアウト処理
    335          	if (ctrl_sm7500_work.status == CTRL_SM7500JE_STS_ACK) {
   \   00000236   0x4817             LDR      R0,??ctrl_SM7500JE_get_char_4
   \   00000238   0x6800             LDR      R0,[R0, #+0]
   \   0000023A   0x2804             CMP      R0,#+4
   \   0000023C   0xD130             BNE      ??ctrl_SM7500JE_get_char_20
    336          		time = man_timer_get_elapsed_time(ctrl_sm7500_work.request0.start_time, end_time);
   \   0000023E   0x0021             MOVS     R1,R4
   \   00000240   0x....             LDR      R0,??DataTable3_6
   \   00000242   0x6800             LDR      R0,[R0, #+0]
   \   00000244   0x.... 0x....      BL       man_timer_get_elapsed_time
    337          		if (time > ctrl_sm7500_work.request0.timeout) {
   \   00000248   0x....             LDR      R1,??DataTable3_7
   \   0000024A   0x6809             LDR      R1,[R1, #+0]
   \   0000024C   0x4281             CMP      R1,R0
   \   0000024E   0xD300             BCC      .+4
   \   00000250   0xE08B             B        ??ctrl_SM7500JE_get_char_21
    338          			// エラー情報登録
    339          			man_error_setting(MAN_ERROR_CTRL_SM, ctrl_sm7500_work.request0.start_time, end_time);
   \   00000252   0x23FF             MOVS     R3,#+255
   \   00000254   0x3354             ADDS     R3,R3,#+84       ;; #+339
   \   00000256   0x0022             MOVS     R2,R4
   \   00000258   0x....             LDR      R0,??DataTable3_6
   \   0000025A   0x6801             LDR      R1,[R0, #+0]
   \   0000025C   0x200E             MOVS     R0,#+14
   \   0000025E   0x.... 0x....      BL       man_error_set
    340          			// 登録先にcallback1通知
    341          			if (ctrl_sm7500_work.request0.callback1 != NULL) {
   \   00000262   0x....             LDR      R0,??DataTable0
   \   00000264   0x6800             LDR      R0,[R0, #+0]
   \   00000266   0x2800             CMP      R0,#+0
   \   00000268   0xD100             BNE      .+4
   \   0000026A   0xE07E             B        ??ctrl_SM7500JE_get_char_21
    342          				ctrl_sm7500_work.request0.callback1(&ctrl_sm7500_work.save_info[1].rcv_buff[0], 
    343          													ctrl_sm7500_work.save_info[1].write_p,
    344          													ctrl_sm7500_work.request0.id,
    345          													CTRL_SM7500JE_STATUS_TIMEOUT);
   \   0000026C   0x2300             MOVS     R3,#+0
   \   0000026E   0x43DB             MVNS     R3,R3            ;; #-1
   \   00000270   0x....             LDR      R0,??DataTable0_1
   \   00000272   0x6802             LDR      R2,[R0, #+0]
   \   00000274   0x....             LDR      R0,??DataTable0_3
   \   00000276   0x6801             LDR      R1,[R0, #+0]
   \   00000278   0x....             LDR      R0,??DataTable0_7
   \   0000027A   0x....             LDR      R4,??DataTable0
   \   0000027C   0x6824             LDR      R4,[R4, #+0]
   \   0000027E   0x47A0             BLX      R4
    346          				ctrl_sm7500_work.request0.callback1 = NULL;
   \   00000280   0x2000             MOVS     R0,#+0
   \   00000282   0x....             LDR      R1,??DataTable0
   \   00000284   0x6008             STR      R0,[R1, #+0]
    347          
    348          				// 保存領域1ポインタクリア
    349          				ctrl_sm7500_work.save_info[1].write_p = 0;
   \   00000286   0x2000             MOVS     R0,#+0
   \   00000288   0x....             LDR      R1,??DataTable0_3
   \   0000028A   0x6008             STR      R0,[R1, #+0]
    350          
    351          				// コマンド待ち状態に戻す
    352          				ctrl_sm7500_work.status = CTRL_SM7500JE_STS_READY;
   \   0000028C   0x2000             MOVS     R0,#+0
   \   0000028E   0x4901             LDR      R1,??ctrl_SM7500JE_get_char_4
   \   00000290   0x6008             STR      R0,[R1, #+0]
   \   00000292   0xE06A             B        ??ctrl_SM7500JE_get_char_21
   \                     ??ctrl_SM7500JE_get_char_4:
   \   00000294   0x........         DC32     ctrl_sm7500_work
   \   00000298   0x........         DC32     ctrl_sm7500_work+0x106C
   \   0000029C   0x00000C6C         DC32     0xc6c
    353          			}
    354          		}
    355          	}
    356          
    357          	// １応答コマンドのタイムアウト処理
    358          	else if (ctrl_sm7500_work.status == CTRL_SM7500JE_STS_RESP) {
   \                     ??ctrl_SM7500JE_get_char_20: (+1)
   \   000002A0   0x....             LDR      R0,??DataTable4
   \   000002A2   0x6800             LDR      R0,[R0, #+0]
   \   000002A4   0x2801             CMP      R0,#+1
   \   000002A6   0xD128             BNE      ??ctrl_SM7500JE_get_char_22
    359          		time = man_timer_get_elapsed_time(ctrl_sm7500_work.request1.start_time, end_time);
   \   000002A8   0x0021             MOVS     R1,R4
   \   000002AA   0x....             LDR      R0,??DataTable3_8
   \   000002AC   0x6800             LDR      R0,[R0, #+0]
   \   000002AE   0x.... 0x....      BL       man_timer_get_elapsed_time
    360          		if (time > ctrl_sm7500_work.request1.timeout) {
   \   000002B2   0x....             LDR      R1,??DataTable3_9
   \   000002B4   0x6809             LDR      R1,[R1, #+0]
   \   000002B6   0x4281             CMP      R1,R0
   \   000002B8   0xD257             BCS      ??ctrl_SM7500JE_get_char_21
    361          			// エラー情報登録
    362          			man_error_setting(MAN_ERROR_CTRL_SM, ctrl_sm7500_work.request1.start_time, end_time);
   \   000002BA   0x23B5             MOVS     R3,#+181
   \   000002BC   0x005B             LSLS     R3,R3,#+1        ;; #+362
   \   000002BE   0x0022             MOVS     R2,R4
   \   000002C0   0x....             LDR      R0,??DataTable3_8
   \   000002C2   0x6801             LDR      R1,[R0, #+0]
   \   000002C4   0x200E             MOVS     R0,#+14
   \   000002C6   0x.... 0x....      BL       man_error_set
    363          			// 登録先にcallback1通知
    364          			if (ctrl_sm7500_work.request1.callback1 != NULL) {
   \   000002CA   0x....             LDR      R0,??DataTable0_5
   \   000002CC   0x6800             LDR      R0,[R0, #+0]
   \   000002CE   0x2800             CMP      R0,#+0
   \   000002D0   0xD04B             BEQ      ??ctrl_SM7500JE_get_char_21
    365          				ctrl_sm7500_work.request1.callback1(&ctrl_sm7500_work.save_info[1].rcv_buff[0], 
    366          													ctrl_sm7500_work.save_info[1].write_p,
    367          													ctrl_sm7500_work.request1.id,
    368          													CTRL_SM7500JE_STATUS_TIMEOUT);
   \   000002D2   0x2300             MOVS     R3,#+0
   \   000002D4   0x43DB             MVNS     R3,R3            ;; #-1
   \   000002D6   0x....             LDR      R0,??DataTable0_6
   \   000002D8   0x6802             LDR      R2,[R0, #+0]
   \   000002DA   0x....             LDR      R0,??DataTable0_3
   \   000002DC   0x6801             LDR      R1,[R0, #+0]
   \   000002DE   0x....             LDR      R0,??DataTable0_7
   \   000002E0   0x....             LDR      R4,??DataTable0_5
   \   000002E2   0x6824             LDR      R4,[R4, #+0]
   \   000002E4   0x47A0             BLX      R4
    369          				ctrl_sm7500_work.request1.callback1 = NULL;
   \   000002E6   0x2000             MOVS     R0,#+0
   \   000002E8   0x....             LDR      R1,??DataTable0_5
   \   000002EA   0x6008             STR      R0,[R1, #+0]
    370          
    371          				// 保存領域1ポインタクリア
    372          				ctrl_sm7500_work.save_info[1].write_p = 0;
   \   000002EC   0x2000             MOVS     R0,#+0
   \   000002EE   0x....             LDR      R1,??DataTable0_3
   \   000002F0   0x6008             STR      R0,[R1, #+0]
    373          
    374          				// コマンド待ち状態に戻す
    375          				ctrl_sm7500_work.status = CTRL_SM7500JE_STS_READY;
   \   000002F2   0x2000             MOVS     R0,#+0
   \   000002F4   0x....             LDR      R1,??DataTable4
   \   000002F6   0x6008             STR      R0,[R1, #+0]
   \   000002F8   0xE037             B        ??ctrl_SM7500JE_get_char_21
    376          			}
    377          		}
    378          	}
    379          
    380          	// ２応答コマンドのタイムアウト処理
    381          	else if ( (ctrl_sm7500_work.status == CTRL_SM7500JE_STS_WRESP1) || (ctrl_sm7500_work.status == CTRL_SM7500JE_STS_WRESP2) ) {
   \                     ??ctrl_SM7500JE_get_char_22: (+1)
   \   000002FA   0x....             LDR      R0,??DataTable4
   \   000002FC   0x6800             LDR      R0,[R0, #+0]
   \   000002FE   0x2802             CMP      R0,#+2
   \   00000300   0xD003             BEQ      ??ctrl_SM7500JE_get_char_23
   \   00000302   0x....             LDR      R0,??DataTable4
   \   00000304   0x6800             LDR      R0,[R0, #+0]
   \   00000306   0x2803             CMP      R0,#+3
   \   00000308   0xD12F             BNE      ??ctrl_SM7500JE_get_char_21
    382          		time = man_timer_get_elapsed_time(ctrl_sm7500_work.request2.start_time, end_time);
   \                     ??ctrl_SM7500JE_get_char_23: (+1)
   \   0000030A   0x0021             MOVS     R1,R4
   \   0000030C   0x....             LDR      R0,??DataTable4_1
   \   0000030E   0x6800             LDR      R0,[R0, #+0]
   \   00000310   0x.... 0x....      BL       man_timer_get_elapsed_time
    383          		if (time > ctrl_sm7500_work.request2.timeout) {
   \   00000314   0x....             LDR      R1,??DataTable4_2
   \   00000316   0x6809             LDR      R1,[R1, #+0]
   \   00000318   0x4281             CMP      R1,R0
   \   0000031A   0xD226             BCS      ??ctrl_SM7500JE_get_char_21
    384          			// エラー情報登録
    385          			man_error_setting(MAN_ERROR_CTRL_SM, ctrl_sm7500_work.request2.start_time, end_time);
   \   0000031C   0x23FF             MOVS     R3,#+255
   \   0000031E   0x3382             ADDS     R3,R3,#+130      ;; #+385
   \   00000320   0x0022             MOVS     R2,R4
   \   00000322   0x....             LDR      R0,??DataTable4_1
   \   00000324   0x6801             LDR      R1,[R0, #+0]
   \   00000326   0x200E             MOVS     R0,#+14
   \   00000328   0x.... 0x....      BL       man_error_set
    386          			// 登録先にcallback2通知
    387          			if (ctrl_sm7500_work.request2.callback2 != NULL) {
   \   0000032C   0x....             LDR      R0,??DataTable3
   \   0000032E   0x6800             LDR      R0,[R0, #+0]
   \   00000330   0x2800             CMP      R0,#+0
   \   00000332   0xD01A             BEQ      ??ctrl_SM7500JE_get_char_21
    388          				ctrl_sm7500_work.request2.callback2(  &ctrl_sm7500_work.save_info[1].rcv_buff[0],
    389          														ctrl_sm7500_work.save_info[1].write_p,
    390          														&ctrl_sm7500_work.save_info[2].rcv_buff[0],
    391          														ctrl_sm7500_work.save_info[2].write_p,
    392          														ctrl_sm7500_work.request2.id,
    393          														CTRL_SM7500JE_STATUS_TIMEOUT);
   \   00000334   0x2000             MOVS     R0,#+0
   \   00000336   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000338   0x9001             STR      R0,[SP, #+4]
   \   0000033A   0x....             LDR      R0,??DataTable3_1
   \   0000033C   0x6800             LDR      R0,[R0, #+0]
   \   0000033E   0x9000             STR      R0,[SP, #+0]
   \   00000340   0x....             LDR      R0,??DataTable2
   \   00000342   0x6803             LDR      R3,[R0, #+0]
   \   00000344   0x....             LDR      R2,??DataTable3_2
   \   00000346   0x....             LDR      R0,??DataTable0_3
   \   00000348   0x6801             LDR      R1,[R0, #+0]
   \   0000034A   0x....             LDR      R0,??DataTable0_7
   \   0000034C   0x....             LDR      R4,??DataTable3
   \   0000034E   0x6824             LDR      R4,[R4, #+0]
   \   00000350   0x47A0             BLX      R4
    394          				ctrl_sm7500_work.request2.callback2 = NULL;
   \   00000352   0x2000             MOVS     R0,#+0
   \   00000354   0x....             LDR      R1,??DataTable3
   \   00000356   0x6008             STR      R0,[R1, #+0]
    395          
    396          				// 保存領域1, 2ポインタクリア
    397          				ctrl_sm7500_work.save_info[1].write_p = 0;
   \   00000358   0x2000             MOVS     R0,#+0
   \   0000035A   0x....             LDR      R1,??DataTable0_3
   \   0000035C   0x6008             STR      R0,[R1, #+0]
    398          				ctrl_sm7500_work.save_info[2].write_p = 0;
   \   0000035E   0x2000             MOVS     R0,#+0
   \   00000360   0x....             LDR      R1,??DataTable2
   \   00000362   0x6008             STR      R0,[R1, #+0]
    399          
    400          				// コマンド待ち状態に戻す
    401          				ctrl_sm7500_work.status = CTRL_SM7500JE_STS_READY;
   \   00000364   0x2000             MOVS     R0,#+0
   \   00000366   0x....             LDR      R1,??DataTable4
   \   00000368   0x6008             STR      R0,[R1, #+0]
    402          			}
    403          		}
    404          	}
    405          }
   \                     ??ctrl_SM7500JE_get_char_21: (+1)
   \   0000036A   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    406          
    407          
    408          /********************************************************************/
    409          /*!
    410           * \name	ctrl_SM7500JE_timeout
    411           * \brief	コマンド応答が無いときの処理
    412           * \param	
    413           * \return  
    414           * \note	
    415           */
    416          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    417          static void ctrl_SM7500JE_timeout( void )
    418          {
   \                     ctrl_SM7500JE_timeout: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    419          	// タイマ処理
    420          	if (ctrl_sm7500_work.resp_cmd.flag != 0) {
   \   00000002   0x....             LDR      R0,??DataTable4_3
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD043             BEQ      ??ctrl_SM7500JE_timeout_0
    421          		ctrl_sm7500_work.resp_cmd.flag = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x....             LDR      R1,??DataTable4_3
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    422          
    423          		switch (ctrl_sm7500_work.resp_cmd.id) {
   \   00000010   0x....             LDR      R0,??DataTable5
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x....             LDR      R1,??DataTable5_1  ;; 0x20200000
   \   00000016   0x1A40             SUBS     R0,R0,R1
   \   00000018   0xD003             BEQ      ??ctrl_SM7500JE_timeout_1
   \   0000001A   0x1E40             SUBS     R0,R0,#+1
   \   0000001C   0xD019             BEQ      ??ctrl_SM7500JE_timeout_2
   \   0000001E   0x1E40             SUBS     R0,R0,#+1
   \   00000020   0xD137             BNE      ??ctrl_SM7500JE_timeout_3
    424          		case CTRL_SM7500JE_TIMER_ID_CMD0:
    425          		case CTRL_SM7500JE_TIMER_ID_CMD1:
    426          			// 登録先にcallback1通知
    427          			if (ctrl_sm7500_work.request1.callback1 != NULL) {
   \                     ??ctrl_SM7500JE_timeout_1: (+1)
   \   00000022   0x....             LDR      R0,??DataTable5_2
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD012             BEQ      ??ctrl_SM7500JE_timeout_4
    428          				ctrl_sm7500_work.request1.callback1(&ctrl_sm7500_work.save_info[0].rcv_buff[0], 
    429          													ctrl_sm7500_work.save_info[0].write_p,
    430          													ctrl_sm7500_work.request1.id,
    431          													CTRL_SM7500JE_STATUS_TIMEOUT);
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x43DB             MVNS     R3,R3            ;; #-1
   \   0000002E   0x....             LDR      R0,??DataTable5_3
   \   00000030   0x6802             LDR      R2,[R0, #+0]
   \   00000032   0x....             LDR      R0,??DataTable2_1
   \   00000034   0x6801             LDR      R1,[R0, #+0]
   \   00000036   0x....             LDR      R0,??DataTable3_5
   \   00000038   0x....             LDR      R4,??DataTable5_2
   \   0000003A   0x6824             LDR      R4,[R4, #+0]
   \   0000003C   0x47A0             BLX      R4
    432          				ctrl_sm7500_work.request1.callback1 = NULL;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR      R1,??DataTable5_2
   \   00000042   0x6008             STR      R0,[R1, #+0]
    433          
    434          				// 保存領域1ポインタクリア
    435          				ctrl_sm7500_work.save_info[0].write_p = 0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR      R1,??DataTable2_1
   \   00000048   0x6008             STR      R0,[R1, #+0]
    436          
    437          				// コマンド待ち状態に戻す
    438          				ctrl_sm7500_work.status = CTRL_SM7500JE_STS_READY;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x....             LDR      R1,??DataTable4
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    439          			}
    440          			break;
   \                     ??ctrl_SM7500JE_timeout_4: (+1)
   \   00000050   0xE01F             B        ??ctrl_SM7500JE_timeout_0
    441          
    442          		case CTRL_SM7500JE_TIMER_ID_CMD2:
    443          			// 登録先にcallback2通知
    444          			if (ctrl_sm7500_work.request2.callback2 != NULL) {
   \                     ??ctrl_SM7500JE_timeout_2: (+1)
   \   00000052   0x....             LDR      R0,??DataTable3
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD01A             BEQ      ??ctrl_SM7500JE_timeout_5
    445          				ctrl_sm7500_work.request2.callback2(  &ctrl_sm7500_work.save_info[0].rcv_buff[0],
    446          														ctrl_sm7500_work.save_info[0].write_p,
    447          														&ctrl_sm7500_work.save_info[1].rcv_buff[0],
    448          														ctrl_sm7500_work.save_info[1].write_p,
    449          														ctrl_sm7500_work.request2.id,
    450          														CTRL_SM7500JE_STATUS_TIMEOUT);
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000005E   0x9001             STR      R0,[SP, #+4]
   \   00000060   0x....             LDR      R0,??DataTable3_1
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x9000             STR      R0,[SP, #+0]
   \   00000066   0x....             LDR      R0,??DataTable5_4
   \   00000068   0x6803             LDR      R3,[R0, #+0]
   \   0000006A   0x....             LDR      R2,??DataTable5_5
   \   0000006C   0x....             LDR      R0,??DataTable2_1
   \   0000006E   0x6801             LDR      R1,[R0, #+0]
   \   00000070   0x....             LDR      R0,??DataTable3_5
   \   00000072   0x....             LDR      R4,??DataTable3
   \   00000074   0x6824             LDR      R4,[R4, #+0]
   \   00000076   0x47A0             BLX      R4
    451          				ctrl_sm7500_work.request2.callback2 = NULL;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x....             LDR      R1,??DataTable3
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    452          
    453          				// 保存領域1, 2ポインタクリア
    454          				ctrl_sm7500_work.save_info[0].write_p = 0;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x....             LDR      R1,??DataTable2_1
   \   00000082   0x6008             STR      R0,[R1, #+0]
    455          				ctrl_sm7500_work.save_info[1].write_p = 0;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x....             LDR      R1,??DataTable5_4
   \   00000088   0x6008             STR      R0,[R1, #+0]
    456          
    457          				// コマンド待ち状態に戻す
    458          				ctrl_sm7500_work.status = CTRL_SM7500JE_STS_READY;
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x....             LDR      R1,??DataTable4
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    459          			}
    460          			break;
   \                     ??ctrl_SM7500JE_timeout_5: (+1)
   \   00000090   0xE7FF             B        ??ctrl_SM7500JE_timeout_0
    461          
    462          		default:
    463          			break;
    464          		}
    465          	}
    466          }
   \                     ??ctrl_SM7500JE_timeout_3: (+1)
   \                     ??ctrl_SM7500JE_timeout_0: (+1)
   \   00000092   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    467          
    468          /********************************************************************/
    469          /*	extern関数                                                      */
    470          /********************************************************************/
    471          
    472          
    473          /********************************************************************/
    474          /*!
    475           * \name	ctrl_SM7500JE_init
    476           * \brief	SM7500JE初期化処理
    477           * \param	なし
    478           * \return  なし
    479           * \note	起動時に、呼ばれること
    480           */
    481          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    482          void ctrl_SM7500JE_init(void)
    483          {
   \                     ctrl_SM7500JE_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    484          	// UART2 CH0を初期化する
    485          	drv_uart2_0_init();
   \   00000002   0x.... 0x....      BL       drv_uart2_0_init
    486          	
    487          	// 内部変数を初期化する
    488          	memset(&ctrl_sm7500_work, 0, sizeof(ctrl_sm7500_work_t));
   \   00000006   0x....             LDR      R1,??DataTable5_6  ;; 0x1474
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x....             LDR      R4,??DataTable6
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memset
    489          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    490          
    491          /********************************************************************/
    492          /*!
    493           * \name	ctrl_SM7500JE_main
    494           * \brief	SM7500JEからの応答を監視する
    495           * \param	なし
    496           * \return  なし
    497           * \note	毎回、呼ばれること
    498           */
    499          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    500          void ctrl_SM7500JE_main(void)
    501          {
   \                     ctrl_SM7500JE_main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    502          	uint32_t		err_cnt;
    503          	
    504          	// 応答コマンド取得処理
    505          	ctrl_SM7500JE_get_char();
   \   00000002   0x.... 0x....      BL       ctrl_SM7500JE_get_char
    506          
    507          	// 要求した時間が経過したときの処理
    508          	ctrl_SM7500JE_timeout();
   \   00000006   0x.... 0x....      BL       ctrl_SM7500JE_timeout
    509          
    510          	// 取りこぼし発生時はerror logに登録
    511          	err_cnt = UART2_0_CheckErrorCount();
   \   0000000A   0x.... 0x....      BL       UART2_0_CheckErrorCount
    512          	if (err_cnt != 0) {
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD005             BEQ      ??ctrl_SM7500JE_main_0
    513          		man_error_setting(MAN_ERROR_CTRL_SM, err_cnt, 0);
   \   00000012   0x....             LDR      R3,??DataTable6_1  ;; 0x201
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x0001             MOVS     R1,R0
   \   00000018   0x200E             MOVS     R0,#+14
   \   0000001A   0x.... 0x....      BL       man_error_set
    514          	}
    515          }
   \                     ??ctrl_SM7500JE_main_0: (+1)
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    516          
    517          
    518          /********************************************************************/
    519          /*!
    520           * \name	ctrl_SM7500JE_cmd
    521           * \brief	SM7500JE コマンド送信処理(応答が1個)
    522           * \param	cmd       : 送信するコマンド
    523           * 			cmd_len   : コマンド長
    524           * 			id        : ユニークID
    525           * 			timeout   : timeout時間
    526           *			callback2 : レスポンス受信時に通知するcallback関数
    527           * \return   0: 成功
    528           *          -1:失敗
    529           * \note	コマンド送信中に新たなコマンドは送信できません。
    530           *          コマンド + 応答
    531           */
    532          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    533          int32_t ctrl_SM7500JE_cmd(uint8_t *cmd, int32_t cmd_len, int32_t id, int32_t timeout, func_sim1 callback1)
    534          {
   \                     ctrl_SM7500JE_cmd: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    535          	int32_t	ret=-1;
   \   00000006   0x2700             MOVS     R7,#+0
   \   00000008   0x43FF             MVNS     R7,R7            ;; #-1
    536          
    537          	// パラメータチェック
    538          	if ( (cmd != NULL) && (cmd_len > 0) && (callback1 != NULL) && (ctrl_sm7500_work.status == CTRL_SM7500JE_STS_READY) ) {
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD066             BEQ      ??ctrl_SM7500JE_cmd_0
   \   0000000E   0x2D01             CMP      R5,#+1
   \   00000010   0xDB64             BLT      ??ctrl_SM7500JE_cmd_0
   \   00000012   0x9E08             LDR      R6,[SP, #+32]
   \   00000014   0x0030             MOVS     R0,R6
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD060             BEQ      ??ctrl_SM7500JE_cmd_0
   \   0000001A   0x....             LDR      R0,??DataTable4
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD15C             BNE      ??ctrl_SM7500JE_cmd_0
    539          
    540          		ret = drv_uart2_0_send(cmd, cmd_len);
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       drv_uart2_0_send
   \   0000002A   0x0007             MOVS     R7,R0
    541          		if (ret != -1) {
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000030   0x4287             CMP      R7,R0
   \   00000032   0xD053             BEQ      ??ctrl_SM7500JE_cmd_0
    542          			ctrl_sm7500_work.request1.callback1 = callback1;
   \   00000034   0x....             LDR      R0,??DataTable5_2
   \   00000036   0x6006             STR      R6,[R0, #+0]
    543          			ctrl_sm7500_work.request1.id = id;
   \   00000038   0x9801             LDR      R0,[SP, #+4]
   \   0000003A   0x....             LDR      R1,??DataTable5_3
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    544          			ctrl_sm7500_work.request1.timeout = timeout;
   \   0000003E   0x9802             LDR      R0,[SP, #+8]
   \   00000040   0x....             LDR      R1,??DataTable6_2
   \   00000042   0x6008             STR      R0,[R1, #+0]
    545          			ctrl_sm7500_work.request1.start_time = man_timer_get_1ms_count();		// コマンド開始時間設定
   \   00000044   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000048   0x....             LDR      R1,??DataTable6_3
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    546          			ctrl_sm7500_work.status = CTRL_SM7500JE_STS_RESP;
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0x....             LDR      R1,??DataTable4
   \   00000050   0x6008             STR      R0,[R1, #+0]
    547          			ctrl_sm7500_work.save_cnt = 0;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x....             LDR      R1,??DataTable4
   \   00000056   0x6088             STR      R0,[R1, #+8]
    548          
    549          			// 送信データを保存
    550          			if (cmd_len < 512) {
   \   00000058   0x2080             MOVS     R0,#+128
   \   0000005A   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   0000005C   0x4285             CMP      R5,R0
   \   0000005E   0xDA3D             BGE      ??ctrl_SM7500JE_cmd_0
    551          				if ( (ctrl_sm7500_work.write_p_snd + cmd_len) < 1024 ) {
   \   00000060   0x....             LDR      R0,??DataTable8
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x1940             ADDS     R0,R0,R5
   \   00000066   0x2180             MOVS     R1,#+128
   \   00000068   0x00C9             LSLS     R1,R1,#+3        ;; #+1024
   \   0000006A   0x4288             CMP      R0,R1
   \   0000006C   0xD210             BCS      ??ctrl_SM7500JE_cmd_1
    552          					memcpy(&ctrl_sm7500_work.snd_data[ctrl_sm7500_work.write_p_snd], cmd, cmd_len);
   \   0000006E   0x002A             MOVS     R2,R5
   \   00000070   0x0021             MOVS     R1,R4
   \   00000072   0x....             LDR      R0,??DataTable4
   \   00000074   0x....             LDR      R3,??DataTable8
   \   00000076   0x681B             LDR      R3,[R3, #+0]
   \   00000078   0x18C0             ADDS     R0,R0,R3
   \   0000007A   0x....             LDR      R3,??DataTable6_4  ;; 0x1070
   \   0000007C   0x18C4             ADDS     R4,R0,R3
   \   0000007E   0x0020             MOVS     R0,R4
   \   00000080   0x.... 0x....      BL       __aeabi_memcpy
    553          					ctrl_sm7500_work.write_p_snd += cmd_len;
   \   00000084   0x....             LDR      R0,??DataTable8
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x1940             ADDS     R0,R0,R5
   \   0000008A   0x....             LDR      R1,??DataTable8
   \   0000008C   0x6008             STR      R0,[R1, #+0]
   \   0000008E   0xE025             B        ??ctrl_SM7500JE_cmd_0
    554          				}
    555          				else {
    556          					memcpy(&ctrl_sm7500_work.snd_data[ctrl_sm7500_work.write_p_snd], &cmd[0], (1024-ctrl_sm7500_work.write_p_snd));
   \                     ??ctrl_SM7500JE_cmd_1: (+1)
   \   00000090   0x2080             MOVS     R0,#+128
   \   00000092   0x00C0             LSLS     R0,R0,#+3        ;; #+1024
   \   00000094   0x....             LDR      R1,??DataTable8
   \   00000096   0x6809             LDR      R1,[R1, #+0]
   \   00000098   0x1A42             SUBS     R2,R0,R1
   \   0000009A   0x0021             MOVS     R1,R4
   \   0000009C   0x....             LDR      R0,??DataTable4
   \   0000009E   0x....             LDR      R3,??DataTable8
   \   000000A0   0x681B             LDR      R3,[R3, #+0]
   \   000000A2   0x18C0             ADDS     R0,R0,R3
   \   000000A4   0x....             LDR      R3,??DataTable6_4  ;; 0x1070
   \   000000A6   0x18C6             ADDS     R6,R0,R3
   \   000000A8   0x0030             MOVS     R0,R6
   \   000000AA   0x.... 0x....      BL       __aeabi_memcpy
    557          					memcpy(&ctrl_sm7500_work.snd_data[0], &cmd[1024-ctrl_sm7500_work.write_p_snd], cmd_len + ctrl_sm7500_work.write_p_snd - 1024);
   \   000000AE   0x....             LDR      R0,??DataTable8
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0x1828             ADDS     R0,R5,R0
   \   000000B4   0x....             LDR      R1,??DataTable6_5  ;; 0xfffffc00
   \   000000B6   0x1842             ADDS     R2,R0,R1
   \   000000B8   0x....             LDR      R0,??DataTable8
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x4241             RSBS     R1,R0,#+0
   \   000000BE   0x1860             ADDS     R0,R4,R1
   \   000000C0   0x2180             MOVS     R1,#+128
   \   000000C2   0x00C9             LSLS     R1,R1,#+3        ;; #+1024
   \   000000C4   0x1841             ADDS     R1,R0,R1
   \   000000C6   0x....             LDR      R4,??DataTable6_6
   \   000000C8   0x0020             MOVS     R0,R4
   \   000000CA   0x.... 0x....      BL       __aeabi_memcpy
    558          					ctrl_sm7500_work.write_p_snd = cmd_len + ctrl_sm7500_work.write_p_snd - 1024;
   \   000000CE   0x....             LDR      R0,??DataTable8
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x....             LDR      R1,??DataTable6_5  ;; 0xfffffc00
   \   000000D4   0x1869             ADDS     R1,R5,R1
   \   000000D6   0x1840             ADDS     R0,R0,R1
   \   000000D8   0x....             LDR      R1,??DataTable8
   \   000000DA   0x6008             STR      R0,[R1, #+0]
    559          				}
    560          			}
    561          		}
    562          	}
    563          
    564          	return ret;
   \                     ??ctrl_SM7500JE_cmd_0: (+1)
   \   000000DC   0x0038             MOVS     R0,R7
   \   000000DE   0xBDFE             POP      {R1-R7,PC}       ;; return
    565          }
    566          
    567          
    568          
    569          /********************************************************************/
    570          /*!
    571           * \name	ctrl_SM7500JE_cmd0
    572           * \brief	SM7500JE コマンド送信処理(応答なし)
    573           * \param	cmd       : 送信するコマンド
    574           * 			cmd_len   : コマンド長
    575           * \return   0: 成功
    576           *          -1:失敗
    577           * \note	コマンド送信中に新たなコマンドは送信できません。
    578           *          コマンド + 応答
    579           */
    580          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    581          int32_t ctrl_SM7500JE_cmd0(uint8_t *cmd, int32_t cmd_len)
    582          {
   \                     ctrl_SM7500JE_cmd0: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    583          	int32_t	ret=-1;
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x43F6             MVNS     R6,R6            ;; #-1
    584          
    585          	// パラメータチェック
    586          	if ( (cmd != NULL) && (cmd_len > 0) && (ctrl_sm7500_work.status == CTRL_SM7500JE_STS_READY) ) {
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD050             BEQ      ??ctrl_SM7500JE_cmd0_0
   \   0000000E   0x2D01             CMP      R5,#+1
   \   00000010   0xDB4E             BLT      ??ctrl_SM7500JE_cmd0_0
   \   00000012   0x....             LDR      R0,??DataTable6
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD14A             BNE      ??ctrl_SM7500JE_cmd0_0
    587          		// コマンド送信
    588          		ret = drv_uart2_0_send(cmd, cmd_len);
   \   0000001A   0x0029             MOVS     R1,R5
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       drv_uart2_0_send
   \   00000022   0x0006             MOVS     R6,R0
    589          
    590          		if (ret != -1) {
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000028   0x4286             CMP      R6,R0
   \   0000002A   0xD041             BEQ      ??ctrl_SM7500JE_cmd0_0
    591          			// 送信データを保存
    592          			if (cmd_len < 512) {
   \   0000002C   0x2080             MOVS     R0,#+128
   \   0000002E   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000030   0x4285             CMP      R5,R0
   \   00000032   0xDA3D             BGE      ??ctrl_SM7500JE_cmd0_0
    593          				if ( (ctrl_sm7500_work.write_p_snd + cmd_len) < 1024 ) {
   \   00000034   0x....             LDR      R0,??DataTable8
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x1940             ADDS     R0,R0,R5
   \   0000003A   0x2180             MOVS     R1,#+128
   \   0000003C   0x00C9             LSLS     R1,R1,#+3        ;; #+1024
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD210             BCS      ??ctrl_SM7500JE_cmd0_1
    594          					memcpy(&ctrl_sm7500_work.snd_data[ctrl_sm7500_work.write_p_snd], cmd, cmd_len);
   \   00000042   0x002A             MOVS     R2,R5
   \   00000044   0x0021             MOVS     R1,R4
   \   00000046   0x....             LDR      R0,??DataTable6
   \   00000048   0x....             LDR      R3,??DataTable8
   \   0000004A   0x681B             LDR      R3,[R3, #+0]
   \   0000004C   0x18C0             ADDS     R0,R0,R3
   \   0000004E   0x....             LDR      R3,??DataTable6_4  ;; 0x1070
   \   00000050   0x18C4             ADDS     R4,R0,R3
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0x.... 0x....      BL       __aeabi_memcpy
    595          					ctrl_sm7500_work.write_p_snd += cmd_len;
   \   00000058   0x....             LDR      R0,??DataTable8
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x1940             ADDS     R0,R0,R5
   \   0000005E   0x....             LDR      R1,??DataTable8
   \   00000060   0x6008             STR      R0,[R1, #+0]
   \   00000062   0xE025             B        ??ctrl_SM7500JE_cmd0_0
    596          				}
    597          				else {
    598          					memcpy(&ctrl_sm7500_work.snd_data[ctrl_sm7500_work.write_p_snd], &cmd[0], (1024-ctrl_sm7500_work.write_p_snd));
   \                     ??ctrl_SM7500JE_cmd0_1: (+1)
   \   00000064   0x2080             MOVS     R0,#+128
   \   00000066   0x00C0             LSLS     R0,R0,#+3        ;; #+1024
   \   00000068   0x....             LDR      R1,??DataTable8
   \   0000006A   0x6809             LDR      R1,[R1, #+0]
   \   0000006C   0x1A42             SUBS     R2,R0,R1
   \   0000006E   0x0021             MOVS     R1,R4
   \   00000070   0x....             LDR      R0,??DataTable6
   \   00000072   0x....             LDR      R3,??DataTable8
   \   00000074   0x681B             LDR      R3,[R3, #+0]
   \   00000076   0x18C0             ADDS     R0,R0,R3
   \   00000078   0x....             LDR      R3,??DataTable6_4  ;; 0x1070
   \   0000007A   0x18C7             ADDS     R7,R0,R3
   \   0000007C   0x0038             MOVS     R0,R7
   \   0000007E   0x.... 0x....      BL       __aeabi_memcpy
    599          					memcpy(&ctrl_sm7500_work.snd_data[0], &cmd[1024-ctrl_sm7500_work.write_p_snd], cmd_len + ctrl_sm7500_work.write_p_snd - 1024);
   \   00000082   0x....             LDR      R0,??DataTable8
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0x1828             ADDS     R0,R5,R0
   \   00000088   0x....             LDR      R1,??DataTable6_5  ;; 0xfffffc00
   \   0000008A   0x1842             ADDS     R2,R0,R1
   \   0000008C   0x....             LDR      R0,??DataTable8
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0x4241             RSBS     R1,R0,#+0
   \   00000092   0x1860             ADDS     R0,R4,R1
   \   00000094   0x2180             MOVS     R1,#+128
   \   00000096   0x00C9             LSLS     R1,R1,#+3        ;; #+1024
   \   00000098   0x1841             ADDS     R1,R0,R1
   \   0000009A   0x....             LDR      R4,??DataTable6_6
   \   0000009C   0x0020             MOVS     R0,R4
   \   0000009E   0x.... 0x....      BL       __aeabi_memcpy
    600          					ctrl_sm7500_work.write_p_snd = cmd_len + ctrl_sm7500_work.write_p_snd - 1024;
   \   000000A2   0x....             LDR      R0,??DataTable8
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0x....             LDR      R1,??DataTable6_5  ;; 0xfffffc00
   \   000000A8   0x1869             ADDS     R1,R5,R1
   \   000000AA   0x1840             ADDS     R0,R0,R1
   \   000000AC   0x....             LDR      R1,??DataTable8
   \   000000AE   0x6008             STR      R0,[R1, #+0]
    601          				}
    602          			}
    603          		}
    604          	}
    605          
    606          	return ret;
   \                     ??ctrl_SM7500JE_cmd0_0: (+1)
   \   000000B0   0x0030             MOVS     R0,R6
   \   000000B2   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    607          }
    608          
    609          
    610          /********************************************************************/
    611          /*!
    612           * \name	ctrl_SM7500JE_cmd2
    613           * \brief	SM7500JE コマンド送信処理(応答が2個)
    614           * \param	cmd       : 送信するコマンド
    615           * 			cmd_len   : コマンド長
    616           * 			id        : ユニークID
    617           * 			timeout   : timeout時間
    618           *			callback2 : レスポンス受信時に通知するcallback関数
    619           * \return   0: 成功
    620           *          -1:失敗
    621           * \note	コマンド送信中に新たなコマンドは送信できません。
    622           *          コマンド + 応答
    623           */
    624          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    625          int32_t ctrl_SM7500JE_cmd2(uint8_t *cmd, int32_t cmd_len, int32_t id, int32_t timeout, func_sim2 callback2)
    626          {
   \                     ctrl_SM7500JE_cmd2: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    627          	int32_t	ret=-1;
   \   00000006   0x2700             MOVS     R7,#+0
   \   00000008   0x43FF             MVNS     R7,R7            ;; #-1
    628          
    629          	// パラメータチェック
    630          	if ( (cmd != NULL) && (cmd_len > 0) && (callback2 != NULL) && (ctrl_sm7500_work.status == CTRL_SM7500JE_STS_READY) ) {
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD066             BEQ      ??ctrl_SM7500JE_cmd2_0
   \   0000000E   0x2D01             CMP      R5,#+1
   \   00000010   0xDB64             BLT      ??ctrl_SM7500JE_cmd2_0
   \   00000012   0x9E08             LDR      R6,[SP, #+32]
   \   00000014   0x0030             MOVS     R0,R6
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD060             BEQ      ??ctrl_SM7500JE_cmd2_0
   \   0000001A   0x....             LDR      R0,??DataTable6
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD15C             BNE      ??ctrl_SM7500JE_cmd2_0
    631          
    632          		ret = drv_uart2_0_send(cmd, cmd_len);
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       drv_uart2_0_send
   \   0000002A   0x0007             MOVS     R7,R0
    633          		if (ret != -1) {
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000030   0x4287             CMP      R7,R0
   \   00000032   0xD053             BEQ      ??ctrl_SM7500JE_cmd2_0
    634          			ctrl_sm7500_work.request2.callback2 = callback2;
   \   00000034   0x....             LDR      R0,??DataTable10
   \   00000036   0x6006             STR      R6,[R0, #+0]
    635          			ctrl_sm7500_work.request2.id = id;
   \   00000038   0x9801             LDR      R0,[SP, #+4]
   \   0000003A   0x....             LDR      R1,??DataTable11
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    636          			ctrl_sm7500_work.request2.timeout = timeout;
   \   0000003E   0x9802             LDR      R0,[SP, #+8]
   \   00000040   0x....             LDR      R1,??DataTable11_1
   \   00000042   0x6008             STR      R0,[R1, #+0]
    637          			ctrl_sm7500_work.request2.start_time = man_timer_get_1ms_count();		// コマンド開始時間設定
   \   00000044   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000048   0x....             LDR      R1,??DataTable11_2
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    638          			ctrl_sm7500_work.status = CTRL_SM7500JE_STS_WRESP1;
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0x....             LDR      R1,??DataTable6
   \   00000050   0x6008             STR      R0,[R1, #+0]
    639          			ctrl_sm7500_work.save_cnt = 0;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x....             LDR      R1,??DataTable6
   \   00000056   0x6088             STR      R0,[R1, #+8]
    640          
    641          			// 送信データを保存
    642          			if (cmd_len < 512) {
   \   00000058   0x2080             MOVS     R0,#+128
   \   0000005A   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   0000005C   0x4285             CMP      R5,R0
   \   0000005E   0xDA3D             BGE      ??ctrl_SM7500JE_cmd2_0
    643          				if ( (ctrl_sm7500_work.write_p_snd + cmd_len) < 1024 ) {
   \   00000060   0x....             LDR      R0,??DataTable12
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x1940             ADDS     R0,R0,R5
   \   00000066   0x2180             MOVS     R1,#+128
   \   00000068   0x00C9             LSLS     R1,R1,#+3        ;; #+1024
   \   0000006A   0x4288             CMP      R0,R1
   \   0000006C   0xD210             BCS      ??ctrl_SM7500JE_cmd2_1
    644          					memcpy(&ctrl_sm7500_work.snd_data[ctrl_sm7500_work.write_p_snd], cmd, cmd_len);
   \   0000006E   0x002A             MOVS     R2,R5
   \   00000070   0x0021             MOVS     R1,R4
   \   00000072   0x....             LDR      R0,??DataTable6
   \   00000074   0x....             LDR      R3,??DataTable12
   \   00000076   0x681B             LDR      R3,[R3, #+0]
   \   00000078   0x18C0             ADDS     R0,R0,R3
   \   0000007A   0x....             LDR      R3,??DataTable6_4  ;; 0x1070
   \   0000007C   0x18C4             ADDS     R4,R0,R3
   \   0000007E   0x0020             MOVS     R0,R4
   \   00000080   0x.... 0x....      BL       __aeabi_memcpy
    645          					ctrl_sm7500_work.write_p_snd += cmd_len;
   \   00000084   0x....             LDR      R0,??DataTable12
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x1940             ADDS     R0,R0,R5
   \   0000008A   0x....             LDR      R1,??DataTable12
   \   0000008C   0x6008             STR      R0,[R1, #+0]
   \   0000008E   0xE025             B        ??ctrl_SM7500JE_cmd2_0
    646          				}
    647          				else {
    648          					memcpy(&ctrl_sm7500_work.snd_data[ctrl_sm7500_work.write_p_snd], &cmd[0], (1024-ctrl_sm7500_work.write_p_snd));
   \                     ??ctrl_SM7500JE_cmd2_1: (+1)
   \   00000090   0x2080             MOVS     R0,#+128
   \   00000092   0x00C0             LSLS     R0,R0,#+3        ;; #+1024
   \   00000094   0x....             LDR      R1,??DataTable12
   \   00000096   0x6809             LDR      R1,[R1, #+0]
   \   00000098   0x1A42             SUBS     R2,R0,R1
   \   0000009A   0x0021             MOVS     R1,R4
   \   0000009C   0x....             LDR      R0,??DataTable6
   \   0000009E   0x....             LDR      R3,??DataTable12
   \   000000A0   0x681B             LDR      R3,[R3, #+0]
   \   000000A2   0x18C0             ADDS     R0,R0,R3
   \   000000A4   0x....             LDR      R3,??DataTable6_4  ;; 0x1070
   \   000000A6   0x18C6             ADDS     R6,R0,R3
   \   000000A8   0x0030             MOVS     R0,R6
   \   000000AA   0x.... 0x....      BL       __aeabi_memcpy
    649          					memcpy(&ctrl_sm7500_work.snd_data[0], &cmd[1024-ctrl_sm7500_work.write_p_snd], cmd_len + ctrl_sm7500_work.write_p_snd - 1024);
   \   000000AE   0x....             LDR      R0,??DataTable12
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0x1828             ADDS     R0,R5,R0
   \   000000B4   0x....             LDR      R1,??DataTable6_5  ;; 0xfffffc00
   \   000000B6   0x1842             ADDS     R2,R0,R1
   \   000000B8   0x....             LDR      R0,??DataTable12
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x4241             RSBS     R1,R0,#+0
   \   000000BE   0x1860             ADDS     R0,R4,R1
   \   000000C0   0x2180             MOVS     R1,#+128
   \   000000C2   0x00C9             LSLS     R1,R1,#+3        ;; #+1024
   \   000000C4   0x1841             ADDS     R1,R0,R1
   \   000000C6   0x....             LDR      R4,??DataTable6_6
   \   000000C8   0x0020             MOVS     R0,R4
   \   000000CA   0x.... 0x....      BL       __aeabi_memcpy
    650          					ctrl_sm7500_work.write_p_snd = cmd_len + ctrl_sm7500_work.write_p_snd - 1024;
   \   000000CE   0x....             LDR      R0,??DataTable12
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x....             LDR      R1,??DataTable6_5  ;; 0xfffffc00
   \   000000D4   0x1869             ADDS     R1,R5,R1
   \   000000D6   0x1840             ADDS     R0,R0,R1
   \   000000D8   0x....             LDR      R1,??DataTable12
   \   000000DA   0x6008             STR      R0,[R1, #+0]
    651          				}
    652          			}
    653          
    654          		}
    655          	}
    656          
    657          	return ret;
   \                     ??ctrl_SM7500JE_cmd2_0: (+1)
   \   000000DC   0x0038             MOVS     R0,R7
   \   000000DE   0xBDFE             POP      {R1-R7,PC}       ;; return
    658          }
    659          
    660          
    661          /********************************************************************/
    662          /*!
    663           * \name	ctrl_SM7500JE_cmda
    664           * \brief	SM7500JE コマンド送信処理(応答が'>')
    665           * \param	cmd       : 送信するコマンド
    666           * 			cmd_len   : コマンド長
    667           * 			id        : ユニークID
    668           * 			timeout   : timeout時間
    669           *			callback2 : レスポンス受信時に通知するcallback関数
    670           * \return   0: 成功
    671           *          -1:失敗
    672           * \note	コマンド送信中に新たなコマンドは送信できません。
    673           *          コマンド + 応答
    674           */
    675          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    676          int32_t ctrl_SM7500JE_cmda(uint8_t *cmd, int32_t cmd_len, int32_t id, int32_t timeout, func_sim1 callback1)
    677          {
   \                     ctrl_SM7500JE_cmda: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    678          	int32_t	ret=-1;
   \   00000006   0x2700             MOVS     R7,#+0
   \   00000008   0x43FF             MVNS     R7,R7            ;; #-1
    679          
    680          	// パラメータチェック
    681          	if ( (cmd != NULL) && (cmd_len > 0) && (callback1 != NULL) && (ctrl_sm7500_work.status == CTRL_SM7500JE_STS_READY) ) {
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD066             BEQ      ??ctrl_SM7500JE_cmda_0
   \   0000000E   0x2D01             CMP      R5,#+1
   \   00000010   0xDB64             BLT      ??ctrl_SM7500JE_cmda_0
   \   00000012   0x9E08             LDR      R6,[SP, #+32]
   \   00000014   0x0030             MOVS     R0,R6
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD060             BEQ      ??ctrl_SM7500JE_cmda_0
   \   0000001A   0x....             LDR      R0,??DataTable12_1
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD15C             BNE      ??ctrl_SM7500JE_cmda_0
    682          		ret = drv_uart2_0_send(cmd, cmd_len);
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       drv_uart2_0_send
   \   0000002A   0x0007             MOVS     R7,R0
    683          		if (ret != -1) {
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000030   0x4287             CMP      R7,R0
   \   00000032   0xD053             BEQ      ??ctrl_SM7500JE_cmda_0
    684          			ctrl_sm7500_work.request0.callback1 = callback1;
   \   00000034   0x....             LDR      R0,??DataTable12_2
   \   00000036   0x6006             STR      R6,[R0, #+0]
    685          			ctrl_sm7500_work.request0.id = id;
   \   00000038   0x9801             LDR      R0,[SP, #+4]
   \   0000003A   0x....             LDR      R1,??DataTable12_3
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    686          			ctrl_sm7500_work.request0.timeout = timeout;
   \   0000003E   0x9802             LDR      R0,[SP, #+8]
   \   00000040   0x....             LDR      R1,??DataTable12_4
   \   00000042   0x6008             STR      R0,[R1, #+0]
    687          			ctrl_sm7500_work.request0.start_time = man_timer_get_1ms_count();		// コマンド開始時間設定
   \   00000044   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000048   0x....             LDR      R1,??DataTable12_5
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    688          			ctrl_sm7500_work.status = CTRL_SM7500JE_STS_ACK;
   \   0000004C   0x2004             MOVS     R0,#+4
   \   0000004E   0x....             LDR      R1,??DataTable12_1
   \   00000050   0x6008             STR      R0,[R1, #+0]
    689          			ctrl_sm7500_work.save_cnt = 0;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x....             LDR      R1,??DataTable12_1
   \   00000056   0x6088             STR      R0,[R1, #+8]
    690          
    691          			// 送信データを保存
    692          			if (cmd_len < 512) {
   \   00000058   0x2080             MOVS     R0,#+128
   \   0000005A   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   0000005C   0x4285             CMP      R5,R0
   \   0000005E   0xDA3D             BGE      ??ctrl_SM7500JE_cmda_0
    693          				if ( (ctrl_sm7500_work.write_p_snd + cmd_len) < 1024 ) {
   \   00000060   0x....             LDR      R0,??DataTable12
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x1940             ADDS     R0,R0,R5
   \   00000066   0x2180             MOVS     R1,#+128
   \   00000068   0x00C9             LSLS     R1,R1,#+3        ;; #+1024
   \   0000006A   0x4288             CMP      R0,R1
   \   0000006C   0xD210             BCS      ??ctrl_SM7500JE_cmda_1
    694          					memcpy(&ctrl_sm7500_work.snd_data[ctrl_sm7500_work.write_p_snd], cmd, cmd_len);
   \   0000006E   0x002A             MOVS     R2,R5
   \   00000070   0x0021             MOVS     R1,R4
   \   00000072   0x....             LDR      R0,??DataTable12_1
   \   00000074   0x....             LDR      R3,??DataTable12
   \   00000076   0x681B             LDR      R3,[R3, #+0]
   \   00000078   0x18C0             ADDS     R0,R0,R3
   \   0000007A   0x....             LDR      R3,??DataTable12_6  ;; 0x1070
   \   0000007C   0x18C4             ADDS     R4,R0,R3
   \   0000007E   0x0020             MOVS     R0,R4
   \   00000080   0x.... 0x....      BL       __aeabi_memcpy
    695          					ctrl_sm7500_work.write_p_snd += cmd_len;
   \   00000084   0x....             LDR      R0,??DataTable12
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x1940             ADDS     R0,R0,R5
   \   0000008A   0x....             LDR      R1,??DataTable12
   \   0000008C   0x6008             STR      R0,[R1, #+0]
   \   0000008E   0xE025             B        ??ctrl_SM7500JE_cmda_0
    696          				}
    697          				else {
    698          					memcpy(&ctrl_sm7500_work.snd_data[ctrl_sm7500_work.write_p_snd], &cmd[0], (1024-ctrl_sm7500_work.write_p_snd));
   \                     ??ctrl_SM7500JE_cmda_1: (+1)
   \   00000090   0x2080             MOVS     R0,#+128
   \   00000092   0x00C0             LSLS     R0,R0,#+3        ;; #+1024
   \   00000094   0x....             LDR      R1,??DataTable12
   \   00000096   0x6809             LDR      R1,[R1, #+0]
   \   00000098   0x1A42             SUBS     R2,R0,R1
   \   0000009A   0x0021             MOVS     R1,R4
   \   0000009C   0x....             LDR      R0,??DataTable12_1
   \   0000009E   0x....             LDR      R3,??DataTable12
   \   000000A0   0x681B             LDR      R3,[R3, #+0]
   \   000000A2   0x18C0             ADDS     R0,R0,R3
   \   000000A4   0x....             LDR      R3,??DataTable12_6  ;; 0x1070
   \   000000A6   0x18C6             ADDS     R6,R0,R3
   \   000000A8   0x0030             MOVS     R0,R6
   \   000000AA   0x.... 0x....      BL       __aeabi_memcpy
    699          					memcpy(&ctrl_sm7500_work.snd_data[0], &cmd[1024-ctrl_sm7500_work.write_p_snd], cmd_len + ctrl_sm7500_work.write_p_snd - 1024);
   \   000000AE   0x....             LDR      R0,??DataTable12
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0x1828             ADDS     R0,R5,R0
   \   000000B4   0x....             LDR      R1,??DataTable12_7  ;; 0xfffffc00
   \   000000B6   0x1842             ADDS     R2,R0,R1
   \   000000B8   0x....             LDR      R0,??DataTable12
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x4241             RSBS     R1,R0,#+0
   \   000000BE   0x1860             ADDS     R0,R4,R1
   \   000000C0   0x2180             MOVS     R1,#+128
   \   000000C2   0x00C9             LSLS     R1,R1,#+3        ;; #+1024
   \   000000C4   0x1841             ADDS     R1,R0,R1
   \   000000C6   0x....             LDR      R4,??DataTable12_8
   \   000000C8   0x0020             MOVS     R0,R4
   \   000000CA   0x.... 0x....      BL       __aeabi_memcpy
    700          					ctrl_sm7500_work.write_p_snd = cmd_len + ctrl_sm7500_work.write_p_snd - 1024;
   \   000000CE   0x....             LDR      R0,??DataTable12
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x....             LDR      R1,??DataTable12_7  ;; 0xfffffc00
   \   000000D4   0x1869             ADDS     R1,R5,R1
   \   000000D6   0x1840             ADDS     R0,R0,R1
   \   000000D8   0x....             LDR      R1,??DataTable12
   \   000000DA   0x6008             STR      R0,[R1, #+0]
    701          				}
    702          			}
    703          
    704          		}
    705          	}
    706          
    707          	return ret;
   \                     ??ctrl_SM7500JE_cmda_0: (+1)
   \   000000DC   0x0038             MOVS     R0,R7
   \   000000DE   0xBDFE             POP      {R1-R7,PC}       ;; return
    708          }
    709          
    710          
    711          /********************************************************************/
    712          /*!
    713           * \name	ctrl_SM7500JE_set_noti
    714           * \brief	SM7500JE データ受信時に通知する関数登録処理
    715           * \param	id        : ユニークID
    716           *			callback3 : 受信時に通知するcallback関数
    717           * \return   0: 成功
    718           *          -1:失敗
    719           * \note	
    720           */
    721          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    722          int32_t ctrl_SM7500JE_set_noti(int32_t id, func_sim3 callback3)
    723          {
   \                     ctrl_SM7500JE_set_noti: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0002             MOVS     R2,R0
    724          	int32_t	ret=-1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
    725          
    726          	if (callback3 != NULL) {
   \   00000008   0x000B             MOVS     R3,R1
   \   0000000A   0x2B00             CMP      R3,#+0
   \   0000000C   0xD004             BEQ      ??ctrl_SM7500JE_set_noti_0
    727          		ctrl_sm7500_work.recv_noti.id = id;
   \   0000000E   0x....             LDR      R0,??DataTable12_9
   \   00000010   0x6002             STR      R2,[R0, #+0]
    728          		ctrl_sm7500_work.recv_noti.callback3 = callback3;
   \   00000012   0x....             LDR      R0,??DataTable12_10
   \   00000014   0x6001             STR      R1,[R0, #+0]
    729          		ret = 0;
   \   00000016   0x2000             MOVS     R0,#+0
    730          	}
    731          	
    732          	return ret;
   \                     ??ctrl_SM7500JE_set_noti_0: (+1)
   \   00000018   0xBD00             POP      {PC}             ;; return
    733          }
    734          
    735          
    736          /********************************************************************/
    737          /*!
    738           * \name	ctrl_SM7500JE_clear_noti
    739           * \brief	SM7500JE データ受信時に通知する関数削除処理
    740           * \param	id        : ユニークID
    741           *			callback3 : 受信時に通知するcallback関数
    742           * \return   0: 成功
    743           *          -1:失敗
    744           * \note	
    745           */
    746          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    747          int32_t ctrl_SM7500JE_clear_noti( int32_t id, func_sim3 callback3 )
    748          {
   \                     ctrl_SM7500JE_clear_noti: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0002             MOVS     R2,R0
    749          	int32_t	ret=-1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
    750          
    751          	if ( (ctrl_sm7500_work.recv_noti.id == id) && (ctrl_sm7500_work.recv_noti.callback3 == callback3) ) {
   \   00000008   0x....             LDR      R3,??DataTable12_9
   \   0000000A   0x681B             LDR      R3,[R3, #+0]
   \   0000000C   0x4293             CMP      R3,R2
   \   0000000E   0xD10A             BNE      ??ctrl_SM7500JE_clear_noti_0
   \   00000010   0x....             LDR      R2,??DataTable12_10
   \   00000012   0x6812             LDR      R2,[R2, #+0]
   \   00000014   0x428A             CMP      R2,R1
   \   00000016   0xD106             BNE      ??ctrl_SM7500JE_clear_noti_0
    752          		ctrl_sm7500_work.recv_noti.id = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR      R1,??DataTable12_9
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    753          		ctrl_sm7500_work.recv_noti.callback3 = NULL;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR      R1,??DataTable12_10
   \   00000022   0x6008             STR      R0,[R1, #+0]
    754          		ret = 0;
   \   00000024   0x2000             MOVS     R0,#+0
    755          	}
    756          
    757          	return ret;
   \                     ??ctrl_SM7500JE_clear_noti_0: (+1)
   \   00000026   0xBD00             POP      {PC}             ;; return
    758          }
    759          
    760          /********************************************************************/
    761          /*!
    762           * \name	ctrl_SM7500JE_clear_buffer
    763           * \brief	受信バッファを初期化する処理
    764           * \param	なし
    765           * \return  なし
    766           * \note	
    767           */
    768          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    769          void ctrl_SM7500JE_clear_buffer( void )
    770          {
   \                     ctrl_SM7500JE_clear_buffer: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    771          	int32_t	i;
    772          	int32_t	read_data;
    773          
    774          	for(i=0; i<CTRL_SM7500JE_RECV_BUFF_MAX; i++) {
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE000             B        ??ctrl_SM7500JE_clear_buffer_0
   \                     ??ctrl_SM7500JE_clear_buffer_1: (+1)
   \   00000006   0x1C64             ADDS     R4,R4,#+1
   \                     ??ctrl_SM7500JE_clear_buffer_0: (+1)
   \   00000008   0x2080             MOVS     R0,#+128
   \   0000000A   0x00C0             LSLS     R0,R0,#+3        ;; #+1024
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xDA05             BGE      ??ctrl_SM7500JE_clear_buffer_2
    775          		read_data = UART2_0_GetChar();
   \   00000010   0x.... 0x....      BL       UART2_0_GetChar
    776          		if (read_data == -1) break;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xD1F4             BNE      ??ctrl_SM7500JE_clear_buffer_1
    777          	}
    778          
    779          	// 保存領域1, 2ポインタクリア
    780          	for (i=0; i<CTRL_SM7500JE_SAVE_BUFF_MAX; i++) {
   \                     ??ctrl_SM7500JE_clear_buffer_2: (+1)
   \   0000001C   0x2400             MOVS     R4,#+0
   \   0000001E   0xE007             B        ??ctrl_SM7500JE_clear_buffer_3
    781          		ctrl_sm7500_work.save_info[i].write_p = 0;
   \                     ??ctrl_SM7500JE_clear_buffer_4: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x....             LDR      R1,??DataTable12_1
   \   00000024   0x....             LDR      R2,??DataTable12_11  ;; 0x404
   \   00000026   0x4362             MULS     R2,R4,R2
   \   00000028   0x1889             ADDS     R1,R1,R2
   \   0000002A   0x....             LDR      R2,??DataTable12_12  ;; 0x40c
   \   0000002C   0x5088             STR      R0,[R1, R2]
    782          	}
   \   0000002E   0x1C64             ADDS     R4,R4,#+1
   \                     ??ctrl_SM7500JE_clear_buffer_3: (+1)
   \   00000030   0x2C03             CMP      R4,#+3
   \   00000032   0xDBF5             BLT      ??ctrl_SM7500JE_clear_buffer_4
    783          }
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
    784          
    785          
    786          
    787          /********************************************************************/
    788          /*!
    789           * \name	ctrl_SM7500JE_req_out_rcv
    790           * \brief	rcv data USB出力要求
    791           * \param	なし
    792           * \return  なし
    793           * \note	
    794           */
    795          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    796          void ctrl_SM7500JE_req_out_rcv( void )
    797          {
   \                     ctrl_SM7500JE_req_out_rcv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    798          	uint8_t		*usb_buff = man_memory_alloc();
   \   00000002   0x.... 0x....      BL       man_memory_alloc
    799          	int32_t		in_cnt;
    800          	int32_t		write_cnt;
    801          	int32_t		loop;
    802          
    803          	in_cnt = ctrl_sm7500_work.write_p;
   \   00000006   0x....             LDR      R1,??DataTable12_13
   \   00000008   0x680A             LDR      R2,[R1, #+0]
    804          	
    805          	usb_buff[0] = ASCII_CR;
   \   0000000A   0x210D             MOVS     R1,#+13
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    806          	usb_buff[1] = ASCII_LF;
   \   0000000E   0x210A             MOVS     R1,#+10
   \   00000010   0x7041             STRB     R1,[R0, #+1]
    807          	write_cnt=2;
   \   00000012   0x2102             MOVS     R1,#+2
    808          
    809          	for (loop=0; loop<CTRL_SM7500JE_DEBUG_BUFF_MAX; loop++) {
   \   00000014   0x2300             MOVS     R3,#+0
   \   00000016   0xE01F             B        ??ctrl_SM7500JE_req_out_rcv_0
    810          		if ( ( ( ' ' <= ctrl_sm7500_work.rcv_data[in_cnt] ) && ( ctrl_sm7500_work.rcv_data[in_cnt] <= 'z' ) )
    811          			|| ( ctrl_sm7500_work.rcv_data[in_cnt] == ASCII_CR )
    812          			|| ( ctrl_sm7500_work.rcv_data[in_cnt] == ASCII_LF ) ) {
   \                     ??ctrl_SM7500JE_req_out_rcv_1: (+1)
   \   00000018   0x....             LDR      R4,??DataTable12_1
   \   0000001A   0x18A4             ADDS     R4,R4,R2
   \   0000001C   0x....             LDR      R5,??DataTable12_14  ;; 0xc6c
   \   0000001E   0x5D64             LDRB     R4,[R4, R5]
   \   00000020   0x3C20             SUBS     R4,R4,#+32
   \   00000022   0x2C5B             CMP      R4,#+91
   \   00000024   0xD30B             BCC      ??ctrl_SM7500JE_req_out_rcv_2
   \   00000026   0x....             LDR      R4,??DataTable12_1
   \   00000028   0x18A4             ADDS     R4,R4,R2
   \   0000002A   0x....             LDR      R5,??DataTable12_14  ;; 0xc6c
   \   0000002C   0x5D64             LDRB     R4,[R4, R5]
   \   0000002E   0x2C0D             CMP      R4,#+13
   \   00000030   0xD005             BEQ      ??ctrl_SM7500JE_req_out_rcv_2
   \   00000032   0x....             LDR      R4,??DataTable12_1
   \   00000034   0x18A4             ADDS     R4,R4,R2
   \   00000036   0x....             LDR      R5,??DataTable12_14  ;; 0xc6c
   \   00000038   0x5D64             LDRB     R4,[R4, R5]
   \   0000003A   0x2C0A             CMP      R4,#+10
   \   0000003C   0xD105             BNE      ??ctrl_SM7500JE_req_out_rcv_3
    813          			usb_buff[write_cnt] = ctrl_sm7500_work.rcv_data[in_cnt];
   \                     ??ctrl_SM7500JE_req_out_rcv_2: (+1)
   \   0000003E   0x....             LDR      R4,??DataTable12_1
   \   00000040   0x18A4             ADDS     R4,R4,R2
   \   00000042   0x....             LDR      R5,??DataTable12_14  ;; 0xc6c
   \   00000044   0x5D64             LDRB     R4,[R4, R5]
   \   00000046   0x5444             STRB     R4,[R0, R1]
    814          			write_cnt++;
   \   00000048   0x1C49             ADDS     R1,R1,#+1
    815          		}
    816          		in_cnt++;
   \                     ??ctrl_SM7500JE_req_out_rcv_3: (+1)
   \   0000004A   0x1C52             ADDS     R2,R2,#+1
    817          		if ( in_cnt >= CTRL_SM7500JE_DEBUG_BUFF_MAX ) {
   \   0000004C   0x2480             MOVS     R4,#+128
   \   0000004E   0x00E4             LSLS     R4,R4,#+3        ;; #+1024
   \   00000050   0x42A2             CMP      R2,R4
   \   00000052   0xDB00             BLT      ??ctrl_SM7500JE_req_out_rcv_4
    818          			in_cnt = 0;
   \   00000054   0x2200             MOVS     R2,#+0
    819          		}
    820          	}
   \                     ??ctrl_SM7500JE_req_out_rcv_4: (+1)
   \   00000056   0x1C5B             ADDS     R3,R3,#+1
   \                     ??ctrl_SM7500JE_req_out_rcv_0: (+1)
   \   00000058   0x2480             MOVS     R4,#+128
   \   0000005A   0x00E4             LSLS     R4,R4,#+3        ;; #+1024
   \   0000005C   0x42A3             CMP      R3,R4
   \   0000005E   0xDBDB             BLT      ??ctrl_SM7500JE_req_out_rcv_1
    821          	// 最後にCR+LFを出力する
    822          	usb_buff[write_cnt] = ASCII_CR;
   \   00000060   0x220D             MOVS     R2,#+13
   \   00000062   0x5442             STRB     R2,[R0, R1]
    823          	usb_buff[write_cnt+1] = ASCII_LF;
   \   00000064   0x220A             MOVS     R2,#+10
   \   00000066   0x1843             ADDS     R3,R0,R1
   \   00000068   0x705A             STRB     R2,[R3, #+1]
    824          	// USB出力
    825          	man_usb_data_send(&usb_buff[0], write_cnt+2);
   \   0000006A   0x1C89             ADDS     R1,R1,#+2
   \   0000006C   0x.... 0x....      BL       man_usb_data_send
    826          }
   \   00000070   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    827          
    828          
    829          
    830          /********************************************************************/
    831          /*!
    832           * \name	ctrl_SM7500JE_req_out_snd
    833           * \brief	snd data USB出力要求
    834           * \param	なし
    835           * \return  なし
    836           * \note	
    837           */
    838          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    839          void ctrl_SM7500JE_req_out_snd( void )
    840          {
   \                     ctrl_SM7500JE_req_out_snd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    841          	uint8_t		*usb_buff = man_memory_alloc();
   \   00000002   0x.... 0x....      BL       man_memory_alloc
    842          	int32_t		in_cnt;
    843          	int32_t		write_cnt;
    844          	int32_t		loop;
    845          
    846          	in_cnt = ctrl_sm7500_work.write_p_snd;
   \   00000006   0x....             LDR      R1,??DataTable12
   \   00000008   0x680A             LDR      R2,[R1, #+0]
    847          	
    848          	usb_buff[0] = ASCII_CR;
   \   0000000A   0x210D             MOVS     R1,#+13
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    849          	usb_buff[1] = ASCII_LF;
   \   0000000E   0x210A             MOVS     R1,#+10
   \   00000010   0x7041             STRB     R1,[R0, #+1]
    850          	write_cnt=2;
   \   00000012   0x2102             MOVS     R1,#+2
    851          
    852          	for (loop=0; loop<CTRL_SM7500JE_DEBUG_BUFF_MAX; loop++) {
   \   00000014   0x2300             MOVS     R3,#+0
   \   00000016   0xE01F             B        ??ctrl_SM7500JE_req_out_snd_0
    853          		if ( ( ( ' ' <= ctrl_sm7500_work.snd_data[in_cnt] ) && ( ctrl_sm7500_work.snd_data[in_cnt] <= 'z' ) )
    854          			|| ( ctrl_sm7500_work.snd_data[in_cnt] == ASCII_CR )
    855          			|| ( ctrl_sm7500_work.snd_data[in_cnt] == ASCII_LF ) ) {
   \                     ??ctrl_SM7500JE_req_out_snd_1: (+1)
   \   00000018   0x....             LDR      R4,??DataTable12_1
   \   0000001A   0x18A4             ADDS     R4,R4,R2
   \   0000001C   0x....             LDR      R5,??DataTable12_6  ;; 0x1070
   \   0000001E   0x5D64             LDRB     R4,[R4, R5]
   \   00000020   0x3C20             SUBS     R4,R4,#+32
   \   00000022   0x2C5B             CMP      R4,#+91
   \   00000024   0xD30B             BCC      ??ctrl_SM7500JE_req_out_snd_2
   \   00000026   0x....             LDR      R4,??DataTable12_1
   \   00000028   0x18A4             ADDS     R4,R4,R2
   \   0000002A   0x....             LDR      R5,??DataTable12_6  ;; 0x1070
   \   0000002C   0x5D64             LDRB     R4,[R4, R5]
   \   0000002E   0x2C0D             CMP      R4,#+13
   \   00000030   0xD005             BEQ      ??ctrl_SM7500JE_req_out_snd_2
   \   00000032   0x....             LDR      R4,??DataTable12_1
   \   00000034   0x18A4             ADDS     R4,R4,R2
   \   00000036   0x....             LDR      R5,??DataTable12_6  ;; 0x1070
   \   00000038   0x5D64             LDRB     R4,[R4, R5]
   \   0000003A   0x2C0A             CMP      R4,#+10
   \   0000003C   0xD105             BNE      ??ctrl_SM7500JE_req_out_snd_3
    856          			usb_buff[write_cnt] = ctrl_sm7500_work.snd_data[in_cnt];
   \                     ??ctrl_SM7500JE_req_out_snd_2: (+1)
   \   0000003E   0x....             LDR      R4,??DataTable12_1
   \   00000040   0x18A4             ADDS     R4,R4,R2
   \   00000042   0x....             LDR      R5,??DataTable12_6  ;; 0x1070
   \   00000044   0x5D64             LDRB     R4,[R4, R5]
   \   00000046   0x5444             STRB     R4,[R0, R1]
    857          			write_cnt++;
   \   00000048   0x1C49             ADDS     R1,R1,#+1
    858          		}
    859          		in_cnt++;
   \                     ??ctrl_SM7500JE_req_out_snd_3: (+1)
   \   0000004A   0x1C52             ADDS     R2,R2,#+1
    860          		if ( in_cnt >= CTRL_SM7500JE_DEBUG_BUFF_MAX ) {
   \   0000004C   0x2480             MOVS     R4,#+128
   \   0000004E   0x00E4             LSLS     R4,R4,#+3        ;; #+1024
   \   00000050   0x42A2             CMP      R2,R4
   \   00000052   0xDB00             BLT      ??ctrl_SM7500JE_req_out_snd_4
    861          			in_cnt = 0;
   \   00000054   0x2200             MOVS     R2,#+0
    862          		}
    863          	}
   \                     ??ctrl_SM7500JE_req_out_snd_4: (+1)
   \   00000056   0x1C5B             ADDS     R3,R3,#+1
   \                     ??ctrl_SM7500JE_req_out_snd_0: (+1)
   \   00000058   0x2480             MOVS     R4,#+128
   \   0000005A   0x00E4             LSLS     R4,R4,#+3        ;; #+1024
   \   0000005C   0x42A3             CMP      R3,R4
   \   0000005E   0xDBDB             BLT      ??ctrl_SM7500JE_req_out_snd_1
    864          
    865          	// 最後にCR+LFを出力する
    866          	usb_buff[write_cnt] = ASCII_CR;
   \   00000060   0x220D             MOVS     R2,#+13
   \   00000062   0x5442             STRB     R2,[R0, R1]
    867          	usb_buff[write_cnt+1] = ASCII_LF;
   \   00000064   0x220A             MOVS     R2,#+10
   \   00000066   0x1843             ADDS     R3,R0,R1
   \   00000068   0x705A             STRB     R2,[R3, #+1]
    868          	// USB出力
    869          	man_usb_data_send(&usb_buff[0], write_cnt+2);
   \   0000006A   0x1C89             ADDS     R1,R1,#+2
   \   0000006C   0x.... 0x....      BL       man_usb_data_send
    870          }
   \   00000070   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC4C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC48

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0x810

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   0x000003FF         DC32     0x3ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC1C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_6:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_7:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0x410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_8:
   \   00000000   0x00000814         DC32     0x814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0x40C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC2C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0x814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC5C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ctrl_sm7500_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x20200000         DC32     0x20200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC1C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0x810

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0x410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x00001474         DC32     0x1474

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     ctrl_sm7500_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x00000201         DC32     0x201

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x00001070         DC32     0x1070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0xFFFFFC00         DC32     0xfffffc00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0x1070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0x1470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC2C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0x1470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     ctrl_sm7500_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC4C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC48

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x00001070         DC32     0x1070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0xFFFFFC00         DC32     0xfffffc00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0x1070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0xC5C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x00000404         DC32     0x404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x0000040C         DC32     0x40c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x........         DC32     ctrl_sm7500_work+0x106C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x00000C6C         DC32     0xc6c
    871          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ctrl_SM7500JE_clear_buffer
         8   -> UART2_0_GetChar
       4   ctrl_SM7500JE_clear_noti
      32   ctrl_SM7500JE_cmd
        32   -> __aeabi_memcpy
        32   -> drv_uart2_0_send
        32   -> man_timer_get_1ms_count
      24   ctrl_SM7500JE_cmd0
        24   -> __aeabi_memcpy
        24   -> drv_uart2_0_send
      32   ctrl_SM7500JE_cmd2
        32   -> __aeabi_memcpy
        32   -> drv_uart2_0_send
        32   -> man_timer_get_1ms_count
      32   ctrl_SM7500JE_cmda
        32   -> __aeabi_memcpy
        32   -> drv_uart2_0_send
        32   -> man_timer_get_1ms_count
      24   ctrl_SM7500JE_get_char
        24   -- Indirect call
        24   -> UART2_0_GetChar
        24   -> man_error_set
        24   -> man_timer_get_1ms_count
        24   -> man_timer_get_elapsed_time
       8   ctrl_SM7500JE_init
         8   -> __aeabi_memset
         8   -> drv_uart2_0_init
       8   ctrl_SM7500JE_main
         8   -> UART2_0_CheckErrorCount
         8   -> ctrl_SM7500JE_get_char
         8   -> ctrl_SM7500JE_timeout
         8   -> man_error_set
      16   ctrl_SM7500JE_req_out_rcv
        16   -> man_memory_alloc
        16   -> man_usb_data_send
      16   ctrl_SM7500JE_req_out_snd
        16   -> man_memory_alloc
        16   -> man_usb_data_send
       4   ctrl_SM7500JE_set_noti
      16   ctrl_SM7500JE_timeout
        16   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
       4  ??DataTable0_6
       4  ??DataTable0_7
       4  ??DataTable0_8
       4  ??DataTable10
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable8
      54  ctrl_SM7500JE_clear_buffer
      40  ctrl_SM7500JE_clear_noti
     224  ctrl_SM7500JE_cmd
     180  ctrl_SM7500JE_cmd0
     224  ctrl_SM7500JE_cmd2
     224  ctrl_SM7500JE_cmda
     876  ctrl_SM7500JE_get_char
      20  ctrl_SM7500JE_init
      32  ctrl_SM7500JE_main
     114  ctrl_SM7500JE_req_out_rcv
     114  ctrl_SM7500JE_req_out_snd
      26  ctrl_SM7500JE_set_noti
     148  ctrl_SM7500JE_timeout
    5236  ctrl_sm7500_work

 
 5 236 bytes in section .bss
 2 512 bytes in section .text
 
 2 512 bytes of CODE memory
 5 236 bytes of DATA memory

Errors: none
Warnings: none
