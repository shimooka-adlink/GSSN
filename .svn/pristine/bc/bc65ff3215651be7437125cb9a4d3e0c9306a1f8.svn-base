###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       17/May/2019  13:31:40
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\driver\i2c\drv_i2c_0.c
#    Command line =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\driver\i2c\drv_i2c_0.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_A -lCN
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        -lA
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List\drv_i2c_0.lst
#    Object file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj\drv_i2c_0.o
#
###############################################################################

C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\driver\i2c\drv_i2c_0.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    drv_i2c_0.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    2017.10.2
      8            * @brief   P12, P13を使用してI2C Ch0 を制御をおこなう。
      9            *          MASTERモード, 400000bpsで使用する。
     10            ******************************************************************************
     11            $Id: drv_i2c_0.c 182 2018-05-25 04:55:18Z shitaoka $
     12            * @attention
     13            *
     14            *  PORT
     15            *    P12        : SCL
     16            *    P13        : SDA
     17            *
     18            *  I2C_mode     : seI2C_MODE_MASTER
     19            *  transfer rate: 400000 bps
     20            *
     21            *****************************************************************************
     22          */ 
     23          
     24          
     25          #include <string.h>
     26          #include <stdio.h>
     27          #include <stdlib.h>
     28          #include "board.h"
     29          #include "system_manager.h"
     30          #include "settings.h"
     31          #include "se_clg.h"
     32          #include "se_i2c.h"
     33          #include "se_common.h"
     34          #include "man_timer.h"
     35          #include "man_error.h"
     36          
     37          #pragma section = "DRV_PRG_BLOCK"
     38          
     39          // I2Cライブラリの構造

   \                                 In section .bss, align 4
     40          static seI2C_InitTypeDef InitStruct;
   \                     InitStruct:
   \   00000000                      DS8 12
     41          
     42          
     43          #define	DRV_I2C_CH0_INIT_NON		0
     44          #define	DRV_I2C_CH0_INIT_OK		1
     45          
     46          #define	DRV_I2C_CH0_DSABLE		0
     47          #define	DRV_I2C_CH0_ENABLE		1
     48          
     49          
     50          

   \                                 In section .bss, align 4
     51          uint32_t	i2c0_timer_max;
   \                     i2c0_timer_max:
   \   00000000                      DS8 4
     52          
     53          
     54          /********************************************************************/
     55          /*!
     56           * \name	i2c0_init
     57           * \brief	I2C CH0 Driverの初期化
     58           * \param	なし
     59           * \return   0: 成功
     60           *          -1: 失敗
     61           * \note	初期化は一度のみ実施する。
     62           */
     63          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     64          int32_t i2c0_init( void ) 
     65          {
   \                     i2c0_init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     66          	seStatus	fStatus;  
     67          	int32_t		ret=0;
   \   00000002   0x2400             MOVS     R4,#+0
     68          
     69          	memset( &InitStruct, 0, sizeof( InitStruct ) );
   \   00000004   0x210C             MOVS     R1,#+12
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x....             LDR      R5,??DataTable6
   \   0000000A   0x0028             MOVS     R0,R5
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
     70          	i2c0_timer_max = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR      R1,??DataTable6_1
   \   00000014   0x6008             STR      R0,[R1, #+0]
     71          
     72          	/* I2C 使用条件の設定 */
     73          	InitStruct.I2C_mode		= seI2C_MODE_MASTER;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR      R1,??DataTable6
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
     74          #ifdef OSC3_ENABLE
     75          	InitStruct.ClkSrc		= seCLG_OSC3;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x....             LDR      R1,??DataTable6
   \   00000020   0x7048             STRB     R0,[R1, #+1]
     76          	InitStruct.ClkDivider	= seI2C_OSC3_CLKDIV_1;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR      R1,??DataTable6
   \   00000026   0x8048             STRH     R0,[R1, #+2]
     77          	///< Set transfer rate( bps = CLK_I2C / (BRT + 3) x 2 ).
     78          	///< 12MHz / (12+3) * 2 = 400000 bps.
     79          	InitStruct.BRT			= 12;
   \   00000028   0x200C             MOVS     R0,#+12
   \   0000002A   0x....             LDR      R1,??DataTable6
   \   0000002C   0x8088             STRH     R0,[R1, #+4]
     80          #else
     81          	InitStruct.ClkSrc		= seCLG_IOSC;
     82          	InitStruct.ClkDivider	= seI2C_IOSC_CLKDIV_4;
     83          	///< Set transfer rate( bps = CLK_I2C / (BRT + 3) x 2 ).
     84          	///< 8.00MHz / 20 = 400000 bps.
     85          	InitStruct.BRT			= 17;
     86          #endif
     87          
     88          	/* I2C CH0 初期化 */
     89          	fStatus = seI2C_Init( &I2C_CH0, &InitStruct );
   \   0000002E   0x....             LDR      R1,??DataTable6
   \   00000030   0x....             LDR      R0,??DataTable6_2
   \   00000032   0x.... 0x....      BL       seI2C_Init
     90          
     91          	if ( fStatus != seSTATUS_OK ) {
   \   00000036   0xB2C0             UXTB     R0,R0
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD001             BEQ      ??i2c0_init_0
     92          		ret = -1;
   \   0000003C   0x2400             MOVS     R4,#+0
   \   0000003E   0x43E4             MVNS     R4,R4            ;; #-1
     93          	}
     94          
     95          	
     96          	return ret;
   \                     ??i2c0_init_0: (+1)
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     97          }
     98          
     99          /********************************************************************/
    100          /*!
    101           * \name	i2c0_end
    102           * \brief	I2C CH0 Driverの使用終了
    103           *            SCL, SDA端子をHi-Z stateとする
    104           * \param	なし
    105           * \return  なし
    106           * \note	再開はi2c0_re_startを呼ぶこと。
    107           */
    108          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    109          void i2c0_end( void )
    110          {
   \                     i2c0_end: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    111          	// SCL端子をHi-Z stateとする
    112          	sePPORT_InitAsHiZ( I2C_CH0.SCL.portID );
   \   00000002   0x....             LDR      R0,??DataTable6_2
   \   00000004   0x7940             LDRB     R0,[R0, #+5]
   \   00000006   0x.... 0x....      BL       sePPORT_InitAsHiZ
    113          	// SDA端子をHi-Z stateとする
    114          	sePPORT_InitAsHiZ( I2C_CH0.SDA.portID );
   \   0000000A   0x....             LDR      R0,??DataTable6_2
   \   0000000C   0x7A00             LDRB     R0,[R0, #+8]
   \   0000000E   0x.... 0x....      BL       sePPORT_InitAsHiZ
    115          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    116          
    117          /********************************************************************/
    118          /*!
    119           * \name	i2c0_re_start
    120           * \brief	I2C CH0 Driverの使用再開
    121           *            SCL, SDA端子を再設定する
    122           * \param	なし
    123           * \return  なし
    124           * \note	i2c0_end後に呼ぶこと。
    125           */
    126          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    127          void i2c0_re_start( void )
    128          {
   \                     i2c0_re_start: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    129          	ConfigurePortsForI2C(&I2C_CH0);
   \   00000002   0x....             LDR      R0,??DataTable6_2
   \   00000004   0x.... 0x....      BL       ConfigurePortsForI2C
    130          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    131          
    132          /********************************************************************/
    133          /*!
    134           * \name	i2c0_Enable
    135           * \brief	I2C CH0 Driverを許可する
    136           * \param	なし
    137           * \return   0: 成功
    138           *          -1: 失敗
    139           * \note	なし
    140           */
    141          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    142          int32_t i2c0_Enable( void ) 
    143          {
   \                     i2c0_Enable: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    144          	seStatus	fStatus; 
    145          	int32_t		ret=0;
   \   00000002   0x2400             MOVS     R4,#+0
    146          
    147          	fStatus = seI2C_Enable( I2C_CH0.I2Cx );
   \   00000004   0x....             LDR      R0,??DataTable6_2
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       seI2C_Enable
    148          
    149          	if ( fStatus != seSTATUS_OK ) {
   \   0000000C   0xB2C0             UXTB     R0,R0
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD001             BEQ      ??i2c0_Enable_0
    150          		ret = -1;
   \   00000012   0x2400             MOVS     R4,#+0
   \   00000014   0x43E4             MVNS     R4,R4            ;; #-1
    151          	}
    152          	
    153          	return ret;
   \                     ??i2c0_Enable_0: (+1)
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    154          }
    155          
    156          /********************************************************************/
    157          /*!
    158           * \name	i2c0_Disable
    159           * \brief	I2C CH0 Driverを禁止する
    160           * \param	なし
    161           * \return   0: 成功
    162           * \note	なし
    163           */
    164          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    165          int32_t i2c0_Disable( void ) 
    166          {
   \                     i2c0_Disable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    167          	seI2C_Disable( I2C_CH0.I2Cx ); 
   \   00000002   0x....             LDR      R0,??DataTable6_2
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      BL       seI2C_Disable
    168          
    169          	return 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
    170          }
    171          
    172          /********************************************************************/
    173          /*!
    174           * \name	i2c0_SendData
    175           * \brief	I2C CH0 にデータを設定する
    176           * \param	uint16_t  address      : SLAVE アドレス
    177           *          uint8_t   data         : 送信データ
    178           *          uint32_t  size         : 送信データ数
    179           *          uint32_t  stop_pending : seDISABLE : STOP conditionなし
    180           *                                   seENABLE  : STOP conditionあり
    181           * \return   0: 成功
    182           *          -1: 失敗
    183           * \note	なし
    184           */
    185          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    186          int32_t i2c0_SendData( uint16_t address, uint8_t *data, uint32_t size, uint32_t stop_pending )
    187          {
   \                     i2c0_SendData: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0017             MOVS     R7,R2
   \   00000008   0x001E             MOVS     R6,R3
    188          	seStatus	fStatus; 
    189          	uint32_t	timer_start;
    190          	uint32_t	timer_end;
    191          	uint32_t	timer_diff;
    192          
    193          
    194          	timer_start = man_timer_get_1ms_count();
   \   0000000A   0x.... 0x....      BL       man_timer_get_1ms_count
   \   0000000E   0x0005             MOVS     R5,R0
    195          	fStatus = seI2C_MstSendData( I2C_CH0.I2Cx, address, data, size, stop_pending );
   \   00000010   0x9600             STR      R6,[SP, #+0]
   \   00000012   0x003B             MOVS     R3,R7
   \   00000014   0x9A02             LDR      R2,[SP, #+8]
   \   00000016   0x0021             MOVS     R1,R4
   \   00000018   0xB289             UXTH     R1,R1
   \   0000001A   0x....             LDR      R0,??DataTable6_2
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x.... 0x....      BL       seI2C_MstSendData
   \   00000022   0x0004             MOVS     R4,R0
    196          	timer_end = man_timer_get_1ms_count();
   \   00000024   0x.... 0x....      BL       man_timer_get_1ms_count
    197          
    198          	if ( fStatus == seSTATUS_OK ) {
   \   00000028   0xB2E4             UXTB     R4,R4
   \   0000002A   0x2C01             CMP      R4,#+1
   \   0000002C   0xD101             BNE      ??i2c0_SendData_0
    199          		return 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xE013             B        ??i2c0_SendData_1
    200          	}
    201          	else {
    202          		timer_diff = man_timer_get_elapsed_time(timer_start, timer_end);
   \                     ??i2c0_SendData_0: (+1)
   \   00000032   0x0001             MOVS     R1,R0
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0x.... 0x....      BL       man_timer_get_elapsed_time
   \   0000003A   0x0004             MOVS     R4,R0
    203          		if (i2c0_timer_max < timer_diff) {
   \   0000003C   0x....             LDR      R0,??DataTable6_1
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x42A0             CMP      R0,R4
   \   00000042   0xD208             BCS      ??i2c0_SendData_2
    204          			// エラー登録
    205          			man_error_setting(MAN_ERROR_DRV_I2C0, i2c0_timer_max, timer_diff);
   \   00000044   0x23CD             MOVS     R3,#+205
   \   00000046   0x0022             MOVS     R2,R4
   \   00000048   0x....             LDR      R0,??DataTable6_1
   \   0000004A   0x6801             LDR      R1,[R0, #+0]
   \   0000004C   0x2004             MOVS     R0,#+4
   \   0000004E   0x.... 0x....      BL       man_error_set
    206          			i2c0_timer_max = timer_diff;
   \   00000052   0x....             LDR      R0,??DataTable6_1
   \   00000054   0x6004             STR      R4,[R0, #+0]
    207          		}
    208          		return -1;
   \                     ??i2c0_SendData_2: (+1)
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x43C0             MVNS     R0,R0            ;; #-1
   \                     ??i2c0_SendData_1: (+1)
   \   0000005A   0xBDFE             POP      {R1-R7,PC}       ;; return
    209          	}
    210          }
    211          
    212           	
    213          /********************************************************************/
    214          /*!
    215           * \name	i2c0_ReceiveData
    216           * \brief	I2C CH0 からデータを取得する
    217           * \param	uint16_t  address : SLAVE アドレス
    218           *          uint8_t   data    : 受信データバッファ
    219           *          uint32_t  size    : 受信データ数
    220           *          uint32_t  stop_pending : seDISABLE : STOP conditionなし
    221           *                                   seENABLE  : STOP conditionあり
    222           * \return   0: 成功
    223           *          -1: 失敗
    224           * \note	なし
    225           */
    226          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    227          int32_t i2c0_ReceiveData(uint16_t address, uint8_t *data, uint32_t size, uint32_t stop_pending)
    228          {
   \                     i2c0_ReceiveData: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0017             MOVS     R7,R2
   \   00000008   0x001E             MOVS     R6,R3
    229          	seStatus	fStatus; 
    230          	uint32_t	timer_start;
    231          	uint32_t	timer_end;
    232          	uint32_t	timer_diff;
    233          
    234          	timer_start = man_timer_get_1ms_count();
   \   0000000A   0x.... 0x....      BL       man_timer_get_1ms_count
   \   0000000E   0x0005             MOVS     R5,R0
    235          	fStatus = seI2C_MstReceiveData( I2C_CH0.I2Cx, address, data, size, stop_pending );
   \   00000010   0x9600             STR      R6,[SP, #+0]
   \   00000012   0x003B             MOVS     R3,R7
   \   00000014   0x9A02             LDR      R2,[SP, #+8]
   \   00000016   0x0021             MOVS     R1,R4
   \   00000018   0xB289             UXTH     R1,R1
   \   0000001A   0x....             LDR      R0,??DataTable6_2
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x.... 0x....      BL       seI2C_MstReceiveData
   \   00000022   0x0004             MOVS     R4,R0
    236          	timer_end = man_timer_get_1ms_count();
   \   00000024   0x.... 0x....      BL       man_timer_get_1ms_count
    237          
    238          	if ( fStatus == seSTATUS_OK ) {
   \   00000028   0xB2E4             UXTB     R4,R4
   \   0000002A   0x2C01             CMP      R4,#+1
   \   0000002C   0xD101             BNE      ??i2c0_ReceiveData_0
    239          		return 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xE013             B        ??i2c0_ReceiveData_1
    240          	}
    241          	else {
    242          		timer_diff = man_timer_get_elapsed_time(timer_start, timer_end);
   \                     ??i2c0_ReceiveData_0: (+1)
   \   00000032   0x0001             MOVS     R1,R0
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0x.... 0x....      BL       man_timer_get_elapsed_time
   \   0000003A   0x0004             MOVS     R4,R0
    243          		if (i2c0_timer_max < timer_diff) {
   \   0000003C   0x....             LDR      R0,??DataTable6_1
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x42A0             CMP      R0,R4
   \   00000042   0xD208             BCS      ??i2c0_ReceiveData_2
    244          			// エラー登録
    245          			man_error_setting(MAN_ERROR_DRV_I2C0, i2c0_timer_max, timer_diff);
   \   00000044   0x23F5             MOVS     R3,#+245
   \   00000046   0x0022             MOVS     R2,R4
   \   00000048   0x....             LDR      R0,??DataTable6_1
   \   0000004A   0x6801             LDR      R1,[R0, #+0]
   \   0000004C   0x2004             MOVS     R0,#+4
   \   0000004E   0x.... 0x....      BL       man_error_set
    246          			i2c0_timer_max = timer_diff;
   \   00000052   0x....             LDR      R0,??DataTable6_1
   \   00000054   0x6004             STR      R4,[R0, #+0]
    247          		}
    248          		return -1;
   \                     ??i2c0_ReceiveData_2: (+1)
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x43C0             MVNS     R0,R0            ;; #-1
   \                     ??i2c0_ReceiveData_1: (+1)
   \   0000005A   0xBDFE             POP      {R1-R7,PC}       ;; return
    249          	}
    250          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     InitStruct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     i2c0_timer_max

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     I2C_CH0
    251          
    252          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   i2c0_Disable
         8   -> seI2C_Disable
       8   i2c0_Enable
         8   -> seI2C_Enable
      32   i2c0_ReceiveData
        32   -> man_error_set
        32   -> man_timer_get_1ms_count
        32   -> man_timer_get_elapsed_time
        32   -> seI2C_MstReceiveData
      32   i2c0_SendData
        32   -> man_error_set
        32   -> man_timer_get_1ms_count
        32   -> man_timer_get_elapsed_time
        32   -> seI2C_MstSendData
       8   i2c0_end
         8   -> sePPORT_InitAsHiZ
      16   i2c0_init
        16   -> __aeabi_memset
        16   -> seI2C_Init
       8   i2c0_re_start
         8   -> ConfigurePortsForI2C


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
      12  InitStruct
      14  i2c0_Disable
      26  i2c0_Enable
      92  i2c0_ReceiveData
      92  i2c0_SendData
      20  i2c0_end
      68  i2c0_init
      10  i2c0_re_start
       4  i2c0_timer_max

 
  16 bytes in section .bss
 334 bytes in section .text
 
 334 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
