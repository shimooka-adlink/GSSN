###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       21/May/2019  17:01:25
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\GNSS\Software\rJ105\source\GNSS_GW\apl\man_press.c
#    Command line =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\apl\man_press.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_B -lCN
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        -lA
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List\man_press.lst
#    Object file  =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj\man_press.o
#
###############################################################################

C:\GNSS\Software\rJ105\source\GNSS_GW\apl\man_press.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    man_press.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    2017.10.2
      8            * @brief   高度・気温・気圧データを管理する
      9            ******************************************************************************
     10            $Id: man_press.c 185 2018-05-28 09:07:31Z y-suyama $
     11            * @attention
     12            *
     13            *****************************************************************************
     14          */
     15          
     16          #include <string.h>
     17          #include <stdio.h>
     18          #include <stdlib.h>
     19          
     20          #include "board.h"
     21          #include "system_manager.h"
     22          #include "ctrl_MPL3115A2.h"
     23          #include "ctrl_I2C0.h"
     24          #include "gnss_gw_common.h"
     25          #include "man_ope.h"
     26          #include "man_timer.h"
     27          #include "man_error.h"
     28          #include "man_press.h"
     29          #include "man_data.h"
     30          
     31          
     32          #pragma section = "APL_PRG_BLOCK"
     33          
     34          /************************************************************************/
     35          /* declaration of structure                                             */
     36          /************************************************************************/
     37          
     38          
     39          #define	MAN_PRESS_MODE_STOP			0	// 受信停止
     40          #define	MAN_PRESS_MODE_ACTIVE		1	// 受信中
     41          
     42          
     43          #define	MAN_PRESS_RECV_NON			0	// 未受信
     44          #define	MAN_PRESS_RECV_OK			1	// 受信
     45          
     46          #define	MAN_PRESS_PRESS				0	// 気圧
     47          #define	MAN_PRESS_ALTIT				1	// 高度
     48          #define	MAN_PRESS_WAIT				2	// 待ち
     49          
     50          
     51          // 受信データ
     52          typedef struct _man_press_recv_t {
     53          	int32_t					flag;				// 受信済みフラグ
     54          	int32_t					select;				// 気圧・高度
     55          	int32_t 				temperature;		// 気温(-** 〜 **[℃])
     56          	int32_t					pressure;			// 気圧(******[hPa])
     57          	int32_t					altitude;			// 高度(-*** 〜 *****[m])
     58          } man_press_recv_t;
     59          
     60          
     61          // 高度・気温・気圧データ管理ワーク
     62          typedef struct _man_press_work_t {
     63          	uint32_t				mode;				// 動作状態
     64          	man_press_recv_t		press_recv;			// 受信した高度・気温・気圧データ
     65          	uint32_t				rcv_cnt;
     66          	uint32_t				err_cnt;
     67          } man_press_work_t;
     68          
     69          
     70          /************************************************************************/
     71          /* definition of variables                                              */
     72          /************************************************************************/
     73          

   \                                 In section .bss, align 4
     74          man_press_work_t	man_press_work;
   \                     man_press_work:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
     75          static	uint32_t	timer_start;
   \                     timer_start:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     76          static	uint32_t	timer_end;
   \                     timer_end:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     77          static	uint32_t	timer_diff;
   \                     timer_diff:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     78          static	uint32_t	timer_max;
   \                     timer_max:
   \   00000000                      DS8 4
     79          
     80          /********************************************************************/
     81          /*	callback関数                                                    */
     82          /********************************************************************/
     83          
     84          /********************************************************************/
     85          /*	static関数                                                      */
     86          /********************************************************************/
     87          
     88          /********************************************************************/
     89          /*	extern関数                                                      */
     90          /********************************************************************/
     91          
     92          /********************************************************************/
     93          /*!
     94           * \name	man_press_init
     95           * \brief	高度・気温・気圧データ管理の初期化処理
     96           * \param	なし
     97           * \return   0: 正常
     98           *          -1: 異常
     99           * \note	起動時に、呼ばれること
    100           */
    101          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    102          int32_t man_press_init(void)
    103          {
   \                     man_press_init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    104          	int32_t	ret;
    105          
    106          	// MPL3115A2の開始処理
    107          	ret = ctrc_MPL3115A2_start();
   \   00000002   0x.... 0x....      BL       ctrc_MPL3115A2_start
   \   00000006   0x0004             MOVS     R4,R0
    108          
    109          	// 内部変数を初期化する
    110          	memset(&man_press_work, 0, sizeof(man_press_work_t));
   \   00000008   0x2120             MOVS     R1,#+32
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x....             LDR      R5,??DataTable8
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x.... 0x....      BL       __aeabi_memset
    111          
    112          	if (ret >= 0) {
   \   00000014   0x2C00             CMP      R4,#+0
   \   00000016   0xD402             BMI      ??man_press_init_0
    113          		// 受信開始
    114          		man_press_work.mode = MAN_PRESS_MODE_ACTIVE;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x....             LDR      R1,??DataTable8
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    115          	}
    116          
    117          	return ret;
   \                     ??man_press_init_0: (+1)
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    118          }
    119          
    120          /********************************************************************/
    121          /*!
    122           * \name	man_press_main
    123           * \brief	高度・気温・気圧データ管理のmain処理
    124           * \param	なし
    125           * \return  なし
    126           * \note	100ms毎に呼ばれること
    127           */
    128          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    129          void man_press_main(void)
    130          {
   \                     man_press_main: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    131          	int32_t		ret=-1;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x43C0             MVNS     R0,R0            ;; #-1
    132          	int32_t		altitude;			// 高度(-698 〜 11775[m])
    133          	int32_t		pressure;			// 気圧(200.00 〜 1100.00[hPa])
    134          	int32_t 	temperature;		// 気温(-40 〜 85[℃])
    135                  man_ope_switch_def  switch_mode;
    136          
    137          	if (man_press_work.mode == MAN_PRESS_MODE_ACTIVE) {
   \   00000006   0x....             LDR      R0,??DataTable8
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD000             BEQ      .+4
   \   0000000E   0xE092             B        ??man_press_main_0
    138          		man_press_work.rcv_cnt++;
   \   00000010   0x....             LDR      R0,??DataTable8
   \   00000012   0x6980             LDR      R0,[R0, #+24]
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x....             LDR      R1,??DataTable8
   \   00000018   0x6188             STR      R0,[R1, #+24]
    139          		if (man_press_work.rcv_cnt >= 20) {
   \   0000001A   0x....             LDR      R0,??DataTable8
   \   0000001C   0x6980             LDR      R0,[R0, #+24]
   \   0000001E   0x2814             CMP      R0,#+20
   \   00000020   0xD305             BCC      ??man_press_main_1
    140          			man_press_work.rcv_cnt=0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR      R1,??DataTable8
   \   00000026   0x6188             STR      R0,[R1, #+24]
    141          			man_press_work.press_recv.select = MAN_PRESS_PRESS;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR      R1,??DataTable8
   \   0000002C   0x6088             STR      R0,[R1, #+8]
    142          		}
    143          
    144          		// 500ms毎に取得する
    145          		if ( (man_press_work.rcv_cnt % 5) == 0) {
   \                     ??man_press_main_1: (+1)
   \   0000002E   0x....             LDR      R0,??DataTable8
   \   00000030   0x6980             LDR      R0,[R0, #+24]
   \   00000032   0x2105             MOVS     R1,#+5
   \   00000034   0x.... 0x....      BL       __aeabi_uidivmod
   \   00000038   0x2900             CMP      R1,#+0
   \   0000003A   0xD17C             BNE      ??man_press_main_0
    146          
    147          			timer_start = man_timer_get_1ms_count();
   \   0000003C   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000040   0x....             LDR      R1,??DataTable8_1
   \   00000042   0x6008             STR      R0,[R1, #+0]
    148          			if (man_press_work.press_recv.select == MAN_PRESS_PRESS) {
   \   00000044   0x....             LDR      R0,??DataTable8
   \   00000046   0x6880             LDR      R0,[R0, #+8]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD135             BNE      ??man_press_main_2
    149          				ret = ctrc_MPL3115A2_get_press(&temperature, &pressure);
   \   0000004C   0xA901             ADD      R1,SP,#+4
   \   0000004E   0x4668             MOV      R0,SP
   \   00000050   0x.... 0x....      BL       ctrc_MPL3115A2_get_press
    150          				if (ret >= 0)
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD429             BMI      ??man_press_main_3
    151                                          {
    152                                            
    153          					// 気温範囲チェック
    154          #ifdef SYSTEM_ERROR_SLEEP //ADLINK                          // 温度が仕様範囲外の場合はシステムをスリープ状態にする   
    155                                                  switch_mode = man_ope_get_switch_pos();
   \   00000058   0x.... 0x....      BL       man_ope_get_switch_pos
    156                                                  if(switch_mode == MAN_OPE_SWITCH_OFF)
   \   0000005C   0xB2C0             UXTB     R0,R0
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD014             BEQ      ??man_press_main_4
    157                                                  {
    158                                                  }
    159                                                  else if ( (temperature > MAN_DATA_TEMP_BAT_MAX) && (switch_mode == MAN_OPE_SWITCH_BATTERY)) 
   \   00000062   0x9900             LDR      R1,[SP, #+0]
   \   00000064   0x293D             CMP      R1,#+61
   \   00000066   0xDB07             BLT      ??man_press_main_5
   \   00000068   0xB2C0             UXTB     R0,R0
   \   0000006A   0x2805             CMP      R0,#+5
   \   0000006C   0xD104             BNE      ??man_press_main_5
    160                                                  {
    161                                                    sysmgr_set_error( SYSTEM_ERROR_TEMP_OVER_TEMP, SYSTEM_SLEEP_SWITCH_BATTERY );
   \   0000006E   0x2101             MOVS     R1,#+1
   \   00000070   0x....             LDR      R0,??DataTable8_2  ;; 0x1adb1
   \   00000072   0x.... 0x....      BL       sysmgr_set_error
   \   00000076   0xE009             B        ??man_press_main_4
    162          					}
    163                                                  else if (( temperature > MAN_DATA_TEMP_EXT_MAX) && (switch_mode != MAN_OPE_SWITCH_BATTERY))
   \                     ??man_press_main_5: (+1)
   \   00000078   0x9900             LDR      R1,[SP, #+0]
   \   0000007A   0x2947             CMP      R1,#+71
   \   0000007C   0xDB06             BLT      ??man_press_main_4
   \   0000007E   0xB2C0             UXTB     R0,R0
   \   00000080   0x2805             CMP      R0,#+5
   \   00000082   0xD003             BEQ      ??man_press_main_4
    164                                                  {
    165                                                    sysmgr_set_error( SYSTEM_ERROR_TEMP_OVER_TEMP, SYSTEM_SLEEP_SWITCH_NON_BATTERY );
   \   00000084   0x2102             MOVS     R1,#+2
   \   00000086   0x....             LDR      R0,??DataTable8_2  ;; 0x1adb1
   \   00000088   0x.... 0x....      BL       sysmgr_set_error
    166          					}
    167          					man_press_work.press_recv.temperature = temperature;
   \                     ??man_press_main_4: (+1)
   \   0000008C   0x9800             LDR      R0,[SP, #+0]
   \   0000008E   0x....             LDR      R1,??DataTable8
   \   00000090   0x60C8             STR      R0,[R1, #+12]
    168          #else
    169          					if ( (MAN_DATA_TEMP_MIN <= temperature) && (temperature <= MAN_DATA_TEMP_MAX) ) {
    170          						man_press_work.press_recv.temperature = temperature;
    171          					}
    172          #endif
    173          					// 気圧範囲チェック
    174          					if ( (MAN_DATA_PRSS_MIN <= pressure) && (pressure <= MAN_DATA_PRSS_MAX) ) {
   \   00000092   0x9801             LDR      R0,[SP, #+4]
   \   00000094   0x....             LDR      R1,??DataTable8_3  ;; 0x4e20
   \   00000096   0x1A40             SUBS     R0,R0,R1
   \   00000098   0x....             LDR      R1,??DataTable8_4  ;; 0x107ac1
   \   0000009A   0x4288             CMP      R0,R1
   \   0000009C   0xD202             BCS      ??man_press_main_6
    175          						man_press_work.press_recv.pressure = pressure;
   \   0000009E   0x9801             LDR      R0,[SP, #+4]
   \   000000A0   0x....             LDR      R1,??DataTable8
   \   000000A2   0x6108             STR      R0,[R1, #+16]
    176          					}
    177          					man_press_work.press_recv.select = MAN_PRESS_ALTIT;
   \                     ??man_press_main_6: (+1)
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x....             LDR      R1,??DataTable8
   \   000000A8   0x6088             STR      R0,[R1, #+8]
   \   000000AA   0xE023             B        ??man_press_main_7
    178          				}
    179          				else {
    180          					man_press_work.err_cnt++;
   \                     ??man_press_main_3: (+1)
   \   000000AC   0x....             LDR      R0,??DataTable8
   \   000000AE   0x69C0             LDR      R0,[R0, #+28]
   \   000000B0   0x1C40             ADDS     R0,R0,#+1
   \   000000B2   0x....             LDR      R1,??DataTable8
   \   000000B4   0x61C8             STR      R0,[R1, #+28]
   \   000000B6   0xE01D             B        ??man_press_main_7
    181          				}
    182          			}
    183          			else if (man_press_work.press_recv.select == MAN_PRESS_ALTIT) {
   \                     ??man_press_main_2: (+1)
   \   000000B8   0x....             LDR      R0,??DataTable8
   \   000000BA   0x6880             LDR      R0,[R0, #+8]
   \   000000BC   0x2801             CMP      R0,#+1
   \   000000BE   0xD119             BNE      ??man_press_main_7
    184          				ret = ctrc_MPL3115A2_get_altitude(&altitude);
   \   000000C0   0xA802             ADD      R0,SP,#+8
   \   000000C2   0x.... 0x....      BL       ctrc_MPL3115A2_get_altitude
    185          				if (ret >= 0) {
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD40F             BMI      ??man_press_main_8
    186          					// 範囲チェック
    187          					if ( (MAN_DATA_HIGH_MIN <= altitude) && (altitude <= MAN_DATA_HIGH_MAX) ) {
   \   000000CA   0x9802             LDR      R0,[SP, #+8]
   \   000000CC   0x....             LDR      R1,??DataTable8_5  ;; 0xfffffd46
   \   000000CE   0x1A40             SUBS     R0,R0,R1
   \   000000D0   0x....             LDR      R1,??DataTable8_6  ;; 0x30ba
   \   000000D2   0x4288             CMP      R0,R1
   \   000000D4   0xD202             BCS      ??man_press_main_9
    188          						man_press_work.press_recv.altitude = altitude;
   \   000000D6   0x9802             LDR      R0,[SP, #+8]
   \   000000D8   0x....             LDR      R1,??DataTable8
   \   000000DA   0x6148             STR      R0,[R1, #+20]
    189          					}
    190          					man_press_work.press_recv.select = MAN_PRESS_WAIT;
   \                     ??man_press_main_9: (+1)
   \   000000DC   0x2002             MOVS     R0,#+2
   \   000000DE   0x....             LDR      R1,??DataTable8
   \   000000E0   0x6088             STR      R0,[R1, #+8]
    191          					man_press_work.press_recv.flag = MAN_PRESS_RECV_OK;
   \   000000E2   0x2001             MOVS     R0,#+1
   \   000000E4   0x....             LDR      R1,??DataTable8
   \   000000E6   0x6048             STR      R0,[R1, #+4]
   \   000000E8   0xE004             B        ??man_press_main_7
    192          				}
    193          				else {
    194          					man_press_work.err_cnt++;
   \                     ??man_press_main_8: (+1)
   \   000000EA   0x....             LDR      R0,??DataTable8
   \   000000EC   0x69C0             LDR      R0,[R0, #+28]
   \   000000EE   0x1C40             ADDS     R0,R0,#+1
   \   000000F0   0x....             LDR      R1,??DataTable8
   \   000000F2   0x61C8             STR      R0,[R1, #+28]
    195          				}
    196          			}
    197          			else {
    198          				;
    199          			}
    200          			timer_end = man_timer_get_1ms_count();
   \                     ??man_press_main_7: (+1)
   \   000000F4   0x.... 0x....      BL       man_timer_get_1ms_count
   \   000000F8   0x....             LDR      R1,??DataTable8_7
   \   000000FA   0x6008             STR      R0,[R1, #+0]
    201          			timer_diff = man_timer_get_elapsed_time(timer_start, timer_end);
   \   000000FC   0x....             LDR      R0,??DataTable8_7
   \   000000FE   0x6801             LDR      R1,[R0, #+0]
   \   00000100   0x....             LDR      R0,??DataTable8_1
   \   00000102   0x6800             LDR      R0,[R0, #+0]
   \   00000104   0x.... 0x....      BL       man_timer_get_elapsed_time
   \   00000108   0x....             LDR      R1,??DataTable8_8
   \   0000010A   0x6008             STR      R0,[R1, #+0]
    202          			if (timer_max < timer_diff) {
   \   0000010C   0x....             LDR      R0,??DataTable8_9
   \   0000010E   0x6800             LDR      R0,[R0, #+0]
   \   00000110   0x....             LDR      R1,??DataTable8_8
   \   00000112   0x6809             LDR      R1,[R1, #+0]
   \   00000114   0x4288             CMP      R0,R1
   \   00000116   0xD20E             BCS      ??man_press_main_0
    203          				timer_max = timer_diff;
   \   00000118   0x....             LDR      R0,??DataTable8_8
   \   0000011A   0x6800             LDR      R0,[R0, #+0]
   \   0000011C   0x....             LDR      R1,??DataTable8_9
   \   0000011E   0x6008             STR      R0,[R1, #+0]
    204          				if (timer_max > 200) {
   \   00000120   0x....             LDR      R0,??DataTable8_9
   \   00000122   0x6800             LDR      R0,[R0, #+0]
   \   00000124   0x28C9             CMP      R0,#+201
   \   00000126   0xD306             BCC      ??man_press_main_0
    205          					man_error_setting(MAN_ERROR_MAN_PRESS, timer_max, 0);
   \   00000128   0x23CD             MOVS     R3,#+205
   \   0000012A   0x2200             MOVS     R2,#+0
   \   0000012C   0x....             LDR      R0,??DataTable8_9
   \   0000012E   0x6801             LDR      R1,[R0, #+0]
   \   00000130   0x2012             MOVS     R0,#+18
   \   00000132   0x.... 0x....      BL       man_error_set
    206          				}
    207          			}
    208          		}
    209          	}
    210          }
   \                     ??man_press_main_0: (+1)
   \   00000136   0xBD07             POP      {R0-R2,PC}       ;; return
    211          
    212          /********************************************************************/
    213          /*!
    214           * \name	man_press_get_data
    215           * \brief	保持している高度・気温・気圧データの取得
    216           * \param	temperature : 気温(-** 〜 **[℃])
    217           *          pressure    : 気圧(******[hPa])
    218           *          altitude    : 高度(-*** 〜 *****[m])
    219           * \return   0: 正常
    220           *          -1: 異常
    221           * \note	必要時に呼ばれること
    222           */
    223          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    224          int32_t man_press_get_data(int32_t *temperature, int32_t *pressure, int32_t *altitude)
    225          {
   \                     man_press_get_data: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0003             MOVS     R3,R0
    226          	int32_t		ret=-1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
    227          	
    228          	if ( (temperature != NULL) && (pressure != NULL) && (altitude != NULL) ) {
   \   00000008   0x2B00             CMP      R3,#+0
   \   0000000A   0xD00D             BEQ      ??man_press_get_data_0
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD00B             BEQ      ??man_press_get_data_0
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD009             BEQ      ??man_press_get_data_0
    229          
    230                    *temperature = man_press_work.press_recv.temperature;
   \   00000014   0x....             LDR      R0,??DataTable8
   \   00000016   0x68C0             LDR      R0,[R0, #+12]
   \   00000018   0x6018             STR      R0,[R3, #+0]
    231                    *pressure = man_press_work.press_recv.pressure;
   \   0000001A   0x....             LDR      R0,??DataTable8
   \   0000001C   0x6900             LDR      R0,[R0, #+16]
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    232                    *altitude = man_press_work.press_recv.altitude;
   \   00000020   0x....             LDR      R0,??DataTable8
   \   00000022   0x6940             LDR      R0,[R0, #+20]
   \   00000024   0x6010             STR      R0,[R2, #+0]
    233                    ret = 0;
   \   00000026   0x2000             MOVS     R0,#+0
    234          	}
    235          	
    236          	return ret;
   \                     ??man_press_get_data_0: (+1)
   \   00000028   0xBD00             POP      {PC}             ;; return
    237          }
    238          
    239          
    240          /********************************************************************/
    241          /*!
    242           * \name	man_press_get_new_data
    243           * \brief	取得できた高度・気温・気圧データの取得
    244           * \param	temperature : 気温(-** 〜 **[℃])
    245           *          pressure    : 気圧(******[hPa])
    246           *          altitude    : 高度(-*** 〜 *****[m])
    247           * \return   0: 取得
    248           *          -1: 未取得
    249           * \note	必要時に呼ばれること
    250           */
    251          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    252          int32_t man_press_get_new_data(int32_t *temperature, int32_t *pressure, int32_t *altitude)
    253          {
   \                     man_press_get_new_data: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0003             MOVS     R3,R0
    254          	int32_t		ret=-1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
    255          	
    256          	if ( (temperature != NULL) && (pressure != NULL) && (altitude != NULL) ) {
   \   00000008   0x2B00             CMP      R3,#+0
   \   0000000A   0xD014             BEQ      ??man_press_get_new_data_0
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD012             BEQ      ??man_press_get_new_data_0
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD010             BEQ      ??man_press_get_new_data_0
    257          
    258          		if (man_press_work.press_recv.flag == MAN_PRESS_RECV_OK) {
   \   00000014   0x....             LDR      R4,??DataTable8
   \   00000016   0x6864             LDR      R4,[R4, #+4]
   \   00000018   0x2C01             CMP      R4,#+1
   \   0000001A   0xD10C             BNE      ??man_press_get_new_data_0
    259          			*temperature = man_press_work.press_recv.temperature;
   \   0000001C   0x....             LDR      R0,??DataTable8
   \   0000001E   0x68C0             LDR      R0,[R0, #+12]
   \   00000020   0x6018             STR      R0,[R3, #+0]
    260          			*pressure = man_press_work.press_recv.pressure;
   \   00000022   0x....             LDR      R0,??DataTable8
   \   00000024   0x6900             LDR      R0,[R0, #+16]
   \   00000026   0x6008             STR      R0,[R1, #+0]
    261          			*altitude = man_press_work.press_recv.altitude;
   \   00000028   0x....             LDR      R0,??DataTable8
   \   0000002A   0x6940             LDR      R0,[R0, #+20]
   \   0000002C   0x6010             STR      R0,[R2, #+0]
    262          		
    263          			man_press_work.press_recv.flag = MAN_PRESS_RECV_NON;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR      R1,??DataTable8
   \   00000032   0x6048             STR      R0,[R1, #+4]
    264          			ret = 0;
   \   00000034   0x2000             MOVS     R0,#+0
    265          		}
    266          	}
    267          	
    268          	return ret;
   \                     ??man_press_get_new_data_0: (+1)
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    269          }
    270          
    271          
    272          /********************************************************************/
    273          /*!
    274           * \name	man_press_standby
    275           * \brief	高度・気温・気圧データ管理のスタンバイモード処理
    276           * \param	なし
    277           * \return   0: 正常
    278           *          -1: 異常
    279           * \note	アクティブ -> スタンバイ時に、呼ばれること
    280           */
    281          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    282          int32_t man_press_standby(void)
    283          {
   \                     man_press_standby: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    284          	int32_t	ret=0;
   \   00000002   0x2000             MOVS     R0,#+0
    285          
    286          	if (man_press_work.mode != MAN_PRESS_MODE_STOP) {
   \   00000004   0x....             LDR      R1,??DataTable8
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD004             BEQ      ??man_press_standby_0
    287          		// 気温・気圧・高度計 停止
    288          		ret = ctrc_MPL3115A2_set_standby();
   \   0000000C   0x.... 0x....      BL       ctrc_MPL3115A2_set_standby
    289          
    290          		// 受信停止
    291          		man_press_work.mode = MAN_PRESS_MODE_STOP;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x....             LDR      R2,??DataTable8
   \   00000014   0x6011             STR      R1,[R2, #+0]
    292          	}
    293          
    294          	return ret;
   \                     ??man_press_standby_0: (+1)
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
    295          }
    296          
    297          /********************************************************************/
    298          /*!
    299           * \name	man_press_active
    300           * \brief	高度・気温・気圧データ管理のアクティブモード処理
    301           * \param	なし
    302           * \return   0: 正常
    303           *          -1: 異常
    304           * \note	スタンバイ -> アクティブ時に、呼ばれること
    305           */
    306          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    307          int32_t man_press_active(void)
    308          {
   \                     man_press_active: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    309          	int32_t	ret=0;
   \   00000002   0x2000             MOVS     R0,#+0
    310          
    311          	if (man_press_work.mode != MAN_PRESS_MODE_ACTIVE) {
   \   00000004   0x....             LDR      R1,??DataTable8
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0xD009             BEQ      ??man_press_active_0
    312          		// 気温・気圧・高度計再開
    313          		ret = ctrc_MPL3115A2_set_active();
   \   0000000C   0x.... 0x....      BL       ctrc_MPL3115A2_set_active
    314          
    315          		if (ret >= 0) {
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD405             BMI      ??man_press_active_0
    316          			// 受信開始
    317          			man_press_work.mode = MAN_PRESS_MODE_ACTIVE;
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x....             LDR      R2,??DataTable8
   \   00000018   0x6011             STR      R1,[R2, #+0]
    318          			man_press_work.rcv_cnt = 0;
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x....             LDR      R2,??DataTable8
   \   0000001E   0x6191             STR      R1,[R2, #+24]
    319          		}
    320          	}
    321          
    322          	return ret;
   \                     ??man_press_active_0: (+1)
   \   00000020   0xBD02             POP      {R1,PC}          ;; return
    323          }
    324          
    325          /********************************************************************/
    326          /*!
    327           * \name	man_press_off
    328           * \brief	高度・気温・気圧データ管理のOFFモード処理
    329           * \param	なし
    330           * \return   0: 正常
    331           *          -1: 異常
    332           * \note	アクティブ -> OFF時に、呼ばれること
    333           */
    334          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    335          int32_t man_press_off(void)
    336          {
    337          	int32_t	ret=0;
   \                     man_press_off: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    338          
    339          	// 受信停止
    340          	man_press_work.mode = MAN_PRESS_MODE_STOP;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x....             LDR      R2,??DataTable8
   \   00000006   0x6011             STR      R1,[R2, #+0]
    341          
    342          	return ret;
   \   00000008   0x4770             BX       LR               ;; return
    343          }
    344          
    345          /********************************************************************/
    346          /*!
    347           * \name	man_press_on
    348           * \brief	高度・気温・気圧データ管理のONモード処理
    349           * \param	なし
    350           * \return   0: 正常
    351           *          -1: 異常
    352           * \note	OFF -> アクティブ時に、呼ばれること
    353           */
    354          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    355          int32_t man_press_on(void)
    356          {
   \                     man_press_on: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    357          	int32_t	ret=0;
   \   00000002   0x2000             MOVS     R0,#+0
    358          
    359          	// MPL3115A2の開始処理
    360          	ret = ctrc_MPL3115A2_start();
   \   00000004   0x.... 0x....      BL       ctrc_MPL3115A2_start
    361          	// 受信開始
    362          	man_press_work.mode = MAN_PRESS_MODE_ACTIVE;
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x....             LDR      R2,??DataTable8
   \   0000000C   0x6011             STR      R1,[R2, #+0]
    363          	man_press_work.rcv_cnt = 0;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x....             LDR      R2,??DataTable8
   \   00000012   0x6191             STR      R1,[R2, #+24]
    364          
    365          	return ret;
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    366          }
    367          
    368          /********************************************************************/
    369          /*!
    370           * \name	man_press_set_offset_press
    371           * \brief	気圧の補正を行う
    372           *             範囲は-5 ? +5hPa、1hPa / LSBです
    373           * \param	なし
    374           * \return   0: 正常
    375           *          -1: 異常
    376           * \note	気圧の補正を行う時に、呼ばれること
    377           */
    378          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    379          int32_t man_press_set_offset_press( int32_t offset )
    380          {
   \                     man_press_set_offset_press: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    381          	int32_t ret=-1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
    382          
    383          	if ( (MAN_PRESS_OFFSET_PRESS_MIN <= offset) && (offset <= MAN_PRESS_OFFSET_PRESS_MAX) ) {
   \   00000008   0x1D4A             ADDS     R2,R1,#+5
   \   0000000A   0x2A0B             CMP      R2,#+11
   \   0000000C   0xD208             BCS      ??man_press_set_offset_press_0
    384          		ret = ctrc_MPL3115A2_offset_press((int8_t)(offset * 100 / 4));
   \   0000000E   0x2064             MOVS     R0,#+100
   \   00000010   0x4341             MULS     R1,R0,R1
   \   00000012   0x0008             MOVS     R0,R1
   \   00000014   0x2104             MOVS     R1,#+4
   \   00000016   0x.... 0x....      BL       __aeabi_idiv
   \   0000001A   0xB240             SXTB     R0,R0
   \   0000001C   0x.... 0x....      BL       ctrc_MPL3115A2_offset_press
    385          	}
    386          
    387          	return ret;
   \                     ??man_press_set_offset_press_0: (+1)
   \   00000020   0xBD02             POP      {R1,PC}          ;; return
    388          }
    389          
    390          /********************************************************************/
    391          /*!
    392           * \name	man_press_set_offset_temp
    393           * \brief	温度の補正を行う
    394           *             範囲は-8 ? +8℃, 1℃/ LSBです。
    395           * \param	なし
    396           * \return   0: 正常
    397           *          -1: 異常
    398           * \note	温度の補正を行う時に、呼ばれること
    399           */
    400          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    401          int32_t man_press_set_offset_temp( int32_t offset )
    402          {
   \                     man_press_set_offset_temp: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    403          	int32_t ret=-1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
    404          	int32_t	temp;
    405          
    406          	if ( (MAN_PRESS_OFFSET_TEMP_MIN <= offset) && (offset <= MAN_PRESS_OFFSET_TEMP_MAX) ) {
   \   00000008   0x000A             MOVS     R2,R1
   \   0000000A   0x3208             ADDS     R2,R2,#+8
   \   0000000C   0x2A11             CMP      R2,#+17
   \   0000000E   0xD20B             BCS      ??man_press_set_offset_temp_0
    407          
    408          		temp = offset * 16 / 4;
   \   00000010   0x2010             MOVS     R0,#+16
   \   00000012   0x4341             MULS     R1,R0,R1
   \   00000014   0x0008             MOVS     R0,R1
   \   00000016   0x2104             MOVS     R1,#+4
   \   00000018   0x.... 0x....      BL       __aeabi_idiv
    409          		if (temp >= 0x80) temp--;
   \   0000001C   0x2880             CMP      R0,#+128
   \   0000001E   0xDB00             BLT      ??man_press_set_offset_temp_1
   \   00000020   0x1E40             SUBS     R0,R0,#+1
    410          
    411          		ret = ctrc_MPL3115A2_offset_temp((int8_t)temp);
   \                     ??man_press_set_offset_temp_1: (+1)
   \   00000022   0xB240             SXTB     R0,R0
   \   00000024   0x.... 0x....      BL       ctrc_MPL3115A2_offset_temp
    412          	}
    413          
    414          	return ret;
   \                     ??man_press_set_offset_temp_0: (+1)
   \   00000028   0xBD02             POP      {R1,PC}          ;; return
    415          }
    416          
    417          /********************************************************************/
    418          /*!
    419           * \name	man_press_set_offset_altitude
    420           * \brief	高度の補正を行う
    421           *             範囲は -128?+ 127メートルです。1メートル/ LSBです。
    422           * \param	なし
    423           * \return   0: 正常
    424           *          -1: 異常
    425           * \note	高度の補正を行う時に、呼ばれること
    426           */
    427          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    428          int32_t man_press_set_offset_altitude( int32_t offset )
    429          {
   \                     man_press_set_offset_altitude: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    430          	int32_t ret=-1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
    431          
    432          	if ( (MAN_PRESS_OFFSET_ALTITUDE_MIN <= offset) && (offset <= MAN_PRESS_OFFSET_ALTITUDE_MAX) ) {
   \   00000008   0x000A             MOVS     R2,R1
   \   0000000A   0x3280             ADDS     R2,R2,#+128
   \   0000000C   0x2AFF             CMP      R2,#+255
   \   0000000E   0xD803             BHI      ??man_press_set_offset_altitude_0
    433          		ret = ctrc_MPL3115A2_offset_altitude((int8_t)offset);
   \   00000010   0x0008             MOVS     R0,R1
   \   00000012   0xB240             SXTB     R0,R0
   \   00000014   0x.... 0x....      BL       ctrc_MPL3115A2_offset_altitude
    434          	}
    435          
    436          	return ret;
   \                     ??man_press_set_offset_altitude_0: (+1)
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
    437          }
    438          

   \                                 In section .text, align 2, keep-with-next
    439          void  man_temp_status_log()
    440          {
   \                     man_temp_status_log: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    441            sprintf(print_buf,"Temp:%d Pres:%d Alt:%d\r\n",
    442              		man_press_work.press_recv.temperature,
    443          		man_press_work.press_recv.pressure,
    444          		man_press_work.press_recv.altitude);
   \   00000002   0x....             LDR      R0,??DataTable8
   \   00000004   0x6940             LDR      R0,[R0, #+20]
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x....             LDR      R0,??DataTable8
   \   0000000A   0x6903             LDR      R3,[R0, #+16]
   \   0000000C   0x....             LDR      R0,??DataTable8
   \   0000000E   0x68C2             LDR      R2,[R0, #+12]
   \   00000010   0x....             LDR      R1,??DataTable8_10
   \   00000012   0x....             LDR      R0,??DataTable8_11
   \   00000014   0x.... 0x....      BL       sprintf
    445            man_usb_data_send(print_buf,strlen(print_buf));
   \   00000018   0x....             LDR      R0,??DataTable8_11
   \   0000001A   0x.... 0x....      BL       strlen
   \   0000001E   0x0001             MOVS     R1,R0
   \   00000020   0x....             LDR      R0,??DataTable8_11
   \   00000022   0x.... 0x....      BL       man_usb_data_send
    446          }
   \   00000026   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     man_press_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     timer_start

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x0001ADB1         DC32     0x1adb1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x00004E20         DC32     0x4e20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x00107AC1         DC32     0x107ac1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0xFFFFFD46         DC32     0xfffffd46

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x000030BA         DC32     0x30ba

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     timer_end

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     timer_diff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     timer_max

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x........         DC32     print_buf

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x54 0x65          DC8 "Temp:%d Pres:%d Alt:%d\015\012"
   \              0x6D 0x70    
   \              0x3A 0x25    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x3A 0x25    
   \              0x64 0x20    
   \              0x41 0x6C    
   \              0x74 0x3A    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    447          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   man_press_active
         8   -> ctrc_MPL3115A2_set_active
       4   man_press_get_data
       8   man_press_get_new_data
      16   man_press_init
        16   -> __aeabi_memset
        16   -> ctrc_MPL3115A2_start
      16   man_press_main
        16   -> ctrc_MPL3115A2_get_altitude
        16   -> ctrc_MPL3115A2_get_press
        16   -> man_error_set
        16   -> man_ope_get_switch_pos
        16   -> man_timer_get_1ms_count
        16   -> man_timer_get_elapsed_time
        16   -> sysmgr_set_error
        16 __aeabi_uidivmod
       0   man_press_off
       8   man_press_on
         8   -> ctrc_MPL3115A2_start
       8   man_press_set_offset_altitude
         8   -> ctrc_MPL3115A2_offset_altitude
       8   man_press_set_offset_press
         8   -> ctrc_MPL3115A2_offset_press
         8 __aeabi_idiv
       8   man_press_set_offset_temp
         8   -> ctrc_MPL3115A2_offset_temp
         8 __aeabi_idiv
       8   man_press_standby
         8   -> ctrc_MPL3115A2_set_standby
       8   man_temp_status_log
         8   -> man_usb_data_send
         8   -> sprintf
         8   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      28  ?_0
      34  man_press_active
      42  man_press_get_data
      56  man_press_get_new_data
      34  man_press_init
     312  man_press_main
      10  man_press_off
      22  man_press_on
      26  man_press_set_offset_altitude
      34  man_press_set_offset_press
      42  man_press_set_offset_temp
      24  man_press_standby
      32  man_press_work
      40  man_temp_status_log
       4  timer_diff
       4  timer_end
       4  timer_max
       4  timer_start

 
  48 bytes in section .bss
  28 bytes in section .rodata
 724 bytes in section .text
 
 724 bytes of CODE  memory
  28 bytes of CONST memory
  48 bytes of DATA  memory

Errors: none
Warnings: 1
