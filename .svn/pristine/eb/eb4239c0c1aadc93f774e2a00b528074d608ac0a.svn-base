###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       17/May/2019  13:32:09
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_ope.c
#    Command line =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_ope.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_B -lCN
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        -lA
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List\man_ope.lst
#    Object file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj\man_ope.o
#
###############################################################################

C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_ope.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    man_ope.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    2017.10.2
      8            * @brief   操作を管理する
      9            ******************************************************************************
     10            $Id: man_ope.c 255 2018-08-01 07:28:31Z shitaoka $
     11            * @attention
     12            *
     13            *****************************************************************************
     14          */
     15          
     16          #include <string.h>
     17          #include <stdio.h>
     18          #include <stdlib.h>
     19          
     20          #include "board.h"
     21          #include "system_manager.h"
     22          #include "se_uart2.h"
     23          
     24          #include "man_timer.h"
     25          #include "man_gps.h"
     26          #include "man_gyro.h"
     27          #include "man_press.h"
     28          #include "man_data.h"
     29          #include "man_msg.h"
     30          #include "man_rpt.h"
     31          #include "man_cmd.h"
     32          #include "man_net.h"
     33          #include "man_error.h"
     34          #include "man_ope.h"
     35          #include "man_rtc.h"
     36          #include "man_gpio.h"
     37          #include "man_usb.h"
     38          #include "man_http.h"
     39          #include "man_charge.h"
     40          #include "gnss_gw_common.h"
     41          #include "ctrl_SLEEP.h"
     42          #include "drv_wdt.h"
     43          
     44          #pragma section = "APL_PRG_BLOCK"
     45          
     46          /************************************************************************/
     47          /* declaration of structure                                             */
     48          /************************************************************************/
     49          
     50          
     51          #define	MAN_OPE_SEQ_BUFF_MAX			100
     52          
     53          #define	MAN_OPE_RSSI_NG_DELAY_TIMER		(60*1000)		// 60秒経過しても圏外の場合は次に進む
     54          
     55          #define MAN_OPE_SLEEP_OFF_WAKEUP_TIME           10000
     56          
     57          // 要求
     58          #define	MAN_OPE_REQ_CMD_NON			0		// 要求待ち
     59          #define	MAN_OPE_REQ_CMD_OTA_START	1		// OTA開始
     60          #define	MAN_OPE_REQ_CMD_OTA_END		2		// OTA終了
     61          #define	MAN_OPE_REQ_CMD_RESET		3		// RESET
     62          
     63          
     64          // 操作管理モード
     65          typedef enum {
     66          	MAN_OPE_MODE_IDLE,				    // 00 : 起動
     67          	MAN_OPE_MODE_OFF,				    // 01 : OFFモード
     68          	MAN_OPE_MODE_EXT_POWER,		    	// 02 : 外部電源モード
     69          	MAN_OPE_MODE_BATTERY,			    // 03 : バッテリーモード
     70          	MAN_OPE_MODE_DIRECT,			    // 04 : 直結モード
     71          	MAN_OPE_MODE_RESET,				    // 05 : リセットモード
     72          	MAN_OPE_MODE_OTA_IN,			    // 06 : ファームウェア更新開始モード
     73          	MAN_OPE_MODE_EXT_OFF1,				// 07 : 外部電源モード1(外部電源OFF)
     74          	MAN_OPE_MODE_EXT_OFF2,				// 08 : 外部電源モード2(外部電源OFF)
     75          	MAN_OPE_MODE_MAX				    // 09 : 最大値
     76          } man_ope_mode_def;
     77          
     78          
     79          // SEEPモード
     80          typedef enum {
     81          	MAN_OPE_SLEEP_IDLE,				    // 待ち
     82          	MAN_OPE_SLEEP_OFF_REQ,			    // OFFモードによるSLEEP開始
     83          	MAN_OPE_SLEEP_OFF_WAKEUP,		    //                SLEEP解除
     84          	MAN_OPE_SLEEP_OFF_EXTON,		    //                SLEEP待ち(外部電源ON状態で充電を行う)
     85          
     86          	MAN_OPE_SLEEP_EXT_REQ,				// 外部電源モードによるSLEEP開始
     87          	MAN_OPE_SLEEP_EXT_WAKEUP,		    //                SLEEP解除
     88          
     89          	MAN_OPE_SLEEP_BATT,			    // ZERO BATTによるSLEEP
     90          	MAN_OPE_SLEEP_ALARM_SEND_DATA,  	    // 定刻測位データ送信待ち
     91          } man_ope_sleep_def;
     92          
     93          
     94          // 外部電源SW(SW104)
     95          #define	MAN_OPE_EXT_ON				0	// 外部電源 ON
     96          #define	MAN_OPE_EXT_OFF				1	// 外部電源 OFF
     97          
     98          
     99          // 操作管理シーケンス
    100          typedef enum {
    101          	// 
    102          	MAN_OPE_SEQ_IDLE,					// 00 : 待ち
    103          
    104          	MAN_OPE_SEQ_WAKEUP,					// 01 : SLEEP解除
    105          
    106          	// 通常電源ON開始
    107          	MAN_OPE_SEQ_NORMAL_ON_REQ,			// 02 : 通常の電源ON開始
    108          	MAN_OPE_SEQ_NORMAL_ON_GPS_ON,		// 03 :                 GPS ON
    109          	MAN_OPE_SEQ_NORMAL_ON_GPS_ON_OK,	// 04 :                 GPS ON OK
    110          	MAN_OPE_SEQ_NORMAL_ON_GPS_ON_NG,	// 05 :                 GPS ON NG
    111          	MAN_OPE_SEQ_NORMAL_ON_GPS_OTA,		// 06 :                 GPS OTA完了待ち
    112          	MAN_OPE_SEQ_NORMAL_ON_NET_ON,		// 07 :                 NETWORK ON
    113          	MAN_OPE_SEQ_NORMAL_ON_NET_ON_OK,	// 08 :                 NETWORK ON OK
    114          	MAN_OPE_SEQ_NORMAL_ON_NET_ON_NG,	// 09 :                 NETWORK ON NG
    115          	MAN_OPE_SEQ_NORMAL_ON_NET_OFF,		// 10 :                 NETWORK OFF OK
    116          	MAN_OPE_SEQ_NORMAL_ON_NET_OFF_OK,	// 11 :                 NETWORK OFF OK
    117          	MAN_OPE_SEQ_NORMAL_ON_NET_OFF_NG,	// 12 :                 NETWORK OFF NG
    118          
    119          	// 通常電源OFF開始
    120          	MAN_OPE_SEQ_NORMAL_OFF_REQ,			// 13 : 通常の電源OFF開始
    121          	MAN_OPE_SEQ_NORMAL_OFF_NET_OFF,		// 14 :                   NETWORK OFF
    122          	MAN_OPE_SEQ_NORMAL_OFF_NET_OFF_OK,	// 15 :                   NETWORK OFF OK
    123          	MAN_OPE_SEQ_NORMAL_OFF_NET_OFF_NG,	// 16 :                   NETWORK OFF NG
    124          	MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF,		// 17 :                   GPS OFF
    125          	MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF_OK,	// 18 :                   GPS OFF OK
    126          	MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF_NG,	// 19 :                   GPS OFF NG
    127          
    128          	// 通常USB開始
    129          	MAN_OPE_SEQ_NORMAL_USBON_REQ,		// 20 : 通常のUSB開始
    130          	MAN_OPE_SEQ_NORMAL_USBON_WAIT,		// 21 :                   NET OPEN待ち
    131          	MAN_OPE_SEQ_NORMAL_USBON_UDP_OFF,	// 22 :                   UDP OFF
    132          	MAN_OPE_SEQ_NORMAL_USBON_UDP_OFF_OK,// 23 :                   UDP OFF OK
    133          	MAN_OPE_SEQ_NORMAL_USBON_UDP_OFF_NG,// 24 :                   UDP OFF NG
    134          	MAN_OPE_SEQ_NORMAL_USBON_NET_OFF,	// 25 :                   NETWORK OFF
    135          	MAN_OPE_SEQ_NORMAL_USBON_NET_OFF_OK,// 26 :                   NETWORK OFF OK
    136          	MAN_OPE_SEQ_NORMAL_USBON_NET_OFF_NG,// 27 :                   NETWORK OFF NG
    137          
    138          
    139          	// 通常USB停止
    140          	MAN_OPE_SEQ_NORMAL_USBOFF_REQ,		// 28 : 通常のUSB停止
    141          	MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON,	// 29 :                   NETWORK ON
    142          	MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON_OK,// 30 :                   NETWORK ON OK
    143          	MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON_NG,// 31 :                   NETWORK ON NG
    144          
    145          	// EXT - BATT間
    146          	MAN_OPE_SEQ_EXT_BATT_REQ,			// 32 : EXT - BATT間
    147          
    148          	MAN_OPE_SEQ_ERROR,					// 33 : 異常
    149          	
    150          	MAN_OPE_SEQ_OTA_START_REQ,			// 34 : OTA開始要求
    151          	MAN_OPE_SEQ_OTA_START,				// 35 : OTA開始中
    152          	MAN_OPE_SEQ_OTA_START_OK,			// 36 : OTA開始完了(正常)
    153          	MAN_OPE_SEQ_OTA_START_NG,			// 37 : OTA開始完了(異常)
    154          	MAN_OPE_SEQ_OTA_END_REQ,			// 38 : OTA終了要求
    155          	MAN_OPE_SEQ_OTA_END,				// 39 : OTA終了中
    156          	MAN_OPE_SEQ_OTA_END_OK,				// 40 : OTA終了完了(正常)
    157          	MAN_OPE_SEQ_OTA_END_NG,				// 41 : OTA終了完了(異常)
    158          
    159          	// 外部電源OFF
    160          	MAN_OPE_SEQ_EXTOFF_START_REQ,		// 42 : EXT OFF開始要求
    161          	MAN_OPE_SEQ_EXTOFF_START_POS,		// 43 : 測位開始準備
    162          	MAN_OPE_SEQ_EXTOFF_GPS_WAIT,		// 44 : 測位
    163          	MAN_OPE_SEQ_EXTOFF_GPS_WAIT_OK,		// 45 : 測位時間経過
    164          	MAN_OPE_SEQ_EXTOFF_GPS_WAIT_NG,		// 46 : 測位時間経過
    165          
    166          	MAN_OPE_SEQ_EXTOFF_GET_RTC_REQ,		// 47 : LTEからRTC取得依頼
    167          	MAN_OPE_SEQ_EXTOFF_GET_RTC,			// 48 : LTEからRTC取得開始
    168          	MAN_OPE_SEQ_EXTOFF_GET_RTC_OK,		// 49 : LTEからRTC取得完了
    169          	MAN_OPE_SEQ_EXTOFF_GET_RTC_NG,		// 50 : LTEからRTC取得完了
    170          	MAN_OPE_SEQ_EXTOFF_GET_RTC_END,		// 51 : LTEからRTC取得完了後の処理
    171          
    172          	MAN_OPE_SEQ_EXTOFF_NET_OFF,			// 52 : NETWORK停止中
    173          	MAN_OPE_SEQ_EXTOFF_NET_OFF_OK,		// 53 : NETWORK停止完了(成功)
    174          	MAN_OPE_SEQ_EXTOFF_GPS_OFF,			// 54 : GPS停止中
    175          	MAN_OPE_SEQ_EXTOFF_GPS_OFF_OK,		// 55 : GPS停止完了(成功)
    176          
    177          	// 定刻測位
    178          	MAN_OPE_SEQ_EXTOFF_END_REQ,			// 56 : SLEEPからの復帰開始
    179          	MAN_OPE_SEQ_EXTOFF_END_GPS_ON,		// 57 : GPS再開中
    180          	MAN_OPE_SEQ_EXTOFF_END_GPS_ON_OK,	// 58 : GPS再開完了
    181          
    182          	MAN_OPE_SEQ_EXTOFF_END_NET_ON,		// 59 : NETWORK再開中
    183          	MAN_OPE_SEQ_EXTOFF_END_NET_ON_OK,	// 60 : NETWORK再開(成功)
    184                  
    185          
    186          	// 直結からの電源OFF開始
    187          	MAN_OPE_SEQ_DIRECT_OFF_REQ,			// 61 : 直結からの電源OFF開始
    188          	MAN_OPE_SEQ_DIRECT_OFF_GPS_OFF,		// 62 : GPS停止中
    189          	MAN_OPE_SEQ_DIRECT_OFF_GPS_OFF_OK,	// 63 : GPS停止完了
    190          
    191          	// 直結からのUSB OTA開始
    192          	MAN_OPE_SEQ_USBOTA_START_REQ,		// 64 : USB OTA開始
    193          	MAN_OPE_SEQ_USBOTA_START,			// 65 : GPS停止中
    194          	MAN_OPE_SEQ_USBOTA_START_OK,		// 66 : GPS停止完了
    195          
    196          	// USB OTAから直結
    197          	MAN_OPE_SEQ_USBOTA_END_REQ,			// 67 : USB OTA開始
    198          	MAN_OPE_SEQ_USBOTA_END,				// 68 : GPS停止中
    199          	MAN_OPE_SEQ_USBOTA_END_OK,			// 69 : GPS停止完了
    200          	MAN_OPE_SEQ_USBOTA_END_NG,			// 70 : GPS停止完了
    201          	
    202                  MAN_OPE_SEQ_ALARM_SEND_DATA,		        // 71 : 定刻測位データ送信
    203          
    204          } man_ope_seq_mode_def;
    205          
    206          #ifdef ADLINK_DEBUG_MESSAGE
    207          char *man_ope_seq_mode_def_str[] =
    208          {
    209            	"MAN_OPE_SEQ_IDLE",					// 00 : 待ち
    210          
    211          	"MAN_OPE_SEQ_WAKEUP",					// 01 : SLEEP解除
    212          
    213          	// 通常電源ON開始
    214          	"MAN_OPE_SEQ_NORMAL_ON_REQ",			// 02 : 通常の電源ON開始
    215          	"MAN_OPE_SEQ_NORMAL_ON_GPS_ON",		// 03 :                 GPS ON
    216          	"MAN_OPE_SEQ_NORMAL_ON_GPS_ON_OK",	// 04 :                 GPS ON OK
    217          	"MAN_OPE_SEQ_NORMAL_ON_GPS_ON_NG",	// 05 :                 GPS ON NG
    218          	"MAN_OPE_SEQ_NORMAL_ON_GPS_OTA",		// 06 :                 GPS OTA完了待ち
    219          	"MAN_OPE_SEQ_NORMAL_ON_NET_ON",		// 07 :                 NETWORK ON
    220          	"MAN_OPE_SEQ_NORMAL_ON_NET_ON_OK",	// 08 :                 NETWORK ON OK
    221          	"MAN_OPE_SEQ_NORMAL_ON_NET_ON_NG",	// 09 :                 NETWORK ON NG
    222          	"MAN_OPE_SEQ_NORMAL_ON_NET_OFF",		// 10 :                 NETWORK OFF OK
    223          	"MAN_OPE_SEQ_NORMAL_ON_NET_OFF_OK",	// 11 :                 NETWORK OFF OK
    224          	"MAN_OPE_SEQ_NORMAL_ON_NET_OFF_NG",	// 12 :                 NETWORK OFF NG
    225          
    226          	// 通常電源OFF開始
    227          	"MAN_OPE_SEQ_NORMAL_OFF_REQ",			// 13 : 通常の電源OFF開始
    228          	"MAN_OPE_SEQ_NORMAL_OFF_NET_OFF",		// 14 :                   NETWORK OFF
    229          	"MAN_OPE_SEQ_NORMAL_OFF_NET_OFF_OK",	// 15 :                   NETWORK OFF OK
    230          	"MAN_OPE_SEQ_NORMAL_OFF_NET_OFF_NG",	// 16 :                   NETWORK OFF NG
    231          	"MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF",		// 17 :                   GPS OFF
    232          	"MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF_OK",	// 18 :                   GPS OFF OK
    233          	"MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF_NG",	// 19 :                   GPS OFF NG
    234          
    235          	// 通常USB開始
    236          	"MAN_OPE_SEQ_NORMAL_USBON_REQ",		// 20 : 通常のUSB開始
    237          	"MAN_OPE_SEQ_NORMAL_USBON_WAIT",		// 21 :                   NET OPEN待ち
    238          	"MAN_OPE_SEQ_NORMAL_USBON_UDP_OFF",	// 22 :                   UDP OFF
    239          	"MAN_OPE_SEQ_NORMAL_USBON_UDP_OFF_OK",// 23 :                   UDP OFF OK
    240          	"MAN_OPE_SEQ_NORMAL_USBON_UDP_OFF_NG",// 24 :                   UDP OFF NG
    241          	"MAN_OPE_SEQ_NORMAL_USBON_NET_OFF",	// 25 :                   NETWORK OFF
    242          	"MAN_OPE_SEQ_NORMAL_USBON_NET_OFF_OK",// 26 :                   NETWORK OFF OK
    243          	"MAN_OPE_SEQ_NORMAL_USBON_NET_OFF_NG",// 27 :                   NETWORK OFF NG
    244          
    245          
    246          	// 通常USB停止
    247          	"MAN_OPE_SEQ_NORMAL_USBOFF_REQ",		// 28 : 通常のUSB停止
    248          	"MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON",	// 29 :                   NETWORK ON
    249          	"MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON_OK",// 30 :                   NETWORK ON OK
    250          	"MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON_NG",// 31 :                   NETWORK ON NG
    251          
    252          	// EXT - BATT間
    253          	"MAN_OPE_SEQ_EXT_BATT_REQ",			// 32 : EXT - BATT間
    254          
    255          	"MAN_OPE_SEQ_ERROR",					// 33 : 異常
    256          	
    257          	"MAN_OPE_SEQ_OTA_START_REQ",			// 34 : OTA開始要求
    258          	"MAN_OPE_SEQ_OTA_START",				// 35 : OTA開始中
    259          	"MAN_OPE_SEQ_OTA_START_OK",			// 36 : OTA開始完了(正常)
    260          	"MAN_OPE_SEQ_OTA_START_NG",			// 37 : OTA開始完了(異常)
    261          	"MAN_OPE_SEQ_OTA_END_REQ",			// 38 : OTA終了要求
    262          	"MAN_OPE_SEQ_OTA_END",				// 39 : OTA終了中
    263          	"MAN_OPE_SEQ_OTA_END_OK",				// 40 : OTA終了完了(正常)
    264          	"MAN_OPE_SEQ_OTA_END_NG",				// 41 : OTA終了完了(異常)
    265          
    266          	// 外部電源OFF
    267          	"MAN_OPE_SEQ_EXTOFF_START_REQ",		// 42 : EXT OFF開始要求
    268          	"MAN_OPE_SEQ_EXTOFF_START_POS",		// 43 : 測位開始準備
    269          	"MAN_OPE_SEQ_EXTOFF_GPS_WAIT",		// 44 : 測位
    270          	"MAN_OPE_SEQ_EXTOFF_GPS_WAIT_OK",		// 45 : 測位時間経過
    271          	"MAN_OPE_SEQ_EXTOFF_GPS_WAIT_NG",		// 46 : 測位時間経過
    272          
    273          	"MAN_OPE_SEQ_EXTOFF_GET_RTC_REQ",		// 47 : LTEからRTC取得依頼
    274          	"MAN_OPE_SEQ_EXTOFF_GET_RTC",			// 48 : LTEからRTC取得開始
    275          	"MAN_OPE_SEQ_EXTOFF_GET_RTC_OK",		// 49 : LTEからRTC取得完了
    276          	"MAN_OPE_SEQ_EXTOFF_GET_RTC_NG",		// 50 : LTEからRTC取得完了
    277          	"MAN_OPE_SEQ_EXTOFF_GET_RTC_END",		// 51 : LTEからRTC取得完了後の処理
    278          
    279          	"MAN_OPE_SEQ_EXTOFF_NET_OFF",			// 52 : NETWORK停止中
    280          	"MAN_OPE_SEQ_EXTOFF_NET_OFF_OK",		// 53 : NETWORK停止完了(成功)
    281          	"MAN_OPE_SEQ_EXTOFF_GPS_OFF",			// 54 : GPS停止中
    282          	"MAN_OPE_SEQ_EXTOFF_GPS_OFF_OK",		// 55 : GPS停止完了(成功)
    283          
    284          	// 定刻測位
    285          	"MAN_OPE_SEQ_EXTOFF_END_REQ",			// 56 : SLEEPからの復帰開始
    286          	"MAN_OPE_SEQ_EXTOFF_END_GPS_ON",		// 57 : GPS再開中
    287          	"MAN_OPE_SEQ_EXTOFF_END_GPS_ON_OK",	// 58 : GPS再開完了
    288          
    289          	"MAN_OPE_SEQ_EXTOFF_END_NET_ON",		// 59 : NETWORK再開中
    290          	"MAN_OPE_SEQ_EXTOFF_END_NET_ON_OK",	// 60 : NETWORK再開(成功)
    291          
    292          	// 直結からの電源OFF開始
    293          	"MAN_OPE_SEQ_DIRECT_OFF_REQ",			// 61 : 直結からの電源OFF開始
    294          	"MAN_OPE_SEQ_DIRECT_OFF_GPS_OFF",		// 62 : GPS停止中
    295          	"MAN_OPE_SEQ_DIRECT_OFF_GPS_OFF_OK",	// 63 : GPS停止完了
    296          
    297          	// 直結からのUSB OTA開始
    298          	"MAN_OPE_SEQ_USBOTA_START_REQ",		// 64 : USB OTA開始
    299          	"MAN_OPE_SEQ_USBOTA_START",			// 65 : GPS停止中
    300          	"MAN_OPE_SEQ_USBOTA_START_OK",		// 66 : GPS停止完了
    301          
    302          	// USB OTAから直結
    303          	"MAN_OPE_SEQ_USBOTA_END_REQ",			// 67 : USB OTA開始
    304          	"MAN_OPE_SEQ_USBOTA_END",				// 68 : GPS停止中
    305          	"MAN_OPE_SEQ_USBOTA_END_OK",			// 69 : GPS停止完了
    306          	"MAN_OPE_SEQ_USBOTA_END_NG",			// 70 : GPS停止完了
    307                  "MAN_OPE_SEQ_ALARM_SEND_DATA",		        // 71 : 定刻測位データ送信
    308          	
    309          };
    310          
    311          man_ope_seq_mode_def pre_man_ope_seq_mode;
    312          
    313          #endif
    314          // 動作開始前の処理
    315          typedef enum {
    316          	MAN_OPE_START_PROC_NON,				// なし
    317          	MAN_OPE_START_PROC_EXT_ON1,			// 32
    318          	MAN_OPE_START_PROC_BATT1,			// 54, 34, 32
    319          	MAN_OPE_START_PROC_DIR1,			// 54, 34, 32
    320          	MAN_OPE_START_PROC_DIR2,			// 
    321          
    322          	MAN_OPE_START_PROC_EXT_BATT,		// 
    323          	MAN_OPE_START_PROC_BATT_EXT,		// 
    324          
    325          	MAN_OPE_START_PROC_EXT_USB,			// 35, 53, 54, 55
    326          	MAN_OPE_START_PROC_BATT_USB,		// 54, 55
    327          
    328          	MAN_OPE_START_PROC_EXTOFF_OFF,
    329          	MAN_OPE_START_PROC_EXTOFF_ON,
    330          	MAN_OPE_START_PROC_EXTOFF_BAT,
    331          } man_ope_start_proc_def;
    332          
    333          // 動作完了後の処理
    334          typedef enum {
    335          	MAN_OPE_END_PROC_NON,				// なし
    336          	MAN_OPE_END_PROC_EXT_ON1,			// 31, 34
    337          	MAN_OPE_END_PROC_BATT1,				// 31, 34, 53
    338          	MAN_OPE_END_PROC_DIR1,				// 31, 34, 53, 54, 55
    339          	MAN_OPE_END_PROC_DIR2,				// 
    340          	MAN_OPE_END_PROC_RESET,				// 
    341          	MAN_OPE_END_PROC_CALLBACK,			//
    342          
    343          	MAN_OPE_END_PROC_DIR_BAT,			// 56, 53
    344          	MAN_OPE_END_PROC_EXTOFF_OFF,
    345          	MAN_OPE_END_PROC_EXTOFF_ON,
    346          	MAN_OPE_END_PROC_EXTOFF_BAT,
    347          
    348          } man_ope_end_proc_def;
    349          
    350          
    351          // 動作状態
    352          typedef enum {
    353          	MAN_OPE_PROC_MODE_NORMAL,			// 通常状態
    354          	MAN_OPE_PROC_MODE_OTA,				// OTA状態
    355          } man_ope_proc_mode_def;
    356          
    357          
    358          // 外部電源モード
    359          typedef enum {
    360          	MAN_OPE_EXT_MODE_EXT_OFF,			// 外部電源喪失後の測位
    361          	MAN_OPE_EXT_MODE_ALARM,				// 定刻起動時の測位
    362          	MAN_OPE_EXT_MODE_EXIT,				// 測位解除
    363          } man_ope_ext_mode_def;
    364          
    365          
    366          // 周辺機器管理番号
    367          typedef enum {
    368          	MAN_OPE_DEV_GPS,				    // GPS
    369          	MAN_OPE_DEV_NET,				    // NETWORK
    370          	MAN_OPE_DEV_MAX,				    // 最大値
    371          } man_ope_device_def;
    372          
    373          // SLEEPの応答
    374          typedef struct _man_ope_sleep_cb_t {
    375          	int32_t					flag;		// フラグ
    376          	int32_t					id;
    377          	int32_t					status;
    378          } man_ope_sleep_cb_t;
    379          
    380          
    381          #define	MAN_OPE_SE_COUNT			100	// 300回一致(3000ms)で確定
    382          
    383          // スイッチ情報
    384          typedef struct _man_ope_sw_t {
    385          	man_gpio_switch_def		sw_get;			// スイッチ情報(入力値)
    386          	man_gpio_switch_def		sw_fixed;		// スイッチ情報(確定値)
    387          	man_gpio_switch_def		sw_old;			// スイッチ情報(旧確定値)
    388          	uint32_t				count;			// ノイズ除去
    389          	int32_t					flag;			// 1: スイッチ確定
    390          } man_ope_sw_t;
    391          
    392          
    393          // LED情報
    394          typedef struct _man_ope_led_t {
    395          	uint32_t				led_lte;		// LTE 
    396          	uint32_t				led_lte_cnt;
    397          	uint32_t				led_bat;		// BATTERY
    398          	uint32_t				led_pow;		// POWER
    399          	uint32_t				led_gns;		// GNS
    400          } man_ope_led_t;
    401          
    402          
    403          #define	MAN_OPE_EXT_COUNT			100		// 10回一致で確定
    404          
    405          // 外部電源ON/OFF状態
    406          typedef struct _man_ope_ext_sts_t {
    407          	uint32_t				ext_get;		// 外部電源ON/OFF状態(入力値)
    408          	uint32_t				ext_fixed;		// 外部電源ON/OFF状態(確定値)
    409          	uint32_t				ext_old;		// 外部電源ON/OFF状態(旧確定値)
    410          	uint32_t				count;			// ノイズ除去
    411          	int32_t					flag;			// 1: 外部電源ON/OFF状態確定
    412          } man_ope_ext_sts_t;
    413          
    414          
    415          // 要求に対する応答
    416          typedef struct _man_ope_resp_cmd_t {
    417          	int32_t					flag;
    418          	int32_t					id;
    419          	int32_t					status;
    420          } man_ope_resp_cmd_t;
    421          
    422          // 外部電源ON/OFF制御情報
    423          typedef struct _man_ope_ext_info_t {
    424          	man_ope_ext_mode_def	ext_mode;		// 外部電源モード
    425          	uint32_t				pos_time;		// 測位時間[ms]
    426          	clock_info_t			clock;			// RTC
    427          	uint8_t					alm_hour;
    428          	uint8_t					alm_min;
    429          } man_ope_ext_info_t;
    430          
    431          // 通知情報
    432          typedef struct _man_ope_noti_state_t {
    433          	int32_t					flag;
    434          	int32_t					id;
    435          	int32_t					state;			// デバイスの状態
    436          } man_ope_noti_state_t;
    437          
    438          // 動作管理情報
    439          typedef struct _man_ope_mode_info_t {
    440          	man_ope_mode_def		now_mode;		// 現在の状態
    441          	man_ope_mode_def		next_mode;		// 移行中の状態
    442          	man_ope_mode_def		gole_mode;		// 最終の状態
    443          	man_ope_mode_def		ota_mode;		// OTA復帰後の状態
    444          	man_ope_mode_def		end_mode;		// 終了後の状態
    445          
    446          	man_ope_switch_def		switch_pos;		// スイッチの状態
    447          
    448          	man_ope_proc_mode_def	proc_mode;
    449          
    450          	man_ope_seq_mode_def	mode_seq;		// 動作シーケンス
    451          
    452          	man_ope_sleep_def		mode_sleep;		// SLEEP状態
    453          
    454          	man_ope_start_proc_def	start_proc;		// 動作開始前の処理
    455          	man_ope_end_proc_def	end_proc;		// 動作完了後の処理
    456          	man_ope_resp_cmd_t		resp_cmd;		// 要求に対する応答
    457          	int32_t					error_code;		// エラー
    458          	man_ope_noti_state_t	noti_state[MAN_OPE_DEV_MAX];		// デバイスの状態
    459          	int32_t					net_state;
    460          	int32_t					gps_state;
    461          
    462          	man_ope_seq_mode_def	mode_mode_seq_buff[MAN_OPE_SEQ_BUFF_MAX];	// モードシーケンスバッファ
    463          	int32_t					mode_mode_seq_w_p;
    464          
    465          } man_ope_mode_info_t;
    466          
    467          // 電源ON/OFF情報
    468          
    469          
    470          // 要求
    471          typedef struct _man_ope_req_info_t {
    472          	int32_t					req_cmd;	// 要求
    473          	int32_t					id;			// ユニークID
    474          	func_man_ope			callback;	// 結果を通知するcallback関数
    475          } man_ope_req_info_t;
    476          
    477          
    478          // メッセージ情報
    479          typedef struct _man_data_msg_t {
    480          	int32_t					charge_msg;			// 充電系メッセージ出力状態
    481          } man_ope_msg_t;
    482          
    483          // 設定データ管理ワーク
    484          typedef struct _man_ope_work_t {
    485          	man_ope_req_info_t		request;	// 要求
    486          
    487          	man_ope_seq_mode_def	seq;		// シーケンス
    488          	uint32_t				delay_timer_open;	// 時間監視
    489          	uint32_t				delay_timer;	// 時間監視
    490          	man_ope_seq_mode_def	req_seq;	// 要求シーケンス
    491          	man_ope_sleep_cb_t		sleep_cb;	// SLEEP用コールバック
    492          	man_ope_sw_t			sw;			// スイッチ
    493          
    494          	int32_t					led_cnt;
    495          	man_ope_led_t			led;		// LED
    496          	man_ope_led_t			set_led;	// LED
    497          
    498          	man_ope_ext_sts_t		ext_sts;	// 外部電源ON/OFF状態
    499          	man_ope_ext_info_t		ext_info;	// 外部電源ON/OFF制御情報
    500          //	man_ope_resp_cmd_t		ext_cb;		// 外部電源用
    501          
    502          	man_ope_mode_info_t		mode_info;	// 動作管理情報
    503          
    504          	man_ope_msg_t			msg_info;
    505          
    506          	man_data_get_other_t	setting;	// 設定情報
    507          	uint8_t					buff[100];
    508                  uint8_t                 alarm_flg;
    509          } man_ope_work_t;
    510          
    511          /************************************************************************/
    512          /* definition of variables                                              */
    513          /************************************************************************/
    514          

   \                                 In section .bss, align 4
    515          man_ope_work_t	man_ope_work;
   \                     man_ope_work:
   \   00000000                      DS8 524
    516          
    517          
    518          
    519          // 動作シーケンス開始処理テーブル
    520          typedef struct _man_ope_mode_seq_tbl_t {
    521          	man_ope_seq_mode_def	mode_seq;		// 動作開始シーケンス
    522          	man_ope_start_proc_def	start_proc;		// 動作開始前の処理
    523          	man_ope_end_proc_def	end_proc;		// 動作完了後の処理
    524          	man_ope_proc_mode_def	proc_mode;		// 動作状態
    525          	man_ope_mode_def		end_mode;		// 終了後の状態
    526          } man_ope_mode_seq_tbl_t;
    527          
    528          
    529          

   \                                 In section .rodata, align 4
    530          static const man_ope_mode_seq_tbl_t mode_seq_tbl[MAN_OPE_MODE_MAX][MAN_OPE_MODE_MAX] = {
   \                     mode_seq_tbl:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, 1, 0, 2, 2, 0, 1, 0, 2, 2, 0, 1
   \              0x00 0x00    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x02 0x00    
   \              0x01 0x00    
   \              0x02 0x02    
   \              0x00 0x01    
   \              0x00 0x02    
   \              0x02 0x00    
   \              0x01         
   \   00000017   0x00 0x02          DC8 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 0, 1, 0, 2, 2, 0, 1, 0, 2, 2, 0, 1, 0
   \              0x00 0x01    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x00 0x01    
   \              0x00 0x02    
   \              0x02 0x00    
   \              0x01 0x00    
   \              0x02 0x02    
   \              0x00 0x01    
   \              0x00         
   \   00000045   0x02 0x00          DC8 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 0, 1, 0, 2, 2, 0, 1, 0, 2, 0, 0
   \              0x00 0x00    
   \              0x00 0x01    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x00 0x01    
   \              0x00 0x02    
   \              0x02 0x00    
   \              0x01 0x00    
   \              0x02 0x00    
   \              0x00         
   \   0000005C   0x00 0x00          DC8 0, 0, 2, 13, 1, 0, 0, 1, 0, 0, 0, 0, 2, 32, 5, 0, 0, 3, 32, 5, 0, 0
   \              0x02 0x0D    
   \              0x01 0x00    
   \              0x00 0x01    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x20    
   \              0x05 0x00    
   \              0x00 0x03    
   \              0x20 0x05    
   \              0x00 0x00    
   \   00000072   0x03 0x0D          DC8 3, 13, 0, 5, 0, 5, 13, 0, 6, 1, 6, 42, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0
   \              0x00 0x05    
   \              0x00 0x05    
   \              0x0D 0x00    
   \              0x06 0x01    
   \              0x06 0x2A    
   \              0x00 0x00    
   \              0x00 0x07    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x07 0x00    
   \   00000088   0x00 0x00          DC8 0, 0, 0, 3, 32, 6, 0, 0, 2, 32, 6, 0, 0, 2, 0, 0, 0, 0, 3, 20, 8, 0
   \              0x00 0x03    
   \              0x20 0x06    
   \              0x00 0x00    
   \              0x02 0x20    
   \              0x06 0x00    
   \              0x00 0x02    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x03 0x14    
   \              0x08 0x00    
   \   0000009E   0x00 0x04          DC8 0, 4, 32, 0, 0, 0, 2, 32, 6, 0, 1, 2, 32, 6, 0, 0, 2, 32, 6, 0, 0
   \              0x20 0x00    
   \              0x00 0x00    
   \              0x02 0x20    
   \              0x06 0x00    
   \              0x01 0x02    
   \              0x20 0x06    
   \              0x00 0x00    
   \              0x02 0x20    
   \              0x06 0x00    
   \              0x00         
   \   000000B3   0x02 0x00          DC8 2, 0, 0, 0, 0, 2, 28, 0, 7, 0, 3, 28, 0, 7, 0, 3, 28, 0, 7, 0, 3, 0
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x1C 0x00    
   \              0x07 0x00    
   \              0x03 0x1C    
   \              0x00 0x07    
   \              0x00 0x03    
   \              0x1C 0x00    
   \              0x07 0x00    
   \              0x03 0x00    
   \   000000C9   0x00 0x00          DC8 0, 0, 0, 4, 61, 0, 5, 0, 5, 64, 0, 0, 1, 6, 0, 0, 0, 0, 3, 0, 0, 0
   \              0x00 0x04    
   \              0x3D 0x00    
   \              0x05 0x00    
   \              0x05 0x40    
   \              0x00 0x00    
   \              0x01 0x06    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x03 0x00    
   \              0x00 0x00    
   \   000000DF   0x00 0x03          DC8 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x00         
   \   000000F6   0x00 0x00          DC8 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0
   \              0x00 0x02    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000010D   0x02 0x00          DC8 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 2, 2, 0, 0, 1, 2, 67
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x02    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x02 0x00    
   \              0x00 0x01    
   \              0x02 0x43    
   \   00000123   0x00 0x00          DC8 0, 0, 1, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0
   \              0x01 0x04    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000013A   0x02 0x00          DC8 2, 0, 0, 0, 0, 2, 56, 10, 9, 0, 2, 56, 10, 9, 0, 2, 56, 11, 10, 0
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x38 0x0A    
   \              0x09 0x00    
   \              0x02 0x38    
   \              0x0A 0x09    
   \              0x00 0x02    
   \              0x38 0x0B    
   \              0x0A 0x00    
   \   0000014E   0x03 0x38          DC8 3, 56, 11, 10, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 7
   \              0x0B 0x0A    
   \              0x00 0x03    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x07         
   \   00000163   0x38 0x00          DC8 56, 0, 0, 0, 8, 0, 0, 0, 0, 2, 56, 10, 9, 0, 2, 56, 10, 9, 0, 2, 56
   \              0x00 0x00    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x38 0x0A    
   \              0x09 0x00    
   \              0x02 0x38    
   \              0x0A 0x09    
   \              0x00 0x02    
   \              0x38         
   \   00000178   0x0B 0x0A          DC8 11, 10, 0, 3, 56, 11, 10, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 56, 0
   \              0x00 0x03    
   \              0x38 0x0B    
   \              0x0A 0x00    
   \              0x03 0x00    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x38    
   \              0x00         
   \   0000018D   0x00 0x00          DC8 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0
   \              0x07 0x00    
   \              0x00 0x00    
   \              0x00 0x07    
   \              0x00 0x00    
   \              0x00         
    531          	//	MAN_OPE_MODE_IDLE 
    532          	{
    533          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_IDLE -> MAN_OPE_MODE_IDLE
    534          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_IDLE -> MAN_OPE_MODE_OFF
    535          		{MAN_OPE_SEQ_NORMAL_ON_REQ,		MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_EXT_ON1,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_IDLE -> MAN_OPE_MODE_EXT_POWER
    536          		{MAN_OPE_SEQ_NORMAL_ON_REQ,		MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_EXT_ON1,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_IDLE -> MAN_OPE_MODE_BATTERY
    537          		{MAN_OPE_SEQ_NORMAL_ON_REQ,		MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_EXT_ON1,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_IDLE -> MAN_OPE_MODE_DIRECT
    538          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_IDLE -> MAN_OPE_MODE_RESET
    539          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_IDLE -> MAN_OPE_MODE_OTA_IN
    540          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_IDLE -> MAN_OPE_MODE_EXT_OFF1
    541          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_IDLE -> MAN_OPE_MODE_EXT_OFF2
    542          	},
    543          
    544          	// MAN_OPE_MODE_OFF
    545          	{
    546          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_OFF},				// MAN_OPE_MODE_OFF -> MAN_OPE_MODE_IDLE
    547          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_OFF},				// MAN_OPE_MODE_OFF -> MAN_OPE_MODE_OFF
    548          		{MAN_OPE_SEQ_NORMAL_ON_REQ,		MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_EXT_ON1,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_OFF -> MAN_OPE_MODE_EXT_POWER
    549          		{MAN_OPE_SEQ_NORMAL_ON_REQ,		MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_EXT_ON1,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_OFF -> MAN_OPE_MODE_BATTERY
    550          		{MAN_OPE_SEQ_NORMAL_ON_REQ,		MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_EXT_ON1,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_OFF -> MAN_OPE_MODE_DIRECT
    551          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_OFF},				// MAN_OPE_MODE_OFF -> MAN_OPE_MODE_RESET
    552          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_OFF},				// MAN_OPE_MODE_OFF -> MAN_OPE_MODE_OTA_IN
    553          		{MAN_OPE_SEQ_NORMAL_ON_REQ,		MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_EXT_ON1,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_OFF -> MAN_OPE_MODE_EXT_OFF1
    554          		{MAN_OPE_SEQ_NORMAL_ON_REQ,		MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_EXT_ON1,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_OFF -> MAN_OPE_MODE_EXT_OFF2
    555          	},
    556          
    557          	// MAN_OPE_MODE_EXT_POWER
    558          	{
    559          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_EXT_POWER -> MAN_OPE_MODE_IDLE
    560          		{MAN_OPE_SEQ_NORMAL_OFF_REQ,	MAN_OPE_START_PROC_EXT_ON1,		MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_OFF},				// MAN_OPE_MODE_EXT_POWER -> MAN_OPE_MODE_OFF
    561          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_EXT_POWER -> MAN_OPE_MODE_EXT_POWER
    562          		{MAN_OPE_SEQ_EXT_BATT_REQ,		MAN_OPE_START_PROC_EXT_BATT,	MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_BATTERY},			// MAN_OPE_MODE_EXT_POWER -> MAN_OPE_MODE_BATTERY
    563          		{MAN_OPE_SEQ_EXT_BATT_REQ,		MAN_OPE_START_PROC_EXT_BATT,	MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_BATTERY},			// MAN_OPE_MODE_EXT_POWER -> MAN_OPE_MODE_DIRECT
    564          		{MAN_OPE_SEQ_NORMAL_OFF_REQ,	MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_RESET,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_RESET},			// MAN_OPE_MODE_EXT_POWER -> MAN_OPE_MODE_RESET
    565          		{MAN_OPE_SEQ_NORMAL_OFF_REQ,	MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_CALLBACK,		MAN_OPE_PROC_MODE_OTA,		MAN_OPE_MODE_OTA_IN},			// MAN_OPE_MODE_EXT_POWER -> MAN_OPE_MODE_OTA_IN
    566          		{MAN_OPE_SEQ_EXTOFF_START_REQ,	MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_OFF1},			// MAN_OPE_MODE_EXT_POWER -> MAN_OPE_MODE_EXT_OFF1
    567          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_OFF1},			// MAN_OPE_MODE_EXT_POWER -> MAN_OPE_MODE_EXT_OFF2
    568          	},
    569          
    570          	// MAN_OPE_MODE_BATTERY
    571          	{
    572          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_BATTERY},			// MAN_OPE_MODE_BATTERY -> MAN_OPE_MODE_IDLE
    573          		{MAN_OPE_SEQ_EXT_BATT_REQ,		MAN_OPE_START_PROC_BATT_EXT,	MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_BATTERY -> MAN_OPE_MODE_OFF
    574          		{MAN_OPE_SEQ_EXT_BATT_REQ,		MAN_OPE_START_PROC_BATT_EXT,	MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_BATTERY -> MAN_OPE_MODE_EXT_POWER
    575          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_BATTERY},			// MAN_OPE_MODE_BATTERY -> MAN_OPE_MODE_BATTERY
    576          		{MAN_OPE_SEQ_NORMAL_USBON_REQ,	MAN_OPE_START_PROC_BATT_USB,	MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_DIRECT},			// MAN_OPE_MODE_BATTERY -> MAN_OPE_MODE_DIRECT
    577          		{MAN_OPE_SEQ_EXT_BATT_REQ,		MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_BATTERY -> MAN_OPE_MODE_RESET
    578          		{MAN_OPE_SEQ_EXT_BATT_REQ,		MAN_OPE_START_PROC_BATT_EXT,	MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_OTA,		MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_BATTERY -> MAN_OPE_MODE_OTA_IN
    579          		{MAN_OPE_SEQ_EXT_BATT_REQ,		MAN_OPE_START_PROC_BATT_EXT,	MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_BATTERY -> MAN_OPE_MODE_EXT_OFF1
    580          		{MAN_OPE_SEQ_EXT_BATT_REQ,		MAN_OPE_START_PROC_BATT_EXT,	MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_BATTERY -> MAN_OPE_MODE_EXT_OFF2
    581          	},
    582          
    583          	// MAN_OPE_MODE_DIRECT
    584          	{
    585          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_DIRECT -> MAN_OPE_MODE_IDLE
    586          		{MAN_OPE_SEQ_NORMAL_USBOFF_REQ,	MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_DIR_BAT,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_BATTERY},			// MAN_OPE_MODE_DIRECT -> MAN_OPE_MODE_OFF
    587          		{MAN_OPE_SEQ_NORMAL_USBOFF_REQ,	MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_DIR_BAT,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_BATTERY},			// MAN_OPE_MODE_DIRECT -> MAN_OPE_MODE_EXT_POWER
    588          		{MAN_OPE_SEQ_NORMAL_USBOFF_REQ,	MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_DIR_BAT,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_BATTERY},			// MAN_OPE_MODE_DIRECT -> MAN_OPE_MODE_BATTERY
    589          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_DIRECT},			// MAN_OPE_MODE_DIRECT -> MAN_OPE_MODE_DIRECT
    590          		{MAN_OPE_SEQ_DIRECT_OFF_REQ,	MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_RESET,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_RESET},			// MAN_OPE_MODE_DIRECT -> MAN_OPE_MODE_RESET
    591          		{MAN_OPE_SEQ_USBOTA_START_REQ,	MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_OTA,		MAN_OPE_MODE_OTA_IN},			// MAN_OPE_MODE_DIRECT -> MAN_OPE_MODE_OTA_IN
    592          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_BATTERY},			// MAN_OPE_MODE_DIRECT -> MAN_OPE_MODE_EXT_OFF1
    593          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_BATTERY},			// MAN_OPE_MODE_DIRECT -> MAN_OPE_MODE_EXT_OFF2
    594          	},
    595          
    596          	// MAN_OPE_MODE_RESET
    597          	{
    598          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_RESET -> MAN_OPE_MODE_IDLE
    599          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_RESET -> MAN_OPE_MODE_OFF
    600          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_RESET -> MAN_OPE_MODE_EXT_POWER
    601          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_RESET -> MAN_OPE_MODE_BATTERY
    602          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_RESET -> MAN_OPE_MODE_DIRECT
    603          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_RESET -> MAN_OPE_MODE_RESET
    604          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_RESET -> MAN_OPE_MODE_OTA_IN
    605          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_RESET -> MAN_OPE_MODE_EXT_OFF1
    606          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_RESET -> MAN_OPE_MODE_EXT_OFF2
    607          	},
    608          
    609          	// MAN_OPE_MODE_OTA_IN
    610          	{
    611          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_OTA_IN -> MAN_OPE_MODE_IDLE
    612          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_OTA_IN -> MAN_OPE_MODE_OFF
    613          		{MAN_OPE_SEQ_NORMAL_ON_REQ,		MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_OTA,		MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_OTA_IN -> MAN_OPE_MODE_EXT_POWER
    614          		{MAN_OPE_SEQ_NORMAL_ON_REQ,		MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_OTA,		MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_OTA_IN -> MAN_OPE_MODE_BATTERY
    615          		{MAN_OPE_SEQ_USBOTA_END_REQ,	MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_OTA,		MAN_OPE_MODE_DIRECT},			// MAN_OPE_MODE_OTA_IN -> MAN_OPE_MODE_DIRECT
    616          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_OTA_IN -> MAN_OPE_MODE_RESET
    617          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_OTA_IN -> MAN_OPE_MODE_OTA_IN
    618          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_OTA_IN -> MAN_OPE_MODE_EXT_OFF1
    619          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_OTA_IN -> MAN_OPE_MODE_EXT_OFF2
    620          	},
    621          
    622          
    623          	// MAN_OPE_MODE_EXT_OFF1
    624          	{
    625          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_EXT_OFF1 -> MAN_OPE_MODE_IDLE
    626          		{MAN_OPE_SEQ_EXTOFF_END_REQ,	MAN_OPE_START_PROC_EXTOFF_ON,	MAN_OPE_END_PROC_EXTOFF_ON,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_EXT_OFF1 -> MAN_OPE_MODE_OFF
    627          		{MAN_OPE_SEQ_EXTOFF_END_REQ,	MAN_OPE_START_PROC_EXTOFF_ON,	MAN_OPE_END_PROC_EXTOFF_ON,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_EXT_OFF1 -> MAN_OPE_MODE_EXT_POWER
    628          		{MAN_OPE_SEQ_EXTOFF_END_REQ,	MAN_OPE_START_PROC_EXTOFF_BAT,	MAN_OPE_END_PROC_EXTOFF_BAT,	MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_BATTERY},			// MAN_OPE_MODE_EXT_OFF1 -> MAN_OPE_MODE_BATTERY
    629          		{MAN_OPE_SEQ_EXTOFF_END_REQ,	MAN_OPE_START_PROC_EXTOFF_BAT,	MAN_OPE_END_PROC_EXTOFF_BAT,	MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_BATTERY},			// MAN_OPE_MODE_EXT_OFF1 -> MAN_OPE_MODE_DIRECT
    630          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_EXT_OFF1 -> MAN_OPE_MODE_RESET
    631          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_EXT_OFF1 -> MAN_OPE_MODE_OTA_IN
    632          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_OFF1},			// MAN_OPE_MODE_EXT_OFF1 -> MAN_OPE_MODE_EXT_OFF1
    633          		{MAN_OPE_SEQ_EXTOFF_END_REQ,	MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_OFF2},			// MAN_OPE_MODE_EXT_OFF1 -> MAN_OPE_MODE_EXT_OFF2
    634          	},
    635          
    636          
    637          	// MAN_OPE_MODE_EXT_OFF2
    638          	{
    639          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_EXT_OFF2 -> MAN_OPE_MODE_IDLE
    640          		{MAN_OPE_SEQ_EXTOFF_END_REQ,	MAN_OPE_START_PROC_EXTOFF_ON,	MAN_OPE_END_PROC_EXTOFF_ON,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_EXT_OFF2 -> MAN_OPE_MODE_OFF
    641          		{MAN_OPE_SEQ_EXTOFF_END_REQ,	MAN_OPE_START_PROC_EXTOFF_ON,	MAN_OPE_END_PROC_EXTOFF_ON,		MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_EXT_OFF2 -> MAN_OPE_MODE_EXT_POWER
    642          		{MAN_OPE_SEQ_EXTOFF_END_REQ,	MAN_OPE_START_PROC_EXTOFF_BAT,	MAN_OPE_END_PROC_EXTOFF_BAT,	MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_BATTERY},			// MAN_OPE_MODE_EXT_OFF2 -> MAN_OPE_MODE_BATTERY
    643          		{MAN_OPE_SEQ_EXTOFF_END_REQ,	MAN_OPE_START_PROC_EXTOFF_BAT,	MAN_OPE_END_PROC_EXTOFF_BAT,	MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_BATTERY},			// MAN_OPE_MODE_EXT_OFF2 -> MAN_OPE_MODE_DIRECT
    644          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_EXT_OFF2 -> MAN_OPE_MODE_RESET
    645          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_POWER},		// MAN_OPE_MODE_EXT_OFF2 -> MAN_OPE_MODE_OTA_IN
    646          		{MAN_OPE_SEQ_EXTOFF_END_REQ,	MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_OFF1},			// MAN_OPE_MODE_EXT_OFF2 -> MAN_OPE_MODE_EXT_OFF1
    647          		{MAN_OPE_SEQ_IDLE,				MAN_OPE_START_PROC_NON,			MAN_OPE_END_PROC_NON,			MAN_OPE_PROC_MODE_NORMAL,	MAN_OPE_MODE_EXT_OFF1},			// MAN_OPE_MODE_EXT_OFF2 -> MAN_OPE_MODE_EXT_OFF2
    648          	},
    649          
    650          };
    651          
    652          
    653          static void man_ope_out_led_off(void);
    654          
    655          /********************************************************************/
    656          /*	callback関数                                                    */
    657          /********************************************************************/
    658          
    659          /********************************************************************/
    660          /*!
    661           * \name	man_ope_noti_callback
    662           * \brief	デバイスの状態通知に対するcallback処理
    663           * \param	id     : ユニークID
    664           *          state  : 状態
    665           * \return  なし
    666           * \note	
    667           */
    668          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    669          static void man_ope_noti_callback(int32_t id, int32_t state)
    670          {
   \                     man_ope_noti_callback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    671          	if (id < MAN_OPE_DEV_MAX) {
   \   00000002   0x2802             CMP      R0,#+2
   \   00000004   0xDA12             BGE      ??man_ope_noti_callback_0
    672          		man_ope_work.mode_info.noti_state[id].flag = 1;
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x....             LDR      R3,??DataTable8
   \   0000000A   0x240C             MOVS     R4,#+12
   \   0000000C   0x4344             MULS     R4,R0,R4
   \   0000000E   0x191B             ADDS     R3,R3,R4
   \   00000010   0x24A0             MOVS     R4,#+160
   \   00000012   0x511A             STR      R2,[R3, R4]
    673          		man_ope_work.mode_info.noti_state[id].id = id;
   \   00000014   0x....             LDR      R2,??DataTable8
   \   00000016   0x230C             MOVS     R3,#+12
   \   00000018   0x4343             MULS     R3,R0,R3
   \   0000001A   0x18D2             ADDS     R2,R2,R3
   \   0000001C   0x23A4             MOVS     R3,#+164
   \   0000001E   0x50D0             STR      R0,[R2, R3]
    674          		man_ope_work.mode_info.noti_state[id].state = state;
   \   00000020   0x....             LDR      R2,??DataTable8
   \   00000022   0x230C             MOVS     R3,#+12
   \   00000024   0x4358             MULS     R0,R3,R0
   \   00000026   0x1810             ADDS     R0,R2,R0
   \   00000028   0x22A8             MOVS     R2,#+168
   \   0000002A   0x5081             STR      R1,[R0, R2]
    675          	}
    676          }
   \                     ??man_ope_noti_callback_0: (+1)
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    677          
    678          
    679          /********************************************************************/
    680          /*!
    681           * \name	man_ope_mode_req_callback
    682           * \brief	動作要求に対するcallback処理
    683           * \param	id     : ユニークID
    684           *          status : 受信結果
    685           * \return  なし
    686           * \note	
    687           */
    688          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    689          static void man_ope_mode_req_callback(int32_t id, int32_t status)
    690          {
    691          	man_ope_work.mode_info.resp_cmd.flag = 1;
   \                     man_ope_mode_req_callback: (+1)
   \   00000000   0x2201             MOVS     R2,#+1
   \   00000002   0x....             LDR      R3,??DataTable8_1
   \   00000004   0x601A             STR      R2,[R3, #+0]
    692          	man_ope_work.mode_info.resp_cmd.id = id & TIMER_MAN_ID_MASK;
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x....             LDR      R2,??DataTable8_2
   \   0000000A   0x6010             STR      R0,[R2, #+0]
    693          	man_ope_work.mode_info.resp_cmd.status = status;
   \   0000000C   0x....             LDR      R0,??DataTable8_3
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    694          }
   \   00000010   0x4770             BX       LR               ;; return
    695          
    696          /********************************************************************/
    697          /*!
    698           * \name	man_ope_sleep_callback
    699           * \brief	動作要求に対するcallback処理
    700           * \param	なし
    701           * \return  なし
    702           * \note	起動時に、呼ばれること
    703           */
    704          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    705          static void man_ope_sleep_callback(int32_t id, int32_t status)
    706          {
    707          	man_ope_work.sleep_cb.flag = 1;
   \                     man_ope_sleep_callback: (+1)
   \   00000000   0x2201             MOVS     R2,#+1
   \   00000002   0x....             LDR      R3,??DataTable8
   \   00000004   0x61DA             STR      R2,[R3, #+28]
    708          	man_ope_work.sleep_cb.id = id;
   \   00000006   0x....             LDR      R2,??DataTable8
   \   00000008   0x6210             STR      R0,[R2, #+32]
    709          	man_ope_work.sleep_cb.status = status;
   \   0000000A   0x....             LDR      R0,??DataTable8
   \   0000000C   0x6241             STR      R1,[R0, #+36]
    710          }
   \   0000000E   0x4770             BX       LR               ;; return
    711          
    712          /********************************************************************/
    713          /*!
    714           * \name	man_ope_alarm_callback
    715           * \brief	動作要求に対するcallback処理
    716           * \param	なし
    717           * \return  なし
    718           * \note	起動時に、呼ばれること
    719           */
    720          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    721          static void man_ope_alarm_callback(int32_t id, int32_t status)
    722          {
    723                  man_ope_work.alarm_flg = 0;
   \                     man_ope_alarm_callback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR      R1,??DataTable8_4
   \   00000004   0x7008             STRB     R0,[R1, #+0]
    724          }
   \   00000006   0x4770             BX       LR               ;; return
    725          
    726          /********************************************************************/
    727          /*	static関数                                                      */
    728          /********************************************************************/
    729          
    730          
    731          /********************************************************************/
    732          /*!
    733           * \name	man_ope_set_switch_pos
    734           * \brief	スイッチの状態を更新する処理
    735           * \param	なし
    736           * \return  なし
    737           * \note	
    738           */
    739          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    740          static void man_ope_set_switch_pos( man_ope_switch_def switch_pos )
    741          {
   \                     man_ope_set_switch_pos: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0006             MOVS     R6,R0
    742          	man_data_get_sensor_t	*sensor_info = man_data_get_sensor();
   \   00000004   0x.... 0x....      BL       man_data_get_sensor
   \   00000008   0x0004             MOVS     R4,R0
    743          	man_ope_mode_info_t		*mode_info = &man_ope_work.mode_info;
   \   0000000A   0x....             LDR      R5,??DataTable8_5
    744          	
    745          	if (switch_pos != mode_info->switch_pos) {
   \   0000000C   0x0030             MOVS     R0,R6
   \   0000000E   0x7969             LDRB     R1,[R5, #+5]
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0x4288             CMP      R0,R1
   \   00000014   0xD05E             BEQ      ??man_ope_set_switch_pos_0
    746          
    747          		// SWITCH操作時はRPTのcycle counterを初期化する
    748          		switch (mode_info->switch_pos) {
   \   00000016   0x7968             LDRB     R0,[R5, #+5]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD007             BEQ      ??man_ope_set_switch_pos_1
   \   0000001C   0x1E40             SUBS     R0,R0,#+1
   \   0000001E   0xD008             BEQ      ??man_ope_set_switch_pos_2
   \   00000020   0x1E40             SUBS     R0,R0,#+1
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xD910             BLS      ??man_ope_set_switch_pos_3
   \   00000026   0x1EC0             SUBS     R0,R0,#+3
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0xD80D             BHI      ??man_ope_set_switch_pos_4
    749          		case MAN_OPE_SWITCH_OFF:
    750          		case MAN_OPE_SWITCH_BATTERY:
    751          		case MAN_OPE_SWITCH_DIRECT:
    752          			man_rpt_init_cycle_counter();
   \                     ??man_ope_set_switch_pos_1: (+1)
   \   0000002C   0x.... 0x....      BL       man_rpt_init_cycle_counter
    753          			break;
   \   00000030   0xE00A             B        ??man_ope_set_switch_pos_4
    754          		case MAN_OPE_SWITCH_EXT_ON:
    755          			switch (switch_pos) {
   \                     ??man_ope_set_switch_pos_2: (+1)
   \   00000032   0xB2F6             UXTB     R6,R6
   \   00000034   0x0030             MOVS     R0,R6
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD002             BEQ      ??man_ope_set_switch_pos_5
   \   0000003A   0x1F40             SUBS     R0,R0,#+5
   \   0000003C   0x2801             CMP      R0,#+1
   \   0000003E   0xD802             BHI      ??man_ope_set_switch_pos_6
    756          			case MAN_OPE_SWITCH_OFF:
    757          			case MAN_OPE_SWITCH_BATTERY:
    758          			case MAN_OPE_SWITCH_DIRECT:
    759          				man_rpt_init_cycle_counter();
   \                     ??man_ope_set_switch_pos_5: (+1)
   \   00000040   0x.... 0x....      BL       man_rpt_init_cycle_counter
    760          				break;
   \   00000044   0xE7FF             B        ??man_ope_set_switch_pos_7
    761          			default:
    762          				break;
    763          			}
    764          			break;
   \                     ??man_ope_set_switch_pos_6: (+1)
   \                     ??man_ope_set_switch_pos_7: (+1)
   \   00000046   0xE7FF             B        ??man_ope_set_switch_pos_4
    765          		case MAN_OPE_SWITCH_EXT_OFF_LAST:
    766          		case MAN_OPE_SWITCH_EXT_OFF_TIME:
    767          		case MAN_OPE_SWITCH_EXT_OFF_SLEEP:
    768          			break;
    769          		}
    770          
    771          		switch (switch_pos) {
   \                     ??man_ope_set_switch_pos_3: (+1)
   \                     ??man_ope_set_switch_pos_4: (+1)
   \   00000048   0xB2F6             UXTB     R6,R6
   \   0000004A   0x2E00             CMP      R6,#+0
   \   0000004C   0xD009             BEQ      ??man_ope_set_switch_pos_8
   \   0000004E   0x2E02             CMP      R6,#+2
   \   00000050   0xD007             BEQ      ??man_ope_set_switch_pos_8
   \   00000052   0xD30A             BCC      ??man_ope_set_switch_pos_9
   \   00000054   0x2E04             CMP      R6,#+4
   \   00000056   0xD004             BEQ      ??man_ope_set_switch_pos_8
   \   00000058   0xD303             BCC      ??man_ope_set_switch_pos_8
   \   0000005A   0x2E06             CMP      R6,#+6
   \   0000005C   0xD001             BEQ      ??man_ope_set_switch_pos_8
   \   0000005E   0xD321             BCC      ??man_ope_set_switch_pos_10
   \   00000060   0xE037             B        ??man_ope_set_switch_pos_11
    772          		case MAN_OPE_SWITCH_OFF:
    773          		case MAN_OPE_SWITCH_EXT_OFF_LAST:
    774          		case MAN_OPE_SWITCH_EXT_OFF_TIME:
    775          		case MAN_OPE_SWITCH_DIRECT:
    776          		case MAN_OPE_SWITCH_EXT_OFF_SLEEP:
    777          			man_ope_work.msg_info.charge_msg = MAN_MSG_TYPE_NON;
   \                     ??man_ope_set_switch_pos_8: (+1)
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x....             LDR      R1,??DataTable8_6
   \   00000066   0x6008             STR      R0,[R1, #+0]
    778          			break;
   \   00000068   0xE033             B        ??man_ope_set_switch_pos_12
    779          		case MAN_OPE_SWITCH_EXT_ON:
    780          			// 最終位置取得 or 定刻測位時はSW操作でないため実施しない
    781          			if ( (mode_info->switch_pos == MAN_OPE_SWITCH_OFF) || (mode_info->switch_pos == MAN_OPE_SWITCH_BATTERY) ) {
   \                     ??man_ope_set_switch_pos_9: (+1)
   \   0000006A   0x7968             LDRB     R0,[R5, #+5]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD002             BEQ      ??man_ope_set_switch_pos_13
   \   00000070   0x7968             LDRB     R0,[R5, #+5]
   \   00000072   0x2805             CMP      R0,#+5
   \   00000074   0xD115             BNE      ??man_ope_set_switch_pos_14
    782          				// SWが切り替わった時、一旦充電終了とみなす。
    783          				if (sensor_info->charge_state == MAN_CHARGE_STAT_DONE) {
   \                     ??man_ope_set_switch_pos_13: (+1)
   \   00000076   0x6EE0             LDR      R0,[R4, #+108]
   \   00000078   0x2802             CMP      R0,#+2
   \   0000007A   0xD109             BNE      ??man_ope_set_switch_pos_15
    784          					man_msg_set_type(MAN_MSG_TYPE_CHARG_S);
   \   0000007C   0x202C             MOVS     R0,#+44
   \   0000007E   0x.... 0x....      BL       man_msg_set_type
    785          					man_msg_set_type(MAN_MSG_TYPE_CHARG_F);
   \   00000082   0x202D             MOVS     R0,#+45
   \   00000084   0x.... 0x....      BL       man_msg_set_type
    786          					man_ope_work.msg_info.charge_msg = MAN_MSG_TYPE_CHARG_F;
   \   00000088   0x202D             MOVS     R0,#+45
   \   0000008A   0x....             LDR      R1,??DataTable8_6
   \   0000008C   0x6008             STR      R0,[R1, #+0]
   \   0000008E   0xE008             B        ??man_ope_set_switch_pos_14
    787          				}
    788          				else if (sensor_info->charge_state == MAN_CHARGE_STAT_CHARGE) {
   \                     ??man_ope_set_switch_pos_15: (+1)
   \   00000090   0x6EE0             LDR      R0,[R4, #+108]
   \   00000092   0x2801             CMP      R0,#+1
   \   00000094   0xD105             BNE      ??man_ope_set_switch_pos_14
    789          					man_msg_set_type(MAN_MSG_TYPE_CHARG_S);
   \   00000096   0x202C             MOVS     R0,#+44
   \   00000098   0x.... 0x....      BL       man_msg_set_type
    790          					man_ope_work.msg_info.charge_msg = MAN_MSG_TYPE_CHARG_S;
   \   0000009C   0x202C             MOVS     R0,#+44
   \   0000009E   0x....             LDR      R1,??DataTable8_6
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    791          				}
    792          			}
    793          			break;
   \                     ??man_ope_set_switch_pos_14: (+1)
   \   000000A2   0xE016             B        ??man_ope_set_switch_pos_12
    794          		case MAN_OPE_SWITCH_BATTERY:
    795          			// SWが切り替わった時、一旦充電終了とみなす。
    796          			if (sensor_info->charge_state == MAN_CHARGE_STAT_DONE) {
   \                     ??man_ope_set_switch_pos_10: (+1)
   \   000000A4   0x6EE0             LDR      R0,[R4, #+108]
   \   000000A6   0x2802             CMP      R0,#+2
   \   000000A8   0xD109             BNE      ??man_ope_set_switch_pos_16
    797          				man_msg_set_type(MAN_MSG_TYPE_CHARG_S);
   \   000000AA   0x202C             MOVS     R0,#+44
   \   000000AC   0x.... 0x....      BL       man_msg_set_type
    798          				man_msg_set_type(MAN_MSG_TYPE_CHARG_F);
   \   000000B0   0x202D             MOVS     R0,#+45
   \   000000B2   0x.... 0x....      BL       man_msg_set_type
    799          				man_ope_work.msg_info.charge_msg = MAN_MSG_TYPE_CHARG_F;
   \   000000B6   0x202D             MOVS     R0,#+45
   \   000000B8   0x....             LDR      R1,??DataTable8_6
   \   000000BA   0x6008             STR      R0,[R1, #+0]
   \   000000BC   0xE008             B        ??man_ope_set_switch_pos_17
    800          			}
    801          			else if (sensor_info->charge_state == MAN_CHARGE_STAT_CHARGE) {
   \                     ??man_ope_set_switch_pos_16: (+1)
   \   000000BE   0x6EE0             LDR      R0,[R4, #+108]
   \   000000C0   0x2801             CMP      R0,#+1
   \   000000C2   0xD105             BNE      ??man_ope_set_switch_pos_17
    802          				man_msg_set_type(MAN_MSG_TYPE_CHARG_S);
   \   000000C4   0x202C             MOVS     R0,#+44
   \   000000C6   0x.... 0x....      BL       man_msg_set_type
    803          				man_ope_work.msg_info.charge_msg = MAN_MSG_TYPE_CHARG_S;
   \   000000CA   0x202C             MOVS     R0,#+44
   \   000000CC   0x....             LDR      R1,??DataTable8_6
   \   000000CE   0x6008             STR      R0,[R1, #+0]
    804          			}
    805          			break;
   \                     ??man_ope_set_switch_pos_17: (+1)
   \   000000D0   0xE7FF             B        ??man_ope_set_switch_pos_12
    806          		default:
    807          			break;
    808          		}
    809          
    810          		mode_info->switch_pos = switch_pos;
   \                     ??man_ope_set_switch_pos_11: (+1)
   \                     ??man_ope_set_switch_pos_12: (+1)
   \   000000D2   0x716E             STRB     R6,[R5, #+5]
    811          
    812          #ifdef GNSS_DEBUG_MAN_OPE 
    813          			int32_t		length;
    814          			sprintf((char *)&man_ope_work.buff[0], "SWITCH POS(%d)\n", mode_info->switch_pos);
    815          			length = strlen((char const *)&man_ope_work.buff[0]);
    816          			man_usb_data_send(&man_ope_work.buff[0], length);
    817          #endif
    818          	}
    819          }
   \                     ??man_ope_set_switch_pos_0: (+1)
   \   000000D4   0xBD70             POP      {R4-R6,PC}       ;; return
    820          
    821          
    822          /********************************************************************/
    823          /*!
    824           * \name	man_ope_set_mode_seq
    825           * \brief	モードシーケンスを設定する
    826           * \param	mode_seq : 設定するシーケンス
    827           * \return  なし
    828           * \note	
    829           */
    830          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    831          static void man_ope_set_mode_seq( man_ope_seq_mode_def mode_seq )
    832          {
   \                     man_ope_set_mode_seq: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    833          
    834          	if (man_ope_work.mode_info.mode_seq != mode_seq) {
   \   00000002   0x....             LDR      R1,??DataTable9
   \   00000004   0x7809             LDRB     R1,[R1, #+0]
   \   00000006   0x0002             MOVS     R2,R0
   \   00000008   0xB2D2             UXTB     R2,R2
   \   0000000A   0x4291             CMP      R1,R2
   \   0000000C   0xD019             BEQ      ??man_ope_set_mode_seq_0
    835          		man_ope_work.mode_info.mode_seq = mode_seq;
   \   0000000E   0x....             LDR      R1,??DataTable9
   \   00000010   0x7008             STRB     R0,[R1, #+0]
    836          
    837          		// ログに保存する
    838          		man_ope_work.mode_info.mode_mode_seq_buff[man_ope_work.mode_info.mode_mode_seq_w_p] = mode_seq;
   \   00000012   0x....             LDR      R1,??DataTable8
   \   00000014   0x....             LDR      R2,??DataTable9_1
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0x1889             ADDS     R1,R1,R2
   \   0000001A   0x22C0             MOVS     R2,#+192
   \   0000001C   0x5488             STRB     R0,[R1, R2]
    839          		man_ope_work.mode_info.mode_mode_seq_w_p++;
   \   0000001E   0x....             LDR      R1,??DataTable9_1
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x1C49             ADDS     R1,R1,#+1
   \   00000024   0x....             LDR      R2,??DataTable9_1
   \   00000026   0x6011             STR      R1,[R2, #+0]
    840          		if (man_ope_work.mode_info.mode_mode_seq_w_p >= MAN_OPE_SEQ_BUFF_MAX) {
   \   00000028   0x....             LDR      R1,??DataTable9_1
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x2964             CMP      R1,#+100
   \   0000002E   0xDB02             BLT      ??man_ope_set_mode_seq_1
    841          			man_ope_work.mode_info.mode_mode_seq_w_p=0;
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x....             LDR      R2,??DataTable9_1
   \   00000034   0x6011             STR      R1,[R2, #+0]
    842          		}
    843          
    844          		// デバックログに登録 
    845          		man_dbglog_setting(MAN_ERROR_DBG_MAN_OPE, MAN_ERROR_DBG_TYPE_SEQ, mode_seq);
   \                     ??man_ope_set_mode_seq_1: (+1)
   \   00000036   0xB2C0             UXTB     R0,R0
   \   00000038   0x0002             MOVS     R2,R0
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x.... 0x....      BL       man_dbglog_setting
    846          #ifdef GNSS_DEBUG_MAN_OPE 
    847          			int32_t		length;
    848          			sprintf((char *)&man_ope_work.buff[0], "OPE SEQ(%d)\n", mode_seq);
    849          			length = strlen((char const *)&man_ope_work.buff[0]);
    850          			man_usb_data_send(&man_ope_work.buff[0], length);
    851          #endif
    852          
    853          	}
    854          }
   \                     ??man_ope_set_mode_seq_0: (+1)
   \   00000042   0xBD01             POP      {R0,PC}          ;; return
    855          
    856          
    857          /********************************************************************/
    858          /*!
    859           * \name	man_ope_return_callback
    860           * \brief	callback応答を返す処理
    861           * \param	status : 通知するステータス
    862           * \return   0: 成功
    863           *          -1:失敗
    864           * \note	
    865           */
    866          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    867          static void man_ope_return_callback( int32_t status )
    868          {
   \                     man_ope_return_callback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    869          
    870          	// callback関数で終了通知
    871          	if (man_ope_work.request.callback != NULL) {
   \   00000002   0x....             LDR      R1,??DataTable9_2
   \   00000004   0x6889             LDR      R1,[R1, #+8]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD008             BEQ      ??man_ope_return_callback_0
    872          		man_ope_work.request.callback(man_ope_work.request.id, status);
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0x....             LDR      R0,??DataTable9_2
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x....             LDR      R2,??DataTable9_2
   \   00000012   0x6892             LDR      R2,[R2, #+8]
   \   00000014   0x4790             BLX      R2
    873          		man_ope_work.request.callback = NULL;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR      R1,??DataTable9_2
   \   0000001A   0x6088             STR      R0,[R1, #+8]
    874          	}
    875          	man_ope_set_mode_seq(MAN_OPE_SEQ_IDLE);
   \                     ??man_ope_return_callback_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       man_ope_set_mode_seq
    876          	man_ope_work.request.req_cmd = MAN_OPE_REQ_CMD_NON;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR      R1,??DataTable9_2
   \   00000026   0x6008             STR      R0,[R1, #+0]
    877          }
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
    878          
    879          /********************************************************************/
    880          /*!
    881           * \name	man_ope_sleep_conv_alarm
    882           * \brief	定刻測位時間帯設定(alarmtime)情報をアラーム時間に変換します
    883           * \param	hour : 定刻測位時間(時)
    884           *          min  : 定刻測位時間(分)
    885           * \return  1: 有効  0: 無効
    886           * \note	
    887           */
    888          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    889          static int32_t man_ope_sleep_conv_alarm( uint8_t *hour, uint8_t *min )
    890          {
   \                     man_ope_sleep_conv_alarm: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
   \   00000004   0x000C             MOVS     R4,R1
    891          	int32_t	imei;
    892          	int32_t	ret = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    893          	man_data_num_alarmtime_t *alarmtime = man_data_get_setting_alarmtime();
   \   00000008   0x.... 0x....      BL       man_data_get_setting_alarmtime
   \   0000000C   0x0005             MOVS     R5,R0
    894          	man_data_get_other_t *other = man_data_get_other();
   \   0000000E   0x.... 0x....      BL       man_data_get_other
    895          
    896          	if (alarmtime->time_num != 0) {
   \   00000012   0x6829             LDR      R1,[R5, #+0]
   \   00000014   0x2900             CMP      R1,#+0
   \   00000016   0xD022             BEQ      ??man_ope_sleep_conv_alarm_0
    897          		atoi_local(&other->imei[10], 5, &imei);
   \   00000018   0x466A             MOV      R2,SP
   \   0000001A   0x2105             MOVS     R1,#+5
   \   0000001C   0x300A             ADDS     R0,R0,#+10
   \   0000001E   0x.... 0x....      BL       atoi_local
    898          		*min = imei % 60;
   \   00000022   0x9800             LDR      R0,[SP, #+0]
   \   00000024   0x213C             MOVS     R1,#+60
   \   00000026   0x.... 0x....      BL       __aeabi_idivmod
   \   0000002A   0x7021             STRB     R1,[R4, #+0]
    899          		*hour = alarmtime->time_num / 10;
   \   0000002C   0x6828             LDR      R0,[R5, #+0]
   \   0000002E   0x210A             MOVS     R1,#+10
   \   00000030   0x.... 0x....      BL       __aeabi_uidiv
   \   00000034   0x7038             STRB     R0,[R7, #+0]
    900          
    901          		if ( (alarmtime->time_num % 10) != 0 ) {
   \   00000036   0x6828             LDR      R0,[R5, #+0]
   \   00000038   0x210A             MOVS     R1,#+10
   \   0000003A   0x.... 0x....      BL       __aeabi_uidivmod
   \   0000003E   0x2900             CMP      R1,#+0
   \   00000040   0xD00C             BEQ      ??man_ope_sleep_conv_alarm_1
    902          			if (*min >= 30) {
   \   00000042   0x7820             LDRB     R0,[R4, #+0]
   \   00000044   0x281E             CMP      R0,#+30
   \   00000046   0xDB06             BLT      ??man_ope_sleep_conv_alarm_2
    903          				*min -= 30;
   \   00000048   0x7820             LDRB     R0,[R4, #+0]
   \   0000004A   0x381E             SUBS     R0,R0,#+30
   \   0000004C   0x7020             STRB     R0,[R4, #+0]
    904          				*hour +=1;
   \   0000004E   0x7838             LDRB     R0,[R7, #+0]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0x7038             STRB     R0,[R7, #+0]
   \   00000054   0xE002             B        ??man_ope_sleep_conv_alarm_1
    905          			}
    906          			else {
    907          				*min += 30;
   \                     ??man_ope_sleep_conv_alarm_2: (+1)
   \   00000056   0x7820             LDRB     R0,[R4, #+0]
   \   00000058   0x301E             ADDS     R0,R0,#+30
   \   0000005A   0x7020             STRB     R0,[R4, #+0]
    908          			}
    909          		}
    910          
    911          		ret = 1;
   \                     ??man_ope_sleep_conv_alarm_1: (+1)
   \   0000005C   0x2601             MOVS     R6,#+1
    912          	}
    913          
    914          	return ret;
   \                     ??man_ope_sleep_conv_alarm_0: (+1)
   \   0000005E   0x0030             MOVS     R0,R6
   \   00000060   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    915          }
    916          
    917          /********************************************************************/
    918          /*!
    919           * \name	man_ope_mode_switch
    920           * \brief	動作切り替えスイッチ変化時の処理
    921           * \param	なし
    922           * \return  なし
    923           * \note	
    924           */
    925          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    926          static void man_ope_mode_switch( void )
    927          {
   \                     man_ope_mode_switch: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    928          	man_ope_mode_info_t *mode_info = &man_ope_work.mode_info;
   \   00000002   0x....             LDR      R0,??DataTable8_5
    929          	int32_t	length;
    930          
    931                // スイッチ変化処理
    932          	if (man_ope_work.sw.flag == 1) {
   \   00000004   0x....             LDR      R1,??DataTable8
   \   00000006   0x6B09             LDR      R1,[R1, #+48]
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0xD120             BNE      ??man_ope_mode_switch_0
    933          		man_ope_work.sw.flag = 0;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x....             LDR      R2,??DataTable8
   \   00000010   0x6311             STR      R1,[R2, #+48]
    934          
    935          		// リセット中は操作による遷移を行わない
    936          		if (mode_info->gole_mode != MAN_OPE_MODE_RESET) {
   \   00000012   0x7881             LDRB     R1,[R0, #+2]
   \   00000014   0x2905             CMP      R1,#+5
   \   00000016   0xD01A             BEQ      ??man_ope_mode_switch_0
    937          
    938          			switch (man_ope_work.sw.sw_fixed) {
   \   00000018   0x....             LDR      R1,??DataTable10
   \   0000001A   0x7809             LDRB     R1,[R1, #+0]
   \   0000001C   0x2900             CMP      R1,#+0
   \   0000001E   0xD008             BEQ      ??man_ope_mode_switch_1
   \   00000020   0x2902             CMP      R1,#+2
   \   00000022   0xD009             BEQ      ??man_ope_mode_switch_2
   \   00000024   0xD302             BCC      ??man_ope_mode_switch_3
   \   00000026   0x2903             CMP      R1,#+3
   \   00000028   0xD009             BEQ      ??man_ope_mode_switch_4
   \   0000002A   0xE00B             B        ??man_ope_mode_switch_5
    939          			case MAN_GPIO_SWITCH_EXT_POWER:		// 外部電源モード位置に変化
    940          				// 目標を外部電源モードとする
    941          				mode_info->gole_mode = MAN_OPE_MODE_EXT_POWER;
   \                     ??man_ope_mode_switch_3: (+1)
   \   0000002C   0x2102             MOVS     R1,#+2
   \   0000002E   0x7081             STRB     R1,[R0, #+2]
    942          				break;
   \   00000030   0xE008             B        ??man_ope_mode_switch_6
    943          			case MAN_GPIO_SWITCH_OFF:			// OFFモード 位置に変化
    944          				// 目標をOFFモードとする
    945          				mode_info->gole_mode = MAN_OPE_MODE_OFF;
   \                     ??man_ope_mode_switch_1: (+1)
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x7081             STRB     R1,[R0, #+2]
    946          				break;
   \   00000036   0xE005             B        ??man_ope_mode_switch_6
    947          			case MAN_GPIO_SWITCH_BATTERY:		// バッテリーモード位置に変化
    948          				// 目標をバッテリーモードとする
    949          				mode_info->gole_mode = MAN_OPE_MODE_BATTERY;
   \                     ??man_ope_mode_switch_2: (+1)
   \   00000038   0x2103             MOVS     R1,#+3
   \   0000003A   0x7081             STRB     R1,[R0, #+2]
    950          				break;
   \   0000003C   0xE002             B        ??man_ope_mode_switch_6
    951          			case MAN_GPIO_SWITCH_DIRECT:			// 直結モード位置に変化
    952          				// 目標を直結モードとする
    953          				mode_info->gole_mode = MAN_OPE_MODE_DIRECT;
   \                     ??man_ope_mode_switch_4: (+1)
   \   0000003E   0x2104             MOVS     R1,#+4
   \   00000040   0x7081             STRB     R1,[R0, #+2]
    954          				break;
   \   00000042   0xE7FF             B        ??man_ope_mode_switch_6
    955          			default:
    956          				break;
    957          			}
    958          			
    959          			// デバックログに登録 
    960          			man_dbglog_setting(MAN_ERROR_DBG_MAN_OPE, MAN_ERROR_DBG_TYPE_STATE, mode_info->gole_mode);
   \                     ??man_ope_mode_switch_5: (+1)
   \                     ??man_ope_mode_switch_6: (+1)
   \   00000044   0x7882             LDRB     R2,[R0, #+2]
   \   00000046   0x2103             MOVS     R1,#+3
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0x.... 0x....      BL       man_dbglog_setting
    961          #ifdef GNSS_DEBUG_MAN_OPE 
    962          			sprintf((char *)&man_ope_work.buff[0], "GOLE MODE(%d)\n", mode_info->gole_mode);
    963          			length = strlen((char const *)&man_ope_work.buff[0]);
    964          			man_usb_data_send(&man_ope_work.buff[0], length);
    965          #endif
    966          		}
    967          	}
    968          }
   \                     ??man_ope_mode_switch_0: (+1)
   \   0000004E   0xBD01             POP      {R0,PC}          ;; return
    969          
    970          
    971          /********************************************************************/
    972          /*!
    973           * \name	man_ope_mode_system_error
    974           * \brief	システムエラー対応処理
    975           * \param	なし
    976           * \return  なし
    977           * \note	
    978           */
    979          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    980          static void man_ope_mode_system_error( void )
    981          {
    982          	man_ope_mode_info_t *mode_info = &man_ope_work.mode_info;
   \                     man_ope_mode_system_error: (+1)
   \   00000000   0x....             LDR      R0,??DataTable8_5
    983          	int32_t	length;
    984          
    985                // 目標をOFFモードとする
    986          //	mode_info->gole_mode = MAN_OPE_MODE_OFF;
    987          //        man_ope_work.sw.flag = 2;
    988                  system_manager.sw = 1;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x....             LDR      R1,??DataTable10_1
   \   00000006   0x7088             STRB     R0,[R1, #+2]
    989           //       man_ope_work.sw.sw_fixed = MAN_GPIO_SWITCH_OFF;
    990          }
   \   00000008   0x4770             BX       LR               ;; return
    991          
    992          
    993          /********************************************************************/
    994          /*!
    995           * \name	man_ope_mode_man_recv
    996           * \brief	動作状態管理応答処理
    997           * \param	なし
    998           * \return  なし
    999           * \note	
   1000           */
   1001          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1002          static void man_ope_mode_man_recv( void )
   1003          {
   \                     man_ope_mode_man_recv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1004          	man_ope_mode_info_t *mode_info = &man_ope_work.mode_info;
   \   00000002   0x....             LDR      R4,??DataTable10_2
   1005          
   1006          	if (man_ope_work.mode_info.resp_cmd.flag == 1) {
   \   00000004   0x....             LDR      R0,??DataTable10_3
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD000             BEQ      .+4
   \   0000000C   0xE0B7             B        ??man_ope_mode_man_recv_0
   1007          		man_ope_work.mode_info.resp_cmd.flag = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR      R1,??DataTable10_3
   \   00000012   0x6008             STR      R0,[R1, #+0]
   1008          		if (man_ope_work.mode_info.resp_cmd.status == MAN_NET_STATUS_OK) {
   \   00000014   0x....             LDR      R0,??DataTable10_4
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD159             BNE      ??man_ope_mode_man_recv_1
   1009          			switch(man_ope_work.mode_info.resp_cmd.id) {
   \   0000001C   0x....             LDR      R0,??DataTable10_5
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x2803             CMP      R0,#+3
   \   00000022   0xD016             BEQ      ??man_ope_mode_man_recv_2
   \   00000024   0x2807             CMP      R0,#+7
   \   00000026   0xD018             BEQ      ??man_ope_mode_man_recv_3
   \   00000028   0x280A             CMP      R0,#+10
   \   0000002A   0xD01A             BEQ      ??man_ope_mode_man_recv_4
   \   0000002C   0x280E             CMP      R0,#+14
   \   0000002E   0xD01C             BEQ      ??man_ope_mode_man_recv_5
   \   00000030   0x2811             CMP      R0,#+17
   \   00000032   0xD01E             BEQ      ??man_ope_mode_man_recv_6
   \   00000034   0x2816             CMP      R0,#+22
   \   00000036   0xD024             BEQ      ??man_ope_mode_man_recv_7
   \   00000038   0x2819             CMP      R0,#+25
   \   0000003A   0xD01E             BEQ      ??man_ope_mode_man_recv_8
   \   0000003C   0x281D             CMP      R0,#+29
   \   0000003E   0xD024             BEQ      ??man_ope_mode_man_recv_9
   \   00000040   0x2823             CMP      R0,#+35
   \   00000042   0xD026             BEQ      ??man_ope_mode_man_recv_10
   \   00000044   0x2827             CMP      R0,#+39
   \   00000046   0xD028             BEQ      ??man_ope_mode_man_recv_11
   \   00000048   0x282C             CMP      R0,#+44
   \   0000004A   0xD02A             BEQ      ??man_ope_mode_man_recv_12
   \   0000004C   0x2830             CMP      R0,#+48
   \   0000004E   0xD02C             BEQ      ??man_ope_mode_man_recv_13
   \   00000050   0xE02F             B        ??man_ope_mode_man_recv_14
   1010          			case MAN_OPE_SEQ_NORMAL_ON_GPS_ON:
   1011          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_GPS_ON_OK);
   \                     ??man_ope_mode_man_recv_2: (+1)
   \   00000052   0x2004             MOVS     R0,#+4
   \   00000054   0x.... 0x....      BL       man_ope_set_mode_seq
   1012          				break;
   \   00000058   0xE091             B        ??man_ope_mode_man_recv_0
   1013          			case MAN_OPE_SEQ_NORMAL_ON_NET_ON:
   1014          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_NET_ON_OK);
   \                     ??man_ope_mode_man_recv_3: (+1)
   \   0000005A   0x2008             MOVS     R0,#+8
   \   0000005C   0x.... 0x....      BL       man_ope_set_mode_seq
   1015          				break;
   \   00000060   0xE08D             B        ??man_ope_mode_man_recv_0
   1016          			case MAN_OPE_SEQ_NORMAL_ON_NET_OFF:
   1017          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_NET_OFF_OK);
   \                     ??man_ope_mode_man_recv_4: (+1)
   \   00000062   0x200B             MOVS     R0,#+11
   \   00000064   0x.... 0x....      BL       man_ope_set_mode_seq
   1018          				break;
   \   00000068   0xE089             B        ??man_ope_mode_man_recv_0
   1019          			case MAN_OPE_SEQ_NORMAL_OFF_NET_OFF:
   1020          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_OFF_NET_OFF_OK);
   \                     ??man_ope_mode_man_recv_5: (+1)
   \   0000006A   0x200F             MOVS     R0,#+15
   \   0000006C   0x.... 0x....      BL       man_ope_set_mode_seq
   1021          				break;
   \   00000070   0xE085             B        ??man_ope_mode_man_recv_0
   1022          			case MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF:
   1023          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF_OK);
   \                     ??man_ope_mode_man_recv_6: (+1)
   \   00000072   0x2012             MOVS     R0,#+18
   \   00000074   0x.... 0x....      BL       man_ope_set_mode_seq
   1024          				break;
   \   00000078   0xE081             B        ??man_ope_mode_man_recv_0
   1025          			case MAN_OPE_SEQ_NORMAL_USBON_NET_OFF:
   1026          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBON_NET_OFF_OK);
   \                     ??man_ope_mode_man_recv_8: (+1)
   \   0000007A   0x201A             MOVS     R0,#+26
   \   0000007C   0x.... 0x....      BL       man_ope_set_mode_seq
   1027          				break;
   \   00000080   0xE07D             B        ??man_ope_mode_man_recv_0
   1028          			case MAN_OPE_SEQ_NORMAL_USBON_UDP_OFF:
   1029          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBON_UDP_OFF_OK);
   \                     ??man_ope_mode_man_recv_7: (+1)
   \   00000082   0x2017             MOVS     R0,#+23
   \   00000084   0x.... 0x....      BL       man_ope_set_mode_seq
   1030          				break;
   \   00000088   0xE079             B        ??man_ope_mode_man_recv_0
   1031          			case MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON:
   1032          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON_OK);
   \                     ??man_ope_mode_man_recv_9: (+1)
   \   0000008A   0x201E             MOVS     R0,#+30
   \   0000008C   0x.... 0x....      BL       man_ope_set_mode_seq
   1033          				break;
   \   00000090   0xE075             B        ??man_ope_mode_man_recv_0
   1034          			case MAN_OPE_SEQ_OTA_START:
   1035          				man_ope_set_mode_seq(MAN_OPE_SEQ_OTA_START_OK);
   \                     ??man_ope_mode_man_recv_10: (+1)
   \   00000092   0x2024             MOVS     R0,#+36
   \   00000094   0x.... 0x....      BL       man_ope_set_mode_seq
   1036          				break;
   \   00000098   0xE071             B        ??man_ope_mode_man_recv_0
   1037          			case MAN_OPE_SEQ_OTA_END:
   1038          				man_ope_set_mode_seq(MAN_OPE_SEQ_OTA_END_OK);
   \                     ??man_ope_mode_man_recv_11: (+1)
   \   0000009A   0x2028             MOVS     R0,#+40
   \   0000009C   0x.... 0x....      BL       man_ope_set_mode_seq
   1039          				break;
   \   000000A0   0xE06D             B        ??man_ope_mode_man_recv_0
   1040          			case MAN_OPE_SEQ_EXTOFF_GPS_WAIT:
   1041          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_GPS_WAIT_OK);
   \                     ??man_ope_mode_man_recv_12: (+1)
   \   000000A2   0x202D             MOVS     R0,#+45
   \   000000A4   0x.... 0x....      BL       man_ope_set_mode_seq
   1042          				break;
   \   000000A8   0xE069             B        ??man_ope_mode_man_recv_0
   1043          			case MAN_OPE_SEQ_EXTOFF_GET_RTC:
   1044          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_GET_RTC_OK);
   \                     ??man_ope_mode_man_recv_13: (+1)
   \   000000AA   0x2031             MOVS     R0,#+49
   \   000000AC   0x.... 0x....      BL       man_ope_set_mode_seq
   1045          				break;
   \   000000B0   0xE065             B        ??man_ope_mode_man_recv_0
   1046          			default:
   1047          				man_ope_set_mode_seq(MAN_OPE_SEQ_ERROR);
   \                     ??man_ope_mode_man_recv_14: (+1)
   \   000000B2   0x2021             MOVS     R0,#+33
   \   000000B4   0x.... 0x....      BL       man_ope_set_mode_seq
   1048          				man_error_setting(MAN_ERROR_MAN_OPE, man_ope_work.mode_info.resp_cmd.id, man_ope_work.mode_info.resp_cmd.status);
   \   000000B8   0x2383             MOVS     R3,#+131
   \   000000BA   0x00DB             LSLS     R3,R3,#+3        ;; #+1048
   \   000000BC   0x....             LDR      R0,??DataTable10_4
   \   000000BE   0x6802             LDR      R2,[R0, #+0]
   \   000000C0   0x....             LDR      R0,??DataTable10_5
   \   000000C2   0x6801             LDR      R1,[R0, #+0]
   \   000000C4   0x2015             MOVS     R0,#+21
   \   000000C6   0x.... 0x....      BL       man_error_set
   1049          				mode_info->error_code = 1;
   \   000000CA   0x2001             MOVS     R0,#+1
   \   000000CC   0x61A0             STR      R0,[R4, #+24]
   1050          				break;
   \   000000CE   0xE056             B        ??man_ope_mode_man_recv_0
   1051          			}
   1052          		}
   1053          		else {
   1054          			switch(man_ope_work.mode_info.resp_cmd.id) {
   \                     ??man_ope_mode_man_recv_1: (+1)
   \   000000D0   0x....             LDR      R0,??DataTable10_5
   \   000000D2   0x6800             LDR      R0,[R0, #+0]
   \   000000D4   0x2803             CMP      R0,#+3
   \   000000D6   0xD016             BEQ      ??man_ope_mode_man_recv_15
   \   000000D8   0x2807             CMP      R0,#+7
   \   000000DA   0xD018             BEQ      ??man_ope_mode_man_recv_16
   \   000000DC   0x280A             CMP      R0,#+10
   \   000000DE   0xD01A             BEQ      ??man_ope_mode_man_recv_17
   \   000000E0   0x280E             CMP      R0,#+14
   \   000000E2   0xD01C             BEQ      ??man_ope_mode_man_recv_18
   \   000000E4   0x2811             CMP      R0,#+17
   \   000000E6   0xD01E             BEQ      ??man_ope_mode_man_recv_19
   \   000000E8   0x2816             CMP      R0,#+22
   \   000000EA   0xD024             BEQ      ??man_ope_mode_man_recv_20
   \   000000EC   0x2819             CMP      R0,#+25
   \   000000EE   0xD01E             BEQ      ??man_ope_mode_man_recv_21
   \   000000F0   0x281D             CMP      R0,#+29
   \   000000F2   0xD024             BEQ      ??man_ope_mode_man_recv_22
   \   000000F4   0x2823             CMP      R0,#+35
   \   000000F6   0xD026             BEQ      ??man_ope_mode_man_recv_23
   \   000000F8   0x2827             CMP      R0,#+39
   \   000000FA   0xD028             BEQ      ??man_ope_mode_man_recv_24
   \   000000FC   0x282C             CMP      R0,#+44
   \   000000FE   0xD029             BEQ      ??man_ope_mode_man_recv_25
   \   00000100   0x2830             CMP      R0,#+48
   \   00000102   0xD02B             BEQ      ??man_ope_mode_man_recv_26
   \   00000104   0xE02E             B        ??man_ope_mode_man_recv_27
   1055          			case MAN_OPE_SEQ_NORMAL_ON_GPS_ON:
   1056          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_GPS_ON_NG);
   \                     ??man_ope_mode_man_recv_15: (+1)
   \   00000106   0x2005             MOVS     R0,#+5
   \   00000108   0x.... 0x....      BL       man_ope_set_mode_seq
   1057          				break;
   \   0000010C   0xE037             B        ??man_ope_mode_man_recv_0
   1058          			case MAN_OPE_SEQ_NORMAL_ON_NET_ON:
   1059          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_NET_ON_NG);
   \                     ??man_ope_mode_man_recv_16: (+1)
   \   0000010E   0x2009             MOVS     R0,#+9
   \   00000110   0x.... 0x....      BL       man_ope_set_mode_seq
   1060          				break;
   \   00000114   0xE033             B        ??man_ope_mode_man_recv_0
   1061          			case MAN_OPE_SEQ_NORMAL_ON_NET_OFF:
   1062          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_NET_OFF_NG);
   \                     ??man_ope_mode_man_recv_17: (+1)
   \   00000116   0x200C             MOVS     R0,#+12
   \   00000118   0x.... 0x....      BL       man_ope_set_mode_seq
   1063          				break;
   \   0000011C   0xE02F             B        ??man_ope_mode_man_recv_0
   1064          			case MAN_OPE_SEQ_NORMAL_OFF_NET_OFF:
   1065          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_OFF_NET_OFF_NG);
   \                     ??man_ope_mode_man_recv_18: (+1)
   \   0000011E   0x2010             MOVS     R0,#+16
   \   00000120   0x.... 0x....      BL       man_ope_set_mode_seq
   1066          				break;
   \   00000124   0xE02B             B        ??man_ope_mode_man_recv_0
   1067          			case MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF:
   1068          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF_NG);
   \                     ??man_ope_mode_man_recv_19: (+1)
   \   00000126   0x2013             MOVS     R0,#+19
   \   00000128   0x.... 0x....      BL       man_ope_set_mode_seq
   1069          				break;
   \   0000012C   0xE027             B        ??man_ope_mode_man_recv_0
   1070          			case MAN_OPE_SEQ_NORMAL_USBON_NET_OFF:
   1071          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBON_NET_OFF_NG);
   \                     ??man_ope_mode_man_recv_21: (+1)
   \   0000012E   0x201B             MOVS     R0,#+27
   \   00000130   0x.... 0x....      BL       man_ope_set_mode_seq
   1072          				break;
   \   00000134   0xE023             B        ??man_ope_mode_man_recv_0
   1073          			case MAN_OPE_SEQ_NORMAL_USBON_UDP_OFF:
   1074          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBON_UDP_OFF_NG);
   \                     ??man_ope_mode_man_recv_20: (+1)
   \   00000136   0x2018             MOVS     R0,#+24
   \   00000138   0x.... 0x....      BL       man_ope_set_mode_seq
   1075          				break;
   \   0000013C   0xE01F             B        ??man_ope_mode_man_recv_0
   1076          			case MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON:
   1077          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON_NG);
   \                     ??man_ope_mode_man_recv_22: (+1)
   \   0000013E   0x201F             MOVS     R0,#+31
   \   00000140   0x.... 0x....      BL       man_ope_set_mode_seq
   1078          				break;
   \   00000144   0xE01B             B        ??man_ope_mode_man_recv_0
   1079          			case MAN_OPE_SEQ_OTA_START:
   1080          				man_ope_set_mode_seq(MAN_OPE_SEQ_OTA_START_NG);
   \                     ??man_ope_mode_man_recv_23: (+1)
   \   00000146   0x2025             MOVS     R0,#+37
   \   00000148   0x.... 0x....      BL       man_ope_set_mode_seq
   1081          				break;
   \   0000014C   0xE017             B        ??man_ope_mode_man_recv_0
   1082          			case MAN_OPE_SEQ_OTA_END:
   1083          				man_ope_set_mode_seq(MAN_OPE_SEQ_OTA_END_NG);
   \                     ??man_ope_mode_man_recv_24: (+1)
   \   0000014E   0x2029             MOVS     R0,#+41
   \   00000150   0x.... 0x....      BL       man_ope_set_mode_seq
   1084          			case MAN_OPE_SEQ_EXTOFF_GPS_WAIT:
   1085          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_GPS_WAIT_NG);
   \                     ??man_ope_mode_man_recv_25: (+1)
   \   00000154   0x202E             MOVS     R0,#+46
   \   00000156   0x.... 0x....      BL       man_ope_set_mode_seq
   1086          				break;
   \   0000015A   0xE010             B        ??man_ope_mode_man_recv_0
   1087          			case MAN_OPE_SEQ_EXTOFF_GET_RTC:
   1088          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_GET_RTC_NG);
   \                     ??man_ope_mode_man_recv_26: (+1)
   \   0000015C   0x2032             MOVS     R0,#+50
   \   0000015E   0x.... 0x....      BL       man_ope_set_mode_seq
   1089          				break;
   \   00000162   0xE00C             B        ??man_ope_mode_man_recv_0
   1090          			default:
   1091          				man_ope_set_mode_seq(MAN_OPE_SEQ_ERROR);
   \                     ??man_ope_mode_man_recv_27: (+1)
   \   00000164   0x2021             MOVS     R0,#+33
   \   00000166   0x.... 0x....      BL       man_ope_set_mode_seq
   1092          				man_error_setting(MAN_ERROR_MAN_OPE, man_ope_work.mode_info.resp_cmd.id, man_ope_work.mode_info.resp_cmd.status);
   \   0000016A   0x....             LDR      R3,??DataTable10_6  ;; 0x444
   \   0000016C   0x....             LDR      R0,??DataTable10_4
   \   0000016E   0x6802             LDR      R2,[R0, #+0]
   \   00000170   0x....             LDR      R0,??DataTable10_5
   \   00000172   0x6801             LDR      R1,[R0, #+0]
   \   00000174   0x2015             MOVS     R0,#+21
   \   00000176   0x.... 0x....      BL       man_error_set
   1093          				mode_info->error_code = 2;
   \   0000017A   0x2002             MOVS     R0,#+2
   \   0000017C   0x61A0             STR      R0,[R4, #+24]
   1094          				break;
   1095          			}
   1096          		}
   1097          	}
   1098          }
   \                     ??man_ope_mode_man_recv_0: (+1)
   \   0000017E   0xBD10             POP      {R4,PC}          ;; return
   1099          
   1100          
   1101          /********************************************************************/
   1102          /*!
   1103           * \name	man_ope_noti_state_recv
   1104           * \brief	状態通知処理
   1105           * \param	なし
   1106           * \return  なし
   1107           * \note	
   1108           */
   1109          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1110          static void man_ope_noti_state_recv( void )
   1111          {
   \                     man_ope_noti_state_recv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1112          	man_ope_mode_info_t *mode_info = &man_ope_work.mode_info;
   \   00000002   0x....             LDR      R4,??DataTable10_2
   1113          
   1114          
   1115          	if (mode_info->noti_state[MAN_OPE_DEV_GPS].flag == 1) {
   \   00000004   0x69E0             LDR      R0,[R4, #+28]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD10A             BNE      ??man_ope_noti_state_recv_0
   1116          		mode_info->noti_state[MAN_OPE_DEV_GPS].flag = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x61E0             STR      R0,[R4, #+28]
   1117          		mode_info->gps_state = mode_info->noti_state[MAN_OPE_DEV_GPS].state;
   \   0000000E   0x6A60             LDR      R0,[R4, #+36]
   \   00000010   0x63A0             STR      R0,[R4, #+56]
   1118          
   1119          		switch (mode_info->gps_state) {
   \   00000012   0x6BA0             LDR      R0,[R4, #+56]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0x2802             CMP      R0,#+2
   \   00000018   0xD902             BLS      ??man_ope_noti_state_recv_1
   \   0000001A   0x1F00             SUBS     R0,R0,#+4
   \   0000001C   0x2803             CMP      R0,#+3
   \   0000001E   0xD8FF             BHI      ??man_ope_noti_state_recv_0
   1120          		case MAN_GPS_NOTI_NOW_CLOSE:
   1121          		case MAN_GPS_NOTI_TO_OPEN:
   1122          		case MAN_GPS_NOTI_NOW_OPEN:
   1123          		case MAN_GPS_NOTI_TO_STBY:
   1124          		case MAN_GPS_NOTI_NOW_STBY:
   1125          		case MAN_GPS_NOTI_TO_OPEN_RETRY:
   1126          		case MAN_GPS_NOTI_OPEN_ERROR:
   1127          			break;
   1128          		}
   1129          	}
   1130          
   1131          	if (mode_info->noti_state[MAN_OPE_DEV_NET].flag == 1) {
   \                     ??man_ope_noti_state_recv_1: (+1)
   \                     ??man_ope_noti_state_recv_0: (+1)
   \   00000020   0x6AA0             LDR      R0,[R4, #+40]
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD118             BNE      ??man_ope_noti_state_recv_2
   1132          		mode_info->noti_state[MAN_OPE_DEV_NET].flag = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x62A0             STR      R0,[R4, #+40]
   1133          		mode_info->net_state = mode_info->noti_state[MAN_OPE_DEV_NET].state;
   \   0000002A   0x6B20             LDR      R0,[R4, #+48]
   \   0000002C   0x6360             STR      R0,[R4, #+52]
   1134          
   1135          		// デバックログに登録 
   1136          		man_dbglog_setting(MAN_ERROR_DBG_MAN_OPE, MAN_ERROR_DBG_TYPE_NOTI, mode_info->net_state);
   \   0000002E   0x6B62             LDR      R2,[R4, #+52]
   \   00000030   0x2102             MOVS     R1,#+2
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x.... 0x....      BL       man_dbglog_setting
   1137          
   1138          #ifdef GNSS_DEBUG_MAN_OPE 
   1139          			int32_t		length;
   1140          			sprintf((char *)&man_ope_work.buff[0], "OPE NOTI(%d)\n", mode_info->net_state);
   1141          			length = strlen((char const *)&man_ope_work.buff[0]);
   1142          			man_usb_data_send(&man_ope_work.buff[0], length);
   1143          #endif
   1144          
   1145          		switch (mode_info->net_state) {
   \   00000038   0x6B60             LDR      R0,[R4, #+52]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0x2801             CMP      R0,#+1
   \   0000003E   0xD906             BLS      ??man_ope_noti_state_recv_3
   \   00000040   0x1E80             SUBS     R0,R0,#+2
   \   00000042   0xD005             BEQ      ??man_ope_noti_state_recv_4
   \   00000044   0x1E40             SUBS     R0,R0,#+1
   \   00000046   0xD002             BEQ      ??man_ope_noti_state_recv_3
   \   00000048   0x1E80             SUBS     R0,R0,#+2
   \   0000004A   0x2804             CMP      R0,#+4
   \   0000004C   0xD804             BHI      ??man_ope_noti_state_recv_2
   1146          		case MAN_NET_NOTI_NOW_CLOSE:
   1147          		case MAN_NET_NOTI_TO_OPEN:
   1148          		case MAN_NET_NOTI_NOW_OPEN:
   1149          		case MAN_NET_NOTI_TO_STBY:
   1150          		case MAN_NET_NOTI_NOW_STBY:
   1151          		case MAN_NET_NOTI_TO_OPEN_RETRY:
   1152          		case MAN_NET_NOTI_TO_OFF:
   1153          		case MAN_NET_NOTI_NOW_OFF:
   1154          			break;
   \                     ??man_ope_noti_state_recv_3: (+1)
   \   0000004E   0xE003             B        ??man_ope_noti_state_recv_2
   1155          		case MAN_NET_NOTI_TO_NET_OPEN:
   1156          			// 時間監視開始
   1157          			man_ope_work.delay_timer = man_timer_get_1ms_count();
   \                     ??man_ope_noti_state_recv_4: (+1)
   \   00000050   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000054   0x....             LDR      R1,??DataTable10_7
   \   00000056   0x6148             STR      R0,[R1, #+20]
   1158          			break;
   1159          		}
   1160          	}
   1161          }
   \                     ??man_ope_noti_state_recv_2: (+1)
   \   00000058   0xBD10             POP      {R4,PC}          ;; return
   1162          
   1163          /********************************************************************/
   1164          /*!
   1165           * \name	man_ope_mode_man_proc
   1166           * \brief	動作状態管理処理
   1167           * \param	なし
   1168           * \return  なし
   1169           * \note	
   1170           */
   1171          /********************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1172          static void man_ope_mode_man_proc( void )
   1173          {
   \                     man_ope_mode_man_proc: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   1174          	man_ope_mode_info_t		*mode_info = &man_ope_work.mode_info;
   \   00000002   0x4CAC             LDR      R4,??man_ope_mode_man_proc_0
   1175          	man_ope_ext_info_t		*ext_info = &man_ope_work.ext_info;
   \   00000004   0x4FAC             LDR      R7,??man_ope_mode_man_proc_0+0x4
   1176          	man_data_fixed_t		*fixed = man_data_get_fixed();
   \   00000006   0x.... 0x....      BL       man_data_get_fixed
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   1177          	man_data_get_sensor_t	*sensor_info = man_data_get_sensor();
   \   0000000C   0x.... 0x....      BL       man_data_get_sensor
   \   00000010   0x0005             MOVS     R5,R0
   1178          	int32_t					sts = man_http_get_status();
   \   00000012   0x.... 0x....      BL       man_http_get_status
   \   00000016   0x9002             STR      R0,[SP, #+8]
   1179          
   1180          	clock_info_t			*jst_clock;
   1181          	man_ope_seq_mode_def	mode_seq;		// 動作シーケンス
   1182          	man_ope_end_proc_def	end_proc;		// 動作完了後の処理
   1183          	man_ope_start_proc_def	start_proc;		// 動作開始前の処理
   1184          	man_ope_proc_mode_def	proc_mode;
   1185          	man_ope_mode_def		end_mode;		// 終了後の状態
   1186          	int32_t	ret;
   1187          	int32_t	length;
   1188          	int32_t	alarm;
   1189          	uint32_t				delay_timer;	// 時間監視
   1190                  uint32_t pos_time  = man_data_get_gnss_no_fix_pos_time();
   \   00000018   0x.... 0x....      BL       man_data_get_gnss_no_fix_pos_time
   1191          
   1192          
   1193          
   1194          
   1195          	// 要求処理
   1196          	switch (man_ope_work.request.req_cmd) {
   \   0000001C   0x48A7             LDR      R0,??man_ope_mode_man_proc_0+0x8
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD005             BEQ      ??man_ope_mode_man_proc_1
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD022             BEQ      ??man_ope_mode_man_proc_2
   \   00000028   0xD303             BCC      ??man_ope_mode_man_proc_3
   \   0000002A   0x2803             CMP      R0,#+3
   \   0000002C   0xD027             BEQ      ??man_ope_mode_man_proc_4
   \   0000002E   0xE037             B        ??man_ope_mode_man_proc_5
   1197          	case MAN_OPE_REQ_CMD_NON:
   1198          		break;
   \                     ??man_ope_mode_man_proc_1: (+1)
   \   00000030   0xE039             B        ??man_ope_mode_man_proc_6
   1199          	case MAN_OPE_REQ_CMD_OTA_START:
   1200          		// 動作状態が安定するまで待つ
   1201          		if ( (mode_info->now_mode == mode_info->next_mode) && (mode_info->now_mode == mode_info->gole_mode) ) {
   \                     ??man_ope_mode_man_proc_3: (+1)
   \   00000032   0x7820             LDRB     R0,[R4, #+0]
   \   00000034   0x7861             LDRB     R1,[R4, #+1]
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xD118             BNE      ??man_ope_mode_man_proc_7
   \   0000003A   0x7820             LDRB     R0,[R4, #+0]
   \   0000003C   0x78A1             LDRB     R1,[R4, #+2]
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD114             BNE      ??man_ope_mode_man_proc_7
   1202          
   1203          			// 外部電源状態 or バッテリー状態 or 直結状態
   1204          			if ( (mode_info->now_mode == MAN_OPE_MODE_EXT_POWER)
   1205          				|| (mode_info->now_mode == MAN_OPE_MODE_BATTERY)
   1206          				|| (mode_info->now_mode == MAN_OPE_MODE_DIRECT) ) {
   \   00000042   0x7820             LDRB     R0,[R4, #+0]
   \   00000044   0x2802             CMP      R0,#+2
   \   00000046   0xD005             BEQ      ??man_ope_mode_man_proc_8
   \   00000048   0x7820             LDRB     R0,[R4, #+0]
   \   0000004A   0x2803             CMP      R0,#+3
   \   0000004C   0xD002             BEQ      ??man_ope_mode_man_proc_8
   \   0000004E   0x7820             LDRB     R0,[R4, #+0]
   \   00000050   0x2804             CMP      R0,#+4
   \   00000052   0xD107             BNE      ??man_ope_mode_man_proc_9
   1207          
   1208          				if (mode_info->mode_seq == MAN_OPE_SEQ_IDLE) {
   \                     ??man_ope_mode_man_proc_8: (+1)
   \   00000054   0x79E0             LDRB     R0,[R4, #+7]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD108             BNE      ??man_ope_mode_man_proc_7
   1209          					// 目標をOTA_INに変更
   1210          					mode_info->gole_mode = MAN_OPE_MODE_OTA_IN;
   \   0000005A   0x2006             MOVS     R0,#+6
   \   0000005C   0x70A0             STRB     R0,[R4, #+2]
   1211          					// 復帰状態を保存
   1212          					mode_info->ota_mode = mode_info->now_mode;
   \   0000005E   0x7820             LDRB     R0,[R4, #+0]
   \   00000060   0x70E0             STRB     R0,[R4, #+3]
   \   00000062   0xE003             B        ??man_ope_mode_man_proc_7
   1213          				}
   1214          			}
   1215          
   1216          			// スイッチが変更されたため、失敗とする
   1217          			else {
   1218          				man_ope_return_callback(MAN_OPE_STATUS_NG);
   \                     ??man_ope_mode_man_proc_9: (+1)
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000068   0x.... 0x....      BL       man_ope_return_callback
   1219          			}
   1220          		}
   1221          		break;
   \                     ??man_ope_mode_man_proc_7: (+1)
   \   0000006C   0xE01B             B        ??man_ope_mode_man_proc_6
   1222          		
   1223          	case MAN_OPE_REQ_CMD_OTA_END:
   1224          		if (mode_info->mode_seq == MAN_OPE_SEQ_IDLE) {
   \                     ??man_ope_mode_man_proc_2: (+1)
   \   0000006E   0x79E0             LDRB     R0,[R4, #+7]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD103             BNE      ??man_ope_mode_man_proc_10
   1225          			// 目標をOTA_IN前の状態に変更
   1226          			mode_info->gole_mode = mode_info->ota_mode;
   \   00000074   0x78E0             LDRB     R0,[R4, #+3]
   \   00000076   0x70A0             STRB     R0,[R4, #+2]
   1227          			mode_info->ota_mode = MAN_OPE_MODE_IDLE;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x70E0             STRB     R0,[R4, #+3]
   1228          		}
   1229          		break;
   \                     ??man_ope_mode_man_proc_10: (+1)
   \   0000007C   0xE013             B        ??man_ope_mode_man_proc_6
   1230          
   1231          	case MAN_OPE_REQ_CMD_RESET:
   1232          		// 動作状態が安定するまで待つ
   1233          		if ( (mode_info->now_mode == mode_info->next_mode)
   1234          			&& (mode_info->now_mode == mode_info->gole_mode) ) {
   \                     ??man_ope_mode_man_proc_4: (+1)
   \   0000007E   0x7820             LDRB     R0,[R4, #+0]
   \   00000080   0x7861             LDRB     R1,[R4, #+1]
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xD10B             BNE      ??man_ope_mode_man_proc_11
   \   00000086   0x7820             LDRB     R0,[R4, #+0]
   \   00000088   0x78A1             LDRB     R1,[R4, #+2]
   \   0000008A   0x4288             CMP      R0,R1
   \   0000008C   0xD107             BNE      ??man_ope_mode_man_proc_11
   1235          
   1236          			if (mode_info->mode_seq == MAN_OPE_SEQ_IDLE) {
   \   0000008E   0x79E0             LDRB     R0,[R4, #+7]
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD104             BNE      ??man_ope_mode_man_proc_11
   1237          				mode_info->gole_mode = MAN_OPE_MODE_RESET;
   \   00000094   0x2005             MOVS     R0,#+5
   \   00000096   0x70A0             STRB     R0,[R4, #+2]
   1238          
   1239          				// callbackがないため、ここでクリアする
   1240          				man_ope_work.request.req_cmd = MAN_OPE_REQ_CMD_NON;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x4988             LDR      R1,??man_ope_mode_man_proc_0+0x8
   \   0000009C   0x6008             STR      R0,[R1, #+0]
   1241          			}
   1242          		}
   1243          		break;
   \                     ??man_ope_mode_man_proc_11: (+1)
   \   0000009E   0xE002             B        ??man_ope_mode_man_proc_6
   1244          
   1245          	default:
   1246          		man_ope_work.request.req_cmd = MAN_OPE_REQ_CMD_NON;
   \                     ??man_ope_mode_man_proc_5: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x4986             LDR      R1,??man_ope_mode_man_proc_0+0x8
   \   000000A4   0x6008             STR      R0,[R1, #+0]
   1247          		break;
   1248          	}
   1249          
   1250          
   1251          
   1252          	// 状態が変化したら移行動作を行う
   1253          	if (mode_info->mode_seq == MAN_OPE_SEQ_IDLE) {
   \                     ??man_ope_mode_man_proc_6: (+1)
   \   000000A6   0x79E0             LDRB     R0,[R4, #+7]
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD151             BNE      ??man_ope_mode_man_proc_12
   1254          		if (mode_info->now_mode != mode_info->gole_mode) {
   \   000000AC   0x7820             LDRB     R0,[R4, #+0]
   \   000000AE   0x78A1             LDRB     R1,[R4, #+2]
   \   000000B0   0x4288             CMP      R0,R1
   \   000000B2   0xD04D             BEQ      ??man_ope_mode_man_proc_12
   1255          
   1256          			end_mode = mode_seq_tbl[mode_info->now_mode][mode_info->gole_mode].end_mode;
   \   000000B4   0x4882             LDR      R0,??man_ope_mode_man_proc_0+0xC
   \   000000B6   0x7821             LDRB     R1,[R4, #+0]
   \   000000B8   0x222D             MOVS     R2,#+45
   \   000000BA   0x4351             MULS     R1,R2,R1
   \   000000BC   0x1840             ADDS     R0,R0,R1
   \   000000BE   0x78A1             LDRB     R1,[R4, #+2]
   \   000000C0   0x2205             MOVS     R2,#+5
   \   000000C2   0x4351             MULS     R1,R2,R1
   \   000000C4   0x1840             ADDS     R0,R0,R1
   \   000000C6   0x7900             LDRB     R0,[R0, #+4]
   \   000000C8   0x4669             MOV      R1,SP
   \   000000CA   0x7008             STRB     R0,[R1, #+0]
   1257          			mode_seq = mode_seq_tbl[mode_info->now_mode][mode_info->gole_mode].mode_seq;
   \   000000CC   0x487C             LDR      R0,??man_ope_mode_man_proc_0+0xC
   \   000000CE   0x7821             LDRB     R1,[R4, #+0]
   \   000000D0   0x222D             MOVS     R2,#+45
   \   000000D2   0x4351             MULS     R1,R2,R1
   \   000000D4   0x1840             ADDS     R0,R0,R1
   \   000000D6   0x78A1             LDRB     R1,[R4, #+2]
   \   000000D8   0x2205             MOVS     R2,#+5
   \   000000DA   0x4351             MULS     R1,R2,R1
   \   000000DC   0x5C40             LDRB     R0,[R0, R1]
   1258          			start_proc = mode_seq_tbl[mode_info->now_mode][mode_info->gole_mode].start_proc;
   \   000000DE   0x4978             LDR      R1,??man_ope_mode_man_proc_0+0xC
   \   000000E0   0x7822             LDRB     R2,[R4, #+0]
   \   000000E2   0x232D             MOVS     R3,#+45
   \   000000E4   0x435A             MULS     R2,R3,R2
   \   000000E6   0x1889             ADDS     R1,R1,R2
   \   000000E8   0x78A2             LDRB     R2,[R4, #+2]
   \   000000EA   0x2305             MOVS     R3,#+5
   \   000000EC   0x435A             MULS     R2,R3,R2
   \   000000EE   0x1889             ADDS     R1,R1,R2
   \   000000F0   0x7849             LDRB     R1,[R1, #+1]
   \   000000F2   0x466A             MOV      R2,SP
   \   000000F4   0x7091             STRB     R1,[R2, #+2]
   1259          			end_proc = mode_seq_tbl[mode_info->now_mode][mode_info->gole_mode].end_proc;
   \   000000F6   0x4972             LDR      R1,??man_ope_mode_man_proc_0+0xC
   \   000000F8   0x7822             LDRB     R2,[R4, #+0]
   \   000000FA   0x232D             MOVS     R3,#+45
   \   000000FC   0x435A             MULS     R2,R3,R2
   \   000000FE   0x1889             ADDS     R1,R1,R2
   \   00000100   0x78A2             LDRB     R2,[R4, #+2]
   \   00000102   0x2305             MOVS     R3,#+5
   \   00000104   0x435A             MULS     R2,R3,R2
   \   00000106   0x1889             ADDS     R1,R1,R2
   \   00000108   0x7889             LDRB     R1,[R1, #+2]
   \   0000010A   0x466A             MOV      R2,SP
   \   0000010C   0x70D1             STRB     R1,[R2, #+3]
   1260          			proc_mode = mode_seq_tbl[mode_info->now_mode][mode_info->gole_mode].proc_mode;
   \   0000010E   0x496C             LDR      R1,??man_ope_mode_man_proc_0+0xC
   \   00000110   0x7822             LDRB     R2,[R4, #+0]
   \   00000112   0x232D             MOVS     R3,#+45
   \   00000114   0x435A             MULS     R2,R3,R2
   \   00000116   0x1889             ADDS     R1,R1,R2
   \   00000118   0x78A2             LDRB     R2,[R4, #+2]
   \   0000011A   0x2305             MOVS     R3,#+5
   \   0000011C   0x435A             MULS     R2,R3,R2
   \   0000011E   0x1889             ADDS     R1,R1,R2
   \   00000120   0x78C9             LDRB     R1,[R1, #+3]
   \   00000122   0x466A             MOV      R2,SP
   \   00000124   0x7051             STRB     R1,[R2, #+1]
   1261          
   1262          			mode_info->next_mode = end_mode;
   \   00000126   0x4669             MOV      R1,SP
   \   00000128   0x7809             LDRB     R1,[R1, #+0]
   \   0000012A   0x7061             STRB     R1,[R4, #+1]
   1263          
   1264          			
   1265          #ifdef GNSS_DEBUG_MAN_OPE 
   1266          			int32_t		length;
   1267          			sprintf((char *)&man_ope_work.buff[0], "OPE MODE(%d->%d)\n", mode_info->now_mode, end_mode);
   1268          			length = strlen((char const *)&man_ope_work.buff[0]);
   1269          			man_usb_data_send(&man_ope_work.buff[0], length);
   1270          #endif
   1271          
   1272          			// 遷移動作を開始する
   1273          			if (mode_seq != MAN_OPE_SEQ_IDLE) {
   \   0000012C   0xB2C0             UXTB     R0,R0
   \   0000012E   0x2800             CMP      R0,#+0
   \   00000130   0xD00E             BEQ      ??man_ope_mode_man_proc_12
   1274          				man_ope_set_mode_seq(mode_seq);
   \   00000132   0xB2C0             UXTB     R0,R0
   \   00000134   0x.... 0x....      BL       man_ope_set_mode_seq
   1275          				mode_info->start_proc = start_proc;
   \   00000138   0x4668             MOV      R0,SP
   \   0000013A   0x7880             LDRB     R0,[R0, #+2]
   \   0000013C   0x7260             STRB     R0,[R4, #+9]
   1276          				mode_info->end_proc = end_proc;
   \   0000013E   0x4668             MOV      R0,SP
   \   00000140   0x78C0             LDRB     R0,[R0, #+3]
   \   00000142   0x72A0             STRB     R0,[R4, #+10]
   1277          				mode_info->proc_mode = proc_mode;
   \   00000144   0x4668             MOV      R0,SP
   \   00000146   0x7840             LDRB     R0,[R0, #+1]
   \   00000148   0x71A0             STRB     R0,[R4, #+6]
   1278          				mode_info->end_mode = end_mode;
   \   0000014A   0x4668             MOV      R0,SP
   \   0000014C   0x7800             LDRB     R0,[R0, #+0]
   \   0000014E   0x7120             STRB     R0,[R4, #+4]
   1279          			}
   1280          		}
   1281          	}
   1282          
   1283          
   1284          
   1285          	// SLEEP管理応答処理
   1286          	if (man_ope_work.sleep_cb.flag == 1) {
   \                     ??man_ope_mode_man_proc_12: (+1)
   \   00000150   0x485A             LDR      R0,??man_ope_mode_man_proc_0+0x8
   \   00000152   0x69C0             LDR      R0,[R0, #+28]
   \   00000154   0x2801             CMP      R0,#+1
   \   00000156   0xD11B             BNE      ??man_ope_mode_man_proc_13
   1287          		man_ope_work.sleep_cb.flag = 0;
   \   00000158   0x2000             MOVS     R0,#+0
   \   0000015A   0x4958             LDR      R1,??man_ope_mode_man_proc_0+0x8
   \   0000015C   0x61C8             STR      R0,[R1, #+28]
   1288          		if (man_ope_work.sleep_cb.status == MAN_OPE_STATUS_OK) {
   \   0000015E   0x4857             LDR      R0,??man_ope_mode_man_proc_0+0x8
   \   00000160   0x6A40             LDR      R0,[R0, #+36]
   \   00000162   0x2800             CMP      R0,#+0
   \   00000164   0xD10D             BNE      ??man_ope_mode_man_proc_14
   1289          			switch (man_ope_work.sleep_cb.id) {
   \   00000166   0x4855             LDR      R0,??man_ope_mode_man_proc_0+0x8
   \   00000168   0x6A00             LDR      R0,[R0, #+32]
   \   0000016A   0x2802             CMP      R0,#+2
   \   0000016C   0xD002             BEQ      ??man_ope_mode_man_proc_15
   \   0000016E   0x2805             CMP      R0,#+5
   \   00000170   0xD003             BEQ      ??man_ope_mode_man_proc_16
   \   00000172   0xE005             B        ??man_ope_mode_man_proc_17
   1290          			case MAN_OPE_SLEEP_OFF_WAKEUP:
   1291          				// 再度SLEEP状態に移行する
   1292          				mode_info->mode_sleep = MAN_OPE_SLEEP_OFF_REQ;
   \                     ??man_ope_mode_man_proc_15: (+1)
   \   00000174   0x2001             MOVS     R0,#+1
   \   00000176   0x7220             STRB     R0,[R4, #+8]
   1293          				break;
   \   00000178   0xE00A             B        ??man_ope_mode_man_proc_13
   1294          			case MAN_OPE_SLEEP_EXT_WAKEUP:
   1295          				// 再度SLEEP状態に移行する
   1296          				mode_info->mode_sleep = MAN_OPE_SLEEP_EXT_REQ;
   \                     ??man_ope_mode_man_proc_16: (+1)
   \   0000017A   0x2004             MOVS     R0,#+4
   \   0000017C   0x7220             STRB     R0,[R4, #+8]
   1297          				break;
   \   0000017E   0xE007             B        ??man_ope_mode_man_proc_13
   1298          			default:
   1299          				break;
   \                     ??man_ope_mode_man_proc_17: (+1)
   \   00000180   0xE006             B        ??man_ope_mode_man_proc_13
   1300          			}
   1301          		}
   1302          		else {
   1303          			man_error_setting(MAN_ERROR_MAN_OPE, man_ope_work.sleep_cb.id, 0);
   \                     ??man_ope_mode_man_proc_14: (+1)
   \   00000182   0x4B50             LDR      R3,??man_ope_mode_man_proc_0+0x10  ;; 0x517
   \   00000184   0x2200             MOVS     R2,#+0
   \   00000186   0x484D             LDR      R0,??man_ope_mode_man_proc_0+0x8
   \   00000188   0x6A01             LDR      R1,[R0, #+32]
   \   0000018A   0x2015             MOVS     R0,#+21
   \   0000018C   0x.... 0x....      BL       man_error_set
   1304          		}
   1305          	}
   1306          
   1307          	// SLEEPを管理する
   1308          	switch (mode_info->mode_sleep) {
   \                     ??man_ope_mode_man_proc_13: (+1)
   \   00000190   0x7A20             LDRB     R0,[R4, #+8]
   \   00000192   0x2800             CMP      R0,#+0
   \   00000194   0xD009             BEQ      ??man_ope_mode_man_proc_18
   \   00000196   0x2802             CMP      R0,#+2
   \   00000198   0xD027             BEQ      ??man_ope_mode_man_proc_19
   \   0000019A   0xD307             BCC      ??man_ope_mode_man_proc_20
   \   0000019C   0x2804             CMP      R0,#+4
   \   0000019E   0xD04E             BEQ      ??man_ope_mode_man_proc_21
   \   000001A0   0xD33C             BCC      ??man_ope_mode_man_proc_22
   \   000001A2   0x2805             CMP      R0,#+5
   \   000001A4   0xD100             BNE      .+4
   \   000001A6   0xE09F             B        ??man_ope_mode_man_proc_23
   \   000001A8   0xE0AA             B        ??man_ope_mode_man_proc_24
   1309          	case MAN_OPE_SLEEP_IDLE:
   1310          		break;
   \                     ??man_ope_mode_man_proc_18: (+1)
   \   000001AA   0xE0A9             B        ??man_ope_mode_man_proc_24
   1311          
   1312          	case MAN_OPE_SLEEP_OFF_REQ:
   1313          		// タイマ管理を停止させる
   1314          		man_timer_stop();
   \                     ??man_ope_mode_man_proc_20: (+1)
   \   000001AC   0x.... 0x....      BL       man_timer_stop
   1315          		seSysSleepMS(5);
   \   000001B0   0x2005             MOVS     R0,#+5
   \   000001B2   0x.... 0x....      BL       seSysSleepMS
   1316          
   1317          		// 既にスイッチが変更されていた場合はsleepに入らない
   1318          		if (man_gpio_switch_get() == MAN_GPIO_SWITCH_OFF) {
   \   000001B6   0x.... 0x....      BL       man_gpio_switch_get
   \   000001BA   0x2800             CMP      R0,#+0
   \   000001BC   0xD104             BNE      ??man_ope_mode_man_proc_25
   1319          			// LED制御
   1320          			man_ope_out_led_off();
   \   000001BE   0x.... 0x....      BL       man_ope_out_led_off
   1321          			// SLEEPモード(起床条件 ::OFF MODE SW OFF, 外部電源ON信号ON, 外部電源(USB)ON信号ON)
   1322          			ret = ctrl_SLEEP_extsw();
   \   000001C2   0x.... 0x....      BL       ctrl_SLEEP_extsw
   \   000001C6   0x0006             MOVS     R6,R0
   1323          		}
   1324          
   1325          		// タイマ管理を再開させる
   1326          		man_timer_start();
   \                     ??man_ope_mode_man_proc_25: (+1)
   \   000001C8   0x.... 0x....      BL       man_timer_start
   1327          		man_data_collect_sensor();	// 管理データを更新する
   \   000001CC   0x.... 0x....      BL       man_data_collect_sensor
   1328          
   1329          		if (ret != 2) {
   \   000001D0   0x2E02             CMP      R6,#+2
   \   000001D2   0xD007             BEQ      ??man_ope_mode_man_proc_26
   1330          			// 10秒間操作スイッチに変化がない場合は再度sleepする
   1331          			man_timer_start_wait(TIMER_MAN_ID_APL_OPE + MAN_OPE_SLEEP_OFF_WAKEUP, MAN_OPE_SLEEP_OFF_WAKEUP_TIME, man_ope_sleep_callback);
   \   000001D4   0x4ABB             LDR      R2,??man_ope_mode_man_proc_27
   \   000001D6   0x49BC             LDR      R1,??man_ope_mode_man_proc_27+0x4  ;; 0x2710
   \   000001D8   0x48BC             LDR      R0,??man_ope_mode_man_proc_27+0x8  ;; 0x40100002
   \   000001DA   0x.... 0x....      BL       man_timer_start_wait
   1332          			mode_info->mode_sleep = MAN_OPE_SLEEP_OFF_WAKEUP;
   \   000001DE   0x2002             MOVS     R0,#+2
   \   000001E0   0x7220             STRB     R0,[R4, #+8]
   \   000001E2   0xE001             B        ??man_ope_mode_man_proc_28
   1333          		}
   1334          		else {
   1335          			mode_info->mode_sleep = MAN_OPE_SLEEP_OFF_EXTON;
   \                     ??man_ope_mode_man_proc_26: (+1)
   \   000001E4   0x2003             MOVS     R0,#+3
   \   000001E6   0x7220             STRB     R0,[R4, #+8]
   1336          		}
   1337          		break;
   \                     ??man_ope_mode_man_proc_28: (+1)
   \   000001E8   0xE08A             B        ??man_ope_mode_man_proc_24
   1338          
   1339          	case MAN_OPE_SLEEP_OFF_WAKEUP:
   1340          		// 操作スイッチが変化
   1341          		if (mode_info->gole_mode != MAN_OPE_MODE_OFF) {
   \                     ??man_ope_mode_man_proc_19: (+1)
   \   000001EA   0x78A0             LDRB     R0,[R4, #+2]
   \   000001EC   0x2801             CMP      R0,#+1
   \   000001EE   0xD006             BEQ      ??man_ope_mode_man_proc_29
   1342          			mode_info->mode_sleep = MAN_OPE_SLEEP_IDLE;
   \   000001F0   0x2000             MOVS     R0,#+0
   \   000001F2   0x7220             STRB     R0,[R4, #+8]
   1343          			man_timer_cancel_wait(TIMER_MAN_ID_APL_OPE + MAN_OPE_SLEEP_OFF_WAKEUP, MAN_OPE_SLEEP_OFF_WAKEUP_TIME);
   \   000001F4   0x49B4             LDR      R1,??man_ope_mode_man_proc_27+0x4  ;; 0x2710
   \   000001F6   0x48B5             LDR      R0,??man_ope_mode_man_proc_27+0x8  ;; 0x40100002
   \   000001F8   0x.... 0x....      BL       man_timer_cancel_wait
   \   000001FC   0xE00D             B        ??man_ope_mode_man_proc_30
   1344          		}
   1345          		// 外部電源ON時はSLEEPモードに遷移しない
   1346          
   1347          #if 0  // debug 20180919 Matsushita
   1348          		else if ( (man_gpio_expow_get() == MAN_GPIO_EXPOW_ON)) { // Debug 20180919 Matsushita
   1349                                    char *msg = "else if ( (man_gpio_expow_get() == MAN_GPIO_EXPOW_ON) )\r\n";
   1350                                    man_usb_data_send(msg,strlen(msg));
   1351          
   1352          #else
   1353          		else if ( (man_charge_expow_get() == MAN_CHARGE_EXTSTAT_ON) || (man_charge_expow_usb_get() ==  MAN_CHARGE_EXTSTAT_ON) ) {
   \                     ??man_ope_mode_man_proc_29: (+1)
   \   000001FE   0x.... 0x....      BL       man_charge_expow_get
   \   00000202   0x2801             CMP      R0,#+1
   \   00000204   0xD003             BEQ      ??man_ope_mode_man_proc_31
   \   00000206   0x.... 0x....      BL       man_charge_expow_usb_get
   \   0000020A   0x2801             CMP      R0,#+1
   \   0000020C   0xD105             BNE      ??man_ope_mode_man_proc_30
   1354          #endif
   1355                            mode_info->mode_sleep = MAN_OPE_SLEEP_OFF_EXTON;
   \                     ??man_ope_mode_man_proc_31: (+1)
   \   0000020E   0x2003             MOVS     R0,#+3
   \   00000210   0x7220             STRB     R0,[R4, #+8]
   1356          			man_timer_cancel_wait(TIMER_MAN_ID_APL_OPE + MAN_OPE_SLEEP_OFF_WAKEUP, MAN_OPE_SLEEP_OFF_WAKEUP_TIME);
   \   00000212   0x49AD             LDR      R1,??man_ope_mode_man_proc_27+0x4  ;; 0x2710
   \   00000214   0x48AD             LDR      R0,??man_ope_mode_man_proc_27+0x8  ;; 0x40100002
   \   00000216   0x.... 0x....      BL       man_timer_cancel_wait
   1357          		}
   1358          		break;
   \                     ??man_ope_mode_man_proc_30: (+1)
   \   0000021A   0xE071             B        ??man_ope_mode_man_proc_24
   1359          
   1360          	case MAN_OPE_SLEEP_OFF_EXTON:
   1361          		// 操作スイッチが変化
   1362          		if (mode_info->gole_mode != MAN_OPE_MODE_OFF) {
   \                     ??man_ope_mode_man_proc_22: (+1)
   \   0000021C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000021E   0x2801             CMP      R0,#+1
   \   00000220   0xD002             BEQ      ??man_ope_mode_man_proc_32
   1363          			mode_info->mode_sleep = MAN_OPE_SLEEP_IDLE;
   \   00000222   0x2000             MOVS     R0,#+0
   \   00000224   0x7220             STRB     R0,[R4, #+8]
   \   00000226   0xE009             B        ??man_ope_mode_man_proc_33
   1364          		}
   1365          
   1366          		// 外部電源OFF時はSLEEPモードに遷移
   1367                          else if ( (man_charge_expow_get() == MAN_CHARGE_EXTSTAT_OFF) && (man_charge_expow_usb_get() ==  MAN_CHARGE_EXTSTAT_OFF) )
   \                     ??man_ope_mode_man_proc_32: (+1)
   \   00000228   0x.... 0x....      BL       man_charge_expow_get
   \   0000022C   0x2800             CMP      R0,#+0
   \   0000022E   0xD105             BNE      ??man_ope_mode_man_proc_33
   \   00000230   0x.... 0x....      BL       man_charge_expow_usb_get
   \   00000234   0x2800             CMP      R0,#+0
   \   00000236   0xD101             BNE      ??man_ope_mode_man_proc_33
   1368                          {
   1369                            mode_info->mode_sleep = MAN_OPE_SLEEP_OFF_REQ;
   \   00000238   0x2001             MOVS     R0,#+1
   \   0000023A   0x7220             STRB     R0,[R4, #+8]
   1370          		}
   1371          		break;
   \                     ??man_ope_mode_man_proc_33: (+1)
   \   0000023C   0xE060             B        ??man_ope_mode_man_proc_24
   1372          
   1373          	// 外部電源モードによるSLEEP開始
   1374          	case MAN_OPE_SLEEP_EXT_REQ:
   1375          		// タイマ管理を停止させる
   1376          		man_timer_stop();
   \                     ??man_ope_mode_man_proc_21: (+1)
   \   0000023E   0x.... 0x....      BL       man_timer_stop
   1377          		seSysSleepMS(5);
   \   00000242   0x2005             MOVS     R0,#+5
   \   00000244   0x.... 0x....      BL       seSysSleepMS
   1378          
   1379          		// LED制御
   1380          		man_ope_out_led_off();
   \   00000248   0x.... 0x....      BL       man_ope_out_led_off
   1381          
   1382          		// 定刻測位時間帯設定(alarmtime)情報をアラーム時間に変換
   1383          		alarm = man_ope_sleep_conv_alarm(&ext_info->alm_hour, &ext_info->alm_min);
   \   0000024C   0x0039             MOVS     R1,R7
   \   0000024E   0x310F             ADDS     R1,R1,#+15
   \   00000250   0x0038             MOVS     R0,R7
   \   00000252   0x300E             ADDS     R0,R0,#+14
   \   00000254   0x.... 0x....      BL       man_ope_sleep_conv_alarm
   \   00000258   0x0006             MOVS     R6,R0
   1384          		man_rtc_get_clock(&ext_info->clock);
   \   0000025A   0x0038             MOVS     R0,R7
   \   0000025C   0x3008             ADDS     R0,R0,#+8
   \   0000025E   0x.... 0x....      BL       man_rtc_get_clock
   1385          
   1386          		// 外部電源OFF && 外部電源(USB)OFF時はsleepモードに入る
   1387          #if 0  //Debug 20180919 Matsushita
   1388          		if ( (man_gpio_switch_get() == MAN_GPIO_SWITCH_EXT_POWER)
   1389          			&& (man_gpio_expow_get() == MAN_GPIO_EXPOW_OFF)
   1390          			 ) {
   1391                                     char *msg = "MAN_GPIO_SWITCH_EXT_POWER &&  MAN_GPIO_EXPOW_OFF\r\n";
   1392                                    man_usb_data_send(msg,strlen(msg));
   1393          
   1394          #else
   1395          		if ( (man_gpio_switch_get() == MAN_GPIO_SWITCH_EXT_POWER)
   1396          			&& (man_charge_expow_get() == MAN_CHARGE_EXTSTAT_OFF)
   1397          			&& (man_charge_expow_usb_get() ==  MAN_CHARGE_EXTSTAT_OFF) ) {
   \   00000262   0x.... 0x....      BL       man_gpio_switch_get
   \   00000266   0x2801             CMP      R0,#+1
   \   00000268   0xD114             BNE      ??man_ope_mode_man_proc_34
   \   0000026A   0x.... 0x....      BL       man_charge_expow_get
   \   0000026E   0x2800             CMP      R0,#+0
   \   00000270   0xD110             BNE      ??man_ope_mode_man_proc_34
   \   00000272   0x.... 0x....      BL       man_charge_expow_usb_get
   \   00000276   0x2800             CMP      R0,#+0
   \   00000278   0xD10C             BNE      ??man_ope_mode_man_proc_34
   1398          #endif
   1399                                    // アラーム有効
   1400          			if (alarm == 1) {
   \   0000027A   0x2E01             CMP      R6,#+1
   \   0000027C   0xD106             BNE      ??man_ope_mode_man_proc_35
   1401          				// SLEEPモード(起床条件 :: POWER EXT MODE SW, 外部電源ON信号, 外部電源(USB)ON信号,alarm)
   1402                                    ret = ctrl_SLEEP_extsw_exton_alarm(ext_info->alm_hour, ext_info->alm_min, 0);
   \   0000027E   0x2200             MOVS     R2,#+0
   \   00000280   0x7BF9             LDRB     R1,[R7, #+15]
   \   00000282   0x7BB8             LDRB     R0,[R7, #+14]
   \   00000284   0x.... 0x....      BL       ctrl_SLEEP_extsw_exton_alarm
   \   00000288   0x0006             MOVS     R6,R0
   \   0000028A   0xE004             B        ??man_ope_mode_man_proc_36
   1403          			}
   1404          			// アラーム無効
   1405          			else {
   1406          				// SLEEPモード(起床条件 :: POWER EXT MODE SW, 外部電源ON信号, 外部電源(USB)ON信号)
   1407          				ret = ctrl_SLEEP_extsw_exton();
   \                     ??man_ope_mode_man_proc_35: (+1)
   \   0000028C   0x.... 0x....      BL       ctrl_SLEEP_extsw_exton
   \   00000290   0x0006             MOVS     R6,R0
   \   00000292   0xE000             B        ??man_ope_mode_man_proc_36
   1408          			}
   1409          		}
   1410          		// 既に外部電源ON時はsleepモードに入らない
   1411          		else {
   1412          			ret = CTRL_SLEEP_WAKEUP_EXTSW;
   \                     ??man_ope_mode_man_proc_34: (+1)
   \   00000294   0x2601             MOVS     R6,#+1
   1413          		}
   1414          
   1415          		// タイマ管理を再開させる
   1416          		man_timer_start();
   \                     ??man_ope_mode_man_proc_36: (+1)
   \   00000296   0x.... 0x....      BL       man_timer_start
   1417          		man_data_collect_sensor();	// 管理データを更新する
   \   0000029A   0x.... 0x....      BL       man_data_collect_sensor
   1418          
   1419          
   1420          		// ALARMによる起床の場合
   1421          		if (ret == CTRL_SLEEP_WAKEUP_ALARM) {
   \   0000029E   0x2E03             CMP      R6,#+3
   \   000002A0   0xD117             BNE      ??man_ope_mode_man_proc_37
   1422          			// 定刻起動時の測位
   1423          			man_ope_work.ext_info.ext_mode = MAN_OPE_EXT_MODE_ALARM;
   \   000002A2   0x2001             MOVS     R0,#+1
   \   000002A4   0x4904             LDR      R1,??man_ope_mode_man_proc_0+0x4
   \   000002A6   0x7008             STRB     R0,[R1, #+0]
   1424          			// 定刻測位を開始する
   1425          			if (mode_info->gole_mode == MAN_OPE_MODE_EXT_OFF1) {
   \   000002A8   0x78A0             LDRB     R0,[R4, #+2]
   \   000002AA   0x2807             CMP      R0,#+7
   \   000002AC   0xD10C             BNE      ??man_ope_mode_man_proc_38
   1426          				mode_info->gole_mode = MAN_OPE_MODE_EXT_OFF2;
   \   000002AE   0x2008             MOVS     R0,#+8
   \   000002B0   0x70A0             STRB     R0,[R4, #+2]
   \   000002B2   0xE00B             B        ??man_ope_mode_man_proc_39
   \                     ??man_ope_mode_man_proc_0:
   \   000002B4   0x........         DC32     man_ope_work+0x84
   \   000002B8   0x........         DC32     man_ope_work+0x74
   \   000002BC   0x........         DC32     man_ope_work
   \   000002C0   0x........         DC32     mode_seq_tbl
   \   000002C4   0x00000517         DC32     0x517
   1427          			}
   1428          			else {
   1429          				mode_info->gole_mode = MAN_OPE_MODE_EXT_OFF1;
   \                     ??man_ope_mode_man_proc_38: (+1)
   \   000002C8   0x2007             MOVS     R0,#+7
   \   000002CA   0x70A0             STRB     R0,[R4, #+2]
   1430          			}
   1431          			// SLEEP解除
   1432          			mode_info->mode_sleep = MAN_OPE_SLEEP_IDLE;
   \                     ??man_ope_mode_man_proc_39: (+1)
   \   000002CC   0x2000             MOVS     R0,#+0
   \   000002CE   0x7220             STRB     R0,[R4, #+8]
   \   000002D0   0xE009             B        ??man_ope_mode_man_proc_40
   1433          		}
   1434          
   1435          		// スイッチ、外部電源による起床の場合
   1436          		else {
   1437          			// 測位解除
   1438          			man_ope_work.ext_info.ext_mode = MAN_OPE_EXT_MODE_EXIT;
   \                     ??man_ope_mode_man_proc_37: (+1)
   \   000002D2   0x2002             MOVS     R0,#+2
   \   000002D4   0x497E             LDR      R1,??man_ope_mode_man_proc_27+0xC
   \   000002D6   0x7008             STRB     R0,[R1, #+0]
   1439          			// 10秒間操作スイッチに変化がない場合は再度sleepする
   1440          			man_timer_start_wait(TIMER_MAN_ID_APL_OPE + MAN_OPE_SLEEP_EXT_WAKEUP, MAN_OPE_SLEEP_OFF_WAKEUP_TIME, man_ope_sleep_callback);
   \   000002D8   0x4A7A             LDR      R2,??man_ope_mode_man_proc_27
   \   000002DA   0x497B             LDR      R1,??man_ope_mode_man_proc_27+0x4  ;; 0x2710
   \   000002DC   0x487D             LDR      R0,??man_ope_mode_man_proc_27+0x10  ;; 0x40100005
   \   000002DE   0x.... 0x....      BL       man_timer_start_wait
   1441          			mode_info->mode_sleep = MAN_OPE_SLEEP_OFF_WAKEUP;
   \   000002E2   0x2002             MOVS     R0,#+2
   \   000002E4   0x7220             STRB     R0,[R4, #+8]
   1442          		}
   1443          		break;
   \                     ??man_ope_mode_man_proc_40: (+1)
   \   000002E6   0xE00B             B        ??man_ope_mode_man_proc_24
   1444          
   1445          	case MAN_OPE_SLEEP_EXT_WAKEUP:
   1446          		// 操作スイッチが変化
   1447          		if ( ( mode_info->gole_mode != MAN_OPE_MODE_EXT_OFF1 ) && ( mode_info->gole_mode != MAN_OPE_MODE_EXT_OFF2 ) ) {
   \                     ??man_ope_mode_man_proc_23: (+1)
   \   000002E8   0x78A0             LDRB     R0,[R4, #+2]
   \   000002EA   0x2807             CMP      R0,#+7
   \   000002EC   0xD008             BEQ      ??man_ope_mode_man_proc_41
   \   000002EE   0x78A0             LDRB     R0,[R4, #+2]
   \   000002F0   0x2808             CMP      R0,#+8
   \   000002F2   0xD005             BEQ      ??man_ope_mode_man_proc_41
   1448          			mode_info->mode_sleep = MAN_OPE_SLEEP_IDLE;
   \   000002F4   0x2000             MOVS     R0,#+0
   \   000002F6   0x7220             STRB     R0,[R4, #+8]
   1449          			man_timer_cancel_wait(TIMER_MAN_ID_APL_OPE + MAN_OPE_SLEEP_EXT_WAKEUP, MAN_OPE_SLEEP_OFF_WAKEUP_TIME);
   \   000002F8   0x4973             LDR      R1,??man_ope_mode_man_proc_27+0x4  ;; 0x2710
   \   000002FA   0x4876             LDR      R0,??man_ope_mode_man_proc_27+0x10  ;; 0x40100005
   \   000002FC   0x.... 0x....      BL       man_timer_cancel_wait
   1450          		}
   1451          		break;
   1452          	}
   1453          
   1454          
   1455          	// SLEEP状態で無い場合
   1456          	if (mode_info->mode_sleep == MAN_OPE_SLEEP_IDLE) {
   \                     ??man_ope_mode_man_proc_41: (+1)
   \                     ??man_ope_mode_man_proc_24: (+1)
   \   00000300   0x7A20             LDRB     R0,[R4, #+8]
   \   00000302   0x2800             CMP      R0,#+0
   \   00000304   0xD001             BEQ      .+6
   \   00000306   0xF000 0xFE13      BL       ??man_ope_mode_man_proc_42
   1457          #ifdef ADLINK_DEBUG_MESSAGE
   1458                    if(mode_info->mode_seq != pre_man_ope_seq_mode)
   1459                    {
   1460                       int splen = sprintf(print_buf,"MAN_OPE_SLEEP_IDLE:%s\n\r",man_ope_seq_mode_def_str[mode_info->mode_seq]);
   1461                       sysmgr_log_usb(print_buf,splen);
   1462                       pre_man_ope_seq_mode = mode_info->mode_seq;
   1463                    }                  
   1464          #endif
   1465          
   1466          		// 動作シーケンスを管理する
   1467          		switch (mode_info->mode_seq) {
   \   0000030A   0x79E0             LDRB     R0,[R4, #+7]
   \   0000030C   0x1E80             SUBS     R0,R0,#+2
   \   0000030E   0xD100             BNE      .+4
   \   00000310   0xE0E2             B        ??man_ope_mode_man_proc_43
   \   00000312   0x1E40             SUBS     R0,R0,#+1
   \   00000314   0xD100             BNE      .+4
   \   00000316   0xE0F4             B        ??man_ope_mode_man_proc_44
   \   00000318   0x1E40             SUBS     R0,R0,#+1
   \   0000031A   0xD100             BNE      .+4
   \   0000031C   0xE109             B        ??man_ope_mode_man_proc_45
   \   0000031E   0x1E40             SUBS     R0,R0,#+1
   \   00000320   0xD100             BNE      .+4
   \   00000322   0xE10D             B        ??man_ope_mode_man_proc_46
   \   00000324   0x1E40             SUBS     R0,R0,#+1
   \   00000326   0xD100             BNE      .+4
   \   00000328   0xE101             B        ??man_ope_mode_man_proc_47
   \   0000032A   0x1E40             SUBS     R0,R0,#+1
   \   0000032C   0xD100             BNE      .+4
   \   0000032E   0xE110             B        ??man_ope_mode_man_proc_48
   \   00000330   0x1E40             SUBS     R0,R0,#+1
   \   00000332   0xD100             BNE      .+4
   \   00000334   0xE143             B        ??man_ope_mode_man_proc_49
   \   00000336   0x1E40             SUBS     R0,R0,#+1
   \   00000338   0xD100             BNE      .+4
   \   0000033A   0xE16B             B        ??man_ope_mode_man_proc_50
   \   0000033C   0x1E40             SUBS     R0,R0,#+1
   \   0000033E   0xD100             BNE      .+4
   \   00000340   0xE171             B        ??man_ope_mode_man_proc_51
   \   00000342   0x1E40             SUBS     R0,R0,#+1
   \   00000344   0xD100             BNE      .+4
   \   00000346   0xE176             B        ??man_ope_mode_man_proc_52
   \   00000348   0x1E40             SUBS     R0,R0,#+1
   \   0000034A   0xD100             BNE      .+4
   \   0000034C   0xE184             B        ??man_ope_mode_man_proc_53
   \   0000034E   0x1E40             SUBS     R0,R0,#+1
   \   00000350   0xD100             BNE      .+4
   \   00000352   0xE18A             B        ??man_ope_mode_man_proc_54
   \   00000354   0x1E40             SUBS     R0,R0,#+1
   \   00000356   0xD100             BNE      .+4
   \   00000358   0xE1B2             B        ??man_ope_mode_man_proc_55
   \   0000035A   0x1E40             SUBS     R0,R0,#+1
   \   0000035C   0xD100             BNE      .+4
   \   0000035E   0xE1C1             B        ??man_ope_mode_man_proc_56
   \   00000360   0x1E40             SUBS     R0,R0,#+1
   \   00000362   0xD100             BNE      .+4
   \   00000364   0xE1CF             B        ??man_ope_mode_man_proc_57
   \   00000366   0x1E40             SUBS     R0,R0,#+1
   \   00000368   0xD100             BNE      .+4
   \   0000036A   0xE1D5             B        ??man_ope_mode_man_proc_58
   \   0000036C   0x1E40             SUBS     R0,R0,#+1
   \   0000036E   0xD100             BNE      .+4
   \   00000370   0xE1E9             B        ??man_ope_mode_man_proc_59
   \   00000372   0x1E40             SUBS     R0,R0,#+1
   \   00000374   0xD100             BNE      .+4
   \   00000376   0xE20D             B        ??man_ope_mode_man_proc_60
   \   00000378   0x1E40             SUBS     R0,R0,#+1
   \   0000037A   0xD100             BNE      .+4
   \   0000037C   0xE212             B        ??man_ope_mode_man_proc_61
   \   0000037E   0x1E40             SUBS     R0,R0,#+1
   \   00000380   0xD100             BNE      .+4
   \   00000382   0xE245             B        ??man_ope_mode_man_proc_62
   \   00000384   0x1E40             SUBS     R0,R0,#+1
   \   00000386   0xD100             BNE      .+4
   \   00000388   0xE274             B        ??man_ope_mode_man_proc_63
   \   0000038A   0x1E40             SUBS     R0,R0,#+1
   \   0000038C   0xD100             BNE      .+4
   \   0000038E   0xE272             B        ??man_ope_mode_man_proc_64
   \   00000390   0x1E80             SUBS     R0,R0,#+2
   \   00000392   0xD100             BNE      .+4
   \   00000394   0xE25C             B        ??man_ope_mode_man_proc_65
   \   00000396   0x1E40             SUBS     R0,R0,#+1
   \   00000398   0xD100             BNE      .+4
   \   0000039A   0xE260             B        ??man_ope_mode_man_proc_66
   \   0000039C   0x1E40             SUBS     R0,R0,#+1
   \   0000039E   0xD100             BNE      .+4
   \   000003A0   0xE267             B        ??man_ope_mode_man_proc_67
   \   000003A2   0x1E40             SUBS     R0,R0,#+1
   \   000003A4   0xD100             BNE      .+4
   \   000003A6   0xE270             B        ??man_ope_mode_man_proc_68
   \   000003A8   0x1E40             SUBS     R0,R0,#+1
   \   000003AA   0xD100             BNE      .+4
   \   000003AC   0xE277             B        ??man_ope_mode_man_proc_69
   \   000003AE   0x1E40             SUBS     R0,R0,#+1
   \   000003B0   0xD100             BNE      .+4
   \   000003B2   0xE2A9             B        ??man_ope_mode_man_proc_70
   \   000003B4   0x1E40             SUBS     R0,R0,#+1
   \   000003B6   0xD100             BNE      .+4
   \   000003B8   0xE2BB             B        ??man_ope_mode_man_proc_71
   \   000003BA   0x1E40             SUBS     R0,R0,#+1
   \   000003BC   0xD100             BNE      .+4
   \   000003BE   0xE2B9             B        ??man_ope_mode_man_proc_72
   \   000003C0   0x1E80             SUBS     R0,R0,#+2
   \   000003C2   0xD100             BNE      .+4
   \   000003C4   0xE2DB             B        ??man_ope_mode_man_proc_73
   \   000003C6   0x1E40             SUBS     R0,R0,#+1
   \   000003C8   0xD100             BNE      .+4
   \   000003CA   0xE2DE             B        ??man_ope_mode_man_proc_74
   \   000003CC   0x1E40             SUBS     R0,R0,#+1
   \   000003CE   0xD100             BNE      .+4
   \   000003D0   0xE2E2             B        ??man_ope_mode_man_proc_75
   \   000003D2   0x1E40             SUBS     R0,R0,#+1
   \   000003D4   0xD100             BNE      .+4
   \   000003D6   0xE2E3             B        ??man_ope_mode_man_proc_76
   \   000003D8   0x1E40             SUBS     R0,R0,#+1
   \   000003DA   0xD100             BNE      .+4
   \   000003DC   0xE2E5             B        ??man_ope_mode_man_proc_77
   \   000003DE   0x1E40             SUBS     R0,R0,#+1
   \   000003E0   0xD100             BNE      .+4
   \   000003E2   0xE2E8             B        ??man_ope_mode_man_proc_78
   \   000003E4   0x1E40             SUBS     R0,R0,#+1
   \   000003E6   0xD100             BNE      .+4
   \   000003E8   0xE309             B        ??man_ope_mode_man_proc_79
   \   000003EA   0x1E40             SUBS     R0,R0,#+1
   \   000003EC   0xD100             BNE      .+4
   \   000003EE   0xE30A             B        ??man_ope_mode_man_proc_80
   \   000003F0   0x1E40             SUBS     R0,R0,#+1
   \   000003F2   0xD100             BNE      .+4
   \   000003F4   0xE30C             B        ??man_ope_mode_man_proc_81
   \   000003F6   0x1E40             SUBS     R0,R0,#+1
   \   000003F8   0xD100             BNE      .+4
   \   000003FA   0xE317             B        ??man_ope_mode_man_proc_82
   \   000003FC   0x1E40             SUBS     R0,R0,#+1
   \   000003FE   0xD100             BNE      .+4
   \   00000400   0xE33C             B        ??man_ope_mode_man_proc_83
   \   00000402   0x1E40             SUBS     R0,R0,#+1
   \   00000404   0x2801             CMP      R0,#+1
   \   00000406   0xD800             BHI      .+4
   \   00000408   0xE38C             B        ??man_ope_mode_man_proc_84
   \   0000040A   0x1E80             SUBS     R0,R0,#+2
   \   0000040C   0xD100             BNE      .+4
   \   0000040E   0xE39F             B        ??man_ope_mode_man_proc_85
   \   00000410   0x1E40             SUBS     R0,R0,#+1
   \   00000412   0xD100             BNE      .+4
   \   00000414   0xE3C2             B        ??man_ope_mode_man_proc_86
   \   00000416   0x1E40             SUBS     R0,R0,#+1
   \   00000418   0xD100             BNE      .+4
   \   0000041A   0xE3C0             B        ??man_ope_mode_man_proc_87
   \   0000041C   0x1E40             SUBS     R0,R0,#+1
   \   0000041E   0xD100             BNE      .+4
   \   00000420   0xE3C8             B        ??man_ope_mode_man_proc_88
   \   00000422   0x1E40             SUBS     R0,R0,#+1
   \   00000424   0xD100             BNE      .+4
   \   00000426   0xE3C9             B        ??man_ope_mode_man_proc_89
   \   00000428   0x1E40             SUBS     R0,R0,#+1
   \   0000042A   0xD100             BNE      .+4
   \   0000042C   0xE3D7             B        ??man_ope_mode_man_proc_90
   \   0000042E   0x1E40             SUBS     R0,R0,#+1
   \   00000430   0xD100             BNE      .+4
   \   00000432   0xE3DB             B        ??man_ope_mode_man_proc_91
   \   00000434   0x1E40             SUBS     R0,R0,#+1
   \   00000436   0xD100             BNE      .+4
   \   00000438   0xE3F2             B        ??man_ope_mode_man_proc_92
   \   0000043A   0x1E40             SUBS     R0,R0,#+1
   \   0000043C   0xD100             BNE      .+4
   \   0000043E   0xE3F6             B        ??man_ope_mode_man_proc_93
   \   00000440   0x1E40             SUBS     R0,R0,#+1
   \   00000442   0xD101             BNE      .+6
   \   00000444   0xF000 0xFC0B      BL       ??man_ope_mode_man_proc_94
   \   00000448   0x1E40             SUBS     R0,R0,#+1
   \   0000044A   0xD101             BNE      .+6
   \   0000044C   0xF000 0xFC20      BL       ??man_ope_mode_man_proc_95
   \   00000450   0x1E40             SUBS     R0,R0,#+1
   \   00000452   0xD101             BNE      .+6
   \   00000454   0xF000 0xFC23      BL       ??man_ope_mode_man_proc_96
   \   00000458   0x1E40             SUBS     R0,R0,#+1
   \   0000045A   0xD101             BNE      .+6
   \   0000045C   0xF000 0xFC25      BL       ??man_ope_mode_man_proc_97
   \   00000460   0x1E40             SUBS     R0,R0,#+1
   \   00000462   0xD101             BNE      .+6
   \   00000464   0xF000 0xFC5F      BL       ??man_ope_mode_man_proc_98
   \   00000468   0x1E40             SUBS     R0,R0,#+1
   \   0000046A   0xD101             BNE      .+6
   \   0000046C   0xF000 0xFCEE      BL       ??man_ope_mode_man_proc_99
   \   00000470   0x1E40             SUBS     R0,R0,#+1
   \   00000472   0xD101             BNE      .+6
   \   00000474   0xF000 0xFCF4      BL       ??man_ope_mode_man_proc_100
   \   00000478   0x1E40             SUBS     R0,R0,#+1
   \   0000047A   0xD101             BNE      .+6
   \   0000047C   0xF000 0xFCF7      BL       ??man_ope_mode_man_proc_101
   \   00000480   0x1E40             SUBS     R0,R0,#+1
   \   00000482   0xD101             BNE      .+6
   \   00000484   0xF000 0xFD03      BL       ??man_ope_mode_man_proc_102
   \   00000488   0x1E40             SUBS     R0,R0,#+1
   \   0000048A   0xD101             BNE      .+6
   \   0000048C   0xF000 0xFD09      BL       ??man_ope_mode_man_proc_103
   \   00000490   0x1E40             SUBS     R0,R0,#+1
   \   00000492   0xD101             BNE      .+6
   \   00000494   0xF000 0xFD0F      BL       ??man_ope_mode_man_proc_104
   \   00000498   0x1E40             SUBS     R0,R0,#+1
   \   0000049A   0xD101             BNE      .+6
   \   0000049C   0xF000 0xFD11      BL       ??man_ope_mode_man_proc_105
   \   000004A0   0x1E40             SUBS     R0,R0,#+1
   \   000004A2   0xD101             BNE      .+6
   \   000004A4   0xF000 0xFD17      BL       ??man_ope_mode_man_proc_106
   \   000004A8   0x1E40             SUBS     R0,R0,#+1
   \   000004AA   0xD101             BNE      .+6
   \   000004AC   0xF000 0xFD21      BL       ??man_ope_mode_man_proc_107
   \   000004B0   0x1E40             SUBS     R0,R0,#+1
   \   000004B2   0xD101             BNE      .+6
   \   000004B4   0xF000 0xFD23      BL       ??man_ope_mode_man_proc_108
   \   000004B8   0x1E40             SUBS     R0,R0,#+1
   \   000004BA   0xD101             BNE      .+6
   \   000004BC   0xF000 0xFD25      BL       ??man_ope_mode_man_proc_109
   \   000004C0   0xF000 0xFD36      BL       ??man_ope_mode_man_proc_110
   \                     ??man_ope_mode_man_proc_27:
   \   000004C4   0x........         DC32     man_ope_sleep_callback
   \   000004C8   0x00002710         DC32     0x2710
   \   000004CC   0x40100002         DC32     0x40100002
   \   000004D0   0x........         DC32     man_ope_work+0x74
   \   000004D4   0x40100005         DC32     0x40100005
   1468          
   1469          
   1470          		// ******************************************************
   1471          		// 通常電源ON開始
   1472          		// ******************************************************
   1473          		case MAN_OPE_SEQ_NORMAL_ON_REQ:
   1474          
   1475          			// 開始前処理
   1476          			switch (mode_info->end_proc) {
   \                     ??man_ope_mode_man_proc_43: (+1)
   \   000004D8   0x7AA0             LDRB     R0,[R4, #+10]
   \   000004DA   0x2800             CMP      R0,#+0
   \   000004DC   0xD002             BEQ      ??man_ope_mode_man_proc_111
   \   000004DE   0x2804             CMP      R0,#+4
   \   000004E0   0xD001             BEQ      ??man_ope_mode_man_proc_112
   \   000004E2   0xE003             B        ??man_ope_mode_man_proc_113
   1477          			case MAN_OPE_END_PROC_NON:
   1478          				break;
   \                     ??man_ope_mode_man_proc_111: (+1)
   \   000004E4   0xE002             B        ??man_ope_mode_man_proc_114
   1479          			case MAN_OPE_START_PROC_DIR2:
   1480          				man_rpt_req_send_stop();			// UDPの出力を停止する
   \                     ??man_ope_mode_man_proc_112: (+1)
   \   000004E6   0x.... 0x....      BL       man_rpt_req_send_stop
   1481          				break;
   \   000004EA   0xE7FF             B        ??man_ope_mode_man_proc_114
   1482          			default:
   1483          				break;
   1484          			}
   1485          
   1486          			// 気温・気圧・高度計 ON
   1487          			man_press_on();
   \                     ??man_ope_mode_man_proc_113: (+1)
   \                     ??man_ope_mode_man_proc_114: (+1)
   \   000004EC   0x.... 0x....      BL       man_press_on
   1488          			// 加速度・角速度計 ON
   1489          			man_gyro_on();
   \   000004F0   0x.... 0x....      BL       man_gyro_on
   1490          			// GPS使用開始
   1491          			man_gps_req_open();
   \   000004F4   0x.... 0x....      BL       man_gps_req_open
   1492          			man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_GPS_ON);
   \   000004F8   0x2003             MOVS     R0,#+3
   \   000004FA   0x.... 0x....      BL       man_ope_set_mode_seq
   1493          			break;
   \   000004FE   0xF000 0xFD17      BL       ??man_ope_mode_man_proc_42
   1494          
   1495          		case MAN_OPE_SEQ_NORMAL_ON_GPS_ON:
   1496          			// GPSがOPEN状態になるのを待つ
   1497          			if (mode_info->gps_state == MAN_GPS_NOTI_NOW_OPEN) {
   \                     ??man_ope_mode_man_proc_44: (+1)
   \   00000502   0x6BA0             LDR      R0,[R4, #+56]
   \   00000504   0x2802             CMP      R0,#+2
   \   00000506   0xD103             BNE      ??man_ope_mode_man_proc_115
   1498          				// GPS OPEN後の処理へ移行
   1499          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_GPS_ON_OK);
   \   00000508   0x2004             MOVS     R0,#+4
   \   0000050A   0x.... 0x....      BL       man_ope_set_mode_seq
   \   0000050E   0xE00C             B        ??man_ope_mode_man_proc_116
   1500          			}
   1501          			// リトライ中
   1502          			else if (mode_info->gps_state == MAN_GPS_NOTI_TO_OPEN_RETRY) {
   \                     ??man_ope_mode_man_proc_115: (+1)
   \   00000510   0x6BA0             LDR      R0,[R4, #+56]
   \   00000512   0x2806             CMP      R0,#+6
   \   00000514   0xD103             BNE      ??man_ope_mode_man_proc_117
   1503          				// GPS OPEN後の処理へ移行
   1504          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_GPS_ON_OK);
   \   00000516   0x2004             MOVS     R0,#+4
   \   00000518   0x.... 0x....      BL       man_ope_set_mode_seq
   \   0000051C   0xE005             B        ??man_ope_mode_man_proc_116
   1505          			}
   1506          			// GPSがOPENに失敗
   1507          			else if (mode_info->gps_state == MAN_GPS_NOTI_OPEN_ERROR) {
   \                     ??man_ope_mode_man_proc_117: (+1)
   \   0000051E   0x6BA0             LDR      R0,[R4, #+56]
   \   00000520   0x2807             CMP      R0,#+7
   \   00000522   0xD102             BNE      ??man_ope_mode_man_proc_116
   1508          				// GPS OPEN後の処理へ移行
   1509          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_GPS_ON_OK);
   \   00000524   0x2004             MOVS     R0,#+4
   \   00000526   0x.... 0x....      BL       man_ope_set_mode_seq
   1510          			}
   1511          			break;
   \                     ??man_ope_mode_man_proc_116: (+1)
   \   0000052A   0xF000 0xFD01      BL       ??man_ope_mode_man_proc_42
   1512          		case MAN_OPE_SEQ_NORMAL_ON_GPS_OTA:
   1513          			break;
   \                     ??man_ope_mode_man_proc_47: (+1)
   \   0000052E   0xF000 0xFCFF      BL       ??man_ope_mode_man_proc_42
   1514          		case MAN_OPE_SEQ_NORMAL_ON_GPS_ON_OK:
   1515          			man_net_req_open();
   \                     ??man_ope_mode_man_proc_45: (+1)
   \   00000532   0x.... 0x....      BL       man_net_req_open
   1516          			man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_NET_ON);
   \   00000536   0x2007             MOVS     R0,#+7
   \   00000538   0x.... 0x....      BL       man_ope_set_mode_seq
   1517          			break;
   \   0000053C   0xF000 0xFCF8      BL       ??man_ope_mode_man_proc_42
   1518          		case MAN_OPE_SEQ_NORMAL_ON_GPS_ON_NG:
   1519          			if (mode_info->proc_mode == MAN_OPE_PROC_MODE_OTA) {
   \                     ??man_ope_mode_man_proc_46: (+1)
   \   00000540   0x79A0             LDRB     R0,[R4, #+6]
   \   00000542   0x2801             CMP      R0,#+1
   \   00000544   0xD103             BNE      ??man_ope_mode_man_proc_118
   1520          				man_ope_return_callback(MAN_OPE_STATUS_NG);
   \   00000546   0x2000             MOVS     R0,#+0
   \   00000548   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000054A   0x.... 0x....      BL       man_ope_return_callback
   1521          			}
   1522          			break;
   \                     ??man_ope_mode_man_proc_118: (+1)
   \   0000054E   0xF000 0xFCEF      BL       ??man_ope_mode_man_proc_42
   1523          
   1524          
   1525          		case MAN_OPE_SEQ_NORMAL_ON_NET_ON:
   1526          			// NETがOPEN状態になるのを待つ
   1527          			if (mode_info->net_state == MAN_NET_NOTI_NOW_OPEN) {
   \                     ??man_ope_mode_man_proc_48: (+1)
   \   00000552   0x6B60             LDR      R0,[R4, #+52]
   \   00000554   0x2803             CMP      R0,#+3
   \   00000556   0xD103             BNE      ??man_ope_mode_man_proc_119
   1528          				// NET OPEN後の処理へ移行
   1529          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_NET_ON_OK);
   \   00000558   0x2008             MOVS     R0,#+8
   \   0000055A   0x.... 0x....      BL       man_ope_set_mode_seq
   \   0000055E   0xE02C             B        ??man_ope_mode_man_proc_120
   1530          			}
   1531          			
   1532          			// 60秒経過しても圏外の場合はNET OPEN後の処理へ移行
   1533          			else if (mode_info->net_state == MAN_NET_NOTI_TO_NET_OPEN) {
   \                     ??man_ope_mode_man_proc_119: (+1)
   \   00000560   0x6B60             LDR      R0,[R4, #+52]
   \   00000562   0x2802             CMP      R0,#+2
   \   00000564   0xD119             BNE      ??man_ope_mode_man_proc_121
   1534          				// RTC取得済みの場合
   1535          				if ( (man_rtc_get_status() != MAN_RTC_STS_INIT) && (man_rtc_get_status() != MAN_RTC_STS_LTE_NG) ) {
   \   00000566   0x.... 0x....      BL       man_rtc_get_status
   \   0000056A   0x2800             CMP      R0,#+0
   \   0000056C   0xD025             BEQ      ??man_ope_mode_man_proc_120
   \   0000056E   0x.... 0x....      BL       man_rtc_get_status
   \   00000572   0x2802             CMP      R0,#+2
   \   00000574   0xD021             BEQ      ??man_ope_mode_man_proc_120
   1536          					// 圏外の場合
   1537          					if (sensor_info->rssi_sts == MAN_DATA_RSSI_STS_NG) {
   \   00000576   0x48B3             LDR      R0,??man_ope_mode_man_proc_122  ;; 0xbd8
   \   00000578   0x5C28             LDRB     R0,[R5, R0]
   \   0000057A   0x2800             CMP      R0,#+0
   \   0000057C   0xD11D             BNE      ??man_ope_mode_man_proc_120
   1538          						delay_timer = man_timer_get_elapsed_time(man_ope_work.delay_timer, man_timer_get_1ms_count());
   \   0000057E   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000582   0x0001             MOVS     R1,R0
   \   00000584   0x48B0             LDR      R0,??man_ope_mode_man_proc_122+0x4
   \   00000586   0x6940             LDR      R0,[R0, #+20]
   \   00000588   0x.... 0x....      BL       man_timer_get_elapsed_time
   1539          						// 60秒経過した場合
   1540          						if (delay_timer >= MAN_OPE_RSSI_NG_DELAY_TIMER) {
   \   0000058C   0x49AF             LDR      R1,??man_ope_mode_man_proc_122+0x8  ;; 0xea60
   \   0000058E   0x4288             CMP      R0,R1
   \   00000590   0xD313             BCC      ??man_ope_mode_man_proc_120
   1541          							// NET OPEN後の処理へ移行
   1542          							man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_NET_ON_OK);
   \   00000592   0x2008             MOVS     R0,#+8
   \   00000594   0x.... 0x....      BL       man_ope_set_mode_seq
   \   00000598   0xE00F             B        ??man_ope_mode_man_proc_120
   1543          						}
   1544          					}
   1545          				}
   1546          			}
   1547          			
   1548          			// NETがリトライ中の場合、操作スイッチの変化に対応する
   1549          			else if (mode_info->net_state == MAN_NET_NOTI_TO_OPEN_RETRY) {
   \                     ??man_ope_mode_man_proc_121: (+1)
   \   0000059A   0x6B60             LDR      R0,[R4, #+52]
   \   0000059C   0x2807             CMP      R0,#+7
   \   0000059E   0xD10C             BNE      ??man_ope_mode_man_proc_120
   1550          				// 
   1551          				if (mode_info->next_mode != mode_info->gole_mode) {
   \   000005A0   0x7860             LDRB     R0,[R4, #+1]
   \   000005A2   0x78A1             LDRB     R1,[R4, #+2]
   \   000005A4   0x4288             CMP      R0,R1
   \   000005A6   0xD008             BEQ      ??man_ope_mode_man_proc_120
   1552          					// OFFモード, DIRECTモード時はNET OFFのため、モードを切り替える
   1553          					if ( (mode_info->gole_mode == MAN_OPE_MODE_OFF) || (mode_info->gole_mode == MAN_OPE_MODE_DIRECT) ) {
   \   000005A8   0x78A0             LDRB     R0,[R4, #+2]
   \   000005AA   0x2801             CMP      R0,#+1
   \   000005AC   0xD002             BEQ      ??man_ope_mode_man_proc_123
   \   000005AE   0x78A0             LDRB     R0,[R4, #+2]
   \   000005B0   0x2804             CMP      R0,#+4
   \   000005B2   0xD102             BNE      ??man_ope_mode_man_proc_120
   1554          						// NET OPEN後の処理へ移行
   1555          						man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_NET_ON_OK);
   \                     ??man_ope_mode_man_proc_123: (+1)
   \   000005B4   0x2008             MOVS     R0,#+8
   \   000005B6   0x.... 0x....      BL       man_ope_set_mode_seq
   1556          					}
   1557          				}
   1558          			}
   1559          			break;
   \                     ??man_ope_mode_man_proc_120: (+1)
   \   000005BA   0xF000 0xFCB9      BL       ??man_ope_mode_man_proc_42
   1560          
   1561          		case MAN_OPE_SEQ_NORMAL_ON_NET_ON_OK:
   1562          			switch (mode_info->end_proc) {
   \                     ??man_ope_mode_man_proc_49: (+1)
   \   000005BE   0x7AA0             LDRB     R0,[R4, #+10]
   \   000005C0   0x2800             CMP      R0,#+0
   \   000005C2   0xD003             BEQ      ??man_ope_mode_man_proc_124
   \   000005C4   0x2802             CMP      R0,#+2
   \   000005C6   0xD00C             BEQ      ??man_ope_mode_man_proc_125
   \   000005C8   0xD301             BCC      ??man_ope_mode_man_proc_126
   \   000005CA   0xE014             B        ??man_ope_mode_man_proc_127
   1563          			case MAN_OPE_END_PROC_NON:
   1564          				break;
   \                     ??man_ope_mode_man_proc_124: (+1)
   \   000005CC   0xE013             B        ??man_ope_mode_man_proc_128
   1565          			case MAN_OPE_END_PROC_EXT_ON1:
   1566          				man_msg_set_type(MAN_MSG_TYPE_SW_ON);			// 端末スイッチをON
   \                     ??man_ope_mode_man_proc_126: (+1)
   \   000005CE   0x201F             MOVS     R0,#+31
   \   000005D0   0x.... 0x....      BL       man_msg_set_type
   1567          				man_msg_set_type(MAN_MSG_TYPE_EXT_IN);
   \   000005D4   0x2022             MOVS     R0,#+34
   \   000005D6   0x.... 0x....      BL       man_msg_set_type
   1568          				man_ope_set_switch_pos(MAN_OPE_SWITCH_EXT_ON);	// EXT POWER : EXT ON状態
   \   000005DA   0x2001             MOVS     R0,#+1
   \   000005DC   0x.... 0x....      BL       man_ope_set_switch_pos
   1569          				break;
   \   000005E0   0xE009             B        ??man_ope_mode_man_proc_128
   1570          			case MAN_OPE_END_PROC_BATT1:
   1571          				man_msg_set_type(MAN_MSG_TYPE_SW_ON);			// 端末スイッチをON
   \                     ??man_ope_mode_man_proc_125: (+1)
   \   000005E2   0x201F             MOVS     R0,#+31
   \   000005E4   0x.... 0x....      BL       man_msg_set_type
   1572          				man_msg_set_type(MAN_MSG_TYPE_BAT_IN);			// 内部バッテリモードIN
   \   000005E8   0x2035             MOVS     R0,#+53
   \   000005EA   0x.... 0x....      BL       man_msg_set_type
   1573          				man_ope_set_switch_pos(MAN_OPE_SWITCH_BATTERY);	// BATTERY状態
   \   000005EE   0x2005             MOVS     R0,#+5
   \   000005F0   0x.... 0x....      BL       man_ope_set_switch_pos
   1574          				break;
   \   000005F4   0xE7FF             B        ??man_ope_mode_man_proc_128
   1575          			default:
   1576          				break;
   1577          			}
   1578          			
   1579          			mode_info->end_proc = MAN_OPE_END_PROC_NON;
   \                     ??man_ope_mode_man_proc_127: (+1)
   \                     ??man_ope_mode_man_proc_128: (+1)
   \   000005F6   0x2000             MOVS     R0,#+0
   \   000005F8   0x72A0             STRB     R0,[R4, #+10]
   1580          			man_ope_set_mode_seq(MAN_OPE_SEQ_IDLE);
   \   000005FA   0x2000             MOVS     R0,#+0
   \   000005FC   0x.... 0x....      BL       man_ope_set_mode_seq
   1581          			// 遷移完了
   1582          			mode_info->now_mode = mode_info->next_mode;
   \   00000600   0x7860             LDRB     R0,[R4, #+1]
   \   00000602   0x7020             STRB     R0,[R4, #+0]
   1583          
   1584          			// OTA時は応答を返す
   1585          			if (mode_info->proc_mode == MAN_OPE_PROC_MODE_OTA) {
   \   00000604   0x79A0             LDRB     R0,[R4, #+6]
   \   00000606   0x2801             CMP      R0,#+1
   \   00000608   0xD102             BNE      ??man_ope_mode_man_proc_129
   1586          				man_ope_return_callback(MAN_OPE_STATUS_OK);
   \   0000060A   0x2000             MOVS     R0,#+0
   \   0000060C   0x.... 0x....      BL       man_ope_return_callback
   1587          			}
   1588          
   1589          #ifdef GNSS_DEBUG_MAN_OPE 
   1590          			sprintf((char *)&man_ope_work.buff[0], "NOW MODE(%d)\n", mode_info->now_mode);
   1591          			length = strlen((char const *)&man_ope_work.buff[0]);
   1592          			man_usb_data_send(&man_ope_work.buff[0], length);
   1593          #endif
   1594          			break;
   \                     ??man_ope_mode_man_proc_129: (+1)
   \   00000610   0xF000 0xFC8E      BL       ??man_ope_mode_man_proc_42
   1595          		case MAN_OPE_SEQ_NORMAL_ON_NET_ON_NG:
   1596          			if (mode_info->proc_mode == MAN_OPE_PROC_MODE_OTA) {
   \                     ??man_ope_mode_man_proc_50: (+1)
   \   00000614   0x79A0             LDRB     R0,[R4, #+6]
   \   00000616   0x2801             CMP      R0,#+1
   \   00000618   0xD103             BNE      ??man_ope_mode_man_proc_130
   1597          				man_ope_return_callback(MAN_OPE_STATUS_NG);
   \   0000061A   0x2000             MOVS     R0,#+0
   \   0000061C   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000061E   0x.... 0x....      BL       man_ope_return_callback
   1598          			}
   1599          			break;
   \                     ??man_ope_mode_man_proc_130: (+1)
   \   00000622   0xF000 0xFC85      BL       ??man_ope_mode_man_proc_42
   1600          
   1601          		case MAN_OPE_SEQ_NORMAL_ON_NET_OFF:
   1602          			// NETがSTBY状態になるのを待つ
   1603          			if (mode_info->net_state == MAN_NET_NOTI_NOW_STBY) {
   \                     ??man_ope_mode_man_proc_51: (+1)
   \   00000626   0x6B60             LDR      R0,[R4, #+52]
   \   00000628   0x2806             CMP      R0,#+6
   \   0000062A   0xD102             BNE      ??man_ope_mode_man_proc_131
   1604          				// NET OFF後の処理へ移行
   1605          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_ON_NET_OFF_OK);
   \   0000062C   0x200B             MOVS     R0,#+11
   \   0000062E   0x.... 0x....      BL       man_ope_set_mode_seq
   1606          			}
   1607          			break;
   \                     ??man_ope_mode_man_proc_131: (+1)
   \   00000632   0xF000 0xFC7D      BL       ??man_ope_mode_man_proc_42
   1608          
   1609          		case MAN_OPE_SEQ_NORMAL_ON_NET_OFF_OK:
   1610          			// USBのレポート管理を開始
   1611          			man_rpt_req_usb_start();
   \                     ??man_ope_mode_man_proc_52: (+1)
   \   00000636   0x.... 0x....      BL       man_rpt_req_usb_start
   1612          			// USBのコマンド受付を開始
   1613          			man_usb_req_cmd_start();
   \   0000063A   0x.... 0x....      BL       man_usb_req_cmd_start
   1614          			// メッセージ登録停止
   1615          //			man_msg_req_send_stop();
   1616          
   1617          			man_ope_set_mode_seq(MAN_OPE_SEQ_IDLE);
   \   0000063E   0x2000             MOVS     R0,#+0
   \   00000640   0x.... 0x....      BL       man_ope_set_mode_seq
   1618          			// 遷移完了
   1619          			mode_info->now_mode = mode_info->next_mode;
   \   00000644   0x7860             LDRB     R0,[R4, #+1]
   \   00000646   0x7020             STRB     R0,[R4, #+0]
   1620          
   1621          			if (mode_info->proc_mode == MAN_OPE_PROC_MODE_OTA) {
   \   00000648   0x79A0             LDRB     R0,[R4, #+6]
   \   0000064A   0x2801             CMP      R0,#+1
   \   0000064C   0xD102             BNE      ??man_ope_mode_man_proc_132
   1622          				man_ope_return_callback(MAN_OPE_STATUS_OK);
   \   0000064E   0x2000             MOVS     R0,#+0
   \   00000650   0x.... 0x....      BL       man_ope_return_callback
   1623          			}
   1624          #ifdef GNSS_DEBUG_MAN_OPE 
   1625          			sprintf((char *)&man_ope_work.buff[0], "NOW MODE(%d)\n", mode_info->now_mode);
   1626          			length = strlen((char const *)&man_ope_work.buff[0]);
   1627          			man_usb_data_send(&man_ope_work.buff[0], length);
   1628          #endif
   1629          			break;
   \                     ??man_ope_mode_man_proc_132: (+1)
   \   00000654   0xF000 0xFC6C      BL       ??man_ope_mode_man_proc_42
   1630          
   1631          		case MAN_OPE_SEQ_NORMAL_ON_NET_OFF_NG:
   1632          			if (mode_info->proc_mode == MAN_OPE_PROC_MODE_OTA) {
   \                     ??man_ope_mode_man_proc_53: (+1)
   \   00000658   0x79A0             LDRB     R0,[R4, #+6]
   \   0000065A   0x2801             CMP      R0,#+1
   \   0000065C   0xD103             BNE      ??man_ope_mode_man_proc_133
   1633          				man_ope_return_callback(MAN_OPE_STATUS_NG);
   \   0000065E   0x2000             MOVS     R0,#+0
   \   00000660   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000662   0x.... 0x....      BL       man_ope_return_callback
   1634          			}
   1635          			break;
   \                     ??man_ope_mode_man_proc_133: (+1)
   \   00000666   0xF000 0xFC63      BL       ??man_ope_mode_man_proc_42
   1636          
   1637          
   1638          		// ******************************************************
   1639          		// 通常の電源OFF開始
   1640          		// ******************************************************
   1641          		case MAN_OPE_SEQ_NORMAL_OFF_REQ:
   1642          			// 前処理
   1643          			switch (mode_info->start_proc) {
   \                     ??man_ope_mode_man_proc_54: (+1)
   \   0000066A   0x7A60             LDRB     R0,[R4, #+9]
   \   0000066C   0x2800             CMP      R0,#+0
   \   0000066E   0xD003             BEQ      ??man_ope_mode_man_proc_134
   \   00000670   0x2802             CMP      R0,#+2
   \   00000672   0xD00C             BEQ      ??man_ope_mode_man_proc_135
   \   00000674   0xD301             BCC      ??man_ope_mode_man_proc_136
   \   00000676   0xE014             B        ??man_ope_mode_man_proc_137
   1644          			case MAN_OPE_START_PROC_NON:
   1645          				break;
   \                     ??man_ope_mode_man_proc_134: (+1)
   \   00000678   0xE013             B        ??man_ope_mode_man_proc_138
   1646          			case MAN_OPE_START_PROC_EXT_ON1:
   1647          				man_msg_set_type(MAN_MSG_TYPE_EXT_OUT);			// 外部電源供給が失われた
   \                     ??man_ope_mode_man_proc_136: (+1)
   \   0000067A   0x2021             MOVS     R0,#+33
   \   0000067C   0x.... 0x....      BL       man_msg_set_type
   1648          				man_msg_set_type(MAN_MSG_TYPE_SW_OFF);			// 端末スイッチをOFF
   \   00000680   0x2020             MOVS     R0,#+32
   \   00000682   0x.... 0x....      BL       man_msg_set_type
   1649          				man_ope_set_switch_pos(MAN_OPE_SWITCH_OFF);		// OFF状態
   \   00000686   0x2000             MOVS     R0,#+0
   \   00000688   0x.... 0x....      BL       man_ope_set_switch_pos
   1650          				break;
   \   0000068C   0xE009             B        ??man_ope_mode_man_proc_138
   1651          			case MAN_OPE_START_PROC_BATT1:
   1652          				man_msg_set_type(MAN_MSG_TYPE_BAT_OUT);			// 内部バッテリモードOUT
   \                     ??man_ope_mode_man_proc_135: (+1)
   \   0000068E   0x2036             MOVS     R0,#+54
   \   00000690   0x.... 0x....      BL       man_msg_set_type
   1653          				man_msg_set_type(MAN_MSG_TYPE_SW_OFF);			// 端末スイッチをOFF
   \   00000694   0x2020             MOVS     R0,#+32
   \   00000696   0x.... 0x....      BL       man_msg_set_type
   1654          				man_ope_set_switch_pos(MAN_OPE_SWITCH_OFF);		// OFF状態
   \   0000069A   0x2000             MOVS     R0,#+0
   \   0000069C   0x.... 0x....      BL       man_ope_set_switch_pos
   1655          				break;
   \   000006A0   0xE7FF             B        ??man_ope_mode_man_proc_138
   1656          			default:
   1657          				break;
   1658          			}
   1659          			mode_info->start_proc = MAN_OPE_START_PROC_NON;
   \                     ??man_ope_mode_man_proc_137: (+1)
   \                     ??man_ope_mode_man_proc_138: (+1)
   \   000006A2   0x2000             MOVS     R0,#+0
   \   000006A4   0x7260             STRB     R0,[R4, #+9]
   1660          			
   1661          			// NETWORKを停止する
   1662          			if (mode_info->proc_mode == MAN_OPE_PROC_MODE_OTA) {
   \   000006A6   0x79A0             LDRB     R0,[R4, #+6]
   \   000006A8   0x2801             CMP      R0,#+1
   \   000006AA   0xD102             BNE      ??man_ope_mode_man_proc_139
   1663          				// NET CLOSE要求
   1664          				man_net_req_close();
   \   000006AC   0x.... 0x....      BL       man_net_req_close
   \   000006B0   0xE001             B        ??man_ope_mode_man_proc_140
   1665          			}
   1666          			else {
   1667          				// NET OFF要求
   1668          				man_net_req_off();
   \                     ??man_ope_mode_man_proc_139: (+1)
   \   000006B2   0x.... 0x....      BL       man_net_req_off
   1669          			}
   1670          			man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_OFF_NET_OFF);
   \                     ??man_ope_mode_man_proc_140: (+1)
   \   000006B6   0x200E             MOVS     R0,#+14
   \   000006B8   0x.... 0x....      BL       man_ope_set_mode_seq
   1671          			break;
   \   000006BC   0xF000 0xFC38      BL       ??man_ope_mode_man_proc_42
   1672          
   1673          		case MAN_OPE_SEQ_NORMAL_OFF_NET_OFF:
   1674          			if (mode_info->proc_mode == MAN_OPE_PROC_MODE_OTA) {
   \                     ??man_ope_mode_man_proc_55: (+1)
   \   000006C0   0x79A0             LDRB     R0,[R4, #+6]
   \   000006C2   0x2801             CMP      R0,#+1
   \   000006C4   0xD106             BNE      ??man_ope_mode_man_proc_141
   1675          				// NETがCLOSE状態になるのを待つ
   1676          				if (mode_info->net_state == MAN_NET_NOTI_NOW_CLOSE) {
   \   000006C6   0x6B60             LDR      R0,[R4, #+52]
   \   000006C8   0x2800             CMP      R0,#+0
   \   000006CA   0xD109             BNE      ??man_ope_mode_man_proc_142
   1677          					// NET CLOSE後の処理へ移行
   1678          					man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_OFF_NET_OFF_OK);
   \   000006CC   0x200F             MOVS     R0,#+15
   \   000006CE   0x.... 0x....      BL       man_ope_set_mode_seq
   \   000006D2   0xE005             B        ??man_ope_mode_man_proc_142
   1679          				}
   1680          			}
   1681          			else {
   1682          				// NETがOFF状態になるのを待つ
   1683          				if (mode_info->net_state == MAN_NET_NOTI_NOW_OFF) {
   \                     ??man_ope_mode_man_proc_141: (+1)
   \   000006D4   0x6B60             LDR      R0,[R4, #+52]
   \   000006D6   0x2809             CMP      R0,#+9
   \   000006D8   0xD102             BNE      ??man_ope_mode_man_proc_142
   1684          					// NET OFF後の処理へ移行
   1685          					man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_OFF_NET_OFF_OK);
   \   000006DA   0x200F             MOVS     R0,#+15
   \   000006DC   0x.... 0x....      BL       man_ope_set_mode_seq
   1686          				}
   1687          			}
   1688          			break;
   \                     ??man_ope_mode_man_proc_142: (+1)
   \   000006E0   0xF000 0xFC26      BL       ??man_ope_mode_man_proc_42
   1689          
   1690          		case MAN_OPE_SEQ_NORMAL_OFF_NET_OFF_OK:
   1691          			// 気温・気圧・高度計 OFF
   1692          			man_press_off();
   \                     ??man_ope_mode_man_proc_56: (+1)
   \   000006E4   0x.... 0x....      BL       man_press_off
   1693          			// 加速度・角速度計 OFF
   1694          			man_gyro_off();
   \   000006E8   0x.... 0x....      BL       man_gyro_off
   1695          
   1696          			// GPSを停止する
   1697          			if (mode_info->proc_mode == MAN_OPE_PROC_MODE_OTA) {
   \   000006EC   0x79A0             LDRB     R0,[R4, #+6]
   \   000006EE   0x2801             CMP      R0,#+1
   \   000006F0   0xD102             BNE      ??man_ope_mode_man_proc_143
   1698          				// GPS停止
   1699          				man_gps_req_close();
   \   000006F2   0x.... 0x....      BL       man_gps_req_close
   \   000006F6   0xE001             B        ??man_ope_mode_man_proc_144
   1700          			}
   1701          			else {
   1702          				// GPS電源OFF
   1703          				man_gps_req_off();
   \                     ??man_ope_mode_man_proc_143: (+1)
   \   000006F8   0x.... 0x....      BL       man_gps_req_off
   1704          			}
   1705          			man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF);
   \                     ??man_ope_mode_man_proc_144: (+1)
   \   000006FC   0x2011             MOVS     R0,#+17
   \   000006FE   0x.... 0x....      BL       man_ope_set_mode_seq
   1706          			break;
   \   00000702   0xF000 0xFC15      BL       ??man_ope_mode_man_proc_42
   1707          		case MAN_OPE_SEQ_NORMAL_OFF_NET_OFF_NG:
   1708          			if (mode_info->proc_mode == MAN_OPE_PROC_MODE_OTA) {
   \                     ??man_ope_mode_man_proc_57: (+1)
   \   00000706   0x79A0             LDRB     R0,[R4, #+6]
   \   00000708   0x2801             CMP      R0,#+1
   \   0000070A   0xD103             BNE      ??man_ope_mode_man_proc_145
   1709          				man_ope_return_callback(MAN_OPE_STATUS_NG);
   \   0000070C   0x2000             MOVS     R0,#+0
   \   0000070E   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000710   0x.... 0x....      BL       man_ope_return_callback
   1710          			}
   1711          			break;
   \                     ??man_ope_mode_man_proc_145: (+1)
   \   00000714   0xF000 0xFC0C      BL       ??man_ope_mode_man_proc_42
   1712          
   1713          		case MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF:
   1714          			if (mode_info->proc_mode == MAN_OPE_PROC_MODE_OTA) {
   \                     ??man_ope_mode_man_proc_58: (+1)
   \   00000718   0x79A0             LDRB     R0,[R4, #+6]
   \   0000071A   0x2801             CMP      R0,#+1
   \   0000071C   0xD109             BNE      ??man_ope_mode_man_proc_146
   1715          				// GPSがCLOSE, OPEN異常状態になるのを待つ
   1716          				if ( (mode_info->gps_state == MAN_GPS_NOTI_NOW_CLOSE) || (mode_info->gps_state == MAN_GPS_NOTI_OPEN_ERROR) ) {
   \   0000071E   0x6BA0             LDR      R0,[R4, #+56]
   \   00000720   0x2800             CMP      R0,#+0
   \   00000722   0xD002             BEQ      ??man_ope_mode_man_proc_147
   \   00000724   0x6BA0             LDR      R0,[R4, #+56]
   \   00000726   0x2807             CMP      R0,#+7
   \   00000728   0xD10C             BNE      ??man_ope_mode_man_proc_148
   1717          					// GPS STBY後の処理へ移行
   1718          					man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF_OK);
   \                     ??man_ope_mode_man_proc_147: (+1)
   \   0000072A   0x2012             MOVS     R0,#+18
   \   0000072C   0x.... 0x....      BL       man_ope_set_mode_seq
   \   00000730   0xE008             B        ??man_ope_mode_man_proc_148
   1719          				}
   1720          			}
   1721          			else {
   1722          				// GPSがSTBY状態になるのを待つ
   1723          				if ( (mode_info->gps_state == MAN_GPS_NOTI_NOW_STBY) || (mode_info->gps_state == MAN_GPS_NOTI_OPEN_ERROR) ) {
   \                     ??man_ope_mode_man_proc_146: (+1)
   \   00000732   0x6BA0             LDR      R0,[R4, #+56]
   \   00000734   0x2805             CMP      R0,#+5
   \   00000736   0xD002             BEQ      ??man_ope_mode_man_proc_149
   \   00000738   0x6BA0             LDR      R0,[R4, #+56]
   \   0000073A   0x2807             CMP      R0,#+7
   \   0000073C   0xD102             BNE      ??man_ope_mode_man_proc_148
   1724          					// GPS STBY後の処理へ移行
   1725          					man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF_OK);
   \                     ??man_ope_mode_man_proc_149: (+1)
   \   0000073E   0x2012             MOVS     R0,#+18
   \   00000740   0x.... 0x....      BL       man_ope_set_mode_seq
   1726          				}
   1727          			}
   1728          			break;
   \                     ??man_ope_mode_man_proc_148: (+1)
   \   00000744   0xE3F4             B        ??man_ope_mode_man_proc_42
   1729          
   1730          		case MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF_OK:
   1731          			man_ope_set_mode_seq(MAN_OPE_SEQ_IDLE);
   \                     ??man_ope_mode_man_proc_59: (+1)
   \   00000746   0x2000             MOVS     R0,#+0
   \   00000748   0x.... 0x....      BL       man_ope_set_mode_seq
   1732          			// 遷移完了
   1733          			mode_info->now_mode = mode_info->next_mode;
   \   0000074C   0x7860             LDRB     R0,[R4, #+1]
   \   0000074E   0x7020             STRB     R0,[R4, #+0]
   1734          
   1735          #ifdef GNSS_DEBUG_MAN_OPE 
   1736          			sprintf((char *)&man_ope_work.buff[0], "NOW MODE(%d)\n", mode_info->now_mode);
   1737          			length = strlen((char const *)&man_ope_work.buff[0]);
   1738          			man_usb_data_send(&man_ope_work.buff[0], length);
   1739          #endif
   1740          
   1741          
   1742          			// 途中でスイッチが変更された場合は追従する。
   1743          			if (mode_info->gole_mode == MAN_OPE_MODE_OFF) {
   \   00000750   0x78A0             LDRB     R0,[R4, #+2]
   \   00000752   0x2801             CMP      R0,#+1
   \   00000754   0xD10D             BNE      ??man_ope_mode_man_proc_150
   1744          				// 外部電源OFF時はSLEEPモードに遷移
   1745                                    if ( (man_charge_expow_get() == MAN_CHARGE_EXTSTAT_OFF) && (man_charge_expow_usb_get() ==  MAN_CHARGE_EXTSTAT_OFF) ) {
   \   00000756   0x.... 0x....      BL       man_charge_expow_get
   \   0000075A   0x2800             CMP      R0,#+0
   \   0000075C   0xD106             BNE      ??man_ope_mode_man_proc_151
   \   0000075E   0x.... 0x....      BL       man_charge_expow_usb_get
   \   00000762   0x2800             CMP      R0,#+0
   \   00000764   0xD102             BNE      ??man_ope_mode_man_proc_151
   1746                                      mode_info->mode_sleep = MAN_OPE_SLEEP_OFF_REQ;
   \   00000766   0x2001             MOVS     R0,#+1
   \   00000768   0x7220             STRB     R0,[R4, #+8]
   \   0000076A   0xE012             B        ??man_ope_mode_man_proc_152
   1747          				}
   1748          				// 外部電源ON時は充電を継続する
   1749          				else {
   1750          					mode_info->mode_sleep = MAN_OPE_SLEEP_OFF_EXTON;
   \                     ??man_ope_mode_man_proc_151: (+1)
   \   0000076C   0x2003             MOVS     R0,#+3
   \   0000076E   0x7220             STRB     R0,[R4, #+8]
   \   00000770   0xE00F             B        ??man_ope_mode_man_proc_152
   1751          				}
   1752          			}
   1753          			else {
   1754          				// 後処理
   1755          				switch (mode_info->end_proc) {
   \                     ??man_ope_mode_man_proc_150: (+1)
   \   00000772   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000774   0x2800             CMP      R0,#+0
   \   00000776   0xD004             BEQ      ??man_ope_mode_man_proc_153
   \   00000778   0x2805             CMP      R0,#+5
   \   0000077A   0xD003             BEQ      ??man_ope_mode_man_proc_154
   \   0000077C   0x2806             CMP      R0,#+6
   \   0000077E   0xD004             BEQ      ??man_ope_mode_man_proc_155
   \   00000780   0xE007             B        ??man_ope_mode_man_proc_156
   1756          				case MAN_OPE_END_PROC_NON:
   1757          					break;
   \                     ??man_ope_mode_man_proc_153: (+1)
   \   00000782   0xE006             B        ??man_ope_mode_man_proc_152
   1758          				case MAN_OPE_END_PROC_RESET:
   1759          					wdt_reset();
   \                     ??man_ope_mode_man_proc_154: (+1)
   \   00000784   0x.... 0x....      BL       wdt_reset
   1760          					break;
   \   00000788   0xE003             B        ??man_ope_mode_man_proc_152
   1761          				case MAN_OPE_END_PROC_CALLBACK:
   1762          					man_ope_return_callback(MAN_OPE_STATUS_OK);
   \                     ??man_ope_mode_man_proc_155: (+1)
   \   0000078A   0x2000             MOVS     R0,#+0
   \   0000078C   0x.... 0x....      BL       man_ope_return_callback
   1763          					break;
   \   00000790   0xE7FF             B        ??man_ope_mode_man_proc_152
   1764          				default:
   1765          					break;
   1766          				}
   1767          			}
   1768          			break;
   \                     ??man_ope_mode_man_proc_156: (+1)
   \                     ??man_ope_mode_man_proc_152: (+1)
   \   00000792   0xE3CD             B        ??man_ope_mode_man_proc_42
   1769          		case MAN_OPE_SEQ_NORMAL_OFF_GPS_OFF_NG:
   1770          			if (mode_info->proc_mode == MAN_OPE_PROC_MODE_OTA) {
   \                     ??man_ope_mode_man_proc_60: (+1)
   \   00000794   0x79A0             LDRB     R0,[R4, #+6]
   \   00000796   0x2801             CMP      R0,#+1
   \   00000798   0xD103             BNE      ??man_ope_mode_man_proc_157
   1771          				man_ope_return_callback(MAN_OPE_STATUS_NG);
   \   0000079A   0x2000             MOVS     R0,#+0
   \   0000079C   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000079E   0x.... 0x....      BL       man_ope_return_callback
   1772          			}
   1773          			break;
   \                     ??man_ope_mode_man_proc_157: (+1)
   \   000007A2   0xE3C5             B        ??man_ope_mode_man_proc_42
   1774          
   1775          
   1776          		// ******************************************************
   1777          		// 通常USB使用開始
   1778          		// ******************************************************
   1779          		case MAN_OPE_SEQ_NORMAL_USBON_REQ:
   1780          			// 前処理
   1781          			switch (mode_info->start_proc) {
   \                     ??man_ope_mode_man_proc_61: (+1)
   \   000007A4   0x7A60             LDRB     R0,[R4, #+9]
   \   000007A6   0x2800             CMP      R0,#+0
   \   000007A8   0xD004             BEQ      ??man_ope_mode_man_proc_158
   \   000007AA   0x2807             CMP      R0,#+7
   \   000007AC   0xD003             BEQ      ??man_ope_mode_man_proc_159
   \   000007AE   0x2808             CMP      R0,#+8
   \   000007B0   0xD011             BEQ      ??man_ope_mode_man_proc_160
   \   000007B2   0xE01A             B        ??man_ope_mode_man_proc_161
   1782          			case MAN_OPE_START_PROC_NON:
   1783          				break;
   \                     ??man_ope_mode_man_proc_158: (+1)
   \   000007B4   0xE019             B        ??man_ope_mode_man_proc_162
   1784          			case MAN_OPE_START_PROC_EXT_USB:
   1785          				man_msg_set_type(MAN_MSG_TYPE_EXT_OUT);
   \                     ??man_ope_mode_man_proc_159: (+1)
   \   000007B6   0x2021             MOVS     R0,#+33
   \   000007B8   0x.... 0x....      BL       man_msg_set_type
   1786          				man_msg_set_type(MAN_MSG_TYPE_BAT_IN);
   \   000007BC   0x2035             MOVS     R0,#+53
   \   000007BE   0x.... 0x....      BL       man_msg_set_type
   1787          				man_msg_set_type(MAN_MSG_TYPE_BAT_OUT);
   \   000007C2   0x2036             MOVS     R0,#+54
   \   000007C4   0x.... 0x....      BL       man_msg_set_type
   1788          				man_msg_set_type(MAN_MSG_TYPE_DIR_IN);
   \   000007C8   0x2037             MOVS     R0,#+55
   \   000007CA   0x.... 0x....      BL       man_msg_set_type
   1789          				man_ope_set_switch_pos(MAN_OPE_SWITCH_DIRECT);	// DIRECT状態
   \   000007CE   0x2006             MOVS     R0,#+6
   \   000007D0   0x.... 0x....      BL       man_ope_set_switch_pos
   1790          				break;
   \   000007D4   0xE009             B        ??man_ope_mode_man_proc_162
   1791          			case MAN_OPE_START_PROC_BATT_USB:
   1792          				man_msg_set_type(MAN_MSG_TYPE_BAT_OUT);
   \                     ??man_ope_mode_man_proc_160: (+1)
   \   000007D6   0x2036             MOVS     R0,#+54
   \   000007D8   0x.... 0x....      BL       man_msg_set_type
   1793          				man_msg_set_type(MAN_MSG_TYPE_DIR_IN);
   \   000007DC   0x2037             MOVS     R0,#+55
   \   000007DE   0x.... 0x....      BL       man_msg_set_type
   1794          				man_ope_set_switch_pos(MAN_OPE_SWITCH_DIRECT);	// DIRECT状態
   \   000007E2   0x2006             MOVS     R0,#+6
   \   000007E4   0x.... 0x....      BL       man_ope_set_switch_pos
   1795          				break;
   \   000007E8   0xE7FF             B        ??man_ope_mode_man_proc_162
   1796          			default:
   1797          				break;
   1798          			}
   1799          			mode_info->start_proc = MAN_OPE_START_PROC_NON;
   \                     ??man_ope_mode_man_proc_161: (+1)
   \                     ??man_ope_mode_man_proc_162: (+1)
   \   000007EA   0x2000             MOVS     R0,#+0
   \   000007EC   0x7260             STRB     R0,[R4, #+9]
   1800          
   1801          			// NET OPEN時は直結モードへ遷移
   1802          			if (mode_info->net_state == MAN_NET_NOTI_NOW_OPEN) {
   \   000007EE   0x6B60             LDR      R0,[R4, #+52]
   \   000007F0   0x2803             CMP      R0,#+3
   \   000007F2   0xD105             BNE      ??man_ope_mode_man_proc_163
   1803          				man_net_req_stby();
   \   000007F4   0x.... 0x....      BL       man_net_req_stby
   1804          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBON_NET_OFF);
   \   000007F8   0x2019             MOVS     R0,#+25
   \   000007FA   0x.... 0x....      BL       man_ope_set_mode_seq
   \   000007FE   0xE006             B        ??man_ope_mode_man_proc_164
   1805          			}
   1806          			// NET OPEN以外時は20秒間NET OPENを待つ
   1807          			else {
   1808          				// 時間監視開始
   1809          				man_ope_work.delay_timer_open = man_timer_get_1ms_count();
   \                     ??man_ope_mode_man_proc_163: (+1)
   \   00000800   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000804   0x4910             LDR      R1,??man_ope_mode_man_proc_122+0x4
   \   00000806   0x6108             STR      R0,[R1, #+16]
   1810          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBON_WAIT);
   \   00000808   0x2015             MOVS     R0,#+21
   \   0000080A   0x.... 0x....      BL       man_ope_set_mode_seq
   1811          			}
   1812          			break;
   \                     ??man_ope_mode_man_proc_164: (+1)
   \   0000080E   0xE38F             B        ??man_ope_mode_man_proc_42
   1813          
   1814          		case MAN_OPE_SEQ_NORMAL_USBON_WAIT:
   1815          			delay_timer = man_timer_get_elapsed_time(man_ope_work.delay_timer_open, man_timer_get_1ms_count());
   \                     ??man_ope_mode_man_proc_62: (+1)
   \   00000810   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000814   0x0001             MOVS     R1,R0
   \   00000816   0x480C             LDR      R0,??man_ope_mode_man_proc_122+0x4
   \   00000818   0x6900             LDR      R0,[R0, #+16]
   \   0000081A   0x.... 0x....      BL       man_timer_get_elapsed_time
   1816          			// NET OPEN状態を待って直結モードへ遷移
   1817          			if (mode_info->net_state == MAN_NET_NOTI_NOW_OPEN) {
   \   0000081E   0x6B61             LDR      R1,[R4, #+52]
   \   00000820   0x2903             CMP      R1,#+3
   \   00000822   0xD105             BNE      ??man_ope_mode_man_proc_165
   1818          				man_net_req_stby();
   \   00000824   0x.... 0x....      BL       man_net_req_stby
   1819          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBON_NET_OFF);
   \   00000828   0x2019             MOVS     R0,#+25
   \   0000082A   0x.... 0x....      BL       man_ope_set_mode_seq
   \   0000082E   0xE007             B        ??man_ope_mode_man_proc_166
   1820          			}
   1821          			// 60秒経ってもNET OPENしない場合は直結モードへ遷移
   1822          			else if (delay_timer >= MAN_OPE_RSSI_NG_DELAY_TIMER) {
   \                     ??man_ope_mode_man_proc_165: (+1)
   \   00000830   0x4906             LDR      R1,??man_ope_mode_man_proc_122+0x8  ;; 0xea60
   \   00000832   0x4288             CMP      R0,R1
   \   00000834   0xD304             BCC      ??man_ope_mode_man_proc_166
   1823          				man_net_req_stby();
   \   00000836   0x.... 0x....      BL       man_net_req_stby
   1824          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBON_NET_OFF);
   \   0000083A   0x2019             MOVS     R0,#+25
   \   0000083C   0x.... 0x....      BL       man_ope_set_mode_seq
   1825          			}
   1826          			break;
   \                     ??man_ope_mode_man_proc_166: (+1)
   \   00000840   0xE376             B        ??man_ope_mode_man_proc_42
   \   00000842   0xBF00             Nop      
   \                     ??man_ope_mode_man_proc_122:
   \   00000844   0x00000BD8         DC32     0xbd8
   \   00000848   0x........         DC32     man_ope_work
   \   0000084C   0x0000EA60         DC32     0xea60
   1827          
   1828          		case MAN_OPE_SEQ_NORMAL_USBON_NET_OFF:
   1829          			// NETがSTBY状態になるのを待つ
   1830          			if (mode_info->net_state == MAN_NET_NOTI_NOW_STBY) {
   \                     ??man_ope_mode_man_proc_65: (+1)
   \   00000850   0x6B60             LDR      R0,[R4, #+52]
   \   00000852   0x2806             CMP      R0,#+6
   \   00000854   0xD102             BNE      ??man_ope_mode_man_proc_167
   1831          				// NET STBY後の処理へ移行
   1832          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBON_NET_OFF_OK);
   \   00000856   0x201A             MOVS     R0,#+26
   \   00000858   0x.... 0x....      BL       man_ope_set_mode_seq
   1833          			}
   1834          			break;
   \                     ??man_ope_mode_man_proc_167: (+1)
   \   0000085C   0xE368             B        ??man_ope_mode_man_proc_42
   1835          		case MAN_OPE_SEQ_NORMAL_USBON_NET_OFF_OK:
   1836          			// USBのレポート管理を開始
   1837          			man_rpt_req_usb_start();
   \                     ??man_ope_mode_man_proc_66: (+1)
   \   0000085E   0x.... 0x....      BL       man_rpt_req_usb_start
   1838          			// USBのコマンド受付を開始
   1839          			man_usb_req_cmd_start();
   \   00000862   0x.... 0x....      BL       man_usb_req_cmd_start
   1840          			man_ope_set_mode_seq(MAN_OPE_SEQ_IDLE);
   \   00000866   0x2000             MOVS     R0,#+0
   \   00000868   0x.... 0x....      BL       man_ope_set_mode_seq
   1841          			// 遷移完了
   1842          			mode_info->now_mode = mode_info->next_mode;
   \   0000086C   0x7860             LDRB     R0,[R4, #+1]
   \   0000086E   0x7020             STRB     R0,[R4, #+0]
   1843          
   1844          #ifdef GNSS_DEBUG_MAN_OPE 
   1845          			sprintf((char *)&man_ope_work.buff[0], "NOW MODE(%d)\n", mode_info->now_mode);
   1846          			length = strlen((char const *)&man_ope_work.buff[0]);
   1847          			man_usb_data_send(&man_ope_work.buff[0], length);
   1848          #endif
   1849          			break;
   \   00000870   0xE35E             B        ??man_ope_mode_man_proc_42
   1850          
   1851          		case MAN_OPE_SEQ_NORMAL_USBON_NET_OFF_NG:
   1852          			break;
   \                     ??man_ope_mode_man_proc_67: (+1)
   \   00000872   0xE35D             B        ??man_ope_mode_man_proc_42
   1853          
   1854          
   1855          		case MAN_OPE_SEQ_NORMAL_USBON_UDP_OFF:
   1856          			break;
   \                     ??man_ope_mode_man_proc_63: (+1)
   \   00000874   0xE35C             B        ??man_ope_mode_man_proc_42
   1857          		case MAN_OPE_SEQ_NORMAL_USBON_UDP_OFF_OK:
   1858          			// USBのレポート管理を開始
   1859          			man_rpt_req_usb_start();
   \                     ??man_ope_mode_man_proc_64: (+1)
   \   00000876   0x.... 0x....      BL       man_rpt_req_usb_start
   1860          			// USBのコマンド受付を開始
   1861          			man_usb_req_cmd_start();
   \   0000087A   0x.... 0x....      BL       man_usb_req_cmd_start
   1862          			man_ope_set_mode_seq(MAN_OPE_SEQ_IDLE);
   \   0000087E   0x2000             MOVS     R0,#+0
   \   00000880   0x.... 0x....      BL       man_ope_set_mode_seq
   1863          			// 遷移完了
   1864          			mode_info->now_mode = mode_info->next_mode;
   \   00000884   0x7860             LDRB     R0,[R4, #+1]
   \   00000886   0x7020             STRB     R0,[R4, #+0]
   1865          			
   1866          #ifdef GNSS_DEBUG_MAN_OPE 
   1867          			sprintf((char *)&man_ope_work.buff[0], "NOW MODE(%d)\n", mode_info->now_mode);
   1868          			length = strlen((char const *)&man_ope_work.buff[0]);
   1869          			man_usb_data_send(&man_ope_work.buff[0], length);
   1870          #endif
   1871          			break;
   \   00000888   0xE352             B        ??man_ope_mode_man_proc_42
   1872          
   1873          
   1874          		// ******************************************************
   1875          		// 通常USB使用停止
   1876          		// ******************************************************
   1877          		case MAN_OPE_SEQ_NORMAL_USBOFF_REQ:
   1878          			// USBのレポート管理を終了
   1879          			man_rpt_req_usb_stop();
   \                     ??man_ope_mode_man_proc_68: (+1)
   \   0000088A   0x.... 0x....      BL       man_rpt_req_usb_stop
   1880          			// USBのコマンド受付を終了
   1881          			man_usb_req_cmd_stop();
   \   0000088E   0x.... 0x....      BL       man_usb_req_cmd_stop
   1882          			man_net_req_open();
   \   00000892   0x.... 0x....      BL       man_net_req_open
   1883          			man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON);
   \   00000896   0x201D             MOVS     R0,#+29
   \   00000898   0x.... 0x....      BL       man_ope_set_mode_seq
   1884          			break;
   \   0000089C   0xE348             B        ??man_ope_mode_man_proc_42
   1885          
   1886          
   1887          		case MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON:
   1888          			// NETがOPEN状態になるのを待つ
   1889          			if (mode_info->net_state == MAN_NET_NOTI_NOW_OPEN) {
   \                     ??man_ope_mode_man_proc_69: (+1)
   \   0000089E   0x6B60             LDR      R0,[R4, #+52]
   \   000008A0   0x2803             CMP      R0,#+3
   \   000008A2   0xD103             BNE      ??man_ope_mode_man_proc_168
   1890          				// NET OPEN後の処理へ移行
   1891          				man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON_OK);
   \   000008A4   0x201E             MOVS     R0,#+30
   \   000008A6   0x.... 0x....      BL       man_ope_set_mode_seq
   \   000008AA   0xE02C             B        ??man_ope_mode_man_proc_169
   1892          			}
   1893          
   1894          			// 60秒経過しても圏外の場合はNET OPEN後の処理へ移行
   1895          			else if (mode_info->net_state == MAN_NET_NOTI_TO_NET_OPEN) {
   \                     ??man_ope_mode_man_proc_168: (+1)
   \   000008AC   0x6B60             LDR      R0,[R4, #+52]
   \   000008AE   0x2802             CMP      R0,#+2
   \   000008B0   0xD119             BNE      ??man_ope_mode_man_proc_170
   1896          				// RTC取得済みの場合
   1897          				if ( (man_rtc_get_status() != MAN_RTC_STS_INIT) && (man_rtc_get_status() != MAN_RTC_STS_LTE_NG) ) {
   \   000008B2   0x.... 0x....      BL       man_rtc_get_status
   \   000008B6   0x2800             CMP      R0,#+0
   \   000008B8   0xD025             BEQ      ??man_ope_mode_man_proc_169
   \   000008BA   0x.... 0x....      BL       man_rtc_get_status
   \   000008BE   0x2802             CMP      R0,#+2
   \   000008C0   0xD021             BEQ      ??man_ope_mode_man_proc_169
   1898          					// 圏外の場合
   1899          					if (sensor_info->rssi_sts == MAN_DATA_RSSI_STS_NG) {
   \   000008C2   0x48B1             LDR      R0,??man_ope_mode_man_proc_171  ;; 0xbd8
   \   000008C4   0x5C28             LDRB     R0,[R5, R0]
   \   000008C6   0x2800             CMP      R0,#+0
   \   000008C8   0xD11D             BNE      ??man_ope_mode_man_proc_169
   1900          						delay_timer = man_timer_get_elapsed_time(man_ope_work.delay_timer, man_timer_get_1ms_count());
   \   000008CA   0x.... 0x....      BL       man_timer_get_1ms_count
   \   000008CE   0x0001             MOVS     R1,R0
   \   000008D0   0x48AE             LDR      R0,??man_ope_mode_man_proc_171+0x4
   \   000008D2   0x6940             LDR      R0,[R0, #+20]
   \   000008D4   0x.... 0x....      BL       man_timer_get_elapsed_time
   1901          						// 60秒経過した場合
   1902          						if (delay_timer >= MAN_OPE_RSSI_NG_DELAY_TIMER) {
   \   000008D8   0x49AD             LDR      R1,??man_ope_mode_man_proc_171+0x8  ;; 0xea60
   \   000008DA   0x4288             CMP      R0,R1
   \   000008DC   0xD313             BCC      ??man_ope_mode_man_proc_169
   1903          							// NET OPEN後の処理へ移行
   1904          							man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON_OK);
   \   000008DE   0x201E             MOVS     R0,#+30
   \   000008E0   0x.... 0x....      BL       man_ope_set_mode_seq
   \   000008E4   0xE00F             B        ??man_ope_mode_man_proc_169
   1905          						}
   1906          					}
   1907          				}
   1908          			}
   1909          
   1910          			// NETがリトライ中の場合、操作スイッチの変化に対応する
   1911          			else if (mode_info->net_state == MAN_NET_NOTI_TO_OPEN_RETRY) {
   \                     ??man_ope_mode_man_proc_170: (+1)
   \   000008E6   0x6B60             LDR      R0,[R4, #+52]
   \   000008E8   0x2807             CMP      R0,#+7
   \   000008EA   0xD10C             BNE      ??man_ope_mode_man_proc_169
   1912          				// 
   1913          				if (mode_info->next_mode != mode_info->gole_mode) {
   \   000008EC   0x7860             LDRB     R0,[R4, #+1]
   \   000008EE   0x78A1             LDRB     R1,[R4, #+2]
   \   000008F0   0x4288             CMP      R0,R1
   \   000008F2   0xD008             BEQ      ??man_ope_mode_man_proc_169
   1914          					// OFFモード, DIRECTモード時はNET OFFのため、モードを切り替える
   1915          					if ( (mode_info->gole_mode == MAN_OPE_MODE_OFF) || (mode_info->gole_mode == MAN_OPE_MODE_DIRECT) ) {
   \   000008F4   0x78A0             LDRB     R0,[R4, #+2]
   \   000008F6   0x2801             CMP      R0,#+1
   \   000008F8   0xD002             BEQ      ??man_ope_mode_man_proc_172
   \   000008FA   0x78A0             LDRB     R0,[R4, #+2]
   \   000008FC   0x2804             CMP      R0,#+4
   \   000008FE   0xD102             BNE      ??man_ope_mode_man_proc_169
   1916          						// NET OPEN後の処理へ移行
   1917          						man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON_OK);
   \                     ??man_ope_mode_man_proc_172: (+1)
   \   00000900   0x201E             MOVS     R0,#+30
   \   00000902   0x.... 0x....      BL       man_ope_set_mode_seq
   1918          					}
   1919          				}
   1920          			}
   1921          			break;
   \                     ??man_ope_mode_man_proc_169: (+1)
   \   00000906   0xE313             B        ??man_ope_mode_man_proc_42
   1922          		case MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON_OK:
   1923          			// 後処理
   1924          			switch (mode_info->end_proc) {
   \                     ??man_ope_mode_man_proc_70: (+1)
   \   00000908   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000090A   0x2807             CMP      R0,#+7
   \   0000090C   0xD109             BNE      ??man_ope_mode_man_proc_173
   1925          			case MAN_OPE_END_PROC_DIR_BAT:
   1926          				man_msg_set_type(MAN_MSG_TYPE_DIR_OUT);
   \   0000090E   0x2038             MOVS     R0,#+56
   \   00000910   0x.... 0x....      BL       man_msg_set_type
   1927          				man_msg_set_type(MAN_MSG_TYPE_BAT_IN);
   \   00000914   0x2035             MOVS     R0,#+53
   \   00000916   0x.... 0x....      BL       man_msg_set_type
   1928          				man_ope_set_switch_pos(MAN_OPE_SWITCH_BATTERY);	// BATTERY状態
   \   0000091A   0x2005             MOVS     R0,#+5
   \   0000091C   0x.... 0x....      BL       man_ope_set_switch_pos
   1929          				break;
   \   00000920   0xE7FF             B        ??man_ope_mode_man_proc_174
   1930          			default:
   1931          				break;
   1932          			}
   1933          			mode_info->end_proc = MAN_OPE_END_PROC_NON;
   \                     ??man_ope_mode_man_proc_173: (+1)
   \                     ??man_ope_mode_man_proc_174: (+1)
   \   00000922   0x2000             MOVS     R0,#+0
   \   00000924   0x72A0             STRB     R0,[R4, #+10]
   1934          
   1935          			man_ope_set_mode_seq(MAN_OPE_SEQ_IDLE);
   \   00000926   0x2000             MOVS     R0,#+0
   \   00000928   0x.... 0x....      BL       man_ope_set_mode_seq
   1936          			// 遷移完了
   1937          			mode_info->now_mode = mode_info->next_mode;
   \   0000092C   0x7860             LDRB     R0,[R4, #+1]
   \   0000092E   0x7020             STRB     R0,[R4, #+0]
   1938          
   1939          #ifdef GNSS_DEBUG_MAN_OPE 
   1940          			sprintf((char *)&man_ope_work.buff[0], "NOW MODE(%d)\n", mode_info->now_mode);
   1941          			length = strlen((char const *)&man_ope_work.buff[0]);
   1942          			man_usb_data_send(&man_ope_work.buff[0], length);
   1943          #endif
   1944          			break;
   \   00000930   0xE2FE             B        ??man_ope_mode_man_proc_42
   1945          		case MAN_OPE_SEQ_NORMAL_USBOFF_NET_ON_NG:
   1946          			break;
   \                     ??man_ope_mode_man_proc_71: (+1)
   \   00000932   0xE2FD             B        ??man_ope_mode_man_proc_42
   1947          
   1948          
   1949          		// ******************************************************
   1950          		// EXT - BATT間
   1951          		// ******************************************************
   1952          		case MAN_OPE_SEQ_EXT_BATT_REQ:
   1953          			// 前処理
   1954          			switch (mode_info->start_proc) {
   \                     ??man_ope_mode_man_proc_72: (+1)
   \   00000934   0x7A60             LDRB     R0,[R4, #+9]
   \   00000936   0x2800             CMP      R0,#+0
   \   00000938   0xD004             BEQ      ??man_ope_mode_man_proc_175
   \   0000093A   0x2805             CMP      R0,#+5
   \   0000093C   0xD003             BEQ      ??man_ope_mode_man_proc_176
   \   0000093E   0x2806             CMP      R0,#+6
   \   00000940   0xD00B             BEQ      ??man_ope_mode_man_proc_177
   \   00000942   0xE014             B        ??man_ope_mode_man_proc_178
   1955          			case MAN_OPE_START_PROC_NON:
   1956          				break;
   \                     ??man_ope_mode_man_proc_175: (+1)
   \   00000944   0xE013             B        ??man_ope_mode_man_proc_179
   1957          			case MAN_OPE_START_PROC_EXT_BATT:
   1958          				man_msg_set_type(MAN_MSG_TYPE_EXT_OUT);			// 外部電源供給が失われた場合
   \                     ??man_ope_mode_man_proc_176: (+1)
   \   00000946   0x2021             MOVS     R0,#+33
   \   00000948   0x.... 0x....      BL       man_msg_set_type
   1959          				man_msg_set_type(MAN_MSG_TYPE_BAT_IN);			// 内部バッテリモードIN
   \   0000094C   0x2035             MOVS     R0,#+53
   \   0000094E   0x.... 0x....      BL       man_msg_set_type
   1960          				man_ope_set_switch_pos(MAN_OPE_SWITCH_BATTERY);	// BATTERY状態
   \   00000952   0x2005             MOVS     R0,#+5
   \   00000954   0x.... 0x....      BL       man_ope_set_switch_pos
   1961          				break;
   \   00000958   0xE009             B        ??man_ope_mode_man_proc_179
   1962          			case MAN_OPE_START_PROC_BATT_EXT:
   1963          				man_msg_set_type(MAN_MSG_TYPE_BAT_OUT);			// 内部バッテリモードOUT
   \                     ??man_ope_mode_man_proc_177: (+1)
   \   0000095A   0x2036             MOVS     R0,#+54
   \   0000095C   0x.... 0x....      BL       man_msg_set_type
   1964          				man_msg_set_type(MAN_MSG_TYPE_EXT_IN);			// 外部電源が供給された場合
   \   00000960   0x2022             MOVS     R0,#+34
   \   00000962   0x.... 0x....      BL       man_msg_set_type
   1965          				man_ope_set_switch_pos(MAN_OPE_SWITCH_EXT_ON);	// EXT POWER : EXT ON状態
   \   00000966   0x2001             MOVS     R0,#+1
   \   00000968   0x.... 0x....      BL       man_ope_set_switch_pos
   1966          				break;
   \   0000096C   0xE7FF             B        ??man_ope_mode_man_proc_179
   1967          			default:
   1968          				break;
   1969          			}
   1970          			mode_info->start_proc = MAN_OPE_START_PROC_NON;
   \                     ??man_ope_mode_man_proc_178: (+1)
   \                     ??man_ope_mode_man_proc_179: (+1)
   \   0000096E   0x2000             MOVS     R0,#+0
   \   00000970   0x7260             STRB     R0,[R4, #+9]
   1971          			man_ope_set_mode_seq(MAN_OPE_SEQ_IDLE);
   \   00000972   0x2000             MOVS     R0,#+0
   \   00000974   0x.... 0x....      BL       man_ope_set_mode_seq
   1972          			// 遷移完了
   1973          			mode_info->now_mode = mode_info->next_mode;
   \   00000978   0x7860             LDRB     R0,[R4, #+1]
   \   0000097A   0x7020             STRB     R0,[R4, #+0]
   1974          #ifdef GNSS_DEBUG_MAN_OPE 
   1975          			sprintf((char *)&man_ope_work.buff[0], "NOW MODE(%d)\n", mode_info->now_mode);
   1976          			length = strlen((char const *)&man_ope_work.buff[0]);
   1977          			man_usb_data_send(&man_ope_work.buff[0], length);
   1978          #endif
   1979          			break;
   \   0000097C   0xE2D8             B        ??man_ope_mode_man_proc_42
   1980          
   1981          
   1982          
   1983          
   1984          
   1985          		// ******************************************************
   1986          		// OTA開始
   1987          		// ******************************************************
   1988          		case MAN_OPE_SEQ_OTA_START_REQ:
   1989          			// OTA開始
   1990          			man_net_req_close();
   \                     ??man_ope_mode_man_proc_73: (+1)
   \   0000097E   0x.... 0x....      BL       man_net_req_close
   1991          			man_ope_set_mode_seq(MAN_OPE_SEQ_OTA_START);
   \   00000982   0x2023             MOVS     R0,#+35
   \   00000984   0x.... 0x....      BL       man_ope_set_mode_seq
   1992          			break;
   \   00000988   0xE2D2             B        ??man_ope_mode_man_proc_42
   1993          		case MAN_OPE_SEQ_OTA_START:
   1994          			// NETがCLOSE状態になるのを待つ
   1995          			if (mode_info->net_state == MAN_NET_NOTI_NOW_CLOSE) {
   \                     ??man_ope_mode_man_proc_74: (+1)
   \   0000098A   0x6B60             LDR      R0,[R4, #+52]
   \   0000098C   0x2800             CMP      R0,#+0
   \   0000098E   0xD102             BNE      ??man_ope_mode_man_proc_180
   1996          				// NET CLOSE後の処理へ移行
   1997          				man_ope_set_mode_seq(MAN_OPE_SEQ_OTA_START_OK);
   \   00000990   0x2024             MOVS     R0,#+36
   \   00000992   0x.... 0x....      BL       man_ope_set_mode_seq
   1998          			}
   1999          			break;
   \                     ??man_ope_mode_man_proc_180: (+1)
   \   00000996   0xE2CB             B        ??man_ope_mode_man_proc_42
   2000          		case MAN_OPE_SEQ_OTA_START_OK:
   2001          			man_ope_return_callback(MAN_OPE_STATUS_OK);
   \                     ??man_ope_mode_man_proc_75: (+1)
   \   00000998   0x2000             MOVS     R0,#+0
   \   0000099A   0x.... 0x....      BL       man_ope_return_callback
   2002          			break;
   \   0000099E   0xE2C7             B        ??man_ope_mode_man_proc_42
   2003          		case MAN_OPE_SEQ_OTA_START_NG:
   2004          			man_ope_return_callback(MAN_OPE_STATUS_NG);
   \                     ??man_ope_mode_man_proc_76: (+1)
   \   000009A0   0x2000             MOVS     R0,#+0
   \   000009A2   0x43C0             MVNS     R0,R0            ;; #-1
   \   000009A4   0x.... 0x....      BL       man_ope_return_callback
   2005          			break;
   \   000009A8   0xE2C2             B        ??man_ope_mode_man_proc_42
   2006          
   2007          
   2008          
   2009          		// ******************************************************
   2010          		// OTA終了
   2011          		// ******************************************************
   2012          		case MAN_OPE_SEQ_OTA_END_REQ:
   2013          			// OTA終了
   2014          			man_net_req_open();
   \                     ??man_ope_mode_man_proc_77: (+1)
   \   000009AA   0x.... 0x....      BL       man_net_req_open
   2015          			man_ope_set_mode_seq(MAN_OPE_SEQ_OTA_END);
   \   000009AE   0x2027             MOVS     R0,#+39
   \   000009B0   0x.... 0x....      BL       man_ope_set_mode_seq
   2016          			break;
   \   000009B4   0xE2BC             B        ??man_ope_mode_man_proc_42
   2017          		case MAN_OPE_SEQ_OTA_END:
   2018          			// NETがOPEN状態になるのを待つ
   2019          			if (mode_info->net_state == MAN_NET_NOTI_NOW_OPEN) {
   \                     ??man_ope_mode_man_proc_78: (+1)
   \   000009B6   0x6B60             LDR      R0,[R4, #+52]
   \   000009B8   0x2803             CMP      R0,#+3
   \   000009BA   0xD103             BNE      ??man_ope_mode_man_proc_181
   2020          				// NET OPEN後の処理へ移行
   2021          				man_ope_set_mode_seq(MAN_OPE_SEQ_OTA_END_OK);
   \   000009BC   0x2028             MOVS     R0,#+40
   \   000009BE   0x.... 0x....      BL       man_ope_set_mode_seq
   \   000009C2   0xE01B             B        ??man_ope_mode_man_proc_182
   2022          			}
   2023          			// 60秒経過しても圏外の場合はNET OPEN後の処理へ移行
   2024          			else if (mode_info->net_state == MAN_NET_NOTI_TO_NET_OPEN) {
   \                     ??man_ope_mode_man_proc_181: (+1)
   \   000009C4   0x6B60             LDR      R0,[R4, #+52]
   \   000009C6   0x2802             CMP      R0,#+2
   \   000009C8   0xD118             BNE      ??man_ope_mode_man_proc_182
   2025          				// RTC取得済みの場合
   2026          				if ( (man_rtc_get_status() != MAN_RTC_STS_INIT) && (man_rtc_get_status() != MAN_RTC_STS_LTE_NG) ) {
   \   000009CA   0x.... 0x....      BL       man_rtc_get_status
   \   000009CE   0x2800             CMP      R0,#+0
   \   000009D0   0xD014             BEQ      ??man_ope_mode_man_proc_182
   \   000009D2   0x.... 0x....      BL       man_rtc_get_status
   \   000009D6   0x2802             CMP      R0,#+2
   \   000009D8   0xD010             BEQ      ??man_ope_mode_man_proc_182
   2027          					// 圏外の場合
   2028          					if (sensor_info->rssi_sts == MAN_DATA_RSSI_STS_NG) {
   \   000009DA   0x486B             LDR      R0,??man_ope_mode_man_proc_171  ;; 0xbd8
   \   000009DC   0x5C28             LDRB     R0,[R5, R0]
   \   000009DE   0x2800             CMP      R0,#+0
   \   000009E0   0xD10C             BNE      ??man_ope_mode_man_proc_182
   2029          						delay_timer = man_timer_get_elapsed_time(man_ope_work.delay_timer, man_timer_get_1ms_count());
   \   000009E2   0x.... 0x....      BL       man_timer_get_1ms_count
   \   000009E6   0x0001             MOVS     R1,R0
   \   000009E8   0x4868             LDR      R0,??man_ope_mode_man_proc_171+0x4
   \   000009EA   0x6940             LDR      R0,[R0, #+20]
   \   000009EC   0x.... 0x....      BL       man_timer_get_elapsed_time
   2030          						// 60秒経過した場合
   2031          						if (delay_timer >= MAN_OPE_RSSI_NG_DELAY_TIMER) {
   \   000009F0   0x4967             LDR      R1,??man_ope_mode_man_proc_171+0x8  ;; 0xea60
   \   000009F2   0x4288             CMP      R0,R1
   \   000009F4   0xD302             BCC      ??man_ope_mode_man_proc_182
   2032          							// NET OPEN後の処理へ移行
   2033          							man_ope_set_mode_seq(MAN_OPE_SEQ_OTA_END_OK);
   \   000009F6   0x2028             MOVS     R0,#+40
   \   000009F8   0x.... 0x....      BL       man_ope_set_mode_seq
   2034          						}
   2035          					}
   2036          				}
   2037          			}
   2038          			break;
   \                     ??man_ope_mode_man_proc_182: (+1)
   \   000009FC   0xE298             B        ??man_ope_mode_man_proc_42
   2039          		case MAN_OPE_SEQ_OTA_END_OK:
   2040          			man_ope_return_callback(MAN_OPE_STATUS_OK);
   \                     ??man_ope_mode_man_proc_79: (+1)
   \   000009FE   0x2000             MOVS     R0,#+0
   \   00000A00   0x.... 0x....      BL       man_ope_return_callback
   2041          			break;
   \   00000A04   0xE294             B        ??man_ope_mode_man_proc_42
   2042          		case MAN_OPE_SEQ_OTA_END_NG:
   2043          			man_ope_return_callback(MAN_OPE_STATUS_NG);
   \                     ??man_ope_mode_man_proc_80: (+1)
   \   00000A06   0x2000             MOVS     R0,#+0
   \   00000A08   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000A0A   0x.... 0x....      BL       man_ope_return_callback
   2044          			break;
   \   00000A0E   0xE28F             B        ??man_ope_mode_man_proc_42
   2045          
   2046          
   2047          		// ******************************************************
   2048          		// 外部電源OFF開始(外部電源喪失後の測位、定刻測位開始)
   2049          		// ******************************************************
   2050          		case MAN_OPE_SEQ_EXTOFF_START_REQ:		// EXT OFF開始要求
   2051          			ext_info->ext_mode = MAN_OPE_EXT_MODE_EXT_OFF;
   \                     ??man_ope_mode_man_proc_81: (+1)
   \   00000A10   0x2000             MOVS     R0,#+0
   \   00000A12   0x7038             STRB     R0,[R7, #+0]
   2052          
   2053          			// UDPの出力を停止する
   2054          			man_rpt_req_send_stop();
   \   00000A14   0x.... 0x....      BL       man_rpt_req_send_stop
   2055          			// メッセージ送信(33)
   2056          			man_msg_set_type(MAN_MSG_TYPE_EXT_OUT);
   \   00000A18   0x2021             MOVS     R0,#+33
   \   00000A1A   0x.... 0x....      BL       man_msg_set_type
   2057          			man_ope_set_switch_pos(MAN_OPE_SWITCH_EXT_OFF_LAST);	// EXT POWER : EXT OFF(最終位置取得)状態
   \   00000A1E   0x2002             MOVS     R0,#+2
   \   00000A20   0x.... 0x....      BL       man_ope_set_switch_pos
   2058          			// 測位開始
   2059          			man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_START_POS);
   \   00000A24   0x202B             MOVS     R0,#+43
   \   00000A26   0x.... 0x....      BL       man_ope_set_mode_seq
   2060          			break;
   \   00000A2A   0xE281             B        ??man_ope_mode_man_proc_42
   2061          		case MAN_OPE_SEQ_EXTOFF_START_POS:		// 測位開始準備
   2062          			ext_info->pos_time = 0;
   \                     ??man_ope_mode_man_proc_82: (+1)
   \   00000A2C   0x2000             MOVS     R0,#+0
   \   00000A2E   0x6078             STR      R0,[R7, #+4]
   2063           			// 外部電源喪失後の測位の場合
   2064          			if (ext_info->ext_mode == MAN_OPE_EXT_MODE_EXT_OFF) {
   \   00000A30   0x7838             LDRB     R0,[R7, #+0]
   \   00000A32   0x2800             CMP      R0,#+0
   \   00000A34   0xD105             BNE      ??man_ope_mode_man_proc_183
   2065          				// 外部電源喪失後の測位時間タイマ開始
   2066          
   2067          #if 0                          
   2068          //#ifdef ADLINK_DEBUG_PROCESS //DEBUG Matsushita
   2069                                    if(pos_time > 0)
   2070                                    {
   2071                                      ext_info->pos_time = pos_time;
   2072                                    }
   2073                                    else
   2074                                    {
   2075                                      ext_info->pos_time = fixed->ext_off_time*60*1000;
   2076                                    }
   2077          #else
   2078                                    ext_info->pos_time = fixed->ext_off_time*60*1000;
   \   00000A36   0x9801             LDR      R0,[SP, #+4]
   \   00000A38   0x6880             LDR      R0,[R0, #+8]
   \   00000A3A   0x4955             LDR      R1,??man_ope_mode_man_proc_171+0x8  ;; 0xea60
   \   00000A3C   0x4348             MULS     R0,R1,R0
   \   00000A3E   0x6078             STR      R0,[R7, #+4]
   \   00000A40   0xE007             B        ??man_ope_mode_man_proc_184
   2079          #endif
   2080          			}
   2081          			// 定刻起動時の測位の場合
   2082          			else if (ext_info->ext_mode == MAN_OPE_EXT_MODE_ALARM) {
   \                     ??man_ope_mode_man_proc_183: (+1)
   \   00000A42   0x7838             LDRB     R0,[R7, #+0]
   \   00000A44   0x2801             CMP      R0,#+1
   \   00000A46   0xD104             BNE      ??man_ope_mode_man_proc_184
   2083          				//  定刻起動時の測位時間タイマ開始
   2084          				ext_info->pos_time = fixed->alarm_time*60*1000;
   \   00000A48   0x9801             LDR      R0,[SP, #+4]
   \   00000A4A   0x68C0             LDR      R0,[R0, #+12]
   \   00000A4C   0x4950             LDR      R1,??man_ope_mode_man_proc_171+0x8  ;; 0xea60
   \   00000A4E   0x4348             MULS     R0,R1,R0
   \   00000A50   0x6078             STR      R0,[R7, #+4]
   2085          			}
   2086          			
   2087          			if (ext_info->pos_time != 0) {
   \                     ??man_ope_mode_man_proc_184: (+1)
   \   00000A52   0x6878             LDR      R0,[R7, #+4]
   \   00000A54   0x2800             CMP      R0,#+0
   \   00000A56   0xD00B             BEQ      ??man_ope_mode_man_proc_185
   2088          				ret = man_timer_start_wait(TIMER_MAN_ID_APL_OPE + MAN_OPE_SEQ_EXTOFF_GPS_WAIT, ext_info->pos_time, man_ope_mode_req_callback);
   \   00000A58   0x4AA6             LDR      R2,??man_ope_mode_man_proc_186
   \   00000A5A   0x6879             LDR      R1,[R7, #+4]
   \   00000A5C   0x48A6             LDR      R0,??man_ope_mode_man_proc_186+0x4  ;; 0x4010002c
   \   00000A5E   0x.... 0x....      BL       man_timer_start_wait
   \   00000A62   0x0006             MOVS     R6,R0
   2089          				if (ret >= 0) {
   \   00000A64   0x2E00             CMP      R6,#+0
   \   00000A66   0xD408             BMI      ??man_ope_mode_man_proc_187
   2090          					man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_GPS_WAIT);
   \   00000A68   0x202C             MOVS     R0,#+44
   \   00000A6A   0x.... 0x....      BL       man_ope_set_mode_seq
   \   00000A6E   0xE004             B        ??man_ope_mode_man_proc_187
   2091          				}
   2092          			}
   2093          			else {
   2094          				// 測位解除
   2095          				ext_info->ext_mode = MAN_OPE_EXT_MODE_EXIT;
   \                     ??man_ope_mode_man_proc_185: (+1)
   \   00000A70   0x2002             MOVS     R0,#+2
   \   00000A72   0x7038             STRB     R0,[R7, #+0]
   2096          				// 測位状態を解除する
   2097          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_END_NET_ON_OK);
   \   00000A74   0x203C             MOVS     R0,#+60
   \   00000A76   0x.... 0x....      BL       man_ope_set_mode_seq
   2098          			}
   2099          			break;
   \                     ??man_ope_mode_man_proc_187: (+1)
   \   00000A7A   0xE259             B        ??man_ope_mode_man_proc_42
   2100          
   2101          		case MAN_OPE_SEQ_EXTOFF_GPS_WAIT:		// 測位
   2102          			// 動作モードのが切り替えられた場合、中止する
   2103          			// 外部電源がONに切り替わった場合、中止する
   2104          			if ( ( ( mode_info->gole_mode != MAN_OPE_MODE_EXT_OFF1 ) && ( mode_info->gole_mode != MAN_OPE_MODE_EXT_OFF2 ) ) 
   2105          				|| ( man_ope_work.ext_sts.ext_fixed == MAN_OPE_EXT_ON ) ) {
   \                     ??man_ope_mode_man_proc_83: (+1)
   \   00000A7C   0x78A0             LDRB     R0,[R4, #+2]
   \   00000A7E   0x2807             CMP      R0,#+7
   \   00000A80   0xD002             BEQ      ??man_ope_mode_man_proc_188
   \   00000A82   0x78A0             LDRB     R0,[R4, #+2]
   \   00000A84   0x2808             CMP      R0,#+8
   \   00000A86   0xD103             BNE      ??man_ope_mode_man_proc_189
   \                     ??man_ope_mode_man_proc_188: (+1)
   \   00000A88   0x4840             LDR      R0,??man_ope_mode_man_proc_171+0x4
   \   00000A8A   0x6E40             LDR      R0,[R0, #+100]
   \   00000A8C   0x2800             CMP      R0,#+0
   \   00000A8E   0xD116             BNE      ??man_ope_mode_man_proc_190
   2106          				// 測位時間タイマ停止
   2107          				man_timer_cancel_wait(TIMER_MAN_ID_APL_OPE + MAN_OPE_SEQ_EXTOFF_GPS_WAIT, ext_info->pos_time);
   \                     ??man_ope_mode_man_proc_189: (+1)
   \   00000A90   0x6879             LDR      R1,[R7, #+4]
   \   00000A92   0x4899             LDR      R0,??man_ope_mode_man_proc_186+0x4  ;; 0x4010002c
   \   00000A94   0x.... 0x....      BL       man_timer_cancel_wait
   2108          
   2109          				// 外部電源喪失後の測位の場合、測位中止のメッセージ出力
   2110          				if (ext_info->ext_mode == MAN_OPE_EXT_MODE_EXT_OFF) {
   \   00000A98   0x7838             LDRB     R0,[R7, #+0]
   \   00000A9A   0x2800             CMP      R0,#+0
   \   00000A9C   0xD103             BNE      ??man_ope_mode_man_proc_191
   2111          					// メッセージ送信(52)
   2112          					man_msg_set_type(MAN_MSG_TYPE_NO_FIXID);
   \   00000A9E   0x2034             MOVS     R0,#+52
   \   00000AA0   0x.... 0x....      BL       man_msg_set_type
   \   00000AA4   0xE005             B        ??man_ope_mode_man_proc_192
   2113          				}
   2114          				// 定刻起動時の測位の場合、測位中止のメッセージ出力
   2115          				else if (ext_info->ext_mode == MAN_OPE_EXT_MODE_ALARM) {
   \                     ??man_ope_mode_man_proc_191: (+1)
   \   00000AA6   0x7838             LDRB     R0,[R7, #+0]
   \   00000AA8   0x2801             CMP      R0,#+1
   \   00000AAA   0xD102             BNE      ??man_ope_mode_man_proc_192
   2116          					// メッセージ送信(50)
   2117          					man_msg_set_type(MAN_MSG_TYPE_WUP_NOT);
   \   00000AAC   0x2032             MOVS     R0,#+50
   \   00000AAE   0x.... 0x....      BL       man_msg_set_type
   2118          				}
   2119          				
   2120          				// 測位解除
   2121          				ext_info->ext_mode = MAN_OPE_EXT_MODE_EXIT;
   \                     ??man_ope_mode_man_proc_192: (+1)
   \   00000AB2   0x2002             MOVS     R0,#+2
   \   00000AB4   0x7038             STRB     R0,[R7, #+0]
   2122          				// 測位状態を解除する
   2123          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_END_NET_ON_OK);
   \   00000AB6   0x203C             MOVS     R0,#+60
   \   00000AB8   0x.... 0x....      BL       man_ope_set_mode_seq
   \   00000ABC   0xE031             B        ??man_ope_mode_man_proc_193
   2124          			}
   2125          			
   2126          			else {
   2127          				// GPS 有効位置情報取得判定
   2128          				if (sensor_info->nmea_status == MAN_GPS_NMEA_STATUS_EFFECTIVE) {
   \                     ??man_ope_mode_man_proc_190: (+1)
   \   00000ABE   0x488F             LDR      R0,??man_ope_mode_man_proc_186+0x8  ;; 0xbc8
   \   00000AC0   0x5828             LDR      R0,[R5, R0]
   \   00000AC2   0x2802             CMP      R0,#+2
   \   00000AC4   0xD12D             BNE      ??man_ope_mode_man_proc_193
   2129          
   2130          					// EXT POWER : EXT OFF(SLEEP)状態
   2131          					man_ope_set_switch_pos(MAN_OPE_SWITCH_EXT_OFF_SLEEP);
   \   00000AC6   0x2003             MOVS     R0,#+3
   \   00000AC8   0x.... 0x....      BL       man_ope_set_switch_pos
   2132          					// 測位時間タイマ停止
   2133          					man_timer_cancel_wait(TIMER_MAN_ID_APL_OPE + MAN_OPE_SEQ_EXTOFF_GPS_WAIT, ext_info->pos_time);
   \   00000ACC   0x6879             LDR      R1,[R7, #+4]
   \   00000ACE   0x488A             LDR      R0,??man_ope_mode_man_proc_186+0x4  ;; 0x4010002c
   \   00000AD0   0x.... 0x....      BL       man_timer_cancel_wait
   2134          
   2135          					// 外部電源喪失後の測位の場合
   2136          					if (ext_info->ext_mode == MAN_OPE_EXT_MODE_EXT_OFF) {
   \   00000AD4   0x7838             LDRB     R0,[R7, #+0]
   \   00000AD6   0x2800             CMP      R0,#+0
   \   00000AD8   0xD108             BNE      ??man_ope_mode_man_proc_194
   2137          						// メッセージ送信(51)
   2138          						man_msg_set_type(MAN_MSG_TYPE_FIXED);
   \   00000ADA   0x2033             MOVS     R0,#+51
   \   00000ADC   0x.... 0x....      BL       man_msg_set_type
   2139          
   2140          						// NETWORK停止
   2141          						man_net_req_off();
   \   00000AE0   0x.... 0x....      BL       man_net_req_off
   2142          						man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_NET_OFF);
   \   00000AE4   0x2034             MOVS     R0,#+52
   \   00000AE6   0x.... 0x....      BL       man_ope_set_mode_seq
   \   00000AEA   0xE01A             B        ??man_ope_mode_man_proc_193
   2143          					}
   2144          					// 定刻起動時の測位の場合
   2145          					else if (ext_info->ext_mode == MAN_OPE_EXT_MODE_ALARM) {
   \                     ??man_ope_mode_man_proc_194: (+1)
   \   00000AEC   0x7838             LDRB     R0,[R7, #+0]
   \   00000AEE   0x2801             CMP      R0,#+1
   \   00000AF0   0xD117             BNE      ??man_ope_mode_man_proc_193
   2146          						// IMESは時刻を保持してないため、時刻の更新は行わない
   2147          						if (sensor_info->nmea_select == MAN_GPS_NMEA_SELECT_NMEA) {
   \   00000AF2   0x4883             LDR      R0,??man_ope_mode_man_proc_186+0xC  ;; 0xbcc
   \   00000AF4   0x5828             LDR      R0,[R5, R0]
   \   00000AF6   0x2801             CMP      R0,#+1
   \   00000AF8   0xD110             BNE      ??man_ope_mode_man_proc_195
   2148          #ifdef ADLINK_DEBUG //20181108
   2149                                                            char *msg="<sensor_info->nmea_select == MAN_GPS_NMEA_SELECT_NMEA>\r\n";
   2150                                                            sysmgr_log(msg,strlen(msg));
   2151          #endif
   2152          
   2153                                                              man_ope_set_mode_seq(MAN_OPE_SEQ_ALARM_SEND_DATA);
   \   00000AFA   0x2047             MOVS     R0,#+71
   \   00000AFC   0x.... 0x....      BL       man_ope_set_mode_seq
   2154                                                              man_ope_work.alarm_flg = 1;
   \   00000B00   0x2001             MOVS     R0,#+1
   \   00000B02   0x49BC             LDR      R1,??man_ope_mode_man_proc_196
   \   00000B04   0x7008             STRB     R0,[R1, #+0]
   2155                                                              man_timer_start_wait(TIMER_MAN_ID_APL_OPE + MAN_OPE_SEQ_ALARM_SEND_DATA,
   2156                                                                                   man_data_get_setting_other()->alarm_transfer_time*1000,
   2157                                                                                   man_ope_alarm_callback);
   \   00000B06   0x.... 0x....      BL       man_data_get_setting_other
   \   00000B0A   0x4ABB             LDR      R2,??man_ope_mode_man_proc_196+0x4
   \   00000B0C   0x6881             LDR      R1,[R0, #+8]
   \   00000B0E   0x20FA             MOVS     R0,#+250
   \   00000B10   0x0080             LSLS     R0,R0,#+2        ;; #+1000
   \   00000B12   0x4341             MULS     R1,R0,R1
   \   00000B14   0x48B9             LDR      R0,??man_ope_mode_man_proc_196+0x8  ;; 0x40100047
   \   00000B16   0x.... 0x....      BL       man_timer_start_wait
   \   00000B1A   0xE002             B        ??man_ope_mode_man_proc_193
   2158          #if 0
   2159                                                          // 時刻設定
   2160          							jst_clock = man_gps_get_clock();
   2161          							man_rtc_set_clock(MAN_RTC_SEL_ALARM, MAN_RTC_STS_OK, jst_clock);
   2162          							// メッセージ送信(49)
   2163          							man_msg_set_type(MAN_MSG_TYPE_WUP_FIX);
   2164          							// NETWORK停止
   2165          							man_net_req_off();
   2166          							man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_NET_OFF);
   2167          #endif
   2168          						}
   2169          						// IMESは時刻を保持してないため、LTCの時刻取得を行う
   2170          						else {
   2171          							// LTEからRTC取得依頼
   2172          							man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_GET_RTC_REQ);
   \                     ??man_ope_mode_man_proc_195: (+1)
   \   00000B1C   0x202F             MOVS     R0,#+47
   \   00000B1E   0x.... 0x....      BL       man_ope_set_mode_seq
   2173          						}
   2174          					}
   2175          				}
   2176          			}
   2177          			break;
   \                     ??man_ope_mode_man_proc_193: (+1)
   \   00000B22   0xE205             B        ??man_ope_mode_man_proc_42
   2178          
   2179          		case MAN_OPE_SEQ_EXTOFF_GPS_WAIT_OK:		// 測位時間経過
   2180          		case MAN_OPE_SEQ_EXTOFF_GPS_WAIT_NG:		// 測位時間経過
   2181          			// EXT POWER : EXT OFF(SLEEP)状態
   2182          			man_ope_set_switch_pos(MAN_OPE_SWITCH_EXT_OFF_SLEEP);
   \                     ??man_ope_mode_man_proc_84: (+1)
   \   00000B24   0x2003             MOVS     R0,#+3
   \   00000B26   0x.... 0x....      BL       man_ope_set_switch_pos
   2183          
   2184          			// 外部電源喪失後の測位の場合
   2185          			if (ext_info->ext_mode == MAN_OPE_EXT_MODE_EXT_OFF) {
   \   00000B2A   0x7838             LDRB     R0,[R7, #+0]
   \   00000B2C   0x2800             CMP      R0,#+0
   \   00000B2E   0xD108             BNE      ??man_ope_mode_man_proc_197
   2186          				// メッセージ送信(52)
   2187          				man_msg_set_type(MAN_MSG_TYPE_NO_FIXID);
   \   00000B30   0x2034             MOVS     R0,#+52
   \   00000B32   0x.... 0x....      BL       man_msg_set_type
   2188          				// NETWORK停止
   2189          				man_net_req_off();
   \   00000B36   0x.... 0x....      BL       man_net_req_off
   2190          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_NET_OFF);
   \   00000B3A   0x2034             MOVS     R0,#+52
   \   00000B3C   0x.... 0x....      BL       man_ope_set_mode_seq
   \   00000B40   0xE005             B        ??man_ope_mode_man_proc_198
   2191          			}
   2192          			// 定刻起動時の測位の場合
   2193          			else if (ext_info->ext_mode == MAN_OPE_EXT_MODE_ALARM) {
   \                     ??man_ope_mode_man_proc_197: (+1)
   \   00000B42   0x7838             LDRB     R0,[R7, #+0]
   \   00000B44   0x2801             CMP      R0,#+1
   \   00000B46   0xD102             BNE      ??man_ope_mode_man_proc_198
   2194          				// LTEからRTC取得依頼
   2195          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_GET_RTC_REQ);
   \   00000B48   0x202F             MOVS     R0,#+47
   \   00000B4A   0x.... 0x....      BL       man_ope_set_mode_seq
   2196          			}
   2197          			break;
   \                     ??man_ope_mode_man_proc_198: (+1)
   \   00000B4E   0xE1EF             B        ??man_ope_mode_man_proc_42
   2198          
   2199          		case MAN_OPE_SEQ_EXTOFF_GET_RTC_REQ:		// LTEからRTC取得依頼
   2200          			// HTTPの使用状況を確認する
   2201          			if (sts == 0) {
   \                     ??man_ope_mode_man_proc_85: (+1)
   \   00000B50   0x9802             LDR      R0,[SP, #+8]
   \   00000B52   0x2800             CMP      R0,#+0
   \   00000B54   0xD121             BNE      ??man_ope_mode_man_proc_199
   2202          				// MSGの送信完了を待つ
   2203          				if (man_msg_check_send_state() == 0) {
   \   00000B56   0x.... 0x....      BL       man_msg_check_send_state
   \   00000B5A   0x2800             CMP      R0,#+0
   \   00000B5C   0xD11D             BNE      ??man_ope_mode_man_proc_199
   2204          					// RPT送信終了を待つ
   2205          					if (man_rpt_check_send_state() == 0) {
   \   00000B5E   0x.... 0x....      BL       man_rpt_check_send_state
   \   00000B62   0x2800             CMP      R0,#+0
   \   00000B64   0xD119             BNE      ??man_ope_mode_man_proc_199
   2206          						// NET OPEN && 圏内
   2207          						if ( (sensor_info->net_mode == MAN_LTE_MODE_OPEN) && (sensor_info->rssi_sts == MAN_DATA_RSSI_STS_OK) ) {
   \   00000B66   0x20BD             MOVS     R0,#+189
   \   00000B68   0x0100             LSLS     R0,R0,#+4        ;; #+3024
   \   00000B6A   0x5C28             LDRB     R0,[R5, R0]
   \   00000B6C   0x2801             CMP      R0,#+1
   \   00000B6E   0xD111             BNE      ??man_ope_mode_man_proc_200
   \   00000B70   0x4805             LDR      R0,??man_ope_mode_man_proc_171  ;; 0xbd8
   \   00000B72   0x5C28             LDRB     R0,[R5, R0]
   \   00000B74   0x2801             CMP      R0,#+1
   \   00000B76   0xD10D             BNE      ??man_ope_mode_man_proc_200
   2208          							// LTEからRTC取得
   2209          							man_http_get_rtc(MAN_OPE_SEQ_EXTOFF_GET_RTC, man_ope_mode_req_callback);
   \   00000B78   0x495E             LDR      R1,??man_ope_mode_man_proc_186
   \   00000B7A   0x2030             MOVS     R0,#+48
   \   00000B7C   0x.... 0x....      BL       man_http_get_rtc
   2210          							man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_GET_RTC);
   \   00000B80   0x2030             MOVS     R0,#+48
   \   00000B82   0x.... 0x....      BL       man_ope_set_mode_seq
   \   00000B86   0xE008             B        ??man_ope_mode_man_proc_199
   \                     ??man_ope_mode_man_proc_171:
   \   00000B88   0x00000BD8         DC32     0xbd8
   \   00000B8C   0x........         DC32     man_ope_work
   \   00000B90   0x0000EA60         DC32     0xea60
   2211          						}
   2212          						// 圏外時はRTCの取得を行わない
   2213          						else {
   2214          							man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_GET_RTC_END);
   \                     ??man_ope_mode_man_proc_200: (+1)
   \   00000B94   0x2033             MOVS     R0,#+51
   \   00000B96   0x.... 0x....      BL       man_ope_set_mode_seq
   2215          						}
   2216          					}
   2217          				}
   2218          			}
   2219          			break;
   \                     ??man_ope_mode_man_proc_199: (+1)
   \   00000B9A   0xE1C9             B        ??man_ope_mode_man_proc_42
   2220          		case MAN_OPE_SEQ_EXTOFF_GET_RTC:			// LTEからRTC取得開始
   2221          			break;
   \                     ??man_ope_mode_man_proc_86: (+1)
   \   00000B9C   0xE1C8             B        ??man_ope_mode_man_proc_42
   2222          		case MAN_OPE_SEQ_EXTOFF_GET_RTC_OK:			// LTEからRTC取得完了
   2223          			// 時刻設定
   2224          			jst_clock = man_http_get_clock();
   \                     ??man_ope_mode_man_proc_87: (+1)
   \   00000B9E   0x.... 0x....      BL       man_http_get_clock
   \   00000BA2   0x0002             MOVS     R2,R0
   2225          			man_rtc_set_clock(MAN_RTC_SEL_ALARM, MAN_RTC_STS_OK, jst_clock);
   \   00000BA4   0x2101             MOVS     R1,#+1
   \   00000BA6   0x2002             MOVS     R0,#+2
   \   00000BA8   0x.... 0x....      BL       man_rtc_set_clock
   2226          			man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_GET_RTC_END);
   \   00000BAC   0x2033             MOVS     R0,#+51
   \   00000BAE   0x.... 0x....      BL       man_ope_set_mode_seq
   2227          			break;
   \   00000BB2   0xE1BD             B        ??man_ope_mode_man_proc_42
   2228          		case MAN_OPE_SEQ_EXTOFF_GET_RTC_NG:			// LTEからRTC取得完了
   2229          			man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_GET_RTC_END);
   \                     ??man_ope_mode_man_proc_88: (+1)
   \   00000BB4   0x2033             MOVS     R0,#+51
   \   00000BB6   0x.... 0x....      BL       man_ope_set_mode_seq
   2230          			break;
   \   00000BBA   0xE1B9             B        ??man_ope_mode_man_proc_42
   2231          
   2232          		case MAN_OPE_SEQ_EXTOFF_GET_RTC_END:		// LTEからRTC取得完了後の処理
   2233          			// GPS 有効位置情報取得判定
   2234          			if (sensor_info->nmea_status == MAN_GPS_NMEA_STATUS_EFFECTIVE) {
   \                     ??man_ope_mode_man_proc_89: (+1)
   \   00000BBC   0x484F             LDR      R0,??man_ope_mode_man_proc_186+0x8  ;; 0xbc8
   \   00000BBE   0x5828             LDR      R0,[R5, R0]
   \   00000BC0   0x2802             CMP      R0,#+2
   \   00000BC2   0xD103             BNE      ??man_ope_mode_man_proc_201
   2235          				// メッセージ送信(49)
   2236          				man_msg_set_type(MAN_MSG_TYPE_WUP_FIX);
   \   00000BC4   0x2031             MOVS     R0,#+49
   \   00000BC6   0x.... 0x....      BL       man_msg_set_type
   \   00000BCA   0xE002             B        ??man_ope_mode_man_proc_202
   2237          			}
   2238          			else {
   2239          				// メッセージ送信(50)
   2240          				man_msg_set_type(MAN_MSG_TYPE_WUP_NOT);
   \                     ??man_ope_mode_man_proc_201: (+1)
   \   00000BCC   0x2032             MOVS     R0,#+50
   \   00000BCE   0x.... 0x....      BL       man_msg_set_type
   2241          			}
   2242          
   2243          			// NETWORK停止
   2244          			man_net_req_off();
   \                     ??man_ope_mode_man_proc_202: (+1)
   \   00000BD2   0x.... 0x....      BL       man_net_req_off
   2245          			man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_NET_OFF);
   \   00000BD6   0x2034             MOVS     R0,#+52
   \   00000BD8   0x.... 0x....      BL       man_ope_set_mode_seq
   2246          			break;
   \   00000BDC   0xE1A8             B        ??man_ope_mode_man_proc_42
   2247          
   2248          
   2249          		case MAN_OPE_SEQ_EXTOFF_NET_OFF:			// NETWORK停止中
   2250          			// NETがOFFY状態になるのを待つ
   2251          			if (mode_info->net_state == MAN_NET_NOTI_NOW_OFF) {
   \                     ??man_ope_mode_man_proc_90: (+1)
   \   00000BDE   0x6B60             LDR      R0,[R4, #+52]
   \   00000BE0   0x2809             CMP      R0,#+9
   \   00000BE2   0xD102             BNE      ??man_ope_mode_man_proc_203
   2252          				// NET OFF後の処理へ移行
   2253          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_NET_OFF_OK);
   \   00000BE4   0x2035             MOVS     R0,#+53
   \   00000BE6   0x.... 0x....      BL       man_ope_set_mode_seq
   2254          			}
   2255          			break;
   \                     ??man_ope_mode_man_proc_203: (+1)
   \   00000BEA   0xE1A1             B        ??man_ope_mode_man_proc_42
   2256          		case MAN_OPE_SEQ_EXTOFF_NET_OFF_OK:			// NETWORK停止完了(成功)
   2257          //		case MAN_OPE_SEQ_EXTOFF_NET_OFF_NG:			// NETWORK停止完了(異常)
   2258          			// 動作モードのが切り替えられた場合、中止する
   2259          			// 外部電源がONに切り替わった場合、中止する
   2260          			if ( ( ( mode_info->gole_mode != MAN_OPE_MODE_EXT_OFF1 ) && ( mode_info->gole_mode != MAN_OPE_MODE_EXT_OFF2 ) ) 
   2261          				|| ( man_ope_work.ext_sts.ext_fixed == MAN_OPE_EXT_ON ) ) {
   \                     ??man_ope_mode_man_proc_91: (+1)
   \   00000BEC   0x78A0             LDRB     R0,[R4, #+2]
   \   00000BEE   0x2807             CMP      R0,#+7
   \   00000BF0   0xD002             BEQ      ??man_ope_mode_man_proc_204
   \   00000BF2   0x78A0             LDRB     R0,[R4, #+2]
   \   00000BF4   0x2808             CMP      R0,#+8
   \   00000BF6   0xD103             BNE      ??man_ope_mode_man_proc_205
   \                     ??man_ope_mode_man_proc_204: (+1)
   \   00000BF8   0x4881             LDR      R0,??man_ope_mode_man_proc_196+0xC
   \   00000BFA   0x6E40             LDR      R0,[R0, #+100]
   \   00000BFC   0x2800             CMP      R0,#+0
   \   00000BFE   0xD105             BNE      ??man_ope_mode_man_proc_206
   2262          				// 測位解除
   2263          				ext_info->ext_mode = MAN_OPE_EXT_MODE_EXIT;
   \                     ??man_ope_mode_man_proc_205: (+1)
   \   00000C00   0x2002             MOVS     R0,#+2
   \   00000C02   0x7038             STRB     R0,[R7, #+0]
   2264          				// 測位状態を解除する
   2265          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_END_GPS_ON_OK);
   \   00000C04   0x203A             MOVS     R0,#+58
   \   00000C06   0x.... 0x....      BL       man_ope_set_mode_seq
   \   00000C0A   0xE008             B        ??man_ope_mode_man_proc_207
   2266          			}
   2267          			else {
   2268          				// 気温・気圧・高度計 OFF
   2269          				man_press_off();
   \                     ??man_ope_mode_man_proc_206: (+1)
   \   00000C0C   0x.... 0x....      BL       man_press_off
   2270          				// 加速度・角速度計 OFF
   2271          				man_gyro_off();
   \   00000C10   0x.... 0x....      BL       man_gyro_off
   2272          				// GPS電源OFF
   2273          				man_gps_req_off();
   \   00000C14   0x.... 0x....      BL       man_gps_req_off
   2274          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_GPS_OFF);
   \   00000C18   0x2036             MOVS     R0,#+54
   \   00000C1A   0x.... 0x....      BL       man_ope_set_mode_seq
   2275          			}
   2276          			break;
   \                     ??man_ope_mode_man_proc_207: (+1)
   \   00000C1E   0xE187             B        ??man_ope_mode_man_proc_42
   2277          
   2278          		case MAN_OPE_SEQ_EXTOFF_GPS_OFF:			// GPS停止中
   2279          			// GPSがSTBY状態になるのを待つ
   2280          			if (mode_info->gps_state == MAN_GPS_NOTI_NOW_STBY) {
   \                     ??man_ope_mode_man_proc_92: (+1)
   \   00000C20   0x6BA0             LDR      R0,[R4, #+56]
   \   00000C22   0x2805             CMP      R0,#+5
   \   00000C24   0xD102             BNE      ??man_ope_mode_man_proc_208
   2281          				// GPS STBY後の処理へ移行
   2282          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_GPS_OFF_OK);
   \   00000C26   0x2037             MOVS     R0,#+55
   \   00000C28   0x.... 0x....      BL       man_ope_set_mode_seq
   2283          			}
   2284          			break;
   \                     ??man_ope_mode_man_proc_208: (+1)
   \   00000C2C   0xE180             B        ??man_ope_mode_man_proc_42
   2285          		case MAN_OPE_SEQ_EXTOFF_GPS_OFF_OK:			// GPS停止完了(成功)
   2286          			// 動作モードのが切り替えられた場合、中止する
   2287          			// 外部電源がONに切り替わった場合、中止する
   2288          			if ( ( ( mode_info->gole_mode != MAN_OPE_MODE_EXT_OFF1 ) && ( mode_info->gole_mode != MAN_OPE_MODE_EXT_OFF2 ) ) 
   2289          				|| ( man_ope_work.ext_sts.ext_fixed == MAN_OPE_EXT_ON ) ) {
   \                     ??man_ope_mode_man_proc_93: (+1)
   \   00000C2E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000C30   0x2807             CMP      R0,#+7
   \   00000C32   0xD002             BEQ      ??man_ope_mode_man_proc_209
   \   00000C34   0x78A0             LDRB     R0,[R4, #+2]
   \   00000C36   0x2808             CMP      R0,#+8
   \   00000C38   0xD103             BNE      ??man_ope_mode_man_proc_210
   \                     ??man_ope_mode_man_proc_209: (+1)
   \   00000C3A   0x4871             LDR      R0,??man_ope_mode_man_proc_196+0xC
   \   00000C3C   0x6E40             LDR      R0,[R0, #+100]
   \   00000C3E   0x2800             CMP      R0,#+0
   \   00000C40   0xD105             BNE      ??man_ope_mode_man_proc_211
   2290          
   2291          				// 測位状態を解除する
   2292          				mode_info->start_proc = MAN_OPE_START_PROC_EXTOFF_ON;
   \                     ??man_ope_mode_man_proc_210: (+1)
   \   00000C42   0x200A             MOVS     R0,#+10
   \   00000C44   0x7260             STRB     R0,[R4, #+9]
   2293          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_END_REQ);
   \   00000C46   0x2038             MOVS     R0,#+56
   \   00000C48   0x.... 0x....      BL       man_ope_set_mode_seq
   \   00000C4C   0xE006             B        ??man_ope_mode_man_proc_212
   2294          			}
   2295          
   2296          			else {
   2297          
   2298          				man_ope_set_mode_seq(MAN_OPE_SEQ_IDLE);
   \                     ??man_ope_mode_man_proc_211: (+1)
   \   00000C4E   0x2000             MOVS     R0,#+0
   \   00000C50   0x.... 0x....      BL       man_ope_set_mode_seq
   2299          				// 遷移完了
   2300          				mode_info->now_mode = mode_info->next_mode;
   \   00000C54   0x7860             LDRB     R0,[R4, #+1]
   \   00000C56   0x7020             STRB     R0,[R4, #+0]
   2301          
   2302          #ifdef GNSS_DEBUG_MAN_OPE 
   2303          				sprintf((char *)&man_ope_work.buff[0], "NOW MODE(%d)\n", mode_info->now_mode);
   2304          				length = strlen((char const *)&man_ope_work.buff[0]);
   2305          				man_usb_data_send(&man_ope_work.buff[0], length);
   2306          #endif
   2307          
   2308          				// 外部電源モードによるSLEEP開始
   2309          				mode_info->mode_sleep = MAN_OPE_SLEEP_EXT_REQ;
   \   00000C58   0x2004             MOVS     R0,#+4
   \   00000C5A   0x7220             STRB     R0,[R4, #+8]
   2310          			}
   2311          			break;
   \                     ??man_ope_mode_man_proc_212: (+1)
   \   00000C5C   0xE168             B        ??man_ope_mode_man_proc_42
   2312          
   2313          
   2314          
   2315          		// ******************************************************
   2316          		// SLEEPからの復帰開始(定刻測位, 復帰開始)
   2317          		// ******************************************************
   2318          		case MAN_OPE_SEQ_EXTOFF_END_REQ:			// SLEEPからの復帰開始
   2319          			// 前処理
   2320          			switch (mode_info->start_proc) {
   \                     ??man_ope_mode_man_proc_94: (+1)
   \   00000C5E   0x7A60             LDRB     R0,[R4, #+9]
   \   00000C60   0x2800             CMP      R0,#+0
   \   00000C62   0xD003             BEQ      ??man_ope_mode_man_proc_213
   \   00000C64   0x3809             SUBS     R0,R0,#+9
   \   00000C66   0x2802             CMP      R0,#+2
   \   00000C68   0xD904             BLS      ??man_ope_mode_man_proc_214
   \   00000C6A   0xE007             B        ??man_ope_mode_man_proc_215
   2321          			case MAN_OPE_START_PROC_NON:
   2322          				man_ope_set_switch_pos(MAN_OPE_SWITCH_EXT_OFF_TIME);	// EXT POWER : EXT OFF(定刻測位)
   \                     ??man_ope_mode_man_proc_213: (+1)
   \   00000C6C   0x2004             MOVS     R0,#+4
   \   00000C6E   0x.... 0x....      BL       man_ope_set_switch_pos
   2323          				break;
   \   00000C72   0xE003             B        ??man_ope_mode_man_proc_216
   2324          			case MAN_OPE_START_PROC_EXTOFF_OFF:
   2325          			case MAN_OPE_START_PROC_EXTOFF_ON:
   2326          			case MAN_OPE_START_PROC_EXTOFF_BAT:
   2327          				// 測位解除
   2328          				man_ope_work.ext_info.ext_mode = MAN_OPE_EXT_MODE_EXIT;
   \                     ??man_ope_mode_man_proc_214: (+1)
   \   00000C74   0x2002             MOVS     R0,#+2
   \   00000C76   0x....             LDR      R1,??DataTable11
   \   00000C78   0x7008             STRB     R0,[R1, #+0]
   2329          				break;
   \   00000C7A   0xE7FF             B        ??man_ope_mode_man_proc_216
   2330          			default:
   2331          				break;
   2332          			}
   2333          
   2334          			// 気温・気圧・高度計ON
   2335          			man_press_on();
   \                     ??man_ope_mode_man_proc_215: (+1)
   \                     ??man_ope_mode_man_proc_216: (+1)
   \   00000C7C   0x.... 0x....      BL       man_press_on
   2336          			// 加速度・角速度計ON
   2337          			man_gyro_on();
   \   00000C80   0x.... 0x....      BL       man_gyro_on
   2338          			// GPS開始
   2339          			man_gps_req_open();
   \   00000C84   0x.... 0x....      BL       man_gps_req_open
   2340          			man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_END_GPS_ON);
   \   00000C88   0x2039             MOVS     R0,#+57
   \   00000C8A   0x.... 0x....      BL       man_ope_set_mode_seq
   2341          			break;
   \   00000C8E   0xE14F             B        ??man_ope_mode_man_proc_42
   2342          
   2343          		case MAN_OPE_SEQ_EXTOFF_END_GPS_ON:			// GPS再開中
   2344          			// GPSがOPEN状態になるのを待つ
   2345          			if (mode_info->gps_state == MAN_GPS_NOTI_NOW_OPEN) {
   \                     ??man_ope_mode_man_proc_95: (+1)
   \   00000C90   0x6BA0             LDR      R0,[R4, #+56]
   \   00000C92   0x2802             CMP      R0,#+2
   \   00000C94   0xD102             BNE      ??man_ope_mode_man_proc_217
   2346          				// GPS OPEN後の処理へ移行
   2347          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_END_GPS_ON_OK);
   \   00000C96   0x203A             MOVS     R0,#+58
   \   00000C98   0x.... 0x....      BL       man_ope_set_mode_seq
   2348          			}
   2349          			break;
   \                     ??man_ope_mode_man_proc_217: (+1)
   \   00000C9C   0xE148             B        ??man_ope_mode_man_proc_42
   2350          
   2351          		case MAN_OPE_SEQ_EXTOFF_END_GPS_ON_OK:		// GPS再開完了(成功)
   2352          			// network開始
   2353          			man_net_req_open();
   \                     ??man_ope_mode_man_proc_96: (+1)
   \   00000C9E   0x.... 0x....      BL       man_net_req_open
   2354          			man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_END_NET_ON);
   \   00000CA2   0x203B             MOVS     R0,#+59
   \   00000CA4   0x.... 0x....      BL       man_ope_set_mode_seq
   2355          			break;
   \   00000CA8   0xE142             B        ??man_ope_mode_man_proc_42
   2356          
   2357          		case MAN_OPE_SEQ_EXTOFF_END_NET_ON:			// NETWORK再開中
   2358          			// NETがOPEN状態になるのを待つ
   2359          			if (mode_info->net_state == MAN_NET_NOTI_NOW_OPEN) {
   \                     ??man_ope_mode_man_proc_97: (+1)
   \   00000CAA   0x6B60             LDR      R0,[R4, #+52]
   \   00000CAC   0x2803             CMP      R0,#+3
   \   00000CAE   0xD103             BNE      ??man_ope_mode_man_proc_218
   2360          				// NET OPEN後の処理へ移行
   2361          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_END_NET_ON_OK);
   \   00000CB0   0x203C             MOVS     R0,#+60
   \   00000CB2   0x.... 0x....      BL       man_ope_set_mode_seq
   \   00000CB6   0xE035             B        ??man_ope_mode_man_proc_219
   2362          #if 0 //20190517 時刻同期機能OFF
   2363                                          sysmgr_manual_update_date_time();
   2364          #endif
   2365          			}
   2366          
   2367          			// 60秒経過しても圏外の場合はNET OPEN後の処理へ移行
   2368          			else if (mode_info->net_state == MAN_NET_NOTI_TO_NET_OPEN) {
   \                     ??man_ope_mode_man_proc_218: (+1)
   \   00000CB8   0x6B60             LDR      R0,[R4, #+52]
   \   00000CBA   0x2802             CMP      R0,#+2
   \   00000CBC   0xD122             BNE      ??man_ope_mode_man_proc_220
   2369          				// RTC取得済みの場合
   2370          				if ( (man_rtc_get_status() != MAN_RTC_STS_INIT) && (man_rtc_get_status() != MAN_RTC_STS_LTE_NG) ) {
   \   00000CBE   0x.... 0x....      BL       man_rtc_get_status
   \   00000CC2   0x2800             CMP      R0,#+0
   \   00000CC4   0xD02E             BEQ      ??man_ope_mode_man_proc_219
   \   00000CC6   0x.... 0x....      BL       man_rtc_get_status
   \   00000CCA   0x2802             CMP      R0,#+2
   \   00000CCC   0xD02A             BEQ      ??man_ope_mode_man_proc_219
   2371          					// 圏外の場合
   2372          					if (sensor_info->rssi_sts == MAN_DATA_RSSI_STS_NG) {
   \   00000CCE   0x....             LDR      R0,??DataTable12  ;; 0xbd8
   \   00000CD0   0x5C28             LDRB     R0,[R5, R0]
   \   00000CD2   0x2800             CMP      R0,#+0
   \   00000CD4   0xD126             BNE      ??man_ope_mode_man_proc_219
   2373          						delay_timer = man_timer_get_elapsed_time(man_ope_work.delay_timer, man_timer_get_1ms_count());
   \   00000CD6   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000CDA   0x0001             MOVS     R1,R0
   \   00000CDC   0x4848             LDR      R0,??man_ope_mode_man_proc_196+0xC
   \   00000CDE   0x6940             LDR      R0,[R0, #+20]
   \   00000CE0   0x.... 0x....      BL       man_timer_get_elapsed_time
   2374          						// 60秒経過した場合
   2375          						if (delay_timer >= MAN_OPE_RSSI_NG_DELAY_TIMER) {
   \   00000CE4   0x....             LDR      R1,??DataTable12_1  ;; 0xea60
   \   00000CE6   0x4288             CMP      R0,R1
   \   00000CE8   0xD31C             BCC      ??man_ope_mode_man_proc_219
   2376          							// NET OPEN後の処理へ移行
   2377          							man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_END_NET_ON_OK);
   \   00000CEA   0x203C             MOVS     R0,#+60
   \   00000CEC   0x.... 0x....      BL       man_ope_set_mode_seq
   \   00000CF0   0xE018             B        ??man_ope_mode_man_proc_219
   \   00000CF2   0xBF00             Nop      
   \                     ??man_ope_mode_man_proc_186:
   \   00000CF4   0x........         DC32     man_ope_mode_req_callback
   \   00000CF8   0x4010002C         DC32     0x4010002c
   \   00000CFC   0x00000BC8         DC32     0xbc8
   \   00000D00   0x00000BCC         DC32     0xbcc
   2378          						}
   2379          					}
   2380          				}
   2381          			}
   2382          
   2383          			// NETがリトライ中の場合、操作スイッチの変化に対応する
   2384          			else if (mode_info->net_state == MAN_NET_NOTI_TO_OPEN_RETRY) {
   \                     ??man_ope_mode_man_proc_220: (+1)
   \   00000D04   0x6B60             LDR      R0,[R4, #+52]
   \   00000D06   0x2807             CMP      R0,#+7
   \   00000D08   0xD10C             BNE      ??man_ope_mode_man_proc_219
   2385          				// 
   2386          				if (mode_info->next_mode != mode_info->gole_mode) {
   \   00000D0A   0x7860             LDRB     R0,[R4, #+1]
   \   00000D0C   0x78A1             LDRB     R1,[R4, #+2]
   \   00000D0E   0x4288             CMP      R0,R1
   \   00000D10   0xD008             BEQ      ??man_ope_mode_man_proc_219
   2387          					// OFFモード, DIRECTモード時はNET OFFのため、モードを切り替える
   2388          					if ( (mode_info->gole_mode == MAN_OPE_MODE_OFF) || (mode_info->gole_mode == MAN_OPE_MODE_DIRECT) ) {
   \   00000D12   0x78A0             LDRB     R0,[R4, #+2]
   \   00000D14   0x2801             CMP      R0,#+1
   \   00000D16   0xD002             BEQ      ??man_ope_mode_man_proc_221
   \   00000D18   0x78A0             LDRB     R0,[R4, #+2]
   \   00000D1A   0x2804             CMP      R0,#+4
   \   00000D1C   0xD102             BNE      ??man_ope_mode_man_proc_219
   2389          						// NET OPEN後の処理へ移行
   2390          						man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_END_NET_ON_OK);
   \                     ??man_ope_mode_man_proc_221: (+1)
   \   00000D1E   0x203C             MOVS     R0,#+60
   \   00000D20   0x.... 0x....      BL       man_ope_set_mode_seq
   2391          					}
   2392          				}
   2393          			}
   2394          			break;
   \                     ??man_ope_mode_man_proc_219: (+1)
   \   00000D24   0xE104             B        ??man_ope_mode_man_proc_42
   2395          
   2396          		case MAN_OPE_SEQ_EXTOFF_END_NET_ON_OK:		// NETWORK再開(成功)
   2397          			// 外部電源ON時に電圧0Vのメッセージ出力
   2398          			if (sensor_info->ext_state == MAN_CHARGE_EXTSTAT_ON) {
   \                     ??man_ope_mode_man_proc_98: (+1)
   \   00000D26   0x6F28             LDR      R0,[R5, #+112]
   \   00000D28   0x2801             CMP      R0,#+1
   \   00000D2A   0xD107             BNE      ??man_ope_mode_man_proc_222
   2399          				if (sensor_info->charge < fixed->battery_zero) {
   \   00000D2C   0x6EA8             LDR      R0,[R5, #+104]
   \   00000D2E   0x9901             LDR      R1,[SP, #+4]
   \   00000D30   0x6809             LDR      R1,[R1, #+0]
   \   00000D32   0x4288             CMP      R0,R1
   \   00000D34   0xD202             BCS      ??man_ope_mode_man_proc_222
   2400          					man_msg_set_type(MAN_MSG_TYPE_BATT_L);
   \   00000D36   0x202F             MOVS     R0,#+47
   \   00000D38   0x.... 0x....      BL       man_msg_set_type
   2401          				}
   2402          			}
   2403          
   2404          			// 動作モードのが切り替えられた場合、中止し目標を変更する
   2405          			if ( ( mode_info->gole_mode != MAN_OPE_MODE_EXT_OFF1 ) && ( mode_info->gole_mode != MAN_OPE_MODE_EXT_OFF2 ) ) {
   \                     ??man_ope_mode_man_proc_222: (+1)
   \   00000D3C   0x78A0             LDRB     R0,[R4, #+2]
   \   00000D3E   0x2807             CMP      R0,#+7
   \   00000D40   0xD046             BEQ      ??man_ope_mode_man_proc_223
   \   00000D42   0x78A0             LDRB     R0,[R4, #+2]
   \   00000D44   0x2808             CMP      R0,#+8
   \   00000D46   0xD043             BEQ      ??man_ope_mode_man_proc_223
   2406          				// 測位解除
   2407          				ext_info->ext_mode = MAN_OPE_EXT_MODE_EXIT;
   \   00000D48   0x2002             MOVS     R0,#+2
   \   00000D4A   0x7038             STRB     R0,[R7, #+0]
   2408          				// 目標を変更する
   2409          				end_mode = mode_seq_tbl[MAN_OPE_MODE_EXT_OFF1][mode_info->gole_mode].end_mode;
   \   00000D4C   0x....             LDR      R0,??DataTable13
   \   00000D4E   0x78A1             LDRB     R1,[R4, #+2]
   \   00000D50   0x2205             MOVS     R2,#+5
   \   00000D52   0x4351             MULS     R1,R2,R1
   \   00000D54   0x1840             ADDS     R0,R0,R1
   \   00000D56   0x21FF             MOVS     R1,#+255
   \   00000D58   0x3140             ADDS     R1,R1,#+64       ;; #+319
   \   00000D5A   0x5C40             LDRB     R0,[R0, R1]
   \   00000D5C   0x4669             MOV      R1,SP
   \   00000D5E   0x7008             STRB     R0,[R1, #+0]
   2410          				mode_seq = mode_seq_tbl[MAN_OPE_MODE_EXT_OFF1][mode_info->gole_mode].mode_seq;
   \   00000D60   0x....             LDR      R0,??DataTable13
   \   00000D62   0x78A1             LDRB     R1,[R4, #+2]
   \   00000D64   0x2205             MOVS     R2,#+5
   \   00000D66   0x4351             MULS     R1,R2,R1
   \   00000D68   0x1840             ADDS     R0,R0,R1
   \   00000D6A   0x21FF             MOVS     R1,#+255
   \   00000D6C   0x313C             ADDS     R1,R1,#+60       ;; #+315
   \   00000D6E   0x5C40             LDRB     R0,[R0, R1]
   2411          				start_proc = mode_seq_tbl[MAN_OPE_MODE_EXT_OFF1][mode_info->gole_mode].start_proc;
   \   00000D70   0x....             LDR      R1,??DataTable13
   \   00000D72   0x78A2             LDRB     R2,[R4, #+2]
   \   00000D74   0x2305             MOVS     R3,#+5
   \   00000D76   0x435A             MULS     R2,R3,R2
   \   00000D78   0x1889             ADDS     R1,R1,R2
   \   00000D7A   0x229E             MOVS     R2,#+158
   \   00000D7C   0x0052             LSLS     R2,R2,#+1        ;; #+316
   \   00000D7E   0x5C89             LDRB     R1,[R1, R2]
   \   00000D80   0x466A             MOV      R2,SP
   \   00000D82   0x7091             STRB     R1,[R2, #+2]
   2412          				end_proc = mode_seq_tbl[MAN_OPE_MODE_EXT_OFF1][mode_info->gole_mode].end_proc;
   \   00000D84   0x....             LDR      R1,??DataTable13
   \   00000D86   0x78A2             LDRB     R2,[R4, #+2]
   \   00000D88   0x2305             MOVS     R3,#+5
   \   00000D8A   0x435A             MULS     R2,R3,R2
   \   00000D8C   0x1889             ADDS     R1,R1,R2
   \   00000D8E   0x22FF             MOVS     R2,#+255
   \   00000D90   0x323E             ADDS     R2,R2,#+62       ;; #+317
   \   00000D92   0x5C89             LDRB     R1,[R1, R2]
   \   00000D94   0x466A             MOV      R2,SP
   \   00000D96   0x70D1             STRB     R1,[R2, #+3]
   2413          				proc_mode = mode_seq_tbl[MAN_OPE_MODE_EXT_OFF1][mode_info->gole_mode].proc_mode;
   \   00000D98   0x....             LDR      R1,??DataTable13
   \   00000D9A   0x78A2             LDRB     R2,[R4, #+2]
   \   00000D9C   0x2305             MOVS     R3,#+5
   \   00000D9E   0x435A             MULS     R2,R3,R2
   \   00000DA0   0x1889             ADDS     R1,R1,R2
   \   00000DA2   0x229F             MOVS     R2,#+159
   \   00000DA4   0x0052             LSLS     R2,R2,#+1        ;; #+318
   \   00000DA6   0x5C89             LDRB     R1,[R1, R2]
   \   00000DA8   0x466A             MOV      R2,SP
   \   00000DAA   0x7051             STRB     R1,[R2, #+1]
   2414          				mode_info->next_mode = end_mode;
   \   00000DAC   0x4669             MOV      R1,SP
   \   00000DAE   0x7809             LDRB     R1,[R1, #+0]
   \   00000DB0   0x7061             STRB     R1,[R4, #+1]
   2415          #ifdef GNSS_DEBUG_MAN_OPE 
   2416          				int32_t		length;
   2417          				sprintf((char *)&man_ope_work.buff[0], "OPE MODE(%d->%d)\n", MAN_OPE_MODE_EXT_OFF1, end_mode);
   2418          				length = strlen((char const *)&man_ope_work.buff[0]);
   2419          				man_usb_data_send(&man_ope_work.buff[0], length);
   2420          #endif
   2421          				// 遷移動作を開始する
   2422          				if (mode_seq != MAN_OPE_SEQ_IDLE) {
   \   00000DB2   0xB2C0             UXTB     R0,R0
   \   00000DB4   0x2800             CMP      R0,#+0
   \   00000DB6   0xD00B             BEQ      ??man_ope_mode_man_proc_223
   2423          					mode_info->start_proc = start_proc;
   \   00000DB8   0x4668             MOV      R0,SP
   \   00000DBA   0x7880             LDRB     R0,[R0, #+2]
   \   00000DBC   0x7260             STRB     R0,[R4, #+9]
   2424          					mode_info->end_proc = end_proc;
   \   00000DBE   0x4668             MOV      R0,SP
   \   00000DC0   0x78C0             LDRB     R0,[R0, #+3]
   \   00000DC2   0x72A0             STRB     R0,[R4, #+10]
   2425          					mode_info->proc_mode = proc_mode;
   \   00000DC4   0x4668             MOV      R0,SP
   \   00000DC6   0x7840             LDRB     R0,[R0, #+1]
   \   00000DC8   0x71A0             STRB     R0,[R4, #+6]
   2426          					mode_info->end_mode = end_mode;
   \   00000DCA   0x4668             MOV      R0,SP
   \   00000DCC   0x7800             LDRB     R0,[R0, #+0]
   \   00000DCE   0x7120             STRB     R0,[R4, #+4]
   2427          				}
   2428          			}
   2429          
   2430          			// 定刻起動時の測位の場合
   2431          			if (ext_info->ext_mode == MAN_OPE_EXT_MODE_ALARM) {
   \                     ??man_ope_mode_man_proc_223: (+1)
   \   00000DD0   0x7838             LDRB     R0,[R7, #+0]
   \   00000DD2   0x2801             CMP      R0,#+1
   \   00000DD4   0xD102             BNE      ??man_ope_mode_man_proc_224
   2432          				// 測位を開始する
   2433          				man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_START_POS);
   \   00000DD6   0x202B             MOVS     R0,#+43
   \   00000DD8   0x.... 0x....      BL       man_ope_set_mode_seq
   2434          			}
   2435          
   2436          			// 定刻起動時の測位でない場合
   2437          			if (ext_info->ext_mode != MAN_OPE_EXT_MODE_ALARM) {
   \                     ??man_ope_mode_man_proc_224: (+1)
   \   00000DDC   0x7838             LDRB     R0,[R7, #+0]
   \   00000DDE   0x2801             CMP      R0,#+1
   \   00000DE0   0xD033             BEQ      ??man_ope_mode_man_proc_225
   2438          				// 後処理
   2439          				switch (mode_info->end_proc) {
   \   00000DE2   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000DE4   0x2808             CMP      R0,#+8
   \   00000DE6   0xD00D             BEQ      ??man_ope_mode_man_proc_226
   \   00000DE8   0xD321             BCC      ??man_ope_mode_man_proc_227
   \   00000DEA   0x280A             CMP      R0,#+10
   \   00000DEC   0xD018             BEQ      ??man_ope_mode_man_proc_228
   \   00000DEE   0xD310             BCC      ??man_ope_mode_man_proc_229
   \   00000DF0   0xE01D             B        ??man_ope_mode_man_proc_227
   \   00000DF2   0xBF00             Nop      
   \                     ??man_ope_mode_man_proc_196:
   \   00000DF4   0x........         DC32     man_ope_work+0x208
   \   00000DF8   0x........         DC32     man_ope_alarm_callback
   \   00000DFC   0x40100047         DC32     0x40100047
   \   00000E00   0x........         DC32     man_ope_work
   2440          				case MAN_OPE_END_PROC_EXTOFF_OFF:
   2441          					man_msg_set_type(MAN_MSG_TYPE_SW_OFF);
   \                     ??man_ope_mode_man_proc_226: (+1)
   \   00000E04   0x2020             MOVS     R0,#+32
   \   00000E06   0x.... 0x....      BL       man_msg_set_type
   2442          					man_ope_set_switch_pos(MAN_OPE_SWITCH_OFF);		// OFF状態
   \   00000E0A   0x2000             MOVS     R0,#+0
   \   00000E0C   0x.... 0x....      BL       man_ope_set_switch_pos
   2443          					break;
   \   00000E10   0xE00D             B        ??man_ope_mode_man_proc_230
   2444          				case MAN_OPE_END_PROC_EXTOFF_ON:
   2445          					man_msg_set_type(MAN_MSG_TYPE_EXT_IN);
   \                     ??man_ope_mode_man_proc_229: (+1)
   \   00000E12   0x2022             MOVS     R0,#+34
   \   00000E14   0x.... 0x....      BL       man_msg_set_type
   2446          					man_ope_set_switch_pos(MAN_OPE_SWITCH_EXT_ON);	// EXT POWER : EXT ON状態
   \   00000E18   0x2001             MOVS     R0,#+1
   \   00000E1A   0x.... 0x....      BL       man_ope_set_switch_pos
   2447          					break;
   \   00000E1E   0xE006             B        ??man_ope_mode_man_proc_230
   2448          				case MAN_OPE_END_PROC_EXTOFF_BAT:
   2449          					man_msg_set_type(MAN_MSG_TYPE_BAT_IN);
   \                     ??man_ope_mode_man_proc_228: (+1)
   \   00000E20   0x2035             MOVS     R0,#+53
   \   00000E22   0x.... 0x....      BL       man_msg_set_type
   2450          					man_ope_set_switch_pos(MAN_OPE_SWITCH_BATTERY);	// BATTERY状態
   \   00000E26   0x2005             MOVS     R0,#+5
   \   00000E28   0x.... 0x....      BL       man_ope_set_switch_pos
   2451          					break;
   \   00000E2C   0xE7FF             B        ??man_ope_mode_man_proc_230
   2452          				default:
   2453          					break;
   2454          				}
   2455          
   2456          				// UDPの出力を再開する
   2457          				man_rpt_req_send_start();
   \                     ??man_ope_mode_man_proc_227: (+1)
   \                     ??man_ope_mode_man_proc_230: (+1)
   \   00000E2E   0x.... 0x....      BL       man_rpt_req_send_start
   2458          				if (mode_info->end_mode != MAN_OPE_MODE_OFF) {
   \   00000E32   0x7920             LDRB     R0,[R4, #+4]
   \   00000E34   0x2801             CMP      R0,#+1
   \   00000E36   0xD005             BEQ      ??man_ope_mode_man_proc_231
   2459          					// 遷移完了
   2460          					man_ope_set_mode_seq(MAN_OPE_SEQ_IDLE);
   \   00000E38   0x2000             MOVS     R0,#+0
   \   00000E3A   0x.... 0x....      BL       man_ope_set_mode_seq
   2461          					mode_info->now_mode = mode_info->next_mode;
   \   00000E3E   0x7860             LDRB     R0,[R4, #+1]
   \   00000E40   0x7020             STRB     R0,[R4, #+0]
   \   00000E42   0xE002             B        ??man_ope_mode_man_proc_225
   2462          				}
   2463          
   2464          				// 目標がOFFモード時はOFF処理に移行する
   2465          				else {
   2466          					man_ope_set_mode_seq(MAN_OPE_SEQ_NORMAL_OFF_REQ);
   \                     ??man_ope_mode_man_proc_231: (+1)
   \   00000E44   0x200D             MOVS     R0,#+13
   \   00000E46   0x.... 0x....      BL       man_ope_set_mode_seq
   2467          				}
   2468          			}
   2469          			break;
   \                     ??man_ope_mode_man_proc_225: (+1)
   \   00000E4A   0xE071             B        ??man_ope_mode_man_proc_42
   2470          
   2471          
   2472          
   2473          		// ******************************************************
   2474          		// 直結からの電源OFF開始
   2475          		// ******************************************************
   2476          		case MAN_OPE_SEQ_DIRECT_OFF_REQ:
   2477          			// 気温・気圧・高度計 OFF
   2478          			man_press_off();
   \                     ??man_ope_mode_man_proc_99: (+1)
   \   00000E4C   0x.... 0x....      BL       man_press_off
   2479          			// 加速度・角速度計 OFF
   2480          			man_gyro_off();
   \   00000E50   0x.... 0x....      BL       man_gyro_off
   2481          			// GPS電源OFF
   2482          			man_gps_req_off();
   \   00000E54   0x.... 0x....      BL       man_gps_req_off
   2483          			man_ope_set_mode_seq(MAN_OPE_SEQ_DIRECT_OFF_GPS_OFF);
   \   00000E58   0x203E             MOVS     R0,#+62
   \   00000E5A   0x.... 0x....      BL       man_ope_set_mode_seq
   2484          			break;
   \   00000E5E   0xE067             B        ??man_ope_mode_man_proc_42
   2485          
   2486          		case MAN_OPE_SEQ_DIRECT_OFF_GPS_OFF:
   2487          			// GPSがSTBY状態になるのを待つ
   2488          			if (mode_info->gps_state == MAN_GPS_NOTI_NOW_STBY) {
   \                     ??man_ope_mode_man_proc_100: (+1)
   \   00000E60   0x6BA0             LDR      R0,[R4, #+56]
   \   00000E62   0x2805             CMP      R0,#+5
   \   00000E64   0xD102             BNE      ??man_ope_mode_man_proc_232
   2489          				// GPS STBY後の処理へ移行
   2490          				man_ope_set_mode_seq(MAN_OPE_SEQ_DIRECT_OFF_GPS_OFF_OK);
   \   00000E66   0x203F             MOVS     R0,#+63
   \   00000E68   0x.... 0x....      BL       man_ope_set_mode_seq
   2491          			}
   2492          			break;
   \                     ??man_ope_mode_man_proc_232: (+1)
   \   00000E6C   0xE060             B        ??man_ope_mode_man_proc_42
   2493          
   2494          		case MAN_OPE_SEQ_DIRECT_OFF_GPS_OFF_OK:
   2495          			// 遷移完了
   2496          			man_ope_set_mode_seq(MAN_OPE_SEQ_IDLE);
   \                     ??man_ope_mode_man_proc_101: (+1)
   \   00000E6E   0x2000             MOVS     R0,#+0
   \   00000E70   0x.... 0x....      BL       man_ope_set_mode_seq
   2497          			mode_info->now_mode = mode_info->next_mode;
   \   00000E74   0x7860             LDRB     R0,[R4, #+1]
   \   00000E76   0x7020             STRB     R0,[R4, #+0]
   2498          
   2499          			// 後処理
   2500          			switch (mode_info->end_proc) {
   \   00000E78   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000E7A   0x2800             CMP      R0,#+0
   \   00000E7C   0xD002             BEQ      ??man_ope_mode_man_proc_233
   \   00000E7E   0x2805             CMP      R0,#+5
   \   00000E80   0xD001             BEQ      ??man_ope_mode_man_proc_234
   \   00000E82   0xE003             B        ??man_ope_mode_man_proc_235
   2501          			case MAN_OPE_END_PROC_NON:
   2502          				break;
   \                     ??man_ope_mode_man_proc_233: (+1)
   \   00000E84   0xE002             B        ??man_ope_mode_man_proc_236
   2503          			case MAN_OPE_END_PROC_RESET:
   2504          				wdt_reset();
   \                     ??man_ope_mode_man_proc_234: (+1)
   \   00000E86   0x.... 0x....      BL       wdt_reset
   2505          				break;
   \   00000E8A   0xE7FF             B        ??man_ope_mode_man_proc_236
   2506          			default:
   2507          				break;
   2508          			}
   2509          
   2510          			break;
   \                     ??man_ope_mode_man_proc_235: (+1)
   \                     ??man_ope_mode_man_proc_236: (+1)
   \   00000E8C   0xE050             B        ??man_ope_mode_man_proc_42
   2511          
   2512          
   2513          		// ******************************************************
   2514          		// 直結からのUSB OTA開始
   2515          		// ******************************************************
   2516          		case MAN_OPE_SEQ_USBOTA_START_REQ:
   2517          			// 気温・気圧・高度計 OFF
   2518          			man_press_off();
   \                     ??man_ope_mode_man_proc_102: (+1)
   \   00000E8E   0x.... 0x....      BL       man_press_off
   2519          			// 加速度・角速度計 OFF
   2520          			man_gyro_off();
   \   00000E92   0x.... 0x....      BL       man_gyro_off
   2521          			// GPS停止
   2522          			man_gps_req_close();
   \   00000E96   0x.... 0x....      BL       man_gps_req_close
   2523          			man_ope_set_mode_seq(MAN_OPE_SEQ_USBOTA_START);
   \   00000E9A   0x2041             MOVS     R0,#+65
   \   00000E9C   0x.... 0x....      BL       man_ope_set_mode_seq
   2524          			break;
   \   00000EA0   0xE046             B        ??man_ope_mode_man_proc_42
   2525          		case MAN_OPE_SEQ_USBOTA_START:
   2526          			// GPSがCLOSE, OPEN異常状態になるのを待つ
   2527          			if ( (mode_info->gps_state == MAN_GPS_NOTI_NOW_CLOSE) || (mode_info->gps_state == MAN_GPS_NOTI_OPEN_ERROR) ) {
   \                     ??man_ope_mode_man_proc_103: (+1)
   \   00000EA2   0x6BA0             LDR      R0,[R4, #+56]
   \   00000EA4   0x2800             CMP      R0,#+0
   \   00000EA6   0xD002             BEQ      ??man_ope_mode_man_proc_237
   \   00000EA8   0x6BA0             LDR      R0,[R4, #+56]
   \   00000EAA   0x2807             CMP      R0,#+7
   \   00000EAC   0xD102             BNE      ??man_ope_mode_man_proc_238
   2528          				// GPS CLOSE後の処理へ移行
   2529          				man_ope_set_mode_seq(MAN_OPE_SEQ_USBOTA_START_OK);
   \                     ??man_ope_mode_man_proc_237: (+1)
   \   00000EAE   0x2042             MOVS     R0,#+66
   \   00000EB0   0x.... 0x....      BL       man_ope_set_mode_seq
   2530          			}
   2531          			break;
   \                     ??man_ope_mode_man_proc_238: (+1)
   \   00000EB4   0xE03C             B        ??man_ope_mode_man_proc_42
   2532          		case MAN_OPE_SEQ_USBOTA_START_OK:
   2533          			// 遷移完了
   2534          			mode_info->now_mode = mode_info->next_mode;
   \                     ??man_ope_mode_man_proc_104: (+1)
   \   00000EB6   0x7860             LDRB     R0,[R4, #+1]
   \   00000EB8   0x7020             STRB     R0,[R4, #+0]
   2535          			man_ope_return_callback(MAN_OPE_STATUS_OK);
   \   00000EBA   0x2000             MOVS     R0,#+0
   \   00000EBC   0x.... 0x....      BL       man_ope_return_callback
   2536          			break;
   \   00000EC0   0xE036             B        ??man_ope_mode_man_proc_42
   2537          
   2538          
   2539          		// ******************************************************
   2540          		// USB OTAからの直結
   2541          		// ******************************************************
   2542          		case MAN_OPE_SEQ_USBOTA_END_REQ:
   2543          			// 気温・気圧・高度計ON
   2544          			man_press_on();
   \                     ??man_ope_mode_man_proc_105: (+1)
   \   00000EC2   0x.... 0x....      BL       man_press_on
   2545          			// 加速度・角速度計ON
   2546          			man_gyro_on();
   \   00000EC6   0x.... 0x....      BL       man_gyro_on
   2547          			// GPS開始
   2548          			man_gps_req_open();
   \   00000ECA   0x.... 0x....      BL       man_gps_req_open
   2549          			man_ope_set_mode_seq(MAN_OPE_SEQ_USBOTA_END);
   \   00000ECE   0x2044             MOVS     R0,#+68
   \   00000ED0   0x.... 0x....      BL       man_ope_set_mode_seq
   2550          			break;
   \   00000ED4   0xE02C             B        ??man_ope_mode_man_proc_42
   2551          
   2552          		case MAN_OPE_SEQ_USBOTA_END:
   2553          			// GPSがOPEN状態になるのを待つ
   2554          			if (mode_info->gps_state == MAN_GPS_NOTI_NOW_OPEN) {
   \                     ??man_ope_mode_man_proc_106: (+1)
   \   00000ED6   0x6BA0             LDR      R0,[R4, #+56]
   \   00000ED8   0x2802             CMP      R0,#+2
   \   00000EDA   0xD103             BNE      ??man_ope_mode_man_proc_239
   2555          				// GPS OPEN後の処理へ移行
   2556          				man_ope_set_mode_seq(MAN_OPE_SEQ_USBOTA_END_OK);
   \   00000EDC   0x2045             MOVS     R0,#+69
   \   00000EDE   0x.... 0x....      BL       man_ope_set_mode_seq
   \   00000EE2   0xE005             B        ??man_ope_mode_man_proc_240
   2557          			}
   2558          			else if (mode_info->gps_state == MAN_GPS_NOTI_OPEN_ERROR) {
   \                     ??man_ope_mode_man_proc_239: (+1)
   \   00000EE4   0x6BA0             LDR      R0,[R4, #+56]
   \   00000EE6   0x2807             CMP      R0,#+7
   \   00000EE8   0xD102             BNE      ??man_ope_mode_man_proc_240
   2559          				// GPS OPEN 異常後の処理へ移行
   2560          				man_ope_set_mode_seq(MAN_OPE_SEQ_USBOTA_END_NG);
   \   00000EEA   0x2046             MOVS     R0,#+70
   \   00000EEC   0x.... 0x....      BL       man_ope_set_mode_seq
   2561          			}
   2562          			break;
   \                     ??man_ope_mode_man_proc_240: (+1)
   \   00000EF0   0xE01E             B        ??man_ope_mode_man_proc_42
   2563          
   2564          		case MAN_OPE_SEQ_USBOTA_END_OK:
   2565          			// 遷移完了
   2566          			mode_info->now_mode = mode_info->next_mode;
   \                     ??man_ope_mode_man_proc_107: (+1)
   \   00000EF2   0x7860             LDRB     R0,[R4, #+1]
   \   00000EF4   0x7020             STRB     R0,[R4, #+0]
   2567          			man_ope_return_callback(MAN_OPE_STATUS_OK);
   \   00000EF6   0x2000             MOVS     R0,#+0
   \   00000EF8   0x.... 0x....      BL       man_ope_return_callback
   2568          			break;
   \   00000EFC   0xE018             B        ??man_ope_mode_man_proc_42
   2569          
   2570          		case MAN_OPE_SEQ_USBOTA_END_NG:
   2571          			// 遷移完了
   2572          			mode_info->now_mode = mode_info->next_mode;
   \                     ??man_ope_mode_man_proc_108: (+1)
   \   00000EFE   0x7860             LDRB     R0,[R4, #+1]
   \   00000F00   0x7020             STRB     R0,[R4, #+0]
   2573          			man_ope_return_callback(MAN_OPE_STATUS_OK);
   \   00000F02   0x2000             MOVS     R0,#+0
   \   00000F04   0x.... 0x....      BL       man_ope_return_callback
   2574          			break;
   \   00000F08   0xE012             B        ??man_ope_mode_man_proc_42
   2575          
   2576                          case MAN_OPE_SEQ_ALARM_SEND_DATA:
   2577                                  if(man_ope_work.alarm_flg == 1 )
   \                     ??man_ope_mode_man_proc_109: (+1)
   \   00000F0A   0x....             LDR      R0,??DataTable14
   \   00000F0C   0x7800             LDRB     R0,[R0, #+0]
   \   00000F0E   0x2801             CMP      R0,#+1
   \   00000F10   0xD00E             BEQ      ??man_ope_mode_man_proc_42
   2578                                  {
   2579                                    break;
   2580                                  }
   2581                                  // 時刻設定
   2582          #if 0 //ADLINK_DEBUG 20181108
   2583                                  char *msg="case MAN_OPE_SEQ_ALARM_SEND_DATA:\r\n";
   2584                                  sysmgr_log(msg,strlen(msg));
   2585          #endif
   2586          			jst_clock = man_gps_get_clock();
   \                     ??man_ope_mode_man_proc_241: (+1)
   \   00000F12   0x.... 0x....      BL       man_gps_get_clock
   \   00000F16   0x0002             MOVS     R2,R0
   2587          			man_rtc_set_clock(MAN_RTC_SEL_ALARM, MAN_RTC_STS_OK, jst_clock);
   \   00000F18   0x2101             MOVS     R1,#+1
   \   00000F1A   0x2002             MOVS     R0,#+2
   \   00000F1C   0x.... 0x....      BL       man_rtc_set_clock
   2588          			// メッセージ送信(49)
   2589          			man_msg_set_type(MAN_MSG_TYPE_WUP_FIX);
   \   00000F20   0x2031             MOVS     R0,#+49
   \   00000F22   0x.... 0x....      BL       man_msg_set_type
   2590          			// NETWORK停止
   2591          			man_net_req_off();
   \   00000F26   0x.... 0x....      BL       man_net_req_off
   2592          			man_ope_set_mode_seq(MAN_OPE_SEQ_EXTOFF_NET_OFF);
   \   00000F2A   0x2034             MOVS     R0,#+52
   \   00000F2C   0x.... 0x....      BL       man_ope_set_mode_seq
   2593          
   2594          		default:
   2595          			break;
   2596          		}
   2597          
   2598          	}
   2599          
   2600          }
   \                     ??man_ope_mode_man_proc_110: (+1)
   \                     ??man_ope_mode_man_proc_42: (+1)
   \   00000F30   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
   2601          
   2602          
   2603          /********************************************************************/
   2604          /*!
   2605           * \name	man_ope_ext_sts
   2606           * \brief	外部電源ON/OFF状態変化時の処理
   2607           * \param	なし
   2608           * \return  なし
   2609           * \note	
   2610           */
   2611          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2612          static void man_ope_ext_sts( void )
   2613          {
   \                     man_ope_ext_sts: (+1)
   \   00000000   0xB500             PUSH     {LR}
   2614          	man_ope_mode_info_t *mode_info = &man_ope_work.mode_info;
   \   00000002   0x....             LDR      R0,??DataTable14_1
   2615          
   2616          	switch (man_ope_work.ext_sts.ext_fixed) {
   \   00000004   0x....             LDR      R1,??DataTable14_2
   \   00000006   0x6E49             LDR      R1,[R1, #+100]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD002             BEQ      ??man_ope_ext_sts_0
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD009             BEQ      ??man_ope_ext_sts_1
   \   00000010   0xE019             B        ??man_ope_ext_sts_2
   2617          	// 外部電源ON状態
   2618          	case MAN_OPE_EXT_ON:
   2619          		// 外部電源OFFモード時、及び移行中は中止する
   2620          		if ( ( mode_info->gole_mode == MAN_OPE_MODE_EXT_OFF1 ) || ( mode_info->gole_mode == MAN_OPE_MODE_EXT_OFF2 ) ) {
   \                     ??man_ope_ext_sts_0: (+1)
   \   00000012   0x7881             LDRB     R1,[R0, #+2]
   \   00000014   0x2907             CMP      R1,#+7
   \   00000016   0xD002             BEQ      ??man_ope_ext_sts_3
   \   00000018   0x7881             LDRB     R1,[R0, #+2]
   \   0000001A   0x2908             CMP      R1,#+8
   \   0000001C   0xD101             BNE      ??man_ope_ext_sts_4
   2621          			// 目標を外部電源モードとする
   2622          			mode_info->gole_mode = MAN_OPE_MODE_EXT_POWER;
   \                     ??man_ope_ext_sts_3: (+1)
   \   0000001E   0x2102             MOVS     R1,#+2
   \   00000020   0x7081             STRB     R1,[R0, #+2]
   2623          		}
   2624          		break;
   \                     ??man_ope_ext_sts_4: (+1)
   \   00000022   0xE010             B        ??man_ope_ext_sts_5
   2625          
   2626          	// 外部電源OFF状態
   2627          	case MAN_OPE_EXT_OFF:
   2628          		// 外部電源モードに遷移後に外部電源OFFモードに遷移させる
   2629          		if ( (mode_info->now_mode == mode_info->next_mode) && (mode_info->now_mode == mode_info->gole_mode) ) {
   \                     ??man_ope_ext_sts_1: (+1)
   \   00000024   0x7801             LDRB     R1,[R0, #+0]
   \   00000026   0x7842             LDRB     R2,[R0, #+1]
   \   00000028   0x4291             CMP      R1,R2
   \   0000002A   0xD10B             BNE      ??man_ope_ext_sts_6
   \   0000002C   0x7801             LDRB     R1,[R0, #+0]
   \   0000002E   0x7882             LDRB     R2,[R0, #+2]
   \   00000030   0x4291             CMP      R1,R2
   \   00000032   0xD107             BNE      ??man_ope_ext_sts_6
   2630          			if (mode_info->gole_mode == MAN_OPE_MODE_EXT_POWER) {
   \   00000034   0x7881             LDRB     R1,[R0, #+2]
   \   00000036   0x2902             CMP      R1,#+2
   \   00000038   0xD104             BNE      ??man_ope_ext_sts_6
   2631          				// 目標を外部電源OFFモードとする
   2632          				mode_info->gole_mode = MAN_OPE_MODE_EXT_OFF1;
   \   0000003A   0x2107             MOVS     R1,#+7
   \   0000003C   0x7081             STRB     R1,[R0, #+2]
   2633          				man_ope_work.ext_info.ext_mode = MAN_OPE_EXT_MODE_EXT_OFF;	// 外部電源喪失後の測位
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR      R1,??DataTable15
   \   00000042   0x7008             STRB     R0,[R1, #+0]
   2634          			}
   2635          		}
   2636          		break;
   \                     ??man_ope_ext_sts_6: (+1)
   \   00000044   0xE7FF             B        ??man_ope_ext_sts_5
   2637          
   2638          	default:
   2639          		break;
   2640          	}
   2641          
   2642          }
   \                     ??man_ope_ext_sts_2: (+1)
   \                     ??man_ope_ext_sts_5: (+1)
   \   00000046   0xBD00             POP      {PC}             ;; return
   2643          
   2644          
   2645          
   2646          
   2647          /********************************************************************/
   2648          /*!
   2649           * \name	man_ope_chk_noise
   2650           * \brief	スイッチ情報を取得する
   2651           * \param	なし
   2652           * \return  なし
   2653           * \note	10ms毎に、呼ばれること
   2654           *          SW104 :: ctrl_get_port3
   2655           */
   2656          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2657          static void man_ope_chk_noise( void )
   2658          {
   \                     man_ope_chk_noise: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   2659          	man_ope_mode_info_t *mode_info = &man_ope_work.mode_info;
   \   00000002   0x....             LDR      R0,??DataTable14_1
   2660          	man_gpio_switch_def	get_sw;
   2661          	int32_t				length;
   2662          
   2663          
   2664                  if(system_manager.sw == 1)
   \   00000004   0x....             LDR      R0,??DataTable15_1
   \   00000006   0x7880             LDRB     R0,[R0, #+2]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD101             BNE      ??man_ope_chk_noise_0
   2665                  {
   2666                    get_sw = MAN_GPIO_SWITCH_OFF;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE001             B        ??man_ope_chk_noise_1
   2667                  }
   2668                  else
   2669                  {
   2670                    get_sw = man_gpio_switch_get();
   \                     ??man_ope_chk_noise_0: (+1)
   \   00000010   0x.... 0x....      BL       man_gpio_switch_get
   2671                  }
   2672          	if (get_sw != MAN_GPIO_SWITCH_OTHER) {
   \                     ??man_ope_chk_noise_1: (+1)
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0x2804             CMP      R0,#+4
   \   00000018   0xD030             BEQ      ??man_ope_chk_noise_2
   2673          
   2674          		// スイッチ情報に変化あり
   2675          		if (man_ope_work.sw.sw_fixed != get_sw) {
   \   0000001A   0x....             LDR      R1,??DataTable15_2
   \   0000001C   0x7809             LDRB     R1,[R1, #+0]
   \   0000001E   0x0002             MOVS     R2,R0
   \   00000020   0xB2D2             UXTB     R2,R2
   \   00000022   0x4291             CMP      R1,R2
   \   00000024   0xD026             BEQ      ??man_ope_chk_noise_3
   2676          			// ノイズ除去
   2677          			if (man_ope_work.sw.sw_get == get_sw) {
   \   00000026   0x....             LDR      R1,??DataTable15_3
   \   00000028   0x7809             LDRB     R1,[R1, #+0]
   \   0000002A   0x0002             MOVS     R2,R0
   \   0000002C   0xB2D2             UXTB     R2,R2
   \   0000002E   0x4291             CMP      R1,R2
   \   00000030   0xD11A             BNE      ??man_ope_chk_noise_4
   2678          				man_ope_work.sw.count++;
   \   00000032   0x....             LDR      R0,??DataTable14_2
   \   00000034   0x6AC0             LDR      R0,[R0, #+44]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0x....             LDR      R1,??DataTable14_2
   \   0000003A   0x62C8             STR      R0,[R1, #+44]
   2679          				if (man_ope_work.sw.count >= MAN_OPE_SE_COUNT) {
   \   0000003C   0x....             LDR      R0,??DataTable14_2
   \   0000003E   0x6AC0             LDR      R0,[R0, #+44]
   \   00000040   0x2864             CMP      R0,#+100
   \   00000042   0xD31E             BCC      ??man_ope_chk_noise_5
   2680          					man_ope_work.sw.sw_old = man_ope_work.sw.sw_fixed;
   \   00000044   0x....             LDR      R0,??DataTable15_2
   \   00000046   0x7800             LDRB     R0,[R0, #+0]
   \   00000048   0x....             LDR      R1,??DataTable16
   \   0000004A   0x7008             STRB     R0,[R1, #+0]
   2681          					man_ope_work.sw.sw_fixed = man_ope_work.sw.sw_get;
   \   0000004C   0x....             LDR      R0,??DataTable15_3
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x....             LDR      R1,??DataTable15_2
   \   00000052   0x7008             STRB     R0,[R1, #+0]
   2682          					man_ope_work.sw.flag = 1;
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x....             LDR      R1,??DataTable14_2
   \   00000058   0x6308             STR      R0,[R1, #+48]
   2683          					man_dbglog_setting(MAN_ERROR_DBG_MAN_OPE, MAN_ERROR_DBG_TYPE_EVENT, man_ope_work.sw.sw_fixed);
   \   0000005A   0x....             LDR      R0,??DataTable15_2
   \   0000005C   0x7802             LDRB     R2,[R0, #+0]
   \   0000005E   0x2104             MOVS     R1,#+4
   \   00000060   0x2002             MOVS     R0,#+2
   \   00000062   0x.... 0x....      BL       man_dbglog_setting
   \   00000066   0xE00C             B        ??man_ope_chk_noise_5
   2684          #ifdef GNSS_DEBUG_MAN_OPE 
   2685          					sprintf((char *)&man_ope_work.buff[0], "SW(%d)\n", man_ope_work.sw.sw_fixed);
   2686          					length = strlen((char const *)&man_ope_work.buff[0]);
   2687          					man_usb_data_send(&man_ope_work.buff[0], length);
   2688          #endif
   2689          					
   2690          				}
   2691          			}
   2692          			else {
   2693          				man_ope_work.sw.sw_get = get_sw;
   \                     ??man_ope_chk_noise_4: (+1)
   \   00000068   0x....             LDR      R1,??DataTable15_3
   \   0000006A   0x7008             STRB     R0,[R1, #+0]
   2694          				man_ope_work.sw.count = 0;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x....             LDR      R1,??DataTable14_2
   \   00000070   0x62C8             STR      R0,[R1, #+44]
   \   00000072   0xE006             B        ??man_ope_chk_noise_5
   2695          			}
   2696          		}
   2697          		else {
   2698          			man_ope_work.sw.count = 0;
   \                     ??man_ope_chk_noise_3: (+1)
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x....             LDR      R1,??DataTable14_2
   \   00000078   0x62C8             STR      R0,[R1, #+44]
   \   0000007A   0xE002             B        ??man_ope_chk_noise_5
   2699          		}
   2700          	}
   2701          	else {
   2702          		man_ope_work.sw.count = 0;
   \                     ??man_ope_chk_noise_2: (+1)
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x....             LDR      R1,??DataTable14_2
   \   00000080   0x62C8             STR      R0,[R1, #+44]
   2703          	}
   2704          }
   \                     ??man_ope_chk_noise_5: (+1)
   \   00000082   0xBD01             POP      {R0,PC}          ;; return
   2705          
   2706          
   2707          /********************************************************************/
   2708          /*!
   2709           * \name	man_ope_get_ext_status
   2710           * \brief	外部電源ON/OFF情報を取得する
   2711           * \param	なし
   2712           * \return  なし
   2713           * \note	10ms毎に、呼ばれること
   2714           */
   2715          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2716          static void man_ope_get_ext_status( void )
   2717          {
   \                     man_ope_get_ext_status: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   2718          	uint8_t					get_ext;
   2719          	man_data_get_sensor_t	*sensor = man_data_get_sensor();
   \   00000002   0x.... 0x....      BL       man_data_get_sensor
   2720          
   2721          	if (sensor->ext_state == MAN_CHARGE_EXTSTAT_ON) {
   \   00000006   0x6F00             LDR      R0,[R0, #+112]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD101             BNE      ??man_ope_get_ext_status_0
   2722          		get_ext = MAN_OPE_EXT_ON;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE000             B        ??man_ope_get_ext_status_1
   2723          	}
   2724          	else {
   2725          		get_ext = MAN_OPE_EXT_OFF;
   \                     ??man_ope_get_ext_status_0: (+1)
   \   00000010   0x2001             MOVS     R0,#+1
   2726          	}
   2727          
   2728          
   2729          	// スイッチ情報に変化あり
   2730          	if (man_ope_work.ext_sts.ext_fixed != get_ext) {
   \                     ??man_ope_get_ext_status_1: (+1)
   \   00000012   0x....             LDR      R1,??DataTable14_2
   \   00000014   0x6E49             LDR      R1,[R1, #+100]
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0x4281             CMP      R1,R0
   \   0000001A   0xD020             BEQ      ??man_ope_get_ext_status_2
   2731          		// ノイズ除去
   2732          		if (man_ope_work.ext_sts.ext_get == get_ext) {
   \   0000001C   0x....             LDR      R1,??DataTable14_2
   \   0000001E   0x6E09             LDR      R1,[R1, #+96]
   \   00000020   0xB2C0             UXTB     R0,R0
   \   00000022   0x4281             CMP      R1,R0
   \   00000024   0xD114             BNE      ??man_ope_get_ext_status_3
   2733          			man_ope_work.ext_sts.count++;
   \   00000026   0x....             LDR      R0,??DataTable14_2
   \   00000028   0x6EC0             LDR      R0,[R0, #+108]
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0x....             LDR      R1,??DataTable14_2
   \   0000002E   0x66C8             STR      R0,[R1, #+108]
   2734          			if (man_ope_work.ext_sts.count >= MAN_OPE_EXT_COUNT) {
   \   00000030   0x....             LDR      R0,??DataTable14_2
   \   00000032   0x6EC0             LDR      R0,[R0, #+108]
   \   00000034   0x2864             CMP      R0,#+100
   \   00000036   0xD315             BCC      ??man_ope_get_ext_status_4
   2735          				man_ope_work.ext_sts.ext_old = man_ope_work.ext_sts.ext_fixed;
   \   00000038   0x....             LDR      R0,??DataTable14_2
   \   0000003A   0x6E40             LDR      R0,[R0, #+100]
   \   0000003C   0x....             LDR      R1,??DataTable14_2
   \   0000003E   0x6688             STR      R0,[R1, #+104]
   2736          				man_ope_work.ext_sts.ext_fixed = man_ope_work.ext_sts.ext_get;
   \   00000040   0x....             LDR      R0,??DataTable14_2
   \   00000042   0x6E00             LDR      R0,[R0, #+96]
   \   00000044   0x....             LDR      R1,??DataTable14_2
   \   00000046   0x6648             STR      R0,[R1, #+100]
   2737          				man_ope_work.ext_sts.flag = 1;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x....             LDR      R1,??DataTable14_2
   \   0000004C   0x6708             STR      R0,[R1, #+112]
   \   0000004E   0xE009             B        ??man_ope_get_ext_status_4
   2738          			}
   2739          		}
   2740          		else {
   2741          			man_ope_work.ext_sts.ext_get = get_ext;
   \                     ??man_ope_get_ext_status_3: (+1)
   \   00000050   0xB2C0             UXTB     R0,R0
   \   00000052   0x....             LDR      R1,??DataTable14_2
   \   00000054   0x6608             STR      R0,[R1, #+96]
   2742          			man_ope_work.ext_sts.count = 0;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x....             LDR      R1,??DataTable14_2
   \   0000005A   0x66C8             STR      R0,[R1, #+108]
   \   0000005C   0xE002             B        ??man_ope_get_ext_status_4
   2743          		}
   2744          	}
   2745          	else {
   2746          		man_ope_work.ext_sts.count = 0;
   \                     ??man_ope_get_ext_status_2: (+1)
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x....             LDR      R1,??DataTable14_2
   \   00000062   0x66C8             STR      R0,[R1, #+108]
   2747          	}
   2748          }
   \                     ??man_ope_get_ext_status_4: (+1)
   \   00000064   0xBD01             POP      {R0,PC}          ;; return
   2749          
   2750          
   2751          /********************************************************************/
   2752          /*!
   2753           * \name	man_ope_ctrl_led
   2754           * \brief	LED制御処理
   2755           * \param	なし
   2756           * \return  なし
   2757           * \note	10ms毎に、呼ばれること
   2758           */
   2759          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2760          static void man_ope_ctrl_led(void)
   2761          {
   \                     man_ope_ctrl_led: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   2762          	man_ope_mode_info_t		*mode_info = &man_ope_work.mode_info;
   \   00000002   0x....             LDR      R0,??DataTable20
   \   00000004   0x9000             STR      R0,[SP, #+0]
   2763          	man_data_get_sensor_t	*sensor = man_data_get_sensor();
   \   00000006   0x.... 0x....      BL       man_data_get_sensor
   \   0000000A   0x0004             MOVS     R4,R0
   2764          	man_data_fixed_t		*fixed = man_data_get_fixed();
   \   0000000C   0x.... 0x....      BL       man_data_get_fixed
   \   00000010   0x0007             MOVS     R7,R0
   2765          	man_data_num_other_t	*setting_other = man_data_get_setting_other();
   \   00000012   0x.... 0x....      BL       man_data_get_setting_other
   2766          	uint32_t		led_lte;		// LTE (橙)
   2767          	uint32_t		led_bat;		// バッテリーLED()
   2768          	uint32_t		led_pow;		// 電源LED(緑)
   2769          	uint32_t		led_gns;		// GNS
   2770          
   2771          
   2772          	// 電源LED
   2773          	led_pow = MAN_GPIO_CTRL_ON;
   \   00000016   0x2501             MOVS     R5,#+1
   2774          	if ( (sensor->ota_mode == MAN_OTA_MODE_TERM) || (sensor->ota_mode == MAN_OTA_MODE_GPS) ) {
   \   00000018   0x....             LDR      R0,??DataTable21  ;; 0xbd9
   \   0000001A   0x5C20             LDRB     R0,[R4, R0]
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD003             BEQ      ??man_ope_ctrl_led_0
   \   00000020   0x....             LDR      R0,??DataTable21  ;; 0xbd9
   \   00000022   0x5C20             LDRB     R0,[R4, R0]
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD100             BNE      ??man_ope_ctrl_led_1
   2775          		led_pow = MAN_GPIO_CTRL_FLASH;
   \                     ??man_ope_ctrl_led_0: (+1)
   \   00000028   0x2502             MOVS     R5,#+2
   2776          	}
   2777          
   2778          	// バッテリーLED
   2779          	led_bat = MAN_GPIO_CTRL_OFF;
   \                     ??man_ope_ctrl_led_1: (+1)
   \   0000002A   0x2600             MOVS     R6,#+0
   2780          	// 充電中は点滅
   2781          	if (sensor->charge_state == MAN_CHARGE_STAT_CHARGE) {
   \   0000002C   0x6EE0             LDR      R0,[R4, #+108]
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD101             BNE      ??man_ope_ctrl_led_2
   2782          		led_bat = MAN_GPIO_CTRL_FLASH;
   \   00000032   0x2602             MOVS     R6,#+2
   \   00000034   0xE019             B        ??man_ope_ctrl_led_3
   2783          	}
   2784          	// 充電完了は点灯
   2785          	else if (sensor->charge_state == MAN_CHARGE_STAT_DONE) {
   \                     ??man_ope_ctrl_led_2: (+1)
   \   00000036   0x6EE0             LDR      R0,[R4, #+108]
   \   00000038   0x2802             CMP      R0,#+2
   \   0000003A   0xD101             BNE      ??man_ope_ctrl_led_4
   2786          		led_bat = MAN_GPIO_CTRL_ON;
   \   0000003C   0x2601             MOVS     R6,#+1
   \   0000003E   0xE014             B        ??man_ope_ctrl_led_3
   2787          	}
   2788          	// バッテリー残量低(BAT LED点灯点滅閾値20%以上)
   2789          	else if ( fixed->bat_led_flash_num <= sensor->charge ) {
   \                     ??man_ope_ctrl_led_4: (+1)
   \   00000040   0x6EA0             LDR      R0,[R4, #+104]
   \   00000042   0x6979             LDR      R1,[R7, #+20]
   \   00000044   0x4288             CMP      R0,R1
   \   00000046   0xD301             BCC      ??man_ope_ctrl_led_5
   2790          		led_bat = MAN_GPIO_CTRL_ON;
   \   00000048   0x2601             MOVS     R6,#+1
   \   0000004A   0xE00E             B        ??man_ope_ctrl_led_3
   2791          	}
   2792          	// バッテリー残量低(BAT LED点滅消灯閾値3％以上BAT LED点灯点滅閾値20％以下)
   2793          	else if ( ( fixed->bat_led_off_num <= sensor->charge ) && ( sensor->charge < fixed->bat_led_flash_num ) ) {
   \                     ??man_ope_ctrl_led_5: (+1)
   \   0000004C   0x6EA0             LDR      R0,[R4, #+104]
   \   0000004E   0x69B9             LDR      R1,[R7, #+24]
   \   00000050   0x4288             CMP      R0,R1
   \   00000052   0xD305             BCC      ??man_ope_ctrl_led_6
   \   00000054   0x6EA0             LDR      R0,[R4, #+104]
   \   00000056   0x6979             LDR      R1,[R7, #+20]
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0xD201             BCS      ??man_ope_ctrl_led_6
   2794          		led_bat = MAN_GPIO_CTRL_FLASH;
   \   0000005C   0x2602             MOVS     R6,#+2
   \   0000005E   0xE004             B        ??man_ope_ctrl_led_3
   2795          	}
   2796          	// BAT LED点滅消灯閾値(3％未満)
   2797          	else if ( sensor->charge < fixed->bat_led_off_num ) {
   \                     ??man_ope_ctrl_led_6: (+1)
   \   00000060   0x6EA0             LDR      R0,[R4, #+104]
   \   00000062   0x69B9             LDR      R1,[R7, #+24]
   \   00000064   0x4288             CMP      R0,R1
   \   00000066   0xD200             BCS      ??man_ope_ctrl_led_3
   2798          		led_bat = MAN_GPIO_CTRL_OFF;
   \   00000068   0x2600             MOVS     R6,#+0
   2799          	}
   2800          
   2801          
   2802          	// LTE LED
   2803          	led_lte = MAN_GPIO_CTRL_OFF;
   \                     ??man_ope_ctrl_led_3: (+1)
   \   0000006A   0x2700             MOVS     R7,#+0
   2804          	if ( (sensor->ota_mode == MAN_OTA_MODE_TERM) || (sensor->ota_mode == MAN_OTA_MODE_GPS) ) {
   \   0000006C   0x....             LDR      R0,??DataTable21  ;; 0xbd9
   \   0000006E   0x5C20             LDRB     R0,[R4, R0]
   \   00000070   0x2801             CMP      R0,#+1
   \   00000072   0xD003             BEQ      ??man_ope_ctrl_led_7
   \   00000074   0x....             LDR      R0,??DataTable21  ;; 0xbd9
   \   00000076   0x5C20             LDRB     R0,[R4, R0]
   \   00000078   0x2802             CMP      R0,#+2
   \   0000007A   0xD101             BNE      ??man_ope_ctrl_led_8
   2805          		led_lte = MAN_GPIO_CTRL_FLASH;
   \                     ??man_ope_ctrl_led_7: (+1)
   \   0000007C   0x2702             MOVS     R7,#+2
   \   0000007E   0xE011             B        ??man_ope_ctrl_led_9
   2806          	}
   2807          	// MSG SEND時
   2808          	else if (man_msg_check_led_send_state() == 1) {
   \                     ??man_ope_ctrl_led_8: (+1)
   \   00000080   0x.... 0x....      BL       man_msg_check_led_send_state
   \   00000084   0x2801             CMP      R0,#+1
   \   00000086   0xD101             BNE      ??man_ope_ctrl_led_10
   2809          		led_lte = MAN_GPIO_CTRL_FLASH;
   \   00000088   0x2702             MOVS     R7,#+2
   \   0000008A   0xE00B             B        ??man_ope_ctrl_led_9
   2810          	}
   2811          	// UDP OPEN時
   2812          	else if (sensor->trans_mode != 0) {
   \                     ??man_ope_ctrl_led_10: (+1)
   \   0000008C   0x....             LDR      R0,??DataTable25  ;; 0xbd4
   \   0000008E   0x5820             LDR      R0,[R4, R0]
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD001             BEQ      ??man_ope_ctrl_led_11
   2813          		led_lte = MAN_GPIO_CTRL_FLASH;
   \   00000094   0x2702             MOVS     R7,#+2
   \   00000096   0xE005             B        ??man_ope_ctrl_led_9
   2814          	}
   2815          	// NET OPEN時
   2816          	else if (sensor->net_mode == MAN_LTE_MODE_OPEN ) {
   \                     ??man_ope_ctrl_led_11: (+1)
   \   00000098   0x20BD             MOVS     R0,#+189
   \   0000009A   0x0100             LSLS     R0,R0,#+4        ;; #+3024
   \   0000009C   0x5C20             LDRB     R0,[R4, R0]
   \   0000009E   0x2801             CMP      R0,#+1
   \   000000A0   0xD100             BNE      ??man_ope_ctrl_led_9
   2817          		led_lte = MAN_GPIO_CTRL_ON;
   \   000000A2   0x2701             MOVS     R7,#+1
   2818          	}
   2819          	
   2820          
   2821          
   2822          	// GNSS LED
   2823          	if ( (sensor->ota_mode == MAN_OTA_MODE_TERM) || (sensor->ota_mode == MAN_OTA_MODE_GPS) ) {
   \                     ??man_ope_ctrl_led_9: (+1)
   \   000000A4   0x....             LDR      R0,??DataTable21  ;; 0xbd9
   \   000000A6   0x5C20             LDRB     R0,[R4, R0]
   \   000000A8   0x2801             CMP      R0,#+1
   \   000000AA   0xD003             BEQ      ??man_ope_ctrl_led_12
   \   000000AC   0x....             LDR      R0,??DataTable21  ;; 0xbd9
   \   000000AE   0x5C20             LDRB     R0,[R4, R0]
   \   000000B0   0x2802             CMP      R0,#+2
   \   000000B2   0xD101             BNE      ??man_ope_ctrl_led_13
   2824          		led_gns = MAN_GPIO_CTRL_FLASH;
   \                     ??man_ope_ctrl_led_12: (+1)
   \   000000B4   0x2002             MOVS     R0,#+2
   \   000000B6   0xE00E             B        ??man_ope_ctrl_led_14
   2825          	}
   2826          	else {
   2827          		switch (sensor->nmea_status) {
   \                     ??man_ope_ctrl_led_13: (+1)
   \   000000B8   0x....             LDR      R0,??DataTable25_1  ;; 0xbc8
   \   000000BA   0x5820             LDR      R0,[R4, R0]
   \   000000BC   0x2800             CMP      R0,#+0
   \   000000BE   0xD003             BEQ      ??man_ope_ctrl_led_15
   \   000000C0   0x2802             CMP      R0,#+2
   \   000000C2   0xD005             BEQ      ??man_ope_ctrl_led_16
   \   000000C4   0xD302             BCC      ??man_ope_ctrl_led_17
   \   000000C6   0xE005             B        ??man_ope_ctrl_led_18
   2828          		case MAN_GPS_NMEA_STATUS_OFF:
   2829          			led_gns = MAN_GPIO_CTRL_OFF;
   \                     ??man_ope_ctrl_led_15: (+1)
   \   000000C8   0x2000             MOVS     R0,#+0
   2830          			break;
   \   000000CA   0xE004             B        ??man_ope_ctrl_led_14
   2831          		case MAN_GPS_NMEA_STATUS_ON:
   2832          			led_gns = MAN_GPIO_CTRL_FLASH;
   \                     ??man_ope_ctrl_led_17: (+1)
   \   000000CC   0x2002             MOVS     R0,#+2
   2833          			break;
   \   000000CE   0xE002             B        ??man_ope_ctrl_led_14
   2834          		case MAN_GPS_NMEA_STATUS_EFFECTIVE:
   2835          			led_gns = MAN_GPIO_CTRL_ON;
   \                     ??man_ope_ctrl_led_16: (+1)
   \   000000D0   0x2001             MOVS     R0,#+1
   2836          			break;
   \   000000D2   0xE000             B        ??man_ope_ctrl_led_14
   2837          		default:
   2838          			led_gns = MAN_GPIO_CTRL_OFF;
   \                     ??man_ope_ctrl_led_18: (+1)
   \   000000D4   0x2000             MOVS     R0,#+0
   2839          			break;
   2840          		}
   2841          	}
   2842          
   2843          
   2844          	// 電源OFF時はすべてのLED消灯
   2845          	if ( (mode_info->now_mode == mode_info->next_mode) && (mode_info->now_mode == mode_info->gole_mode) ) {
   \                     ??man_ope_ctrl_led_14: (+1)
   \   000000D6   0x9900             LDR      R1,[SP, #+0]
   \   000000D8   0x7809             LDRB     R1,[R1, #+0]
   \   000000DA   0x9A00             LDR      R2,[SP, #+0]
   \   000000DC   0x7852             LDRB     R2,[R2, #+1]
   \   000000DE   0x4291             CMP      R1,R2
   \   000000E0   0xD119             BNE      ??man_ope_ctrl_led_19
   \   000000E2   0x9900             LDR      R1,[SP, #+0]
   \   000000E4   0x7809             LDRB     R1,[R1, #+0]
   \   000000E6   0x9A00             LDR      R2,[SP, #+0]
   \   000000E8   0x7892             LDRB     R2,[R2, #+2]
   \   000000EA   0x4291             CMP      R1,R2
   \   000000EC   0xD113             BNE      ??man_ope_ctrl_led_19
   2846          		if ( ( mode_info->now_mode == MAN_OPE_MODE_OFF ) || ( mode_info->now_mode == MAN_OPE_MODE_EXT_OFF1 ) || ( mode_info->now_mode == MAN_OPE_MODE_EXT_OFF2 ) ) {
   \   000000EE   0x9900             LDR      R1,[SP, #+0]
   \   000000F0   0x7809             LDRB     R1,[R1, #+0]
   \   000000F2   0x2901             CMP      R1,#+1
   \   000000F4   0xD007             BEQ      ??man_ope_ctrl_led_20
   \   000000F6   0x9900             LDR      R1,[SP, #+0]
   \   000000F8   0x7809             LDRB     R1,[R1, #+0]
   \   000000FA   0x2907             CMP      R1,#+7
   \   000000FC   0xD003             BEQ      ??man_ope_ctrl_led_20
   \   000000FE   0x9900             LDR      R1,[SP, #+0]
   \   00000100   0x7809             LDRB     R1,[R1, #+0]
   \   00000102   0x2908             CMP      R1,#+8
   \   00000104   0xD107             BNE      ??man_ope_ctrl_led_19
   2847                                  if(system_manager.stop == 0)
   \                     ??man_ope_ctrl_led_20: (+1)
   \   00000106   0x....             LDR      R0,??DataTable15_1
   \   00000108   0x7800             LDRB     R0,[R0, #+0]
   \   0000010A   0x2800             CMP      R0,#+0
   \   0000010C   0xD100             BNE      ??man_ope_ctrl_led_21
   2848                                  {
   2849                                     led_pow = MAN_GPIO_CTRL_OFF;
   \   0000010E   0x2500             MOVS     R5,#+0
   2850                                  }
   2851          			led_bat = MAN_GPIO_CTRL_OFF;
   \                     ??man_ope_ctrl_led_21: (+1)
   \   00000110   0x2600             MOVS     R6,#+0
   2852          			led_lte = MAN_GPIO_CTRL_OFF;
   \   00000112   0x2700             MOVS     R7,#+0
   2853          			led_gns = MAN_GPIO_CTRL_OFF;
   \   00000114   0x2000             MOVS     R0,#+0
   2854          		}
   2855          	}
   2856          
   2857          
   2858          	if (man_ope_work.led.led_lte != led_lte) {
   \                     ??man_ope_ctrl_led_19: (+1)
   \   00000116   0x....             LDR      R1,??DataTable26
   \   00000118   0x6B89             LDR      R1,[R1, #+56]
   \   0000011A   0x42B9             CMP      R1,R7
   \   0000011C   0xD01B             BEQ      ??man_ope_ctrl_led_22
   2859          		// FLASH から変わる場合、FLASHは１秒以上保持する
   2860          		if (man_ope_work.led.led_lte == MAN_GPIO_CTRL_FLASH) {
   \   0000011E   0x....             LDR      R1,??DataTable26
   \   00000120   0x6B89             LDR      R1,[R1, #+56]
   \   00000122   0x2902             CMP      R1,#+2
   \   00000124   0xD105             BNE      ??man_ope_ctrl_led_23
   2861          			man_ope_work.led.led_lte_cnt++;
   \   00000126   0x....             LDR      R1,??DataTable26
   \   00000128   0x6BC9             LDR      R1,[R1, #+60]
   \   0000012A   0x1C49             ADDS     R1,R1,#+1
   \   0000012C   0x....             LDR      R2,??DataTable26
   \   0000012E   0x63D1             STR      R1,[R2, #+60]
   \   00000130   0xE002             B        ??man_ope_ctrl_led_24
   2862          		}
   2863          		else {
   2864          			man_ope_work.led.led_lte_cnt = 0;
   \                     ??man_ope_ctrl_led_23: (+1)
   \   00000132   0x2100             MOVS     R1,#+0
   \   00000134   0x....             LDR      R2,??DataTable26
   \   00000136   0x63D1             STR      R1,[R2, #+60]
   2865          		}
   2866          
   2867          		if ( (man_ope_work.led.led_lte == MAN_GPIO_CTRL_FLASH) && (led_lte != MAN_GPIO_CTRL_FLASH) ) {
   \                     ??man_ope_ctrl_led_24: (+1)
   \   00000138   0x....             LDR      R1,??DataTable26
   \   0000013A   0x6B89             LDR      R1,[R1, #+56]
   \   0000013C   0x2902             CMP      R1,#+2
   \   0000013E   0xD108             BNE      ??man_ope_ctrl_led_25
   \   00000140   0x2F02             CMP      R7,#+2
   \   00000142   0xD006             BEQ      ??man_ope_ctrl_led_25
   2868          			if (man_ope_work.led.led_lte_cnt >= 100) {
   \   00000144   0x....             LDR      R1,??DataTable26
   \   00000146   0x6BC9             LDR      R1,[R1, #+60]
   \   00000148   0x2964             CMP      R1,#+100
   \   0000014A   0xD304             BCC      ??man_ope_ctrl_led_22
   2869          				man_ope_work.led.led_lte = led_lte;
   \   0000014C   0x....             LDR      R1,??DataTable26
   \   0000014E   0x638F             STR      R7,[R1, #+56]
   \   00000150   0xE001             B        ??man_ope_ctrl_led_22
   2870          			}
   2871          		}
   2872          		else {
   2873          			man_ope_work.led.led_lte = led_lte;
   \                     ??man_ope_ctrl_led_25: (+1)
   \   00000152   0x....             LDR      R1,??DataTable26
   \   00000154   0x638F             STR      R7,[R1, #+56]
   2874          		}
   2875          	}
   2876          	if (man_ope_work.led.led_bat != led_bat) {
   \                     ??man_ope_ctrl_led_22: (+1)
   \   00000156   0x....             LDR      R1,??DataTable26
   \   00000158   0x6C09             LDR      R1,[R1, #+64]
   \   0000015A   0x42B1             CMP      R1,R6
   \   0000015C   0xD001             BEQ      ??man_ope_ctrl_led_26
   2877          		man_ope_work.led.led_bat = led_bat;
   \   0000015E   0x....             LDR      R1,??DataTable26
   \   00000160   0x640E             STR      R6,[R1, #+64]
   2878          	}
   2879          	if (man_ope_work.led.led_pow != led_pow) {
   \                     ??man_ope_ctrl_led_26: (+1)
   \   00000162   0x....             LDR      R1,??DataTable26
   \   00000164   0x6C49             LDR      R1,[R1, #+68]
   \   00000166   0x42A9             CMP      R1,R5
   \   00000168   0xD001             BEQ      ??man_ope_ctrl_led_27
   2880          		man_ope_work.led.led_pow = led_pow;
   \   0000016A   0x....             LDR      R1,??DataTable26
   \   0000016C   0x644D             STR      R5,[R1, #+68]
   2881          	}
   2882          	if (man_ope_work.led.led_gns != led_gns) {
   \                     ??man_ope_ctrl_led_27: (+1)
   \   0000016E   0x....             LDR      R1,??DataTable26
   \   00000170   0x6C89             LDR      R1,[R1, #+72]
   \   00000172   0x4281             CMP      R1,R0
   \   00000174   0xD001             BEQ      ??man_ope_ctrl_led_28
   2883          		man_ope_work.led.led_gns = led_gns;
   \   00000176   0x....             LDR      R1,??DataTable26
   \   00000178   0x6488             STR      R0,[R1, #+72]
   2884          	}
   2885          }
   \                     ??man_ope_ctrl_led_28: (+1)
   \   0000017A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   2886          
   2887          
   2888          /********************************************************************/
   2889          /*!
   2890           * \name	man_ope_out_led
   2891           * \brief	LED出力処理
   2892           * \param	なし
   2893           * \return  なし
   2894           * \note	500mw毎に、呼ばれること
   2895           *          点滅の開始を合わせる(最低でも1回は点滅させる)
   2896           */
   2897          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2898          static void man_ope_out_led(void)
   2899          {
   \                     man_ope_out_led: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   2900          	if (man_ope_work.set_led.led_lte != man_ope_work.led.led_lte) {
   \   00000002   0x....             LDR      R0,??DataTable26
   \   00000004   0x6CC0             LDR      R0,[R0, #+76]
   \   00000006   0x....             LDR      R1,??DataTable26
   \   00000008   0x6B89             LDR      R1,[R1, #+56]
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD007             BEQ      ??man_ope_out_led_0
   2901          		man_ope_work.set_led.led_lte = man_ope_work.led.led_lte;
   \   0000000E   0x....             LDR      R0,??DataTable26
   \   00000010   0x6B80             LDR      R0,[R0, #+56]
   \   00000012   0x....             LDR      R1,??DataTable26
   \   00000014   0x64C8             STR      R0,[R1, #+76]
   2902          		man_gpio_led_lte(man_ope_work.set_led.led_lte);
   \   00000016   0x....             LDR      R0,??DataTable26
   \   00000018   0x6CC0             LDR      R0,[R0, #+76]
   \   0000001A   0x.... 0x....      BL       man_gpio_led_lte
   2903          	}
   2904          
   2905          	if (man_ope_work.set_led.led_bat != man_ope_work.led.led_bat) {
   \                     ??man_ope_out_led_0: (+1)
   \   0000001E   0x....             LDR      R0,??DataTable26
   \   00000020   0x6D40             LDR      R0,[R0, #+84]
   \   00000022   0x....             LDR      R1,??DataTable26
   \   00000024   0x6C09             LDR      R1,[R1, #+64]
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD007             BEQ      ??man_ope_out_led_1
   2906          		man_ope_work.set_led.led_bat = man_ope_work.led.led_bat;
   \   0000002A   0x....             LDR      R0,??DataTable26
   \   0000002C   0x6C00             LDR      R0,[R0, #+64]
   \   0000002E   0x....             LDR      R1,??DataTable26
   \   00000030   0x6548             STR      R0,[R1, #+84]
   2907          		man_gpio_led_bat(man_ope_work.set_led.led_bat);
   \   00000032   0x....             LDR      R0,??DataTable26
   \   00000034   0x6D40             LDR      R0,[R0, #+84]
   \   00000036   0x.... 0x....      BL       man_gpio_led_bat
   2908          	}
   2909          
   2910          	if (man_ope_work.set_led.led_pow != man_ope_work.led.led_pow) {
   \                     ??man_ope_out_led_1: (+1)
   \   0000003A   0x....             LDR      R0,??DataTable26
   \   0000003C   0x6D80             LDR      R0,[R0, #+88]
   \   0000003E   0x....             LDR      R1,??DataTable26
   \   00000040   0x6C49             LDR      R1,[R1, #+68]
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD007             BEQ      ??man_ope_out_led_2
   2911          		man_ope_work.set_led.led_pow = man_ope_work.led.led_pow;
   \   00000046   0x....             LDR      R0,??DataTable26
   \   00000048   0x6C40             LDR      R0,[R0, #+68]
   \   0000004A   0x....             LDR      R1,??DataTable26
   \   0000004C   0x6588             STR      R0,[R1, #+88]
   2912          		man_gpio_led_pow(man_ope_work.set_led.led_pow);
   \   0000004E   0x....             LDR      R0,??DataTable26
   \   00000050   0x6D80             LDR      R0,[R0, #+88]
   \   00000052   0x.... 0x....      BL       man_gpio_led_pow
   2913          	}
   2914          
   2915          	if (man_ope_work.set_led.led_gns != man_ope_work.led.led_gns) {
   \                     ??man_ope_out_led_2: (+1)
   \   00000056   0x....             LDR      R0,??DataTable26
   \   00000058   0x6DC0             LDR      R0,[R0, #+92]
   \   0000005A   0x....             LDR      R1,??DataTable26
   \   0000005C   0x6C89             LDR      R1,[R1, #+72]
   \   0000005E   0x4288             CMP      R0,R1
   \   00000060   0xD007             BEQ      ??man_ope_out_led_3
   2916          		man_ope_work.set_led.led_gns = man_ope_work.led.led_gns;
   \   00000062   0x....             LDR      R0,??DataTable26
   \   00000064   0x6C80             LDR      R0,[R0, #+72]
   \   00000066   0x....             LDR      R1,??DataTable26
   \   00000068   0x65C8             STR      R0,[R1, #+92]
   2917          		man_gpio_led_gns(man_ope_work.set_led.led_gns);
   \   0000006A   0x....             LDR      R0,??DataTable26
   \   0000006C   0x6DC0             LDR      R0,[R0, #+92]
   \   0000006E   0x.... 0x....      BL       man_gpio_led_gns
   2918          	}
   2919          }
   \                     ??man_ope_out_led_3: (+1)
   \   00000072   0xBD01             POP      {R0,PC}          ;; return
   2920          
   2921          /********************************************************************/
   2922          /*!
   2923           * \name	man_ope_out_led_off
   2924           * \brief	LEDを全て消灯する処理
   2925           * \param	なし
   2926           * \return  なし
   2927           * \note	必要時に、呼ばれること
   2928           */
   2929          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2930          static void man_ope_out_led_off(void)
   2931          {
   \                     man_ope_out_led_off: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   2932          	// LED消灯処理
   2933          	man_ope_work.led.led_lte = MAN_GPIO_CTRL_OFF;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR      R1,??DataTable26
   \   00000006   0x6388             STR      R0,[R1, #+56]
   2934          	man_ope_work.led.led_bat = MAN_GPIO_CTRL_OFF;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR      R1,??DataTable26
   \   0000000C   0x6408             STR      R0,[R1, #+64]
   2935          	man_ope_work.led.led_pow = MAN_GPIO_CTRL_OFF;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR      R1,??DataTable26
   \   00000012   0x6448             STR      R0,[R1, #+68]
   2936          	man_ope_work.led.led_gns = MAN_GPIO_CTRL_OFF;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR      R1,??DataTable26
   \   00000018   0x6488             STR      R0,[R1, #+72]
   2937          
   2938          	// LED出力処理
   2939          	man_ope_out_led();
   \   0000001A   0x.... 0x....      BL       man_ope_out_led
   2940          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
   2941          
   2942          
   2943          /********************************************************************/
   2944          /*	extern関数                                                      */
   2945          /********************************************************************/
   2946          
   2947          /********************************************************************/
   2948          /*!
   2949           * \name	man_ope_init
   2950           * \brief	操作管理の初期化処理
   2951           * \param	なし
   2952           * \return  なし
   2953           * \note	起動時に、呼ばれること
   2954           */
   2955          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2956          void man_ope_init(void)
   2957          {
   \                     man_ope_init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   2958          	man_ope_mode_info_t *mode_info = &man_ope_work.mode_info;
   \   00000002   0x....             LDR      R4,??DataTable20
   2959          
   2960          	// SLEEP初期化処理
   2961          	ctrl_SLEEP_init();
   \   00000004   0x.... 0x....      BL       ctrl_SLEEP_init
   2962          
   2963          	// 内部変数を初期化する
   2964          	memset(&man_ope_work, 0, sizeof(man_ope_work_t));
   \   00000008   0x2183             MOVS     R1,#+131
   \   0000000A   0x0089             LSLS     R1,R1,#+2        ;; #+524
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x....             LDR      R5,??DataTable26
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0x.... 0x....      BL       __aeabi_memset
   2965          
   2966          	// NETの状態通知を依頼する
   2967          	man_net_req_noti(MAN_OPE_DEV_NET, man_ope_noti_callback);
   \   00000016   0x....             LDR      R1,??DataTable26_1
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       man_net_req_noti
   2968          
   2969          	// GPSの状態通知を依頼する
   2970          	man_gps_req_noti(MAN_OPE_DEV_GPS, man_ope_noti_callback);
   \   0000001E   0x....             LDR      R1,??DataTable26_1
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       man_gps_req_noti
   2971          
   2972          	// 起動時は一旦、目標を外部電源モードとする
   2973          	mode_info->now_mode = MAN_OPE_MODE_IDLE;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x7020             STRB     R0,[R4, #+0]
   2974          	mode_info->next_mode = MAN_OPE_MODE_IDLE;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x7060             STRB     R0,[R4, #+1]
   2975          	mode_info->gole_mode = MAN_OPE_MODE_EXT_POWER;
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x70A0             STRB     R0,[R4, #+2]
   2976          	man_ope_work.sw.sw_fixed = MAN_GPIO_SWITCH_EXT_POWER;
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x....             LDR      R1,??DataTable26_2
   \   00000036   0x7008             STRB     R0,[R1, #+0]
   2977          	man_ope_work.sw.flag = 1;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x....             LDR      R1,??DataTable26
   \   0000003C   0x6308             STR      R0,[R1, #+48]
   2978          }
   \   0000003E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2979          
   2980          
   2981          
   2982          
   2983          /********************************************************************/
   2984          /*!
   2985           * \name	man_ope_main
   2986           * \brief	操作のメイン処理
   2987           * \param	なし
   2988           * \return  なし
   2989           * \note	毎回、呼ばれること
   2990           */
   2991          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2992          void man_ope_main( void )
   2993          {
   \                     man_ope_main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   2994          
   2995                   
   2996                  // 外部電源ON/OFF状態変化時の処理
   2997          	man_ope_ext_sts();
   \   00000002   0x.... 0x....      BL       man_ope_ext_sts
   2998          
   2999                  // システムエラー発生時の処理
   3000                  if(system_manager.stop == 1)
   \   00000006   0x....             LDR      R0,??DataTable26_3
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD108             BNE      ??man_ope_main_0
   3001                  {
   3002                    if(system_manager.process == SYSTEM_ERROR_PROCESS_2)
   \   0000000E   0x....             LDR      R0,??DataTable26_3
   \   00000010   0x7840             LDRB     R0,[R0, #+1]
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD104             BNE      ??man_ope_main_0
   3003                    {
   3004                      man_ope_mode_system_error();
   \   00000016   0x.... 0x....      BL       man_ope_mode_system_error
   3005                      system_manager.process = SYSTEM_ERROR_PROCESS_3;
   \   0000001A   0x2003             MOVS     R0,#+3
   \   0000001C   0x....             LDR      R1,??DataTable26_3
   \   0000001E   0x7048             STRB     R0,[R1, #+1]
   3006                    }
   3007                  }
   3008          #if 0
   3009                  else
   3010                  {
   3011                    // 動作切り替えスイッチ変化処理
   3012                    man_ope_mode_switch();
   3013          	}
   3014          #endif
   3015                  // 動作切り替えスイッチ変化処理
   3016                    man_ope_mode_switch();
   \                     ??man_ope_main_0: (+1)
   \   00000020   0x.... 0x....      BL       man_ope_mode_switch
   3017          	// 動作状態管理応答処理
   3018          	man_ope_mode_man_recv();
   \   00000024   0x.... 0x....      BL       man_ope_mode_man_recv
   3019          
   3020          	// 状態通知処理
   3021          	man_ope_noti_state_recv();
   \   00000028   0x.... 0x....      BL       man_ope_noti_state_recv
   3022          
   3023          	// 動作状態管理処理
   3024          	man_ope_mode_man_proc();
   \   0000002C   0x.... 0x....      BL       man_ope_mode_man_proc
   3025          	
   3026          
   3027          }
   \   00000030   0xBD01             POP      {R0,PC}          ;; return
   3028          
   3029          
   3030          
   3031          /********************************************************************/
   3032          /*!
   3033           * \name	man_ope_10ms_main
   3034           * \brief	10ms毎に行う処理
   3035           * \param	なし
   3036           * \return  なし
   3037           * \note	10ms毎に、呼ばれること
   3038           */
   3039          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3040          void man_ope_10ms_main( void )
   3041          {
   \                     man_ope_10ms_main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   3042          	// スイッチ情報を取得する
   3043          	man_ope_chk_noise();
   \   00000002   0x.... 0x....      BL       man_ope_chk_noise
   3044          
   3045          	// 外部電源ON/OFF情報を取得する
   3046          	man_ope_get_ext_status();
   \   00000006   0x.... 0x....      BL       man_ope_get_ext_status
   3047          
   3048          	// 起動2秒後からLED制御を開始する
   3049          	if (man_ope_work.led_cnt > 200) {
   \   0000000A   0x....             LDR      R0,??DataTable26
   \   0000000C   0x6B40             LDR      R0,[R0, #+52]
   \   0000000E   0x28C9             CMP      R0,#+201
   \   00000010   0xDB02             BLT      ??man_ope_10ms_main_0
   3050          		// LED制御
   3051          		man_ope_ctrl_led();
   \   00000012   0x.... 0x....      BL       man_ope_ctrl_led
   \   00000016   0xE004             B        ??man_ope_10ms_main_1
   3052          	}
   3053          	else {
   3054          		man_ope_work.led_cnt++;
   \                     ??man_ope_10ms_main_0: (+1)
   \   00000018   0x....             LDR      R0,??DataTable26
   \   0000001A   0x6B40             LDR      R0,[R0, #+52]
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0x....             LDR      R1,??DataTable26
   \   00000020   0x6348             STR      R0,[R1, #+52]
   3055          	}
   3056          }
   \                     ??man_ope_10ms_main_1: (+1)
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
   3057          
   3058          
   3059          /********************************************************************/
   3060          /*!
   3061           * \name	man_ope_100ms_main
   3062           * \brief	100ms毎に行う処理
   3063           * \param	なし
   3064           * \return  なし
   3065           * \note	100ms毎に、呼ばれること
   3066           */
   3067          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3068          void man_ope_100ms_main( void )
   3069          {
   3070          
   3071          }
   \                     man_ope_100ms_main: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   3072          
   3073          /********************************************************************/
   3074          /*!
   3075           * \name	man_ope_500ms_main
   3076           * \brief	500ms毎に行う処理
   3077           * \param	なし
   3078           * \return  なし
   3079           * \note	500ms毎に、呼ばれること
   3080           */
   3081          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3082          void man_ope_500ms_main( void )
   3083          {
   \                     man_ope_500ms_main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   3084          	// LED出力処理
   3085          	man_ope_out_led();
   \   00000002   0x.... 0x....      BL       man_ope_out_led
   3086          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
   3087          
   3088          
   3089          
   3090          
   3091          /********************************************************************/
   3092          /*!
   3093           * \name	man_ope_req_reset
   3094           * \brief	端末のリセット開始処理
   3095           * \param	なし
   3096           * \return  なし
   3097           * \note	起動時に、呼ばれること
   3098           */
   3099          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3100          void man_ope_req_reset(void)
   3101          {
   3102          	man_ope_mode_info_t *mode_info = &man_ope_work.mode_info;
   \                     man_ope_req_reset: (+1)
   \   00000000   0x....             LDR      R0,??DataTable26_4
   3103          	// 目標をリセットとする
   3104          //	mode_info->gole_mode = MAN_OPE_MODE_RESET;
   3105          
   3106          	// 要求を保存する
   3107          	man_ope_work.request.req_cmd = MAN_OPE_REQ_CMD_RESET;
   \   00000002   0x2003             MOVS     R0,#+3
   \   00000004   0x....             LDR      R1,??DataTable26
   \   00000006   0x6008             STR      R0,[R1, #+0]
   3108          }
   \   00000008   0x4770             BX       LR               ;; return
   3109          
   3110          
   3111          /********************************************************************/
   3112          /*!
   3113           * \name	man_ope_req_ota_start
   3114           * \brief	OTA開始処理
   3115           * \param	id       : ユニーク番号
   3116           *          callback : 完了を通知するcallback関数
   3117           * \return   0: 成功
   3118           * \note	必要時に、呼ばれること
   3119           */
   3120          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3121          int32_t man_ope_req_ota_start(int32_t id, func_man_ope callback)
   3122          {
   \                     man_ope_req_ota_start: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
   3123          
   3124          	int32_t	ret=0;
   \   00000004   0x2000             MOVS     R0,#+0
   3125          	man_ope_mode_info_t *mode_info = &man_ope_work.mode_info;
   \   00000006   0x....             LDR      R3,??DataTable26_4
   3126          
   3127          	// 要求を保存する
   3128          	man_ope_work.request.req_cmd = MAN_OPE_REQ_CMD_OTA_START;
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0x....             LDR      R4,??DataTable26
   \   0000000C   0x6023             STR      R3,[R4, #+0]
   3129          	man_ope_work.request.id = id;
   \   0000000E   0x....             LDR      R3,??DataTable26
   \   00000010   0x605A             STR      R2,[R3, #+4]
   3130          	man_ope_work.request.callback = callback;
   \   00000012   0x....             LDR      R2,??DataTable26
   \   00000014   0x6091             STR      R1,[R2, #+8]
   3131          
   3132          	return ret;
   \   00000016   0xBC10             POP      {R4}
   \   00000018   0x4770             BX       LR               ;; return
   3133          }
   3134          
   3135          
   3136          /********************************************************************/
   3137          /*!
   3138           * \name	man_ope_req_ota_end
   3139           * \brief	OTA終了処理
   3140           * \param	id       : ユニーク番号
   3141           *          callback : 完了を通知するcallback関数
   3142           * \return   0: 成功
   3143           * \note	必要時に、呼ばれること
   3144           */
   3145          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3146          int32_t man_ope_req_ota_end(int32_t id, func_man_ope callback)
   3147          {
   \                     man_ope_req_ota_end: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0002             MOVS     R2,R0
   3148          	man_ope_mode_info_t *mode_info = &man_ope_work.mode_info;
   \   00000004   0x....             LDR      R3,??DataTable26_4
   3149          	int32_t	ret=-1;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x43C0             MVNS     R0,R0            ;; #-1
   3150          
   3151          	if ( (mode_info->ota_mode == MAN_OPE_MODE_EXT_POWER) || (mode_info->ota_mode == MAN_OPE_MODE_BATTERY) || (mode_info->ota_mode == MAN_OPE_MODE_IDLE) || (mode_info->ota_mode == MAN_OPE_MODE_DIRECT) ) {
   \   0000000A   0x78DC             LDRB     R4,[R3, #+3]
   \   0000000C   0x2C02             CMP      R4,#+2
   \   0000000E   0xD008             BEQ      ??man_ope_req_ota_end_0
   \   00000010   0x78DC             LDRB     R4,[R3, #+3]
   \   00000012   0x2C03             CMP      R4,#+3
   \   00000014   0xD005             BEQ      ??man_ope_req_ota_end_0
   \   00000016   0x78DC             LDRB     R4,[R3, #+3]
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD002             BEQ      ??man_ope_req_ota_end_0
   \   0000001C   0x78DB             LDRB     R3,[R3, #+3]
   \   0000001E   0x2B04             CMP      R3,#+4
   \   00000020   0xD107             BNE      ??man_ope_req_ota_end_1
   3152          		// 要求を保存する
   3153          		man_ope_work.request.req_cmd = MAN_OPE_REQ_CMD_OTA_END;
   \                     ??man_ope_req_ota_end_0: (+1)
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0x....             LDR      R3,??DataTable26
   \   00000026   0x6018             STR      R0,[R3, #+0]
   3154          		man_ope_work.request.id = id;
   \   00000028   0x....             LDR      R0,??DataTable26
   \   0000002A   0x6042             STR      R2,[R0, #+4]
   3155          		man_ope_work.request.callback = callback;
   \   0000002C   0x....             LDR      R0,??DataTable26
   \   0000002E   0x6081             STR      R1,[R0, #+8]
   3156          		ret = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   3157          	}
   3158          
   3159          	return ret;
   \                     ??man_ope_req_ota_end_1: (+1)
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
   3160          }
   3161          
   3162          
   3163          /********************************************************************/
   3164          /*!
   3165           * \name	man_ope_get_switch_pos
   3166           * \brief	スイッチの状態を取得する処理
   3167           * \param	なし
   3168           * \return  スイッチの状態
   3169           * \note	必要時に、呼ばれること
   3170           */
   3171          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3172          man_ope_switch_def man_ope_get_switch_pos(void)
   3173          {
   3174          	return man_ope_work.mode_info.switch_pos;
   \                     man_ope_get_switch_pos: (+1)
   \   00000000   0x....             LDR      R0,??DataTable26_5
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   3175          }
   3176          
   3177          
   3178          /********************************************************************/
   3179          /*!
   3180           * \name	man_ope_get_reset_mode
   3181           * \brief	リセット実行中を判断する処理
   3182           * \param	なし
   3183           * \return  0: 通常動作
   3184           *          1: リセット動作
   3185           * \note	必要時に、呼ばれること
   3186           */
   3187          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3188          int32_t man_ope_get_reset_mode(void)
   3189          {
   \                     man_ope_get_reset_mode: (+1)
   \   00000000   0xB500             PUSH     {LR}
   3190          	int32_t		ret=0;
   \   00000002   0x2000             MOVS     R0,#+0
   3191          
   3192          	// リセット実行中
   3193          	if (man_ope_work.mode_info.gole_mode == MAN_OPE_MODE_RESET) {
   \   00000004   0x....             LDR      R1,??DataTable26_6
   \   00000006   0x7809             LDRB     R1,[R1, #+0]
   \   00000008   0x2905             CMP      R1,#+5
   \   0000000A   0xD100             BNE      ??man_ope_get_reset_mode_0
   3194          		ret = 1;
   \   0000000C   0x2001             MOVS     R0,#+1
   3195          	}
   3196          	
   3197          	return ret;
   \                     ??man_ope_get_reset_mode_0: (+1)
   \   0000000E   0xBD00             POP      {PC}             ;; return
   3198          }
   3199          
   3200          
   3201          /********************************************************************/
   3202          /*!
   3203           * \name	man_ope_set_msg_charge
   3204           * \brief	充電系のメッセージ出力処理
   3205           * \param	なし
   3206           * \return  なし
   3207           * \note	データ管理処理実行後に、呼ばれること
   3208           */
   3209          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3210          void man_ope_set_msg_charge(void)
   3211          {
   \                     man_ope_set_msg_charge: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   3212          	man_data_get_sensor_t	*sensor_info = man_data_get_sensor();
   \   00000002   0x.... 0x....      BL       man_data_get_sensor
   \   00000006   0x0004             MOVS     R4,R0
   3213          	man_ope_mode_info_t		*mode_info = &man_ope_work.mode_info;
   \   00000008   0x....             LDR      R0,??DataTable26_4
   3214          
   3215          	// EXT_ON状態とBATTERY状態時のみ充電系のメッセージ出力の判定を行う
   3216          	if ( (mode_info->switch_pos == MAN_OPE_SWITCH_EXT_ON) || (mode_info->switch_pos == MAN_OPE_SWITCH_BATTERY) ) {
   \   0000000A   0x7941             LDRB     R1,[R0, #+5]
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD002             BEQ      ??man_ope_set_msg_charge_0
   \   00000010   0x7940             LDRB     R0,[R0, #+5]
   \   00000012   0x2805             CMP      R0,#+5
   \   00000014   0xD13B             BNE      ??man_ope_set_msg_charge_1
   3217          
   3218          		// OTA中, RESET中は判定を行わない
   3219          		if ( (sensor_info->ota_mode == MAN_OTA_MODE_NON) && (man_ope_get_reset_mode() == 0) ) {
   \                     ??man_ope_set_msg_charge_0: (+1)
   \   00000016   0x....             LDR      R0,??DataTable26_7  ;; 0xbd9
   \   00000018   0x5C20             LDRB     R0,[R4, R0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD137             BNE      ??man_ope_set_msg_charge_1
   \   0000001E   0x.... 0x....      BL       man_ope_get_reset_mode
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD133             BNE      ??man_ope_set_msg_charge_1
   3220          			// 充電系のメッセージ出力処理
   3221          			if (sensor_info->charge_state == MAN_CHARGE_STAT_DONE) {
   \   00000026   0x6EE0             LDR      R0,[R4, #+108]
   \   00000028   0x2802             CMP      R0,#+2
   \   0000002A   0xD118             BNE      ??man_ope_set_msg_charge_2
   3222          				if ( man_ope_work.msg_info.charge_msg == MAN_MSG_TYPE_CHARG_S ) {
   \   0000002C   0x....             LDR      R0,??DataTable26_8
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x282C             CMP      R0,#+44
   \   00000032   0xD106             BNE      ??man_ope_set_msg_charge_3
   3223          					man_msg_set_type(MAN_MSG_TYPE_CHARG_F);
   \   00000034   0x202D             MOVS     R0,#+45
   \   00000036   0x.... 0x....      BL       man_msg_set_type
   3224          					man_ope_work.msg_info.charge_msg = MAN_MSG_TYPE_CHARG_F;
   \   0000003A   0x202D             MOVS     R0,#+45
   \   0000003C   0x....             LDR      R1,??DataTable26_8
   \   0000003E   0x6008             STR      R0,[R1, #+0]
   \   00000040   0xE025             B        ??man_ope_set_msg_charge_1
   3225          				}
   3226          				else if (man_ope_work.msg_info.charge_msg == MAN_MSG_TYPE_NON) {
   \                     ??man_ope_set_msg_charge_3: (+1)
   \   00000042   0x....             LDR      R0,??DataTable26_8
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD121             BNE      ??man_ope_set_msg_charge_1
   3227          					man_msg_set_type(MAN_MSG_TYPE_CHARG_S);
   \   0000004A   0x202C             MOVS     R0,#+44
   \   0000004C   0x.... 0x....      BL       man_msg_set_type
   3228          					man_msg_set_type(MAN_MSG_TYPE_CHARG_F);
   \   00000050   0x202D             MOVS     R0,#+45
   \   00000052   0x.... 0x....      BL       man_msg_set_type
   3229          					man_ope_work.msg_info.charge_msg = MAN_MSG_TYPE_CHARG_F;
   \   00000056   0x202D             MOVS     R0,#+45
   \   00000058   0x....             LDR      R1,??DataTable26_8
   \   0000005A   0x6008             STR      R0,[R1, #+0]
   \   0000005C   0xE017             B        ??man_ope_set_msg_charge_1
   3230          				}
   3231          			}
   3232          			else if (sensor_info->charge_state == MAN_CHARGE_STAT_CHARGE) {
   \                     ??man_ope_set_msg_charge_2: (+1)
   \   0000005E   0x6EE0             LDR      R0,[R4, #+108]
   \   00000060   0x2801             CMP      R0,#+1
   \   00000062   0xD10E             BNE      ??man_ope_set_msg_charge_4
   3233          				if ( ( man_ope_work.msg_info.charge_msg == MAN_MSG_TYPE_CHARG_F ) || (man_ope_work.msg_info.charge_msg == MAN_MSG_TYPE_NON) ) {
   \   00000064   0x....             LDR      R0,??DataTable26_8
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x282D             CMP      R0,#+45
   \   0000006A   0xD003             BEQ      ??man_ope_set_msg_charge_5
   \   0000006C   0x....             LDR      R0,??DataTable26_8
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD10C             BNE      ??man_ope_set_msg_charge_1
   3234          					man_msg_set_type(MAN_MSG_TYPE_CHARG_S);
   \                     ??man_ope_set_msg_charge_5: (+1)
   \   00000074   0x202C             MOVS     R0,#+44
   \   00000076   0x.... 0x....      BL       man_msg_set_type
   3235          					man_ope_work.msg_info.charge_msg = MAN_MSG_TYPE_CHARG_S;
   \   0000007A   0x202C             MOVS     R0,#+44
   \   0000007C   0x....             LDR      R1,??DataTable26_8
   \   0000007E   0x6008             STR      R0,[R1, #+0]
   \   00000080   0xE005             B        ??man_ope_set_msg_charge_1
   3236          				}
   3237          			}
   3238          			else if (sensor_info->charge_state == MAN_CHARGE_STAT_NON) {
   \                     ??man_ope_set_msg_charge_4: (+1)
   \   00000082   0x6EE0             LDR      R0,[R4, #+108]
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD102             BNE      ??man_ope_set_msg_charge_1
   3239          				man_ope_work.msg_info.charge_msg = MAN_MSG_TYPE_NON;
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x....             LDR      R1,??DataTable26_8
   \   0000008C   0x6008             STR      R0,[R1, #+0]
   3240          			}
   3241          		}
   3242          	}
   3243          }
   \                     ??man_ope_set_msg_charge_1: (+1)
   \   0000008E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     man_ope_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     man_ope_work+0x90

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     man_ope_work+0x94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     man_ope_work+0x98

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     man_ope_work+0x208

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     man_ope_work+0x84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     man_ope_work+0x128

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     man_ope_work+0x8B

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     man_ope_work+0x124

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     man_ope_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     man_ope_work+0x29

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     system_manager

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     man_ope_work+0x84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     man_ope_work+0x90

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     man_ope_work+0x98

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     man_ope_work+0x94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x00000444         DC32     0x444

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x........         DC32     man_ope_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     man_ope_work+0x74

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x00000BD8         DC32     0xbd8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x0000EA60         DC32     0xea60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     mode_seq_tbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     man_ope_work+0x208

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     man_ope_work+0x84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     man_ope_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x........         DC32     man_ope_work+0x74

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     system_manager

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x........         DC32     man_ope_work+0x29

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   0x........         DC32     man_ope_work+0x28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     man_ope_work+0x2A

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x........         DC32     man_ope_work+0x84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x00000BD9         DC32     0xbd9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0x00000BD4         DC32     0xbd4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \   00000000   0x00000BC8         DC32     0xbc8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   0x........         DC32     man_ope_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_1:
   \   00000000   0x........         DC32     man_ope_noti_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_2:
   \   00000000   0x........         DC32     man_ope_work+0x29

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_3:
   \   00000000   0x........         DC32     system_manager

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_4:
   \   00000000   0x........         DC32     man_ope_work+0x84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_5:
   \   00000000   0x........         DC32     man_ope_work+0x89

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_6:
   \   00000000   0x........         DC32     man_ope_work+0x86

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_7:
   \   00000000   0x00000BD9         DC32     0xbd9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_8:
   \   00000000   0x........         DC32     man_ope_work+0x128

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   man_ope_100ms_main
       8   man_ope_10ms_main
         8   -> man_ope_chk_noise
         8   -> man_ope_ctrl_led
         8   -> man_ope_get_ext_status
       8   man_ope_500ms_main
         8   -> man_ope_out_led
       0   man_ope_alarm_callback
       8   man_ope_chk_noise
         8   -> man_dbglog_setting
         8   -> man_gpio_switch_get
      24   man_ope_ctrl_led
        24   -> man_data_get_fixed
        24   -> man_data_get_sensor
        24   -> man_data_get_setting_other
        24   -> man_msg_check_led_send_state
       4   man_ope_ext_sts
       8   man_ope_get_ext_status
         8   -> man_data_get_sensor
       4   man_ope_get_reset_mode
       0   man_ope_get_switch_pos
      16   man_ope_init
        16   -> __aeabi_memset
        16   -> ctrl_SLEEP_init
        16   -> man_gps_req_noti
        16   -> man_net_req_noti
       8   man_ope_main
         8   -> man_ope_ext_sts
         8   -> man_ope_mode_man_proc
         8   -> man_ope_mode_man_recv
         8   -> man_ope_mode_switch
         8   -> man_ope_mode_system_error
         8   -> man_ope_noti_state_recv
      32   man_ope_mode_man_proc
        32   -> ctrl_SLEEP_extsw
        32   -> ctrl_SLEEP_extsw_exton
        32   -> ctrl_SLEEP_extsw_exton_alarm
        32   -> man_charge_expow_get
        32   -> man_charge_expow_usb_get
        32   -> man_data_collect_sensor
        32   -> man_data_get_fixed
        32   -> man_data_get_gnss_no_fix_pos_time
        32   -> man_data_get_sensor
        32   -> man_data_get_setting_other
        32   -> man_error_set
        32   -> man_gpio_switch_get
        32   -> man_gps_get_clock
        32   -> man_gps_req_close
        32   -> man_gps_req_off
        32   -> man_gps_req_open
        32   -> man_gyro_off
        32   -> man_gyro_on
        32   -> man_http_get_clock
        32   -> man_http_get_rtc
        32   -> man_http_get_status
        32   -> man_msg_check_send_state
        32   -> man_msg_set_type
        32   -> man_net_req_close
        32   -> man_net_req_off
        32   -> man_net_req_open
        32   -> man_net_req_stby
        32   -> man_ope_out_led_off
        32   -> man_ope_return_callback
        32   -> man_ope_set_mode_seq
        32   -> man_ope_set_switch_pos
        32   -> man_ope_sleep_conv_alarm
        32   -> man_press_off
        32   -> man_press_on
        32   -> man_rpt_check_send_state
        32   -> man_rpt_req_send_start
        32   -> man_rpt_req_send_stop
        32   -> man_rpt_req_usb_start
        32   -> man_rpt_req_usb_stop
        32   -> man_rtc_get_clock
        32   -> man_rtc_get_status
        32   -> man_rtc_set_clock
        32   -> man_timer_cancel_wait
        32   -> man_timer_get_1ms_count
        32   -> man_timer_get_elapsed_time
        32   -> man_timer_start
        32   -> man_timer_start_wait
        32   -> man_timer_stop
        32   -> man_usb_req_cmd_start
        32   -> man_usb_req_cmd_stop
        32   -> seSysSleepMS
        32   -> wdt_reset
       8   man_ope_mode_man_recv
         8   -> man_error_set
         8   -> man_ope_set_mode_seq
       0   man_ope_mode_req_callback
       8   man_ope_mode_switch
         8   -> man_dbglog_setting
       0   man_ope_mode_system_error
       8   man_ope_noti_callback
       8   man_ope_noti_state_recv
         8   -> man_dbglog_setting
         8   -> man_timer_get_1ms_count
       8   man_ope_out_led
         8   -> man_gpio_led_bat
         8   -> man_gpio_led_gns
         8   -> man_gpio_led_lte
         8   -> man_gpio_led_pow
       8   man_ope_out_led_off
         8   -> man_ope_out_led
       8   man_ope_req_ota_end
       4   man_ope_req_ota_start
       0   man_ope_req_reset
       8   man_ope_return_callback
         8   -- Indirect call
         8   -> man_ope_set_mode_seq
       8   man_ope_set_mode_seq
         8   -> man_dbglog_setting
       8   man_ope_set_msg_charge
         8   -> man_data_get_sensor
         8   -> man_msg_set_type
         8   -> man_ope_get_reset_mode
      16   man_ope_set_switch_pos
        16   -> man_data_get_sensor
        16   -> man_msg_set_type
        16   -> man_rpt_init_cycle_counter
       0   man_ope_sleep_callback
      24   man_ope_sleep_conv_alarm
        24   -> atoi_local
        24   -> man_data_get_other
        24   -> man_data_get_setting_alarmtime
        24 __aeabi_idivmod
        24 __aeabi_uidiv
        24 __aeabi_uidivmod


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable11
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable13
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable16
       4  ??DataTable20
       4  ??DataTable21
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable26
       4  ??DataTable26_1
       4  ??DataTable26_2
       4  ??DataTable26_3
       4  ??DataTable26_4
       4  ??DataTable26_5
       4  ??DataTable26_6
       4  ??DataTable26_7
       4  ??DataTable26_8
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       2  man_ope_100ms_main
      36  man_ope_10ms_main
       8  man_ope_500ms_main
       8  man_ope_alarm_callback
     132  man_ope_chk_noise
     380  man_ope_ctrl_led
      72  man_ope_ext_sts
     102  man_ope_get_ext_status
      16  man_ope_get_reset_mode
       6  man_ope_get_switch_pos
      64  man_ope_init
      50  man_ope_main
    3890  man_ope_mode_man_proc
     384  man_ope_mode_man_recv
      18  man_ope_mode_req_callback
      80  man_ope_mode_switch
      10  man_ope_mode_system_error
      46  man_ope_noti_callback
      90  man_ope_noti_state_recv
     116  man_ope_out_led
      32  man_ope_out_led_off
      52  man_ope_req_ota_end
      26  man_ope_req_ota_start
      10  man_ope_req_reset
      42  man_ope_return_callback
      68  man_ope_set_mode_seq
     144  man_ope_set_msg_charge
     214  man_ope_set_switch_pos
      16  man_ope_sleep_callback
      98  man_ope_sleep_conv_alarm
     524  man_ope_work
     408  mode_seq_tbl

 
   524 bytes in section .bss
   408 bytes in section .rodata
 6 384 bytes in section .text
 
 6 384 bytes of CODE  memory
   408 bytes of CONST memory
   524 bytes of DATA  memory

Errors: none
Warnings: none
