###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       17/May/2019  13:32:09
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_msg.c
#    Command line =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_msg.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_B -lCN
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        -lA
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List\man_msg.lst
#    Object file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj\man_msg.o
#
###############################################################################

C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_msg.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    man_msg.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    2017.10.2
      8            * @brief   HTTPメッセージを管理する
      9            *          HTTP client機能を使用する
     10            ******************************************************************************
     11            $Id: man_msg.c 229 2018-07-20 01:34:38Z shitaoka $
     12            * @attention
     13            *
     14            *****************************************************************************
     15          */
     16          
     17          #include <string.h>
     18          #include <stdio.h>
     19          #include <stdlib.h>
     20          
     21          #include "board.h"
     22          #include "man_rtc.h"
     23          #include "man_http.h"
     24          #include "man_timer.h"
     25          #include "man_press.h"
     26          #include "man_msg.h"
     27          #include "man_data.h"
     28          #include "man_net.h"
     29          #include "man_error.h"
     30          #include "man_usb.h"
     31          #include "man_battery.h"
     32          #include "gnss_gw_common.h"
     33          
     34          #pragma section = "APL_PRG_BLOCK"
     35          
     36          /************************************************************************/
     37          /* declaration of structure                                             */
     38          /************************************************************************/
     39          
     40          
     41          #define	MAN_MSG_SEQ_BUFF_MAX	100
     42          
     43          #define	MAN_MSG_BUF_MAX			12
     44          #define	MAN_MSG_RECV_BUF_MAX	100
     45          
     46          #define	MAN_MSG_RESP_TIMEOUT	1000
     47          #define	MAN_MSG_NOTI_STATE		1001
     48          
     49          #define	MAN_MSG_RESP_CLOSE_TO	30000		// +CIPCLOSE: 2,0 応答待ちタイムアウト時間 30秒
     50          #define	MAN_MSG_RESP_RETRY_TO	30000		// リトライ用
     51          
     52          #define	MAN_MSG_RETRY_MAX		2
     53          
     54          #define	MAN_MSG_RESP_TIMOUT		20000		// 20秒経過してもサーバから応答がない場合は失敗とみなす
     55          
     56          
     57          // メッセージ管理出力モード
     58          typedef enum {
     59          	MAN_MSG_SEND_START,				    // 出力開始(登録開始)
     60          	MAN_MSG_SEND_STOP,			    	// 出力停止(登録禁止)
     61          } man_msg_send_def;
     62          
     63          
     64          // エラー状態
     65          typedef enum {
     66          	MAN_MSG_ERR_STS_OFF,			    // 正常
     67          	MAN_MSG_ERR_STS_ON,				   	// 異常中
     68          } man_msg_err_def;
     69          
     70          
     71          
     72          // メッセージ管理モード
     73          #define	MAN_MSG_MODE_STOP			0		// 機能停止(NET CLOSE状態)
     74          #define	MAN_MSG_MODE_START			1		// 機能開始(NET OPEN状態)
     75          
     76          
     77          // メッセージ管理状態
     78          typedef enum {
     79          	MAN_MSG_SEQ_READY,						// 00 : 待ち状態
     80          	MAN_MSG_SEQ_OPEN_REQ,					// 01 : HTTP接続開始要求
     81          	MAN_MSG_SEQ_OPEN,						// 02 : HTTP接続開始状態
     82          	MAN_MSG_SEQ_OPEN_OK_CHK,				// 03 : OPEN_OK チェック(RPTの状態を確認する)
     83          	MAN_MSG_SEQ_OPEN_OK,					// 04 : HTTP接続完了状態
     84          	MAN_MSG_SEQ_SEND1_REQ,					// 05 : HTTP送信1開始状態
     85          	MAN_MSG_SEQ_SEND1_OK,					// 06 : HTTP送信1完了状態
     86          	MAN_MSG_SEQ_SEND2_REQ,					// 07 : HTTP送信2開始状態
     87          	MAN_MSG_SEQ_SEND2_OK,					// 08 : HTTP送信2完了状態
     88          	MAN_MSG_SEQ_CLOSE_WAIT_REQ,				// 09 : HTTP切断開始10秒待ち要求
     89          	MAN_MSG_SEQ_CLOSE_WAIT,					// 10 : HTTP切断開始10秒待ち
     90          	MAN_MSG_SEQ_CLOSE_WAIT_OK,				// 11 : HTTP切断開始10秒待ち完了
     91          	MAN_MSG_SEQ_CLOSE_WAIT_NG,				// 12 : HTTP切断開始10秒待ち完了
     92          	MAN_MSG_SEQ_CLOSE_REQ,					// 13 : HTTP切断開始状態
     93          	MAN_MSG_SEQ_CLOSE_OK,					// 14 : HTTP切断受付状態
     94          	MAN_MSG_SEQ_OPEN_NG,					// 15 : HTTP接続異常状態
     95          	MAN_MSG_SEQ_OPEN_NG_WAIT,				// 16 : HTTP接続異常安定待ち状態
     96          	MAN_MSG_SEQ_SEND1_NG,					// 17 : HTTP送信1完了状態
     97          	MAN_MSG_SEQ_SEND2_NG,					// 18 : HTTP送信2完了状態
     98          	MAN_MSG_SEQ_CLOSE_NG,					// 19 : HTTP切断受付状態
     99          } man_msg_seq_mode_def;
    100          
    101          #define	MAN_MSG_REQ_READY			0		// 要求待ち
    102          #define	MAN_MSG_REQ_START			1		// msg開始
    103          #define	MAN_MSG_REQ_STOP			2		// msg停止
    104          
    105          
    106          // 登録情報
    107          typedef struct _man_msg_type_info_t {
    108          	int32_t			msg_type;					// メッセージタイプ
    109          	int32_t			voltage;					// バッテリー電圧[mv]
    110          	int32_t			charge;						// バッテリー残量[%]
    111          	man_gyro_data_t	gyro;						// 角速度・加速度・重力加速度
    112          	int32_t			temperature;				// 端末温度
    113          	int32_t			type_num;					// 端末の内部温度を示すコード
    114          	int32_t			pressure;
    115          	int32_t			altitude;
    116          	int32_t			rsrp;						// 基準信号受信電力[dbm]
    117          	int32_t			rssi;						// 受信信号強度[dbm]
    118          	clock_info_t	clock;						// 端末時刻
    119          	uint8_t			cid[MAN_DATA_CID_LENGTH+1];	// CID
    120          
    121          	uint8_t			nmea[GPS_NMEA_DATA_MAX];	// NMEA
    122          	int32_t			nmea_len;					// NMEA データ長
    123          } man_msg_type_info_t;
    124          
    125          // メッセージ情報
    126          typedef struct _man_msg_msg_info_t {
    127          	man_msg_type_info_t		msg_buf[MAN_MSG_BUF_MAX];	// メッセージ情報
    128          	int32_t					write_p;		// 書き込み位置
    129          	int32_t					read_p;			// 読み込み位置
    130          	int32_t					count;			// 登録数
    131          } man_msg_msg_info_t;
    132          
    133          
    134          // USBメッセージ情報
    135          typedef struct _man_msg_usb_info_t {
    136          	int32_t					flag;			// 要求の有無
    137          	man_msg_type_info_t		msg_buf;		// メッセージ情報
    138          } man_msg_usb_info_t;
    139          
    140          
    141          // 要求に対する応答
    142          typedef struct _man_msg_resp_cmd_t {
    143          	int32_t					flag;
    144          	int32_t					id;
    145          	int32_t					status;
    146          	uint8_t					data[MAN_MSG_RECV_BUF_MAX];
    147          	int32_t					length;
    148          } man_msg_resp_cmd_t;
    149          
    150          
    151          // サーバーに通知するメッセージ
    152          typedef struct _man_msg_req_msg_t {
    153          	man_msg_type_info_t		msg_data;		// メッセージ情報
    154          	int32_t					read_p;			// 読み込み位置
    155          } man_msg_req_msg_t;
    156          
    157          
    158          // body作成用
    159          typedef struct _man_msg_body_data_t {
    160          	uint8_t					data[MAN_DATA_BODY_SIZE];
    161          	int32_t					data_len;
    162          } man_msg_body_data_t;
    163          
    164          // info作成用
    165          typedef struct _man_msg_info_data_t {
    166          	uint8_t					data[MAN_DATA_INFO_SIZE];
    167          	int32_t					data_len;
    168          } man_msg_info_data_t;
    169          
    170          // メッセージデータ
    171          typedef struct _man_msg_msg_data_t {
    172          	uint8_t					data[MAN_DATA_HTTP_SIZE];
    173          	int32_t					data_len;
    174          } man_msg_msg_data_t;
    175          
    176          // 要求
    177          typedef struct _man_msg_req_info_t {
    178          	int32_t					req;
    179          	int32_t					id;					// ユニークID
    180          	func_man_msg			callback;			// 結果を通知するcallback関数
    181          } man_msg_req_info_t;
    182          
    183          // 受信状態通知先情報
    184          typedef struct _man_msg_error_info_t {
    185          	int32_t					id;					// ユニークID
    186          	func_man_msg			callback_error;		// 異常を通知するcallback関数
    187          } man_msg_error_info_t;
    188          
    189          
    190          // メッセージ管理ワーク
    191          typedef struct _man_msg_work_t {
    192          	int32_t					mode;			// 機能停止/機能開始モード
    193          	int32_t					csq_mode;		// 圏外時の状態
    194          	man_msg_send_def		send_mode;		// 出力モード
    195          	man_msg_err_def			err_sts;		// エラー状態
    196          //	int32_t					status;			// CLOSE/OPEN状態
    197          	man_msg_msg_info_t		msg_info;		// メッセージ情報
    198          	man_msg_req_msg_t		req_msg;		// 取り出したメッセージ情報
    199          
    200          	man_msg_usb_info_t		usb_info;		// USB出力用メッセージ情報
    201          
    202          	man_msg_seq_mode_def	seq;
    203          	man_msg_resp_cmd_t		resp_cmd;		// 要求に対する応答
    204          	int32_t					retry;			// リトライカウンタ
    205          	uint32_t				delay_timer;	// 時間監視
    206          	
    207          	man_msg_req_info_t		request;		// 要求
    208          
    209          	int32_t					req_state;		// NETWORKの状態
    210          	int32_t					req_state_cnt;
    211          
    212          	man_msg_error_info_t	noti_error;		// 異常状態通知先情報
    213          	man_data_rssi_sts_def	rssi_sts;		// 電波状況(圏内/圏外)
    214          
    215          	man_msg_body_data_t		body1;			// HTTP clientデータ BODY 作成用
    216          	man_msg_body_data_t		body2;
    217          	man_msg_info_data_t		info1;			// HTTP clientデータ INFO 作成用
    218          	man_msg_info_data_t		info2;
    219          	man_msg_msg_data_t		msg_buff1;		// HTTP clientデータ
    220          	man_msg_msg_data_t		msg_buff2;
    221          
    222          	man_msg_seq_mode_def	mode_seq_buff[MAN_MSG_SEQ_BUFF_MAX];	// シーケンスバッファ
    223          	int32_t					mode_seq_w_p;
    224          
    225          	uint8_t					buff[100];
    226          } man_msg_work_t;
    227          
    228          
    229          /************************************************************************/
    230          /* definition of variables                                              */
    231          /************************************************************************/
    232          

   \                                 In section .bss, align 4
    233          man_msg_work_t	man_msg_work;
   \                     man_msg_work:
   \   00000000                      DS8 25892
    234          
    235          
    236          
    237          
    238          
    239          /********************************************************************/
    240          /*	callback関数                                                    */
    241          /********************************************************************/
    242          
    243          /********************************************************************/
    244          /*!
    245           * \name	man_msg_req_callback
    246           * \brief	要求に対するcallback処理
    247           * \param	id     : ユニークID
    248           *          status : 受信結果
    249           * \return  なし
    250           * \note	
    251           */
    252          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    253          static void man_msg_req_callback(int32_t id, int32_t status)
    254          {
    255          	man_msg_work.resp_cmd.flag = 1;
   \                     man_msg_req_callback: (+1)
   \   00000000   0x2201             MOVS     R2,#+1
   \   00000002   0x....             LDR      R3,??DataTable6
   \   00000004   0x601A             STR      R2,[R3, #+0]
    256          	man_msg_work.resp_cmd.id = id & TIMER_MAN_ID_MASK;
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x....             LDR      R2,??DataTable6_1
   \   0000000A   0x6010             STR      R0,[R2, #+0]
    257          	man_msg_work.resp_cmd.status = status;
   \   0000000C   0x....             LDR      R0,??DataTable6_2
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    258          }
   \   00000010   0x4770             BX       LR               ;; return
    259          
    260          
    261          /********************************************************************/
    262          /*	static関数                                                      */
    263          /********************************************************************/
    264          
    265          /********************************************************************/
    266          /*!
    267           * \name	man_msg_set_mode_seq
    268           * \brief	シーケンスを設定する
    269           * \param	seq : 設定するシーケンス
    270           * \return  なし
    271           * \note	
    272           */
    273          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    274          static void man_msg_set_mode_seq( man_msg_seq_mode_def seq )
    275          {
   \                     man_msg_set_mode_seq: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    276          	if (man_msg_work.seq != seq) {
   \   00000002   0x....             LDR      R1,??DataTable6_3
   \   00000004   0x7809             LDRB     R1,[R1, #+0]
   \   00000006   0x0002             MOVS     R2,R0
   \   00000008   0xB2D2             UXTB     R2,R2
   \   0000000A   0x4291             CMP      R1,R2
   \   0000000C   0xD019             BEQ      ??man_msg_set_mode_seq_0
    277          		man_msg_work.seq = seq;
   \   0000000E   0x....             LDR      R1,??DataTable6_3
   \   00000010   0x7008             STRB     R0,[R1, #+0]
    278          
    279          		// ログに保存する
    280          		man_msg_work.mode_seq_buff[man_msg_work.mode_seq_w_p] = seq;
   \   00000012   0x....             LDR      R1,??DataTable6_4
   \   00000014   0x....             LDR      R2,??DataTable6_5
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0x1889             ADDS     R1,R1,R2
   \   0000001A   0x....             LDR      R2,??DataTable6_6  ;; 0x6458
   \   0000001C   0x5488             STRB     R0,[R1, R2]
    281          		man_msg_work.mode_seq_w_p++;
   \   0000001E   0x....             LDR      R1,??DataTable6_5
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x1C49             ADDS     R1,R1,#+1
   \   00000024   0x....             LDR      R2,??DataTable6_5
   \   00000026   0x6011             STR      R1,[R2, #+0]
    282          		if (man_msg_work.mode_seq_w_p >= MAN_MSG_SEQ_BUFF_MAX) {
   \   00000028   0x....             LDR      R1,??DataTable6_5
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x2964             CMP      R1,#+100
   \   0000002E   0xDB02             BLT      ??man_msg_set_mode_seq_1
    283          			man_msg_work.mode_seq_w_p=0;
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x....             LDR      R2,??DataTable6_5
   \   00000034   0x6011             STR      R1,[R2, #+0]
    284          		}
    285          
    286          		// デバックログに登録 
    287          		man_dbglog_setting(MAN_ERROR_DBG_MAN_MSG, MAN_ERROR_DBG_TYPE_SEQ, seq);
   \                     ??man_msg_set_mode_seq_1: (+1)
   \   00000036   0xB2C0             UXTB     R0,R0
   \   00000038   0x0002             MOVS     R2,R0
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2006             MOVS     R0,#+6
   \   0000003E   0x.... 0x....      BL       man_dbglog_setting
    288          
    289          #ifdef GNSS_DEBUG_MAN_MSG 
    290          			int32_t		length;
    291          			sprintf((char *)&man_msg_work.buff[0], "MSG SEQ(%d)\n", seq);
    292          			length = strlen((char const *)&man_msg_work.buff[0]);
    293          			man_usb_data_send(&man_msg_work.buff[0], length);
    294          #endif
    295          
    296          	}
    297          }
   \                     ??man_msg_set_mode_seq_0: (+1)
   \   00000042   0xBD01             POP      {R0,PC}          ;; return
    298          
    299          
    300          /********************************************************************/
    301          /*!
    302           * \name	man_msg_check_no_msg
    303           * \brief	登録メッセージ無しチェック処理
    304           * \param	msg_data  : メッセージデータ
    305           *          read_p    : 読み出し位置
    306           * \return   0: 登録メッセージデータなし
    307            *          1: 登録メッセージデータあり
    308           * \note	必要時に、呼ばれること
    309           */
    310          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    311          static int32_t man_msg_check_msg( void )
    312          {
   \                     man_msg_check_msg: (+1)
   \   00000000   0xB500             PUSH     {LR}
    313          	int32_t		ret=1;
   \   00000002   0x2001             MOVS     R0,#+1
    314          
    315          	// 登録メッセージ無し or 圏外
    316          	if ( (man_msg_work.msg_info.count == 0) || (man_msg_work.rssi_sts == MAN_DATA_RSSI_STS_NG) ) {
   \   00000004   0x....             LDR      R1,??DataTable6_7
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD003             BEQ      ??man_msg_check_msg_0
   \   0000000C   0x....             LDR      R1,??DataTable6_8
   \   0000000E   0x7809             LDRB     R1,[R1, #+0]
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD100             BNE      ??man_msg_check_msg_1
    317          		ret = 0;
   \                     ??man_msg_check_msg_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
    318          	}
    319          
    320          	return ret;
   \                     ??man_msg_check_msg_1: (+1)
   \   00000016   0xBD00             POP      {PC}             ;; return
    321          }
    322          
    323          
    324          /********************************************************************/
    325          /*!
    326           * \name	man_msg_get_save
    327           * \brief	登録メッセージから取得する処理
    328           * \param	msg_data  : メッセージデータ
    329           *          read_p    : 読み出し位置
    330           * \return   0: 成功
    331           *          -1:失敗
    332           * \note	必要時に、呼ばれること
    333           */
    334          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    335          static int32_t man_msg_get_save( man_msg_type_info_t *msg_data, int32_t *read_p )
    336          {
   \                     man_msg_get_save: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000C             MOVS     R4,R1
    337          	man_msg_msg_info_t *msg = &man_msg_work.msg_info;
   \   00000004   0x....             LDR      R5,??DataTable6_9
    338          	int32_t		ret=-1;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x43C9             MVNS     R1,R1            ;; #-1
    339          
    340          	if (msg->count != 0) {
   \   0000000A   0x....             LDR      R2,??DataTable6_10  ;; 0x47a8
   \   0000000C   0x58AA             LDR      R2,[R5, R2]
   \   0000000E   0x2A00             CMP      R2,#+0
   \   00000010   0xD00D             BEQ      ??man_msg_get_save_0
    341          		*msg_data = msg->msg_buf[msg->read_p];
   \   00000012   0x....             LDR      R1,??DataTable6_11  ;; 0x47a4
   \   00000014   0x5869             LDR      R1,[R5, R1]
   \   00000016   0x22BF             MOVS     R2,#+191
   \   00000018   0x00D2             LSLS     R2,R2,#+3        ;; #+1528
   \   0000001A   0x4351             MULS     R1,R2,R1
   \   0000001C   0x1869             ADDS     R1,R5,R1
   \   0000001E   0x22BF             MOVS     R2,#+191
   \   00000020   0x00D2             LSLS     R2,R2,#+3        ;; #+1528
   \   00000022   0x.... 0x....      BL       __aeabi_memcpy4
    342          		*read_p = msg->read_p;
   \   00000026   0x....             LDR      R0,??DataTable6_11  ;; 0x47a4
   \   00000028   0x5828             LDR      R0,[R5, R0]
   \   0000002A   0x6020             STR      R0,[R4, #+0]
    343          		ret = 0;
   \   0000002C   0x2100             MOVS     R1,#+0
    344          	}
    345          
    346          	return ret;
   \                     ??man_msg_get_save_0: (+1)
   \   0000002E   0x0008             MOVS     R0,R1
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    347          }
    348          
    349          
    350          /********************************************************************/
    351          /*!
    352           * \name	man_msg_del_save
    353           * \brief	登録メッセージから１個削除する
    354           * \param	read_p  : 読み出し位置
    355           * \return   0: 成功
    356           *          -1:失敗
    357           * \note	必要時に、呼ばれること
    358           *          読み出し位置が進んでいた場合は削除しない
    359           */
    360          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    361          static int32_t man_msg_del_save( int32_t read_p )
    362          {
   \                     man_msg_del_save: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0001             MOVS     R1,R0
    363          	man_msg_msg_info_t *msg = &man_msg_work.msg_info;
   \   00000004   0x....             LDR      R2,??DataTable6_9
    364          	int32_t		ret=0;
   \   00000006   0x2000             MOVS     R0,#+0
    365          
    366          	if (read_p == msg->read_p) {
   \   00000008   0x....             LDR      R3,??DataTable6_11  ;; 0x47a4
   \   0000000A   0x58D3             LDR      R3,[R2, R3]
   \   0000000C   0x4299             CMP      R1,R3
   \   0000000E   0xD112             BNE      ??man_msg_del_save_0
    367          		msg->read_p++;
   \   00000010   0x....             LDR      R1,??DataTable6_11  ;; 0x47a4
   \   00000012   0x5851             LDR      R1,[R2, R1]
   \   00000014   0x1C49             ADDS     R1,R1,#+1
   \   00000016   0x....             LDR      R3,??DataTable6_11  ;; 0x47a4
   \   00000018   0x50D1             STR      R1,[R2, R3]
    368          		if (msg->read_p >= MAN_MSG_BUF_MAX) {
   \   0000001A   0x....             LDR      R1,??DataTable6_11  ;; 0x47a4
   \   0000001C   0x5851             LDR      R1,[R2, R1]
   \   0000001E   0x290C             CMP      R1,#+12
   \   00000020   0xDB04             BLT      ??man_msg_del_save_1
    369          			msg->read_p -= MAN_MSG_BUF_MAX;
   \   00000022   0x....             LDR      R1,??DataTable6_11  ;; 0x47a4
   \   00000024   0x5851             LDR      R1,[R2, R1]
   \   00000026   0x390C             SUBS     R1,R1,#+12
   \   00000028   0x....             LDR      R3,??DataTable6_11  ;; 0x47a4
   \   0000002A   0x50D1             STR      R1,[R2, R3]
    370          		}
    371          		msg->count--;
   \                     ??man_msg_del_save_1: (+1)
   \   0000002C   0x....             LDR      R1,??DataTable6_10  ;; 0x47a8
   \   0000002E   0x5851             LDR      R1,[R2, R1]
   \   00000030   0x1E49             SUBS     R1,R1,#+1
   \   00000032   0x....             LDR      R3,??DataTable6_10  ;; 0x47a8
   \   00000034   0x50D1             STR      R1,[R2, R3]
    372          	}
    373          
    374          	return ret;
   \                     ??man_msg_del_save_0: (+1)
   \   00000036   0xBD00             POP      {PC}             ;; return
    375          }
    376          
    377          
    378          /********************************************************************/
    379          /*!
    380           * \name	man_msg_make_info_sensor
    381           * \brief	サーバに通知するINFOデータ(センサ用)を作成する処理
    382           * \param	msg_data : 登録時の情報
    383           *          info1    : INFO1格納エリア
    384           *          info2    : INFO2格納エリア
    385           * \return  なし
    386           * \note	
    387           */
    388          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    389          static void man_msg_make_info_sensor( man_msg_type_info_t *msg_data, man_msg_info_data_t *info1, man_msg_info_data_t *info2 )
    390          {
   \                     man_msg_make_info_sensor: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB091             SUB      SP,SP,#+68
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    391          	int32_t		size;
    392          
    393          	memset(info1->data, 0, MAN_DATA_INFO_SIZE);
   \   0000000A   0x21CD             MOVS     R1,#+205
   \   0000000C   0x0089             LSLS     R1,R1,#+2        ;; #+820
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0x.... 0x....      BL       __aeabi_memset
    394          	info1->data_len = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x21CD             MOVS     R1,#+205
   \   0000001A   0x0089             LSLS     R1,R1,#+2        ;; #+820
   \   0000001C   0x5068             STR      R0,[R5, R1]
    395          	info2->data_len = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x21CD             MOVS     R1,#+205
   \   00000022   0x0089             LSLS     R1,R1,#+2        ;; #+820
   \   00000024   0x5070             STR      R0,[R6, R1]
    396          
    397          	sprintf((char *)info1->data, "%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d.%02d;%d;%d;0.00;%d;%d;",
    398          								msg_data->gyro.raw_accel_x,				// 加速度センサー生値(X軸)
    399          								msg_data->gyro.raw_accel_y,				// 加速度センサー生値(Y軸)
    400          								msg_data->gyro.raw_accel_z,				// 加速度センサー生値(Z軸)
    401          								msg_data->gyro.accel_x,					// 加速度(X軸)[mG]
    402          								msg_data->gyro.accel_y,					// 加速度(Y軸)[mG]
    403          								msg_data->gyro.accel_z,					// 加速度(Z軸)[mG]
    404          								msg_data->gyro.raw_gyro_x,				// 角速度センサー生値(X軸)
    405          								msg_data->gyro.raw_gyro_y,				// 角速度センサー生値(Y軸)
    406          								msg_data->gyro.raw_gyro_z,				// 角速度センサー生値(Z軸)
    407          								msg_data->gyro.gyro_x,					// 角速度(X軸)[dps]
    408          								msg_data->gyro.gyro_y,					// 角速度(Y軸)[dps]
    409          								msg_data->gyro.gyro_z,					// 角速度(Z軸)[dps]
    410          								msg_data->pressure/100,					// 気圧(****[hPa])
    411          								msg_data->pressure%100,					// 気圧(.**[hPa])
    412          								msg_data->temperature,					// 気圧(******[hPa])
    413          								msg_data->altitude,						// 高度(-*** 〜 *****[m])
    414          								msg_data->rsrp,							// 基準信号受信電力[dbm]
    415          								msg_data->rssi);						// 受信信号強度[dbm]
   \   00000026   0x6EA0             LDR      R0,[R4, #+104]
   \   00000028   0x900F             STR      R0,[SP, #+60]
   \   0000002A   0x6E60             LDR      R0,[R4, #+100]
   \   0000002C   0x900E             STR      R0,[SP, #+56]
   \   0000002E   0x6E20             LDR      R0,[R4, #+96]
   \   00000030   0x900D             STR      R0,[SP, #+52]
   \   00000032   0x6D60             LDR      R0,[R4, #+84]
   \   00000034   0x900C             STR      R0,[SP, #+48]
   \   00000036   0x6DE0             LDR      R0,[R4, #+92]
   \   00000038   0x2164             MOVS     R1,#+100
   \   0000003A   0x.... 0x....      BL       __aeabi_idivmod
   \   0000003E   0x910B             STR      R1,[SP, #+44]
   \   00000040   0x6DE0             LDR      R0,[R4, #+92]
   \   00000042   0x2164             MOVS     R1,#+100
   \   00000044   0x.... 0x....      BL       __aeabi_idiv
   \   00000048   0x900A             STR      R0,[SP, #+40]
   \   0000004A   0x6BA0             LDR      R0,[R4, #+56]
   \   0000004C   0x9009             STR      R0,[SP, #+36]
   \   0000004E   0x6B60             LDR      R0,[R4, #+52]
   \   00000050   0x9008             STR      R0,[SP, #+32]
   \   00000052   0x6B20             LDR      R0,[R4, #+48]
   \   00000054   0x9007             STR      R0,[SP, #+28]
   \   00000056   0x6960             LDR      R0,[R4, #+20]
   \   00000058   0x9006             STR      R0,[SP, #+24]
   \   0000005A   0x6920             LDR      R0,[R4, #+16]
   \   0000005C   0x9005             STR      R0,[SP, #+20]
   \   0000005E   0x68E0             LDR      R0,[R4, #+12]
   \   00000060   0x9004             STR      R0,[SP, #+16]
   \   00000062   0x6C60             LDR      R0,[R4, #+68]
   \   00000064   0x9003             STR      R0,[SP, #+12]
   \   00000066   0x6C20             LDR      R0,[R4, #+64]
   \   00000068   0x9002             STR      R0,[SP, #+8]
   \   0000006A   0x6BE0             LDR      R0,[R4, #+60]
   \   0000006C   0x9001             STR      R0,[SP, #+4]
   \   0000006E   0x6A20             LDR      R0,[R4, #+32]
   \   00000070   0x9000             STR      R0,[SP, #+0]
   \   00000072   0x69E3             LDR      R3,[R4, #+28]
   \   00000074   0x69A2             LDR      R2,[R4, #+24]
   \   00000076   0x....             LDR      R1,??DataTable6_12
   \   00000078   0x0028             MOVS     R0,R5
   \   0000007A   0x.... 0x....      BL       sprintf
    416          
    417          	size = strlen((char const *)info1->data);
   \   0000007E   0x0028             MOVS     R0,R5
   \   00000080   0x.... 0x....      BL       strlen
   \   00000084   0x0007             MOVS     R7,R0
    418          	if ( msg_data->nmea_len <= MAN_DATA_NMEA_MAX) {
   \   00000086   0x....             LDR      R0,??DataTable7  ;; 0x5f4
   \   00000088   0x5820             LDR      R0,[R4, R0]
   \   0000008A   0x....             LDR      R1,??DataTable6_13  ;; 0x2bd
   \   0000008C   0x4288             CMP      R0,R1
   \   0000008E   0xDA18             BGE      ??man_msg_make_info_sensor_0
    419          		if (msg_data->nmea_len > 0) {
   \   00000090   0x....             LDR      R0,??DataTable7  ;; 0x5f4
   \   00000092   0x5820             LDR      R0,[R4, R0]
   \   00000094   0x2801             CMP      R0,#+1
   \   00000096   0xDB09             BLT      ??man_msg_make_info_sensor_1
    420          			memcpy(&info1->data[size], &msg_data->nmea[0], msg_data->nmea_len);
   \   00000098   0x....             LDR      R0,??DataTable7  ;; 0x5f4
   \   0000009A   0x5822             LDR      R2,[R4, R0]
   \   0000009C   0x0021             MOVS     R1,R4
   \   0000009E   0x317B             ADDS     R1,R1,#+123
   \   000000A0   0x19E8             ADDS     R0,R5,R7
   \   000000A2   0x9000             STR      R0,[SP, #+0]
   \   000000A4   0x9800             LDR      R0,[SP, #+0]
   \   000000A6   0x.... 0x....      BL       __aeabi_memcpy
   \   000000AA   0x9800             LDR      R0,[SP, #+0]
    421          		}
    422          		info1->data_len = size + msg_data->nmea_len;
   \                     ??man_msg_make_info_sensor_1: (+1)
   \   000000AC   0x....             LDR      R0,??DataTable7  ;; 0x5f4
   \   000000AE   0x5820             LDR      R0,[R4, R0]
   \   000000B0   0x1838             ADDS     R0,R7,R0
   \   000000B2   0x21CD             MOVS     R1,#+205
   \   000000B4   0x0089             LSLS     R1,R1,#+2        ;; #+820
   \   000000B6   0x5068             STR      R0,[R5, R1]
    423          		info2->data_len = 0;
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0x21CD             MOVS     R1,#+205
   \   000000BC   0x0089             LSLS     R1,R1,#+2        ;; #+820
   \   000000BE   0x5070             STR      R0,[R6, R1]
   \   000000C0   0xE034             B        ??man_msg_make_info_sensor_2
    424          	}
    425          	else {
    426          		if (msg_data->nmea_len <= 2 * MAN_DATA_NMEA_MAX) {
   \                     ??man_msg_make_info_sensor_0: (+1)
   \   000000C2   0x....             LDR      R0,??DataTable7  ;; 0x5f4
   \   000000C4   0x5820             LDR      R0,[R4, R0]
   \   000000C6   0x....             LDR      R1,??DataTable7_1  ;; 0x579
   \   000000C8   0x4288             CMP      R0,R1
   \   000000CA   0xDA27             BGE      ??man_msg_make_info_sensor_3
    427          			memcpy(&info1->data[size], &msg_data->nmea[0], MAN_DATA_NMEA_MAX);
   \   000000CC   0x22AF             MOVS     R2,#+175
   \   000000CE   0x0092             LSLS     R2,R2,#+2        ;; #+700
   \   000000D0   0x0021             MOVS     R1,R4
   \   000000D2   0x317B             ADDS     R1,R1,#+123
   \   000000D4   0x19E8             ADDS     R0,R5,R7
   \   000000D6   0x9000             STR      R0,[SP, #+0]
   \   000000D8   0x9800             LDR      R0,[SP, #+0]
   \   000000DA   0x.... 0x....      BL       __aeabi_memcpy
   \   000000DE   0x9800             LDR      R0,[SP, #+0]
    428          			info1->data_len = size + MAN_DATA_NMEA_MAX;
   \   000000E0   0x20AF             MOVS     R0,#+175
   \   000000E2   0x0080             LSLS     R0,R0,#+2        ;; #+700
   \   000000E4   0x1838             ADDS     R0,R7,R0
   \   000000E6   0x21CD             MOVS     R1,#+205
   \   000000E8   0x0089             LSLS     R1,R1,#+2        ;; #+820
   \   000000EA   0x5068             STR      R0,[R5, R1]
    429          
    430          			memcpy(&info2->data[0], &info1->data[0], size);
   \   000000EC   0x003A             MOVS     R2,R7
   \   000000EE   0x0029             MOVS     R1,R5
   \   000000F0   0x0030             MOVS     R0,R6
   \   000000F2   0x.... 0x....      BL       __aeabi_memcpy
    431          			memcpy(&info2->data[size], &msg_data->nmea[MAN_DATA_NMEA_MAX], msg_data->nmea_len - MAN_DATA_NMEA_MAX);
   \   000000F6   0x....             LDR      R0,??DataTable7  ;; 0x5f4
   \   000000F8   0x5820             LDR      R0,[R4, R0]
   \   000000FA   0x....             LDR      R1,??DataTable8  ;; 0xfffffd44
   \   000000FC   0x1842             ADDS     R2,R0,R1
   \   000000FE   0x....             LDR      R0,??DataTable8_1  ;; 0x337
   \   00000100   0x1821             ADDS     R1,R4,R0
   \   00000102   0x19F5             ADDS     R5,R6,R7
   \   00000104   0x0028             MOVS     R0,R5
   \   00000106   0x.... 0x....      BL       __aeabi_memcpy
    432          			info2->data_len = size + msg_data->nmea_len - MAN_DATA_NMEA_MAX;
   \   0000010A   0x....             LDR      R0,??DataTable7  ;; 0x5f4
   \   0000010C   0x5820             LDR      R0,[R4, R0]
   \   0000010E   0x1838             ADDS     R0,R7,R0
   \   00000110   0x....             LDR      R1,??DataTable8  ;; 0xfffffd44
   \   00000112   0x1840             ADDS     R0,R0,R1
   \   00000114   0x21CD             MOVS     R1,#+205
   \   00000116   0x0089             LSLS     R1,R1,#+2        ;; #+820
   \   00000118   0x5070             STR      R0,[R6, R1]
   \   0000011A   0xE007             B        ??man_msg_make_info_sensor_2
    433          		}
    434          		// NMEAデータ長異常
    435          		else {
    436          			man_error_setting(MAN_ERROR_MAN_MSG, msg_data->nmea_len, 0);
   \                     ??man_msg_make_info_sensor_3: (+1)
   \   0000011C   0x23DA             MOVS     R3,#+218
   \   0000011E   0x005B             LSLS     R3,R3,#+1        ;; #+436
   \   00000120   0x2200             MOVS     R2,#+0
   \   00000122   0x....             LDR      R0,??DataTable7  ;; 0x5f4
   \   00000124   0x5821             LDR      R1,[R4, R0]
   \   00000126   0x201A             MOVS     R0,#+26
   \   00000128   0x.... 0x....      BL       man_error_set
    437          		}
    438          	}
    439          }
   \                     ??man_msg_make_info_sensor_2: (+1)
   \   0000012C   0xB011             ADD      SP,SP,#+68
   \   0000012E   0xBDF0             POP      {R4-R7,PC}       ;; return
    440          
    441          
    442          /********************************************************************/
    443          /*!
    444           * \name	man_msg_make_info_setting
    445           * \brief	サーバに通知するINFOデータ(設定値用)を作成する処理
    446           * \param	info1 : INFO格納エリア
    447           * \return  なし
    448           * \note	%%
    449           */
    450          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    451          static void man_msg_make_info_setting( man_msg_info_data_t *info )
    452          {
   \                     man_msg_make_info_setting: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
   \   00000004   0x0007             MOVS     R7,R0
    453          	int32_t		size;
    454          	man_data_num_gpssleeptime_t		*gpssleeptime = man_data_get_setting_gpssleeptime();
   \   00000006   0x.... 0x....      BL       man_data_get_setting_gpssleeptime
   \   0000000A   0x9011             STR      R0,[SP, #+68]
    455          	man_data_num_gprs_t				*gprs = man_data_get_setting_gprs();
   \   0000000C   0x.... 0x....      BL       man_data_get_setting_gprs
   \   00000010   0x0004             MOVS     R4,R0
    456          	man_data_fixed_t				*fixed = man_data_get_fixed();
   \   00000012   0x.... 0x....      BL       man_data_get_fixed
   \   00000016   0x0005             MOVS     R5,R0
    457          	man_data_num_sensor_t			*sensor = man_data_get_setting_sensor();
   \   00000018   0x.... 0x....      BL       man_data_get_setting_sensor
   \   0000001C   0x9013             STR      R0,[SP, #+76]
    458          	man_data_num_alarmtime_t		*alarmtime = man_data_get_setting_alarmtime();
   \   0000001E   0x.... 0x....      BL       man_data_get_setting_alarmtime
   \   00000022   0x9012             STR      R0,[SP, #+72]
    459          	man_data_get_other_t			*other = man_data_get_other();
   \   00000024   0x.... 0x....      BL       man_data_get_other
   \   00000028   0x0006             MOVS     R6,R0
    460          	man_data_num_other_t			*setting_other = man_data_get_setting_other();
   \   0000002A   0x.... 0x....      BL       man_data_get_setting_other
    461          
    462          	sprintf((char *)info->data, "GpsSlptm(%d,%d,%d)Server(%s)Apn(%s)UseNm(%s)Passw(****)TcpPort(%s)UdpPort(%s)VoThr(%d%%,%d%%,%d%%)Sensor(%d)Alarmtm(%d)Cksgtm(%d)Pkduar(%d)Version(%s)GVersion(%s)LVersion(%s)AlarmTftm(%d)",
    463          								// GpsSlptm(%d,%d,%d)
    464          								gpssleeptime->park_interval,					// [秒]
    465          								gpssleeptime->run_interval,						// サイクル[秒]
    466          								gpssleeptime->duration_time,					// １サイクルで送信する時間[秒]
    467          								// Server(%s)
    468          								&gprs->ip[0],									// Server ip.
    469          								// Apn(%s)
    470          								&gprs->apn[0],									// Simcard apn.
    471          								// UseNm(%s)
    472          								&gprs->username[0],								// Simcard username.
    473          								// Passw(%s)
    474          //								&gprs->password[0],								// Simcard password.
    475          								// TcpPort(%s)
    476          								&gprs->tcp_port[0],								// TCP port.
    477          								// UdpPort(%s)
    478          								&gprs->udp_port[0],								// UDP port.
    479          								// VoThr(%d%%,%d%%,%d%%)
    480          								setting_other->batt_low_error_num,				// 内部バッテリ低電圧閾値[%]
    481          								fixed->battery_zero,							// 内部バッテリゼロ閾値[%]
    482          								fixed->battery_low_war,							// 内部バッテリ低電圧警告閾値[%]
    483          								// Sensor(%d)
    484          								sensor->threshold_num,							// 加速度センサー閾値
    485          								// Alarmtm(%d)
    486          								alarmtime->time_num,							// 定刻測位時刻コード
    487          								// Cksgtm(%d)
    488          								fixed->alarm_time,								// 定刻起動時の測位時間[分]
    489          								// Pkduar(%d)
    490          								fixed->ext_off_time,							// 外部電源喪失後の測位時間[分]
    491          								// Version(%s)
    492          								&other->term_version[0],						// 端末ファームウェアバージョン
    493          								// GVersion(%s)
    494          								&other->gps_version[0],							// GPSチップファームウェアバージョン
    495          								// LVersion(%s)
    496          								&other->revision[0],
    497          								// AlmTrTime(%s)
    498          								setting_other->alarm_transfer_time
    499                                                                          );							// LTE revision
   \   0000002E   0x6881             LDR      R1,[R0, #+8]
   \   00000030   0x9110             STR      R1,[SP, #+64]
   \   00000032   0x0031             MOVS     R1,R6
   \   00000034   0x3157             ADDS     R1,R1,#+87
   \   00000036   0x910F             STR      R1,[SP, #+60]
   \   00000038   0x0031             MOVS     R1,R6
   \   0000003A   0x3151             ADDS     R1,R1,#+81
   \   0000003C   0x910E             STR      R1,[SP, #+56]
   \   0000003E   0x0031             MOVS     R1,R6
   \   00000040   0x3120             ADDS     R1,R1,#+32
   \   00000042   0x910D             STR      R1,[SP, #+52]
   \   00000044   0x68A9             LDR      R1,[R5, #+8]
   \   00000046   0x910C             STR      R1,[SP, #+48]
   \   00000048   0x68E9             LDR      R1,[R5, #+12]
   \   0000004A   0x910B             STR      R1,[SP, #+44]
   \   0000004C   0x9912             LDR      R1,[SP, #+72]
   \   0000004E   0x6809             LDR      R1,[R1, #+0]
   \   00000050   0x910A             STR      R1,[SP, #+40]
   \   00000052   0x9913             LDR      R1,[SP, #+76]
   \   00000054   0x6809             LDR      R1,[R1, #+0]
   \   00000056   0x9109             STR      R1,[SP, #+36]
   \   00000058   0x6869             LDR      R1,[R5, #+4]
   \   0000005A   0x9108             STR      R1,[SP, #+32]
   \   0000005C   0x6829             LDR      R1,[R5, #+0]
   \   0000005E   0x9107             STR      R1,[SP, #+28]
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x9006             STR      R0,[SP, #+24]
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x3067             ADDS     R0,R0,#+103
   \   00000068   0x9005             STR      R0,[SP, #+20]
   \   0000006A   0x0020             MOVS     R0,R4
   \   0000006C   0x3061             ADDS     R0,R0,#+97
   \   0000006E   0x9004             STR      R0,[SP, #+16]
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x306D             ADDS     R0,R0,#+109
   \   00000074   0x9003             STR      R0,[SP, #+12]
   \   00000076   0x9402             STR      R4,[SP, #+8]
   \   00000078   0x0020             MOVS     R0,R4
   \   0000007A   0x3020             ADDS     R0,R0,#+32
   \   0000007C   0x9001             STR      R0,[SP, #+4]
   \   0000007E   0x9811             LDR      R0,[SP, #+68]
   \   00000080   0x6880             LDR      R0,[R0, #+8]
   \   00000082   0x9000             STR      R0,[SP, #+0]
   \   00000084   0x9811             LDR      R0,[SP, #+68]
   \   00000086   0x6843             LDR      R3,[R0, #+4]
   \   00000088   0x9811             LDR      R0,[SP, #+68]
   \   0000008A   0x6802             LDR      R2,[R0, #+0]
   \   0000008C   0x....             LDR      R1,??DataTable10
   \   0000008E   0x0038             MOVS     R0,R7
   \   00000090   0x.... 0x....      BL       sprintf
    500          
    501          	size = strlen((char const *)info->data);
   \   00000094   0x0038             MOVS     R0,R7
   \   00000096   0x.... 0x....      BL       strlen
    502          	info->data_len = size;
   \   0000009A   0x21CD             MOVS     R1,#+205
   \   0000009C   0x0089             LSLS     R1,R1,#+2        ;; #+820
   \   0000009E   0x5078             STR      R0,[R7, R1]
    503          }
   \   000000A0   0xB015             ADD      SP,SP,#+84
   \   000000A2   0xBDF0             POP      {R4-R7,PC}       ;; return
    504          
    505          
    506          /********************************************************************/
    507          /*!
    508           * \name	man_msg_make_message
    509           * \brief	サーバに通知するメッセージデータを(msg_buff1, msg_buff2)に作成する処理
    510           * \param	msg_data  : 通知するメッセージ情報
    511           *          msg_buff1 : HTTP形式のメッセージ格納エリア
    512           *          msg_buff2 : HTTP形式のメッセージ格納エリア(NMEAが700バイトを超えた場合に使用する)
    513           * \return  なし
    514           * \note	
    515           */
    516          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    517          static void man_msg_make_message( man_msg_type_info_t *msg_data, man_msg_msg_data_t *msg_buff1, man_msg_msg_data_t *msg_buff2 )
    518          {
   \                     man_msg_make_message: (+1)
   \   00000000   0xB5F6             PUSH     {R1,R2,R4-R7,LR}
   \   00000002   0xB091             SUB      SP,SP,#+68
   \   00000004   0x0004             MOVS     R4,R0
    519          	int32_t		total_id;
    520          	int32_t		id_no;
    521          	int32_t		info_len;
    522          	man_data_get_other_t	*other = man_data_get_other();
   \   00000006   0x.... 0x....      BL       man_data_get_other
   \   0000000A   0x9010             STR      R0,[SP, #+64]
    523          
    524          	man_msg_info_data_t		*info1     = &man_msg_work.info1;
   \   0000000C   0x....             LDR      R0,??DataTable10_1
   \   0000000E   0x900F             STR      R0,[SP, #+60]
    525          	man_msg_info_data_t		*info2     = &man_msg_work.info2;
   \   00000010   0x....             LDR      R7,??DataTable10_2
    526          	man_msg_body_data_t		*body1     = &man_msg_work.body1;
   \   00000012   0x....             LDR      R6,??DataTable10_3
    527          	man_msg_body_data_t		*body2     = &man_msg_work.body2;
   \   00000014   0x....             LDR      R5,??DataTable10_4
    528          	clock_info_t			*utc_clock;
    529          
    530          	utc_clock = gm_time(&msg_data->clock);
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x306C             ADDS     R0,R0,#+108
   \   0000001A   0x.... 0x....      BL       gm_time
   \   0000001E   0x900E             STR      R0,[SP, #+56]
    531          
    532          	if (msg_data->msg_type == MAN_MSG_TYPE_SETTING) {
   \   00000020   0x6820             LDR      R0,[R4, #+0]
   \   00000022   0x2819             CMP      R0,#+25
   \   00000024   0xD107             BNE      ??man_msg_make_message_0
    533          		// サーバに通知するINFOデータ(設定値用)を作成
    534          		man_msg_make_info_setting(info1);
   \   00000026   0x980F             LDR      R0,[SP, #+60]
   \   00000028   0x.... 0x....      BL       man_msg_make_info_setting
    535          		info2->data_len = 0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x21CD             MOVS     R1,#+205
   \   00000030   0x0089             LSLS     R1,R1,#+2        ;; #+820
   \   00000032   0x5078             STR      R0,[R7, R1]
   \   00000034   0xE004             B        ??man_msg_make_message_1
    536          	}
    537          	else {
    538          		// サーバに通知するINFOデータ(センサ用)を作成
    539          		man_msg_make_info_sensor(msg_data, info1, info2);
   \                     ??man_msg_make_message_0: (+1)
   \   00000036   0x003A             MOVS     R2,R7
   \   00000038   0x990F             LDR      R1,[SP, #+60]
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       man_msg_make_info_sensor
    540          	}
    541          
    542          
    543          	if ( info2->data_len == 0 ) {
   \                     ??man_msg_make_message_1: (+1)
   \   00000040   0x20CD             MOVS     R0,#+205
   \   00000042   0x0080             LSLS     R0,R0,#+2        ;; #+820
   \   00000044   0x5838             LDR      R0,[R7, R0]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD102             BNE      ??man_msg_make_message_2
    544          		total_id = 1;
   \   0000004A   0x2201             MOVS     R2,#+1
    545          		id_no = 0;
   \   0000004C   0x2300             MOVS     R3,#+0
   \   0000004E   0xE001             B        ??man_msg_make_message_3
    546          	}
    547          	else {
    548          		total_id = 2;
   \                     ??man_msg_make_message_2: (+1)
   \   00000050   0x2202             MOVS     R2,#+2
    549          		id_no = 0;
   \   00000052   0x2300             MOVS     R3,#+0
    550          	}
    551          
    552          	sprintf((char *)body1->data, "LTE1;%d;%d;%s;%s;%d;%d;%d%%;%d%%;%d;%02d%02d%02d%02d%02d%02d;%d;",
    553          									total_id,								// トータルパケット数(total id)
    554          									id_no,									// パケット番号(id no)
    555          									other->imei,							// 端末識別番号(IMEI)
    556          									msg_data->cid,							// コマンドID(cid)
    557          									msg_data->msg_type,						// メッセージタイプ(tr)
    558          									msg_data->voltage,						// 現在のバッテリー電圧(vo)[mv]
    559          									msg_data->charge,						// バッテリー残量(ca)[%]
    560          									other->battery_alarm,					// 低電圧警告閾値(vothr)[%]
    561          									msg_data->type_num,						// 温度(Device temperature)[℃]
    562          									utc_clock->year,						// UTC Time(YY)
    563          									utc_clock->month,						// UTC Time(MM)
    564          									utc_clock->day,							// UTC Time(DD)
    565          									utc_clock->hour,						// UTC Time(HH)
    566          									utc_clock->minute,						// UTC Time(MM)
    567          									utc_clock->seconds,						// UTC Time(SS)
    568          									info1->data_len);						// ”info” サイズ長(infolen)
   \                     ??man_msg_make_message_3: (+1)
   \   00000054   0x980F             LDR      R0,[SP, #+60]
   \   00000056   0x21CD             MOVS     R1,#+205
   \   00000058   0x0089             LSLS     R1,R1,#+2        ;; #+820
   \   0000005A   0x5840             LDR      R0,[R0, R1]
   \   0000005C   0x900D             STR      R0,[SP, #+52]
   \   0000005E   0x980E             LDR      R0,[SP, #+56]
   \   00000060   0x2105             MOVS     R1,#+5
   \   00000062   0x5640             LDRSB    R0,[R0, R1]
   \   00000064   0x900C             STR      R0,[SP, #+48]
   \   00000066   0x980E             LDR      R0,[SP, #+56]
   \   00000068   0x2104             MOVS     R1,#+4
   \   0000006A   0x5640             LDRSB    R0,[R0, R1]
   \   0000006C   0x900B             STR      R0,[SP, #+44]
   \   0000006E   0x980E             LDR      R0,[SP, #+56]
   \   00000070   0x2103             MOVS     R1,#+3
   \   00000072   0x5640             LDRSB    R0,[R0, R1]
   \   00000074   0x900A             STR      R0,[SP, #+40]
   \   00000076   0x980E             LDR      R0,[SP, #+56]
   \   00000078   0x2102             MOVS     R1,#+2
   \   0000007A   0x5640             LDRSB    R0,[R0, R1]
   \   0000007C   0x9009             STR      R0,[SP, #+36]
   \   0000007E   0x980E             LDR      R0,[SP, #+56]
   \   00000080   0x2101             MOVS     R1,#+1
   \   00000082   0x5640             LDRSB    R0,[R0, R1]
   \   00000084   0x9008             STR      R0,[SP, #+32]
   \   00000086   0x980E             LDR      R0,[SP, #+56]
   \   00000088   0x2100             MOVS     R1,#+0
   \   0000008A   0x5640             LDRSB    R0,[R0, R1]
   \   0000008C   0x9007             STR      R0,[SP, #+28]
   \   0000008E   0x6DA0             LDR      R0,[R4, #+88]
   \   00000090   0x9006             STR      R0,[SP, #+24]
   \   00000092   0x9810             LDR      R0,[SP, #+64]
   \   00000094   0x69C0             LDR      R0,[R0, #+28]
   \   00000096   0x9005             STR      R0,[SP, #+20]
   \   00000098   0x68A0             LDR      R0,[R4, #+8]
   \   0000009A   0x9004             STR      R0,[SP, #+16]
   \   0000009C   0x6860             LDR      R0,[R4, #+4]
   \   0000009E   0x9003             STR      R0,[SP, #+12]
   \   000000A0   0x6820             LDR      R0,[R4, #+0]
   \   000000A2   0x9002             STR      R0,[SP, #+8]
   \   000000A4   0x0020             MOVS     R0,R4
   \   000000A6   0x3072             ADDS     R0,R0,#+114
   \   000000A8   0x9001             STR      R0,[SP, #+4]
   \   000000AA   0x9810             LDR      R0,[SP, #+64]
   \   000000AC   0x9000             STR      R0,[SP, #+0]
   \   000000AE   0x....             LDR      R1,??DataTable10_5
   \   000000B0   0x0030             MOVS     R0,R6
   \   000000B2   0x.... 0x....      BL       sprintf
    569          	body1->data_len = strlen((char const *)body1->data);
   \   000000B6   0x0030             MOVS     R0,R6
   \   000000B8   0x.... 0x....      BL       strlen
   \   000000BC   0x21C8             MOVS     R1,#+200
   \   000000BE   0x5070             STR      R0,[R6, R1]
    570          	body2->data_len = 0;
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0x21C8             MOVS     R1,#+200
   \   000000C4   0x5068             STR      R0,[R5, R1]
    571          
    572          	if ( info2->data_len != 0 ) {
   \   000000C6   0x20CD             MOVS     R0,#+205
   \   000000C8   0x0080             LSLS     R0,R0,#+2        ;; #+820
   \   000000CA   0x5838             LDR      R0,[R7, R0]
   \   000000CC   0x2800             CMP      R0,#+0
   \   000000CE   0xD036             BEQ      ??man_msg_make_message_4
    573          		total_id = 2;
   \   000000D0   0x2202             MOVS     R2,#+2
    574          		id_no = 1;
   \   000000D2   0x2301             MOVS     R3,#+1
    575          
    576          		sprintf((char *)body2->data, "LTE1;%d;%d;%s;%s;%d;%d;%d%%;%d%%;%d;%02d%02d%02d%02d%02d%02d;%d;",
    577          									total_id,								// トータルパケット数(total id)
    578          									id_no,									// パケット番号(id no)
    579          									other->imei,							// 端末識別番号(IMEI)
    580          									msg_data->cid,							// コマンドID(cid)
    581          									msg_data->msg_type,						// メッセージタイプ(tr)
    582          									msg_data->voltage,						// 現在のバッテリー電圧(vo)[mv]
    583          									msg_data->charge,						// バッテリー残量(ca)[%]
    584          									other->battery_alarm,					// 低電圧警告閾値(vothr)[%]
    585          									msg_data->type_num,						// 温度(Device temperature)[℃]
    586          									utc_clock->year,						// UTC Time(YY)
    587          									utc_clock->month,						// UTC Time(MM)
    588          									utc_clock->day,							// UTC Time(DD)
    589          									utc_clock->hour,						// UTC Time(HH)
    590          									utc_clock->minute,						// UTC Time(MM)
    591          									utc_clock->seconds,						// UTC Time(SS)
    592          									info2->data_len);						// ”info” サイズ長(infolen)
   \   000000D4   0x20CD             MOVS     R0,#+205
   \   000000D6   0x0080             LSLS     R0,R0,#+2        ;; #+820
   \   000000D8   0x5838             LDR      R0,[R7, R0]
   \   000000DA   0x900D             STR      R0,[SP, #+52]
   \   000000DC   0x980E             LDR      R0,[SP, #+56]
   \   000000DE   0x2105             MOVS     R1,#+5
   \   000000E0   0x5640             LDRSB    R0,[R0, R1]
   \   000000E2   0x900C             STR      R0,[SP, #+48]
   \   000000E4   0x980E             LDR      R0,[SP, #+56]
   \   000000E6   0x2104             MOVS     R1,#+4
   \   000000E8   0x5640             LDRSB    R0,[R0, R1]
   \   000000EA   0x900B             STR      R0,[SP, #+44]
   \   000000EC   0x980E             LDR      R0,[SP, #+56]
   \   000000EE   0x2103             MOVS     R1,#+3
   \   000000F0   0x5640             LDRSB    R0,[R0, R1]
   \   000000F2   0x900A             STR      R0,[SP, #+40]
   \   000000F4   0x980E             LDR      R0,[SP, #+56]
   \   000000F6   0x2102             MOVS     R1,#+2
   \   000000F8   0x5640             LDRSB    R0,[R0, R1]
   \   000000FA   0x9009             STR      R0,[SP, #+36]
   \   000000FC   0x980E             LDR      R0,[SP, #+56]
   \   000000FE   0x2101             MOVS     R1,#+1
   \   00000100   0x5640             LDRSB    R0,[R0, R1]
   \   00000102   0x9008             STR      R0,[SP, #+32]
   \   00000104   0x980E             LDR      R0,[SP, #+56]
   \   00000106   0x2100             MOVS     R1,#+0
   \   00000108   0x5640             LDRSB    R0,[R0, R1]
   \   0000010A   0x9007             STR      R0,[SP, #+28]
   \   0000010C   0x6DA0             LDR      R0,[R4, #+88]
   \   0000010E   0x9006             STR      R0,[SP, #+24]
   \   00000110   0x9810             LDR      R0,[SP, #+64]
   \   00000112   0x69C0             LDR      R0,[R0, #+28]
   \   00000114   0x9005             STR      R0,[SP, #+20]
   \   00000116   0x68A0             LDR      R0,[R4, #+8]
   \   00000118   0x9004             STR      R0,[SP, #+16]
   \   0000011A   0x6860             LDR      R0,[R4, #+4]
   \   0000011C   0x9003             STR      R0,[SP, #+12]
   \   0000011E   0x6820             LDR      R0,[R4, #+0]
   \   00000120   0x9002             STR      R0,[SP, #+8]
   \   00000122   0x0020             MOVS     R0,R4
   \   00000124   0x3072             ADDS     R0,R0,#+114
   \   00000126   0x9001             STR      R0,[SP, #+4]
   \   00000128   0x9810             LDR      R0,[SP, #+64]
   \   0000012A   0x9000             STR      R0,[SP, #+0]
   \   0000012C   0x....             LDR      R1,??DataTable10_5
   \   0000012E   0x0028             MOVS     R0,R5
   \   00000130   0x.... 0x....      BL       sprintf
    593          		body2->data_len = strlen((char const *)body2->data);
   \   00000134   0x0028             MOVS     R0,R5
   \   00000136   0x.... 0x....      BL       strlen
   \   0000013A   0x21C8             MOVS     R1,#+200
   \   0000013C   0x5068             STR      R0,[R5, R1]
    594          	}
    595          
    596          	msg_buff1->data_len = 0;
   \                     ??man_msg_make_message_4: (+1)
   \   0000013E   0x2000             MOVS     R0,#+0
   \   00000140   0x9911             LDR      R1,[SP, #+68]
   \   00000142   0x22FF             MOVS     R2,#+255
   \   00000144   0x0092             LSLS     R2,R2,#+2        ;; #+1020
   \   00000146   0x5088             STR      R0,[R1, R2]
    597          	msg_buff2->data_len = 0;
   \   00000148   0x2000             MOVS     R0,#+0
   \   0000014A   0x9912             LDR      R1,[SP, #+72]
   \   0000014C   0x22FF             MOVS     R2,#+255
   \   0000014E   0x0092             LSLS     R2,R2,#+2        ;; #+1020
   \   00000150   0x5088             STR      R0,[R1, R2]
    598          	
    599          	if ( (body1->data_len <= MAN_DATA_BODY_SIZE) && (info1->data_len <= MAN_DATA_INFO_SIZE) ) {
   \   00000152   0x20C8             MOVS     R0,#+200
   \   00000154   0x5830             LDR      R0,[R6, R0]
   \   00000156   0x28C9             CMP      R0,#+201
   \   00000158   0xDA28             BGE      ??man_msg_make_message_5
   \   0000015A   0x980F             LDR      R0,[SP, #+60]
   \   0000015C   0x21CD             MOVS     R1,#+205
   \   0000015E   0x0089             LSLS     R1,R1,#+2        ;; #+820
   \   00000160   0x5840             LDR      R0,[R0, R1]
   \   00000162   0x....             LDR      R1,??DataTable10_6  ;; 0x335
   \   00000164   0x4288             CMP      R0,R1
   \   00000166   0xDA21             BGE      ??man_msg_make_message_5
    600          		if (body1->data_len != 0) {
   \   00000168   0x20C8             MOVS     R0,#+200
   \   0000016A   0x5830             LDR      R0,[R6, R0]
   \   0000016C   0x2800             CMP      R0,#+0
   \   0000016E   0xD01D             BEQ      ??man_msg_make_message_5
    601          			memcpy(&msg_buff1->data[0], &body1->data[0], body1->data_len);
   \   00000170   0x20C8             MOVS     R0,#+200
   \   00000172   0x5832             LDR      R2,[R6, R0]
   \   00000174   0x0031             MOVS     R1,R6
   \   00000176   0x9C11             LDR      R4,[SP, #+68]
   \   00000178   0x0020             MOVS     R0,R4
   \   0000017A   0x.... 0x....      BL       __aeabi_memcpy
    602          			memcpy(&msg_buff1->data[body1->data_len], &info1->data[0], info1->data_len);
   \   0000017E   0x980F             LDR      R0,[SP, #+60]
   \   00000180   0x21CD             MOVS     R1,#+205
   \   00000182   0x0089             LSLS     R1,R1,#+2        ;; #+820
   \   00000184   0x5842             LDR      R2,[R0, R1]
   \   00000186   0x990F             LDR      R1,[SP, #+60]
   \   00000188   0x9811             LDR      R0,[SP, #+68]
   \   0000018A   0x23C8             MOVS     R3,#+200
   \   0000018C   0x58F3             LDR      R3,[R6, R3]
   \   0000018E   0x18C4             ADDS     R4,R0,R3
   \   00000190   0x0020             MOVS     R0,R4
   \   00000192   0x.... 0x....      BL       __aeabi_memcpy
    603          			msg_buff1->data_len = body1->data_len + info1->data_len;
   \   00000196   0x20C8             MOVS     R0,#+200
   \   00000198   0x5830             LDR      R0,[R6, R0]
   \   0000019A   0x990F             LDR      R1,[SP, #+60]
   \   0000019C   0x22CD             MOVS     R2,#+205
   \   0000019E   0x0092             LSLS     R2,R2,#+2        ;; #+820
   \   000001A0   0x5889             LDR      R1,[R1, R2]
   \   000001A2   0x1840             ADDS     R0,R0,R1
   \   000001A4   0x9911             LDR      R1,[SP, #+68]
   \   000001A6   0x22FF             MOVS     R2,#+255
   \   000001A8   0x0092             LSLS     R2,R2,#+2        ;; #+1020
   \   000001AA   0x5088             STR      R0,[R1, R2]
    604          		}
    605          	}
    606          
    607          	if ( (body2->data_len <= MAN_DATA_BODY_SIZE) && (info2->data_len <= MAN_DATA_INFO_SIZE) ) {
   \                     ??man_msg_make_message_5: (+1)
   \   000001AC   0x20C8             MOVS     R0,#+200
   \   000001AE   0x5828             LDR      R0,[R5, R0]
   \   000001B0   0x28C9             CMP      R0,#+201
   \   000001B2   0xDA25             BGE      ??man_msg_make_message_6
   \   000001B4   0x20CD             MOVS     R0,#+205
   \   000001B6   0x0080             LSLS     R0,R0,#+2        ;; #+820
   \   000001B8   0x5838             LDR      R0,[R7, R0]
   \   000001BA   0x....             LDR      R1,??DataTable10_6  ;; 0x335
   \   000001BC   0x4288             CMP      R0,R1
   \   000001BE   0xDA1F             BGE      ??man_msg_make_message_6
    608          		if (body2->data_len != 0) {
   \   000001C0   0x20C8             MOVS     R0,#+200
   \   000001C2   0x5828             LDR      R0,[R5, R0]
   \   000001C4   0x2800             CMP      R0,#+0
   \   000001C6   0xD01B             BEQ      ??man_msg_make_message_6
    609          			memcpy(&msg_buff2->data[0], &body2->data[0], body2->data_len);
   \   000001C8   0x20C8             MOVS     R0,#+200
   \   000001CA   0x582A             LDR      R2,[R5, R0]
   \   000001CC   0x0029             MOVS     R1,R5
   \   000001CE   0x9C12             LDR      R4,[SP, #+72]
   \   000001D0   0x0020             MOVS     R0,R4
   \   000001D2   0x.... 0x....      BL       __aeabi_memcpy
    610          			memcpy(&msg_buff2->data[body2->data_len], &info2->data[0], info2->data_len);
   \   000001D6   0x20CD             MOVS     R0,#+205
   \   000001D8   0x0080             LSLS     R0,R0,#+2        ;; #+820
   \   000001DA   0x583A             LDR      R2,[R7, R0]
   \   000001DC   0x0039             MOVS     R1,R7
   \   000001DE   0x9812             LDR      R0,[SP, #+72]
   \   000001E0   0x23C8             MOVS     R3,#+200
   \   000001E2   0x58EB             LDR      R3,[R5, R3]
   \   000001E4   0x18C4             ADDS     R4,R0,R3
   \   000001E6   0x0020             MOVS     R0,R4
   \   000001E8   0x.... 0x....      BL       __aeabi_memcpy
    611          			msg_buff2->data_len = body2->data_len + info2->data_len;
   \   000001EC   0x20C8             MOVS     R0,#+200
   \   000001EE   0x5828             LDR      R0,[R5, R0]
   \   000001F0   0x21CD             MOVS     R1,#+205
   \   000001F2   0x0089             LSLS     R1,R1,#+2        ;; #+820
   \   000001F4   0x5879             LDR      R1,[R7, R1]
   \   000001F6   0x1840             ADDS     R0,R0,R1
   \   000001F8   0x9912             LDR      R1,[SP, #+72]
   \   000001FA   0x22FF             MOVS     R2,#+255
   \   000001FC   0x0092             LSLS     R2,R2,#+2        ;; #+1020
   \   000001FE   0x5088             STR      R0,[R1, R2]
    612          		}
    613          	}
    614          }
   \                     ??man_msg_make_message_6: (+1)
   \   00000200   0xB013             ADD      SP,SP,#+76
   \   00000202   0xBDF0             POP      {R4-R7,PC}       ;; return
    615          
    616          
    617          /********************************************************************/
    618          /*!
    619           * \name	man_msg_send_message
    620           * \brief	サーバにメッセージを送信する処理
    621           * \param	id        : ユニーク番号
    622           *          data      : HTTP形式のメッセージ
    623           *          length    : データ長
    624           * \return   0: 成功
    625           *          -1:失敗
    626           * \note	
    627           */
    628          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    629          static int32_t man_msg_send_message( int32_t id, uint8_t *data, int32_t length )
    630          {
   \                     man_msg_send_message: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0003             MOVS     R3,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0011             MOVS     R1,R2
    631          	int32_t		ret=-1;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x43C0             MVNS     R0,R0            ;; #-1
    632          
    633          	if (length != 0) {
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD005             BEQ      ??man_msg_send_message_0
    634          		// HTTP形式でメッセージを送信する。
    635          		// timeout時間をMAN_MSG_RESP_TIMOUTとする
    636          		ret = man_http_client_send_recv(data, length, MAN_MSG_RESP_TIMOUT, id, man_msg_req_callback);
   \   00000012   0x....             LDR      R0,??DataTable10_7
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x....             LDR      R2,??DataTable10_8  ;; 0x4e20
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       man_http_client_send_recv
    637          	}
    638          
    639          	return ret;
   \                     ??man_msg_send_message_0: (+1)
   \   0000001E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    640          }
    641          
    642          /********************************************************************/
    643          /*!
    644           * \name	man_msg_return_callback
    645           * \brief	callback応答を返す処理
    646           * \param	status : 通知するステータス
    647           * \return   0: 成功
    648           *          -1:失敗
    649           * \note	
    650           */
    651          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    652          static void man_msg_return_callback( int32_t status )
    653          {
   \                     man_msg_return_callback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    654          
    655          	// callback関数で終了通知
    656          	if (man_msg_work.request.callback != NULL) {
   \   00000002   0x....             LDR      R1,??DataTable10_9
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD008             BEQ      ??man_msg_return_callback_0
    657          		man_msg_work.request.callback(man_msg_work.request.id, status);
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0x....             LDR      R0,??DataTable10_10
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x....             LDR      R2,??DataTable10_9
   \   00000012   0x6812             LDR      R2,[R2, #+0]
   \   00000014   0x4790             BLX      R2
    658          		man_msg_work.request.callback = NULL;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR      R1,??DataTable10_9
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    659          	}
    660          	man_msg_work.request.req = MAN_MSG_REQ_READY;
   \                     ??man_msg_return_callback_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x....             LDR      R1,??DataTable10_11
   \   00000020   0x6008             STR      R0,[R1, #+0]
    661          }
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
    662          
    663          /********************************************************************/
    664          /*	extern関数                                                      */
    665          /********************************************************************/
    666          
    667          /********************************************************************/
    668          /*!
    669           * \name	man_msg_init
    670           * \brief	メッセージ管理の初期化処理
    671           * \param	なし
    672           * \return  なし
    673           * \note	起動時に、呼ばれること
    674           */
    675          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    676          void man_msg_init(void)
    677          {
   \                     man_msg_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    678          	// 内部変数を初期化する
    679          	memset(&man_msg_work, 0, sizeof(man_msg_work_t));
   \   00000002   0x....             LDR      R1,??DataTable10_12  ;; 0x6524
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x....             LDR      R4,??DataTable10_13
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       __aeabi_memset
    680          
    681          	// 状態変化の通知を依頼する
    682          	man_http_client_state(MAN_MSG_NOTI_STATE, man_msg_req_callback);
   \   0000000E   0x....             LDR      R1,??DataTable10_7
   \   00000010   0x....             LDR      R0,??DataTable10_14  ;; 0x3e9
   \   00000012   0x.... 0x....      BL       man_http_client_state
    683          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    684          
    685          
    686          
    687          /********************************************************************/
    688          /*!
    689           * \name	man_msg_main
    690           * \brief	メッセージ管理のmain処理
    691           * \param	なし
    692           * \return  なし
    693           * \note	毎回、呼ばれること
    694           */
    695          /********************************************************************/

   \                                 In section .text, align 4, keep-with-next
    696          void man_msg_main(void)
    697          {
   \                     man_msg_main: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    698          	int32_t					ret;
    699          	int32_t					sts = man_http_get_status();
   \   00000002   0x.... 0x....      BL       man_http_get_status
   \   00000006   0x0004             MOVS     R4,R0
    700          	man_data_get_sensor_t	*sensor = man_data_get_sensor();
   \   00000008   0x.... 0x....      BL       man_data_get_sensor
   \   0000000C   0x0005             MOVS     R5,R0
    701          	uint32_t				delay_timer;
    702          
    703          
    704          	// ***************************
    705          	// 要求処理
    706          	// ***************************
    707          	switch (man_msg_work.request.req) {
   \   0000000E   0x48B3             LDR      R0,??man_msg_main_0
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD003             BEQ      ??man_msg_main_1
   \   00000016   0x2802             CMP      R0,#+2
   \   00000018   0xD013             BEQ      ??man_msg_main_2
   \   0000001A   0xD301             BCC      ??man_msg_main_3
   \   0000001C   0xE045             B        ??man_msg_main_4
    708          	case MAN_MSG_REQ_READY:
    709          		break;
   \                     ??man_msg_main_1: (+1)
   \   0000001E   0xE044             B        ??man_msg_main_4
    710          
    711          	// メッセージ機能を開始する
    712          	case MAN_MSG_REQ_START:
    713          		// リセット発生時は内部変数を初期化する
    714          		if (man_msg_work.req_state == MAN_MSG_STATE_RESET) {
   \                     ??man_msg_main_3: (+1)
   \   00000020   0x48AF             LDR      R0,??man_msg_main_0+0x4
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xD105             BNE      ??man_msg_main_5
    715          			man_msg_work.req_state = MAN_MSG_STATE_NON;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x49AD             LDR      R1,??man_msg_main_0+0x4
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    716          			// シーケンスを初期化する
    717          			man_msg_set_mode_seq(MAN_MSG_SEQ_READY);
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       man_msg_set_mode_seq
    718          		}
    719          
    720          		man_msg_work.mode = MAN_MSG_MODE_START;
   \                     ??man_msg_main_5: (+1)
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x49AB             LDR      R1,??man_msg_main_0+0x8
   \   00000038   0x6008             STR      R0,[R1, #+0]
    721          		man_msg_return_callback(MAN_MSG_STATUS_OK);
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       man_msg_return_callback
    722          		break;
   \   00000040   0xE033             B        ??man_msg_main_4
    723          
    724          
    725          	// メッセージ機能を停止する
    726          	case MAN_MSG_REQ_STOP:
    727          		// すでに停止状態
    728          		if (man_msg_work.mode == MAN_MSG_MODE_STOP) {
   \                     ??man_msg_main_2: (+1)
   \   00000042   0x48A8             LDR      R0,??man_msg_main_0+0x8
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD103             BNE      ??man_msg_main_6
    729          			man_msg_return_callback(MAN_MSG_STATUS_OK);
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x.... 0x....      BL       man_msg_return_callback
   \   00000050   0xE02B             B        ??man_msg_main_7
    730          		}
    731          
    732          		// 動作中の場合はCLOSE終了を待つ
    733          		else {
    734          			if ( (man_msg_work.seq == MAN_MSG_SEQ_READY) && (man_msg_check_msg() == 0) ) {
   \                     ??man_msg_main_6: (+1)
   \   00000052   0x48A5             LDR      R0,??man_msg_main_0+0xC
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD10A             BNE      ??man_msg_main_8
   \   0000005A   0x.... 0x....      BL       man_msg_check_msg
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD106             BNE      ??man_msg_main_8
    735          				man_msg_return_callback(MAN_MSG_STATUS_OK);
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x.... 0x....      BL       man_msg_return_callback
    736          				man_msg_work.mode = MAN_MSG_MODE_STOP;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x499E             LDR      R1,??man_msg_main_0+0x8
   \   0000006C   0x6008             STR      R0,[R1, #+0]
   \   0000006E   0xE01C             B        ??man_msg_main_7
    737          			}
    738          
    739          			// 異常発生中は送信を中止する
    740          			else if ( (man_msg_work.seq == MAN_MSG_SEQ_READY) && (man_msg_work.err_sts == MAN_MSG_ERR_STS_ON) ) {
   \                     ??man_msg_main_8: (+1)
   \   00000070   0x489D             LDR      R0,??man_msg_main_0+0xC
   \   00000072   0x7800             LDRB     R0,[R0, #+0]
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD10D             BNE      ??man_msg_main_9
   \   00000078   0x489A             LDR      R0,??man_msg_main_0+0x8
   \   0000007A   0x7A40             LDRB     R0,[R0, #+9]
   \   0000007C   0x2801             CMP      R0,#+1
   \   0000007E   0xD109             BNE      ??man_msg_main_9
    741          				man_msg_return_callback(MAN_MSG_STATUS_OK);
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x.... 0x....      BL       man_msg_return_callback
    742          				man_msg_work.mode = MAN_MSG_MODE_STOP;
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x4996             LDR      R1,??man_msg_main_0+0x8
   \   0000008A   0x6008             STR      R0,[R1, #+0]
    743          				// エラー発生を解除する
    744          				man_msg_work.err_sts = MAN_MSG_ERR_STS_OFF;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x4995             LDR      R1,??man_msg_main_0+0x8
   \   00000090   0x7248             STRB     R0,[R1, #+9]
   \   00000092   0xE00A             B        ??man_msg_main_7
    745          			}
    746          
    747          			else if (man_msg_work.seq == MAN_MSG_SEQ_CLOSE_WAIT) {
   \                     ??man_msg_main_9: (+1)
   \   00000094   0x4894             LDR      R0,??man_msg_main_0+0xC
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0x280A             CMP      R0,#+10
   \   0000009A   0xD106             BNE      ??man_msg_main_7
    748          				// タイマを中止する
    749          				man_timer_cancel_wait(TIMER_MAN_ID_APL_MSG + MAN_MSG_SEQ_CLOSE_WAIT, 10000);
   \   0000009C   0x4993             LDR      R1,??man_msg_main_0+0x10  ;; 0x2710
   \   0000009E   0x4894             LDR      R0,??man_msg_main_0+0x14  ;; 0x4020000a
   \   000000A0   0x.... 0x....      BL       man_timer_cancel_wait
    750          				// CLOSE開始
    751          				man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT_OK);
   \   000000A4   0x200B             MOVS     R0,#+11
   \   000000A6   0x.... 0x....      BL       man_msg_set_mode_seq
    752          			}
    753          		}
    754          		break;
    755          	}
    756          
    757          
    758          	// ***************************
    759          	// 電波状況(圏内/圏外)監視処理
    760          	// ***************************
    761          	if (man_msg_work.rssi_sts != sensor->rssi_sts) {
   \                     ??man_msg_main_7: (+1)
   \                     ??man_msg_main_4: (+1)
   \   000000AA   0x4892             LDR      R0,??man_msg_main_0+0x18
   \   000000AC   0x7800             LDRB     R0,[R0, #+0]
   \   000000AE   0x4992             LDR      R1,??man_msg_main_0+0x1C  ;; 0xbd8
   \   000000B0   0x5C69             LDRB     R1,[R5, R1]
   \   000000B2   0x4288             CMP      R0,R1
   \   000000B4   0xD00B             BEQ      ??man_msg_main_10
    762          		man_msg_work.rssi_sts = sensor->rssi_sts;
   \   000000B6   0x4890             LDR      R0,??man_msg_main_0+0x1C  ;; 0xbd8
   \   000000B8   0x5C28             LDRB     R0,[R5, R0]
   \   000000BA   0x498E             LDR      R1,??man_msg_main_0+0x18
   \   000000BC   0x7008             STRB     R0,[R1, #+0]
    763          
    764          		switch (man_msg_work.rssi_sts) {
   \   000000BE   0x488D             LDR      R0,??man_msg_main_0+0x18
   \   000000C0   0x7800             LDRB     R0,[R0, #+0]
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xD002             BEQ      ??man_msg_main_11
   \   000000C6   0x2801             CMP      R0,#+1
   \   000000C8   0xD001             BEQ      ??man_msg_main_12
   \   000000CA   0xE000             B        ??man_msg_main_10
    765          		case MAN_DATA_RSSI_STS_NG:			// 圏外
    766          			break;
   \                     ??man_msg_main_11: (+1)
   \   000000CC   0xE7FF             B        ??man_msg_main_10
    767          		case MAN_DATA_RSSI_STS_OK:			// 圏内
    768          			break;
    769          		}
    770          	}
    771          
    772          
    773          
    774          	// ***************************
    775          	// 応答処理
    776          	// ***************************
    777          	if (man_msg_work.resp_cmd.flag == 1) {
   \                     ??man_msg_main_12: (+1)
   \                     ??man_msg_main_10: (+1)
   \   000000CE   0x488B             LDR      R0,??man_msg_main_0+0x20
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x2801             CMP      R0,#+1
   \   000000D4   0xD000             BEQ      .+4
   \   000000D6   0xE118             B        ??man_msg_main_13
    778          		man_msg_work.resp_cmd.flag = 0;
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x4988             LDR      R1,??man_msg_main_0+0x20
   \   000000DC   0x6008             STR      R0,[R1, #+0]
    779          		
    780          		// 状態変化通知処理
    781          		if (man_msg_work.resp_cmd.id == MAN_MSG_NOTI_STATE) {
   \   000000DE   0x4888             LDR      R0,??man_msg_main_0+0x24
   \   000000E0   0x6800             LDR      R0,[R0, #+0]
   \   000000E2   0x49B3             LDR      R1,??man_msg_main_14  ;; 0x3e9
   \   000000E4   0x4288             CMP      R0,R1
   \   000000E6   0xD130             BNE      ??man_msg_main_15
    782          			// デバックログに登録 
    783          			man_dbglog_setting(MAN_ERROR_DBG_MAN_MSG, MAN_ERROR_DBG_TYPE_NOTI, man_msg_work.resp_cmd.status);
   \   000000E8   0x48B2             LDR      R0,??man_msg_main_14+0x4
   \   000000EA   0x6802             LDR      R2,[R0, #+0]
   \   000000EC   0x2102             MOVS     R1,#+2
   \   000000EE   0x2006             MOVS     R0,#+6
   \   000000F0   0x.... 0x....      BL       man_dbglog_setting
    784          
    785          			switch (man_msg_work.resp_cmd.status) {
   \   000000F4   0x48AF             LDR      R0,??man_msg_main_14+0x4
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
   \   000000F8   0x2801             CMP      R0,#+1
   \   000000FA   0xD002             BEQ      ??man_msg_main_16
   \   000000FC   0x2802             CMP      R0,#+2
   \   000000FE   0xD013             BEQ      ??man_msg_main_17
   \   00000100   0xE022             B        ??man_msg_main_18
    786          			// +CIPCLOSE: 2,0受信
    787          			case MAN_HTTP_STATE_CLOSE:
    788          				if ( (man_msg_work.seq == MAN_MSG_SEQ_CLOSE_OK) || (man_msg_work.seq == MAN_MSG_SEQ_CLOSE_REQ) ) {
   \                     ??man_msg_main_16: (+1)
   \   00000102   0x4879             LDR      R0,??man_msg_main_0+0xC
   \   00000104   0x7800             LDRB     R0,[R0, #+0]
   \   00000106   0x280E             CMP      R0,#+14
   \   00000108   0xD003             BEQ      ??man_msg_main_19
   \   0000010A   0x4877             LDR      R0,??man_msg_main_0+0xC
   \   0000010C   0x7800             LDRB     R0,[R0, #+0]
   \   0000010E   0x280D             CMP      R0,#+13
   \   00000110   0xD103             BNE      ??man_msg_main_20
    789          					man_timer_cancel_wait(TIMER_MAN_ID_APL_MSG + MAN_MSG_RESP_TIMEOUT, MAN_MSG_RESP_CLOSE_TO);
   \                     ??man_msg_main_19: (+1)
   \   00000112   0x49A9             LDR      R1,??man_msg_main_14+0x8  ;; 0x7530
   \   00000114   0x48A9             LDR      R0,??man_msg_main_14+0xC  ;; 0x402003e8
   \   00000116   0x.... 0x....      BL       man_timer_cancel_wait
    790          				}
    791          				// エラー発生を解除する
    792          				man_msg_work.err_sts = MAN_MSG_ERR_STS_OFF;
   \                     ??man_msg_main_20: (+1)
   \   0000011A   0x2000             MOVS     R0,#+0
   \   0000011C   0x4971             LDR      R1,??man_msg_main_0+0x8
   \   0000011E   0x7248             STRB     R0,[R1, #+9]
    793          				man_msg_set_mode_seq(MAN_MSG_SEQ_READY);
   \   00000120   0x2000             MOVS     R0,#+0
   \   00000122   0x.... 0x....      BL       man_msg_set_mode_seq
    794          				break;
   \   00000126   0xE0F0             B        ??man_msg_main_13
    795          
    796          			case MAN_HTTP_STATE_OPEN:
    797          				// タイミングが異なる場合はログに残す
    798          				if (man_msg_work.seq != MAN_MSG_SEQ_OPEN) {
   \                     ??man_msg_main_17: (+1)
   \   00000128   0x486F             LDR      R0,??man_msg_main_0+0xC
   \   0000012A   0x7800             LDRB     R0,[R0, #+0]
   \   0000012C   0x2802             CMP      R0,#+2
   \   0000012E   0xD007             BEQ      ??man_msg_main_21
    799          					man_error_setting(MAN_ERROR_MAN_MSG, man_msg_work.seq, man_msg_work.resp_cmd.id);
   \   00000130   0x4BA3             LDR      R3,??man_msg_main_14+0x10  ;; 0x31f
   \   00000132   0x4873             LDR      R0,??man_msg_main_0+0x24
   \   00000134   0x6802             LDR      R2,[R0, #+0]
   \   00000136   0x486C             LDR      R0,??man_msg_main_0+0xC
   \   00000138   0x7801             LDRB     R1,[R0, #+0]
   \   0000013A   0x201A             MOVS     R0,#+26
   \   0000013C   0x.... 0x....      BL       man_error_set
    800          				}
    801          				man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN_OK_CHK);
   \                     ??man_msg_main_21: (+1)
   \   00000140   0x2003             MOVS     R0,#+3
   \   00000142   0x.... 0x....      BL       man_msg_set_mode_seq
    802          				break;
   \   00000146   0xE0E0             B        ??man_msg_main_13
    803          
    804          			default:
    805          				break;
   \                     ??man_msg_main_18: (+1)
   \   00000148   0xE0DF             B        ??man_msg_main_13
    806          			}
    807          		}
    808          		else {
    809          			if (man_msg_work.resp_cmd.status == MAN_HTTP_STATUS_OK) {
   \                     ??man_msg_main_15: (+1)
   \   0000014A   0x489A             LDR      R0,??man_msg_main_14+0x4
   \   0000014C   0x6800             LDR      R0,[R0, #+0]
   \   0000014E   0x2800             CMP      R0,#+0
   \   00000150   0xD16C             BNE      ??man_msg_main_22
    810          				switch (man_msg_work.resp_cmd.id) {
   \   00000152   0x486B             LDR      R0,??man_msg_main_0+0x24
   \   00000154   0x6800             LDR      R0,[R0, #+0]
   \   00000156   0x2802             CMP      R0,#+2
   \   00000158   0xD00C             BEQ      ??man_msg_main_23
   \   0000015A   0x2805             CMP      R0,#+5
   \   0000015C   0xD017             BEQ      ??man_msg_main_24
   \   0000015E   0x2807             CMP      R0,#+7
   \   00000160   0xD022             BEQ      ??man_msg_main_25
   \   00000162   0x280A             CMP      R0,#+10
   \   00000164   0xD03A             BEQ      ??man_msg_main_26
   \   00000166   0x280D             CMP      R0,#+13
   \   00000168   0xD02B             BEQ      ??man_msg_main_27
   \   0000016A   0x21FA             MOVS     R1,#+250
   \   0000016C   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   0000016E   0x4288             CMP      R0,R1
   \   00000170   0xD03E             BEQ      ??man_msg_main_28
   \   00000172   0xE05A             B        ??man_msg_main_29
    811          				case MAN_MSG_SEQ_OPEN:
    812          					man_msg_work.req_state_cnt = 0;
   \                     ??man_msg_main_23: (+1)
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x4993             LDR      R1,??man_msg_main_14+0x14
   \   00000178   0x6008             STR      R0,[R1, #+0]
    813          					if (man_msg_work.seq == man_msg_work.resp_cmd.id) {
   \   0000017A   0x485B             LDR      R0,??man_msg_main_0+0xC
   \   0000017C   0x7800             LDRB     R0,[R0, #+0]
   \   0000017E   0x4960             LDR      R1,??man_msg_main_0+0x24
   \   00000180   0x6809             LDR      R1,[R1, #+0]
   \   00000182   0x4288             CMP      R0,R1
   \   00000184   0xD102             BNE      ??man_msg_main_30
    814          						man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN_OK);
   \   00000186   0x2004             MOVS     R0,#+4
   \   00000188   0x.... 0x....      BL       man_msg_set_mode_seq
    815          					}
    816          					break;
   \                     ??man_msg_main_30: (+1)
   \   0000018C   0xE0BD             B        ??man_msg_main_13
    817          				case MAN_MSG_SEQ_SEND1_REQ:
    818          					man_msg_work.req_state_cnt = 0;
   \                     ??man_msg_main_24: (+1)
   \   0000018E   0x2000             MOVS     R0,#+0
   \   00000190   0x498C             LDR      R1,??man_msg_main_14+0x14
   \   00000192   0x6008             STR      R0,[R1, #+0]
    819          					if (man_msg_work.seq == man_msg_work.resp_cmd.id) {
   \   00000194   0x4854             LDR      R0,??man_msg_main_0+0xC
   \   00000196   0x7800             LDRB     R0,[R0, #+0]
   \   00000198   0x4959             LDR      R1,??man_msg_main_0+0x24
   \   0000019A   0x6809             LDR      R1,[R1, #+0]
   \   0000019C   0x4288             CMP      R0,R1
   \   0000019E   0xD102             BNE      ??man_msg_main_31
    820          						man_msg_set_mode_seq(MAN_MSG_SEQ_SEND1_OK);
   \   000001A0   0x2006             MOVS     R0,#+6
   \   000001A2   0x.... 0x....      BL       man_msg_set_mode_seq
    821          					}
    822          					break;
   \                     ??man_msg_main_31: (+1)
   \   000001A6   0xE0B0             B        ??man_msg_main_13
    823          				case MAN_MSG_SEQ_SEND2_REQ:
    824          					man_msg_work.req_state_cnt = 0;
   \                     ??man_msg_main_25: (+1)
   \   000001A8   0x2000             MOVS     R0,#+0
   \   000001AA   0x4986             LDR      R1,??man_msg_main_14+0x14
   \   000001AC   0x6008             STR      R0,[R1, #+0]
    825          					if (man_msg_work.seq == man_msg_work.resp_cmd.id) {
   \   000001AE   0x484E             LDR      R0,??man_msg_main_0+0xC
   \   000001B0   0x7800             LDRB     R0,[R0, #+0]
   \   000001B2   0x4953             LDR      R1,??man_msg_main_0+0x24
   \   000001B4   0x6809             LDR      R1,[R1, #+0]
   \   000001B6   0x4288             CMP      R0,R1
   \   000001B8   0xD102             BNE      ??man_msg_main_32
    826          						man_msg_set_mode_seq(MAN_MSG_SEQ_SEND2_OK);
   \   000001BA   0x2008             MOVS     R0,#+8
   \   000001BC   0x.... 0x....      BL       man_msg_set_mode_seq
    827          					}
    828          					break;
   \                     ??man_msg_main_32: (+1)
   \   000001C0   0xE0A3             B        ??man_msg_main_13
    829          				case MAN_MSG_SEQ_CLOSE_REQ:
    830          					man_msg_work.req_state_cnt = 0;
   \                     ??man_msg_main_27: (+1)
   \   000001C2   0x2000             MOVS     R0,#+0
   \   000001C4   0x497F             LDR      R1,??man_msg_main_14+0x14
   \   000001C6   0x6008             STR      R0,[R1, #+0]
    831          					if (man_msg_work.seq == man_msg_work.resp_cmd.id) {
   \   000001C8   0x4847             LDR      R0,??man_msg_main_0+0xC
   \   000001CA   0x7800             LDRB     R0,[R0, #+0]
   \   000001CC   0x494C             LDR      R1,??man_msg_main_0+0x24
   \   000001CE   0x6809             LDR      R1,[R1, #+0]
   \   000001D0   0x4288             CMP      R0,R1
   \   000001D2   0xD102             BNE      ??man_msg_main_33
    832          						man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_OK);
   \   000001D4   0x200E             MOVS     R0,#+14
   \   000001D6   0x.... 0x....      BL       man_msg_set_mode_seq
    833          					}
    834          					break;
   \                     ??man_msg_main_33: (+1)
   \   000001DA   0xE096             B        ??man_msg_main_13
    835          
    836          				case MAN_MSG_SEQ_CLOSE_WAIT:
    837          					if (man_msg_work.seq == man_msg_work.resp_cmd.id) {
   \                     ??man_msg_main_26: (+1)
   \   000001DC   0x4842             LDR      R0,??man_msg_main_0+0xC
   \   000001DE   0x7800             LDRB     R0,[R0, #+0]
   \   000001E0   0x4947             LDR      R1,??man_msg_main_0+0x24
   \   000001E2   0x6809             LDR      R1,[R1, #+0]
   \   000001E4   0x4288             CMP      R0,R1
   \   000001E6   0xD102             BNE      ??man_msg_main_34
    838          						man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT_OK);
   \   000001E8   0x200B             MOVS     R0,#+11
   \   000001EA   0x.... 0x....      BL       man_msg_set_mode_seq
    839          					}
    840          					break;
   \                     ??man_msg_main_34: (+1)
   \   000001EE   0xE08C             B        ??man_msg_main_13
    841          
    842          				case MAN_MSG_RESP_TIMEOUT:
    843          					switch (man_msg_work.seq) {
   \                     ??man_msg_main_28: (+1)
   \   000001F0   0x483D             LDR      R0,??man_msg_main_0+0xC
   \   000001F2   0x7800             LDRB     R0,[R0, #+0]
   \   000001F4   0x380D             SUBS     R0,R0,#+13
   \   000001F6   0x2801             CMP      R0,#+1
   \   000001F8   0xD80B             BHI      ??man_msg_main_35
    844          					case MAN_MSG_SEQ_CLOSE_REQ:
    845          					case MAN_MSG_SEQ_CLOSE_OK:
    846          						man_error_setting(MAN_ERROR_MAN_MSG, man_msg_work.seq, man_msg_work.mode);
   \                     ??man_msg_main_36: (+1)
   \   000001FA   0x4BAD             LDR      R3,??man_msg_main_37  ;; 0x34e
   \   000001FC   0x4839             LDR      R0,??man_msg_main_0+0x8
   \   000001FE   0x6802             LDR      R2,[R0, #+0]
   \   00000200   0x4839             LDR      R0,??man_msg_main_0+0xC
   \   00000202   0x7801             LDRB     R1,[R0, #+0]
   \   00000204   0x201A             MOVS     R0,#+26
   \   00000206   0x.... 0x....      BL       man_error_set
    847          						man_msg_set_mode_seq(MAN_MSG_SEQ_READY);
   \   0000020A   0x2000             MOVS     R0,#+0
   \   0000020C   0x.... 0x....      BL       man_msg_set_mode_seq
    848          						break;
   \   00000210   0xE00A             B        ??man_msg_main_38
    849          					default:
    850          						man_error_setting(MAN_ERROR_MAN_MSG, man_msg_work.seq, man_msg_work.mode);
   \                     ??man_msg_main_35: (+1)
   \   00000212   0x4BA8             LDR      R3,??man_msg_main_37+0x4  ;; 0x352
   \   00000214   0x4833             LDR      R0,??man_msg_main_0+0x8
   \   00000216   0x6802             LDR      R2,[R0, #+0]
   \   00000218   0x4833             LDR      R0,??man_msg_main_0+0xC
   \   0000021A   0x7801             LDRB     R1,[R0, #+0]
   \   0000021C   0x201A             MOVS     R0,#+26
   \   0000021E   0x.... 0x....      BL       man_error_set
    851          						man_msg_set_mode_seq(MAN_MSG_SEQ_READY);
   \   00000222   0x2000             MOVS     R0,#+0
   \   00000224   0x.... 0x....      BL       man_msg_set_mode_seq
    852          						break;
    853          					}
    854          					break;
   \                     ??man_msg_main_38: (+1)
   \   00000228   0xE06F             B        ??man_msg_main_13
    855          				default:
    856          					break;
   \                     ??man_msg_main_29: (+1)
   \   0000022A   0xE06E             B        ??man_msg_main_13
    857          				}
    858          			}
    859          			
    860          			// 応答が異常
    861          			else {
    862          				man_error_setting(MAN_ERROR_MAN_MSG, man_msg_work.seq, man_msg_work.resp_cmd.id);
   \                     ??man_msg_main_22: (+1)
   \   0000022C   0x4BA2             LDR      R3,??man_msg_main_37+0x8  ;; 0x35e
   \   0000022E   0x4834             LDR      R0,??man_msg_main_0+0x24
   \   00000230   0x6802             LDR      R2,[R0, #+0]
   \   00000232   0x482D             LDR      R0,??man_msg_main_0+0xC
   \   00000234   0x7801             LDRB     R1,[R0, #+0]
   \   00000236   0x201A             MOVS     R0,#+26
   \   00000238   0x.... 0x....      BL       man_error_set
    863          				switch (man_msg_work.resp_cmd.id) {
   \   0000023C   0x4830             LDR      R0,??man_msg_main_0+0x24
   \   0000023E   0x6800             LDR      R0,[R0, #+0]
   \   00000240   0x2802             CMP      R0,#+2
   \   00000242   0xD008             BEQ      ??man_msg_main_39
   \   00000244   0x2805             CMP      R0,#+5
   \   00000246   0xD014             BEQ      ??man_msg_main_40
   \   00000248   0x2807             CMP      R0,#+7
   \   0000024A   0xD020             BEQ      ??man_msg_main_41
   \   0000024C   0x280A             CMP      R0,#+10
   \   0000024E   0xD03A             BEQ      ??man_msg_main_42
   \   00000250   0x280D             CMP      R0,#+13
   \   00000252   0xD02A             BEQ      ??man_msg_main_43
   \   00000254   0xE056             B        ??man_msg_main_44
    864          				case MAN_MSG_SEQ_OPEN:
    865          					if (man_msg_work.seq == man_msg_work.resp_cmd.id) {
   \                     ??man_msg_main_39: (+1)
   \   00000256   0x4824             LDR      R0,??man_msg_main_0+0xC
   \   00000258   0x7800             LDRB     R0,[R0, #+0]
   \   0000025A   0x4929             LDR      R1,??man_msg_main_0+0x24
   \   0000025C   0x6809             LDR      R1,[R1, #+0]
   \   0000025E   0x4288             CMP      R0,R1
   \   00000260   0xD106             BNE      ??man_msg_main_45
    866          						// 時間監視開始
    867          						man_msg_work.delay_timer = man_timer_get_1ms_count();
   \   00000262   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000266   0x49B8             LDR      R1,??man_msg_main_46
   \   00000268   0x6008             STR      R0,[R1, #+0]
    868          						man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN_NG);
   \   0000026A   0x200F             MOVS     R0,#+15
   \   0000026C   0x.... 0x....      BL       man_msg_set_mode_seq
    869          					}
    870          					break;
   \                     ??man_msg_main_45: (+1)
   \   00000270   0xE04B             B        ??man_msg_main_13
    871          				case MAN_MSG_SEQ_SEND1_REQ:
    872          					if (man_msg_work.seq == man_msg_work.resp_cmd.id) {
   \                     ??man_msg_main_40: (+1)
   \   00000272   0x481D             LDR      R0,??man_msg_main_0+0xC
   \   00000274   0x7800             LDRB     R0,[R0, #+0]
   \   00000276   0x4922             LDR      R1,??man_msg_main_0+0x24
   \   00000278   0x6809             LDR      R1,[R1, #+0]
   \   0000027A   0x4288             CMP      R0,R1
   \   0000027C   0xD106             BNE      ??man_msg_main_47
    873          						// 時間監視開始
    874          						man_msg_work.delay_timer = man_timer_get_1ms_count();
   \   0000027E   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000282   0x49B1             LDR      R1,??man_msg_main_46
   \   00000284   0x6008             STR      R0,[R1, #+0]
    875          						man_msg_set_mode_seq(MAN_MSG_SEQ_SEND1_NG);
   \   00000286   0x2011             MOVS     R0,#+17
   \   00000288   0x.... 0x....      BL       man_msg_set_mode_seq
    876          					}
    877          					break;
   \                     ??man_msg_main_47: (+1)
   \   0000028C   0xE03D             B        ??man_msg_main_13
    878          				case MAN_MSG_SEQ_SEND2_REQ:
    879          					if (man_msg_work.seq == man_msg_work.resp_cmd.id) {
   \                     ??man_msg_main_41: (+1)
   \   0000028E   0x4816             LDR      R0,??man_msg_main_0+0xC
   \   00000290   0x7800             LDRB     R0,[R0, #+0]
   \   00000292   0x491B             LDR      R1,??man_msg_main_0+0x24
   \   00000294   0x6809             LDR      R1,[R1, #+0]
   \   00000296   0x4288             CMP      R0,R1
   \   00000298   0xD106             BNE      ??man_msg_main_48
    880          						// 時間監視開始
    881          						man_msg_work.delay_timer = man_timer_get_1ms_count();
   \   0000029A   0x.... 0x....      BL       man_timer_get_1ms_count
   \   0000029E   0x49AA             LDR      R1,??man_msg_main_46
   \   000002A0   0x6008             STR      R0,[R1, #+0]
    882          						man_msg_set_mode_seq(MAN_MSG_SEQ_SEND2_NG);
   \   000002A2   0x2012             MOVS     R0,#+18
   \   000002A4   0x.... 0x....      BL       man_msg_set_mode_seq
    883          					}
    884          					break;
   \                     ??man_msg_main_48: (+1)
   \   000002A8   0xE02F             B        ??man_msg_main_13
    885          				case MAN_MSG_SEQ_CLOSE_REQ:
    886          					if (man_msg_work.seq == man_msg_work.resp_cmd.id) {
   \                     ??man_msg_main_43: (+1)
   \   000002AA   0x480F             LDR      R0,??man_msg_main_0+0xC
   \   000002AC   0x7800             LDRB     R0,[R0, #+0]
   \   000002AE   0x4914             LDR      R1,??man_msg_main_0+0x24
   \   000002B0   0x6809             LDR      R1,[R1, #+0]
   \   000002B2   0x4288             CMP      R0,R1
   \   000002B4   0xD106             BNE      ??man_msg_main_49
    887          						// 時間監視開始
    888          						man_msg_work.delay_timer = man_timer_get_1ms_count();
   \   000002B6   0x.... 0x....      BL       man_timer_get_1ms_count
   \   000002BA   0x49A3             LDR      R1,??man_msg_main_46
   \   000002BC   0x6008             STR      R0,[R1, #+0]
    889          						man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_NG);
   \   000002BE   0x2013             MOVS     R0,#+19
   \   000002C0   0x.... 0x....      BL       man_msg_set_mode_seq
    890          					}
    891          					break;
   \                     ??man_msg_main_49: (+1)
   \   000002C4   0xE021             B        ??man_msg_main_13
    892          				case MAN_MSG_SEQ_CLOSE_WAIT:
    893          					if (man_msg_work.seq == man_msg_work.resp_cmd.id) {
   \                     ??man_msg_main_42: (+1)
   \   000002C6   0x4808             LDR      R0,??man_msg_main_0+0xC
   \   000002C8   0x7800             LDRB     R0,[R0, #+0]
   \   000002CA   0x490D             LDR      R1,??man_msg_main_0+0x24
   \   000002CC   0x6809             LDR      R1,[R1, #+0]
   \   000002CE   0x4288             CMP      R0,R1
   \   000002D0   0xD102             BNE      ??man_msg_main_50
    894          						man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT_NG);
   \   000002D2   0x200C             MOVS     R0,#+12
   \   000002D4   0x.... 0x....      BL       man_msg_set_mode_seq
    895          					}
    896          					break;
   \                     ??man_msg_main_50: (+1)
   \   000002D8   0xE017             B        ??man_msg_main_13
   \   000002DA   0xBF00             Nop      
   \                     ??man_msg_main_0:
   \   000002DC   0x........         DC32     man_msg_work+0x5430
   \   000002E0   0x........         DC32     man_msg_work+0x543C
   \   000002E4   0x........         DC32     man_msg_work
   \   000002E8   0x........         DC32     man_msg_work+0x53B0
   \   000002EC   0x00002710         DC32     0x2710
   \   000002F0   0x4020000A         DC32     0x4020000a
   \   000002F4   0x........         DC32     man_msg_work+0x544C
   \   000002F8   0x00000BD8         DC32     0xbd8
   \   000002FC   0x........         DC32     man_msg_work+0x53B4
   \   00000300   0x........         DC32     man_msg_work+0x53B8
    897          				default:
    898          					man_msg_set_mode_seq(MAN_MSG_SEQ_READY);
   \                     ??man_msg_main_44: (+1)
   \   00000304   0x2000             MOVS     R0,#+0
   \   00000306   0x.... 0x....      BL       man_msg_set_mode_seq
    899          					break;
    900          				}
    901          			}
    902          		}
    903          	}
    904          
    905          
    906          	// ***************************
    907          	// シーケンス処理
    908          	// ***************************
    909          	switch (man_msg_work.seq) {
   \                     ??man_msg_main_13: (+1)
   \   0000030A   0x48AF             LDR      R0,??man_msg_main_51
   \   0000030C   0x7800             LDRB     R0,[R0, #+0]
   \   0000030E   0x2800             CMP      R0,#+0
   \   00000310   0xD02B             BEQ      ??man_msg_main_52
   \   00000312   0x2802             CMP      R0,#+2
   \   00000314   0xD05C             BEQ      ??man_msg_main_53
   \   00000316   0xD337             BCC      ??man_msg_main_54
   \   00000318   0x2804             CMP      R0,#+4
   \   0000031A   0xD062             BEQ      ??man_msg_main_55
   \   0000031C   0xD359             BCC      ??man_msg_main_56
   \   0000031E   0x2806             CMP      R0,#+6
   \   00000320   0xD100             BNE      .+4
   \   00000322   0xE0E0             B        ??man_msg_main_57
   \   00000324   0xD200             BCS      .+4
   \   00000326   0xE0DD             B        ??man_msg_main_58
   \   00000328   0x2808             CMP      R0,#+8
   \   0000032A   0xD100             BNE      .+4
   \   0000032C   0xE158             B        ??man_msg_main_59
   \   0000032E   0xD200             BCS      .+4
   \   00000330   0xE155             B        ??man_msg_main_60
   \   00000332   0x280A             CMP      R0,#+10
   \   00000334   0xD100             BNE      .+4
   \   00000336   0xE1D0             B        ??man_msg_main_61
   \   00000338   0xD200             BCS      .+4
   \   0000033A   0xE1C5             B        ??man_msg_main_62
   \   0000033C   0x280C             CMP      R0,#+12
   \   0000033E   0xD100             BNE      .+4
   \   00000340   0xE1E5             B        ??man_msg_main_63
   \   00000342   0xD200             BCS      .+4
   \   00000344   0xE1E3             B        ??man_msg_main_63
   \   00000346   0x280E             CMP      R0,#+14
   \   00000348   0xD100             BNE      .+4
   \   0000034A   0xE1F6             B        ??man_msg_main_64
   \   0000034C   0xD200             BCS      .+4
   \   0000034E   0xE1F3             B        ??man_msg_main_65
   \   00000350   0x2810             CMP      R0,#+16
   \   00000352   0xD100             BNE      .+4
   \   00000354   0xE09D             B        ??man_msg_main_66
   \   00000356   0xD367             BCC      ??man_msg_main_67
   \   00000358   0x2812             CMP      R0,#+18
   \   0000035A   0xD100             BNE      .+4
   \   0000035C   0xE174             B        ??man_msg_main_68
   \   0000035E   0xD200             BCS      .+4
   \   00000360   0xE10A             B        ??man_msg_main_69
   \   00000362   0x2813             CMP      R0,#+19
   \   00000364   0xD100             BNE      .+4
   \   00000366   0xE1E9             B        ??man_msg_main_70
   \   00000368   0xE20C             B        ??man_msg_main_71
    910          	case MAN_MSG_SEQ_READY:
    911          		// メッセージ機能が有効
    912          		if (man_msg_work.mode == MAN_MSG_MODE_START) {
   \                     ??man_msg_main_52: (+1)
   \   0000036A   0x48B2             LDR      R0,??man_msg_main_72
   \   0000036C   0x6800             LDR      R0,[R0, #+0]
   \   0000036E   0x2801             CMP      R0,#+1
   \   00000370   0xD109             BNE      ??man_msg_main_73
    913          			// 送信データが存在する場合、OPENから開始する
    914          			if (man_msg_check_msg() != 0) {
   \   00000372   0x.... 0x....      BL       man_msg_check_msg
   \   00000376   0x2800             CMP      R0,#+0
   \   00000378   0xD005             BEQ      ??man_msg_main_73
    915          				// 要求あり時はOPENから開始する
    916          				man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN_REQ);
   \   0000037A   0x2001             MOVS     R0,#+1
   \   0000037C   0x.... 0x....      BL       man_msg_set_mode_seq
    917          				man_msg_work.retry = 0;
   \   00000380   0x2000             MOVS     R0,#+0
   \   00000382   0x49AD             LDR      R1,??man_msg_main_72+0x4
   \   00000384   0x6008             STR      R0,[R1, #+0]
    918          			}
    919          		}
    920          		break;
   \                     ??man_msg_main_73: (+1)
   \   00000386   0xE1FD             B        ??man_msg_main_74
    921          
    922          
    923          	case MAN_MSG_SEQ_OPEN_REQ:
    924          		// 送信データが存在する場合、OPENから開始する
    925          		if (man_msg_check_msg() != 0) {
   \                     ??man_msg_main_54: (+1)
   \   00000388   0x.... 0x....      BL       man_msg_check_msg
   \   0000038C   0x2800             CMP      R0,#+0
   \   0000038E   0xD01B             BEQ      ??man_msg_main_75
    926          			if (sts == 0) {
   \   00000390   0x2C00             CMP      R4,#+0
   \   00000392   0xD11C             BNE      ??man_msg_main_76
    927          				// RPT送信終了を待つ
    928          				if (man_rpt_check_send_state() == 0) {
   \   00000394   0x.... 0x....      BL       man_rpt_check_send_state
   \   00000398   0x2800             CMP      R0,#+0
   \   0000039A   0xD118             BNE      ??man_msg_main_76
    929          					// HTTP clientを使用開始する
    930          					ret = man_http_client_open(MAN_MSG_SEQ_OPEN, man_msg_req_callback);
   \   0000039C   0x49A7             LDR      R1,??man_msg_main_72+0x8
   \   0000039E   0x2002             MOVS     R0,#+2
   \   000003A0   0x.... 0x....      BL       man_http_client_open
    931          					if (ret >= 0) {
   \   000003A4   0x2800             CMP      R0,#+0
   \   000003A6   0xD412             BMI      ??man_msg_main_76
    932          						man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN);
   \   000003A8   0x2002             MOVS     R0,#+2
   \   000003AA   0x.... 0x....      BL       man_msg_set_mode_seq
   \   000003AE   0xE00E             B        ??man_msg_main_76
   \                     ??man_msg_main_14:
   \   000003B0   0x000003E9         DC32     0x3e9
   \   000003B4   0x........         DC32     man_msg_work+0x53BC
   \   000003B8   0x00007530         DC32     0x7530
   \   000003BC   0x402003E8         DC32     0x402003e8
   \   000003C0   0x0000031F         DC32     0x31f
   \   000003C4   0x........         DC32     man_msg_work+0x5440
    933          					}
    934          				}
    935          			}
    936          		}
    937          		
    938          		// 送信データが無くなれば、終了する
    939          		else {
    940          			man_msg_set_mode_seq(MAN_MSG_SEQ_READY);
   \                     ??man_msg_main_75: (+1)
   \   000003C8   0x2000             MOVS     R0,#+0
   \   000003CA   0x.... 0x....      BL       man_msg_set_mode_seq
    941          		}
    942          		break;
   \                     ??man_msg_main_76: (+1)
   \   000003CE   0xE1D9             B        ??man_msg_main_74
    943          
    944          	// 応答時に処理を行うため、ここでは処理なし。
    945          	case MAN_MSG_SEQ_OPEN:
    946          		break;
   \                     ??man_msg_main_53: (+1)
   \   000003D0   0xE1D8             B        ??man_msg_main_74
    947          
    948          	case MAN_MSG_SEQ_OPEN_OK_CHK:
    949          		// RPT送信終了を待つ
    950          		if (man_rpt_check_send_state() == 0) {
   \                     ??man_msg_main_56: (+1)
   \   000003D2   0x.... 0x....      BL       man_rpt_check_send_state
   \   000003D6   0x2800             CMP      R0,#+0
   \   000003D8   0xD102             BNE      ??man_msg_main_77
    951          			// OPENしたことにする
    952          			man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN_OK);
   \   000003DA   0x2004             MOVS     R0,#+4
   \   000003DC   0x.... 0x....      BL       man_msg_set_mode_seq
    953          		}
    954          		break;
   \                     ??man_msg_main_77: (+1)
   \   000003E0   0xE1D0             B        ??man_msg_main_74
    955          
    956          	case MAN_MSG_SEQ_OPEN_OK:
    957          		if (man_msg_check_msg() != 0) {
   \                     ??man_msg_main_55: (+1)
   \   000003E2   0x.... 0x....      BL       man_msg_check_msg
   \   000003E6   0x2800             CMP      R0,#+0
   \   000003E8   0xD01A             BEQ      ??man_msg_main_78
    958          			// HTTPの使用状況を確認する
    959          			if (sts == 0) {
   \   000003EA   0x2C00             CMP      R4,#+0
   \   000003EC   0xD11B             BNE      ??man_msg_main_79
    960          				// RPT送信終了を待つ
    961          				if (man_rpt_check_send_state() == 0) {
   \   000003EE   0x.... 0x....      BL       man_rpt_check_send_state
   \   000003F2   0x2800             CMP      R0,#+0
   \   000003F4   0xD117             BNE      ??man_msg_main_79
    962          					// 登録したメッセージを取り出す
    963          					man_msg_get_save(&man_msg_work.req_msg.msg_data, &man_msg_work.req_msg.read_p);
   \   000003F6   0x49AC             LDR      R1,??man_msg_main_80
   \   000003F8   0x48AC             LDR      R0,??man_msg_main_80+0x4
   \   000003FA   0x.... 0x....      BL       man_msg_get_save
    964          					// サーバに通知するメッセージデータを作成
    965          					man_msg_make_message(&man_msg_work.req_msg.msg_data, &man_msg_work.msg_buff1, &man_msg_work.msg_buff2);
   \   000003FE   0x4AAC             LDR      R2,??man_msg_main_80+0x8
   \   00000400   0x49AC             LDR      R1,??man_msg_main_80+0xC
   \   00000402   0x48AA             LDR      R0,??man_msg_main_80+0x4
   \   00000404   0x.... 0x....      BL       man_msg_make_message
    966          					// サーバにメッセージを送信
    967          					ret = man_msg_send_message(MAN_MSG_SEQ_SEND1_REQ, &man_msg_work.msg_buff1.data[0], man_msg_work.msg_buff1.data_len);
   \   00000408   0x48AB             LDR      R0,??man_msg_main_80+0x10
   \   0000040A   0x6802             LDR      R2,[R0, #+0]
   \   0000040C   0x49A9             LDR      R1,??man_msg_main_80+0xC
   \   0000040E   0x2005             MOVS     R0,#+5
   \   00000410   0x.... 0x....      BL       man_msg_send_message
    968          					if (ret >= 0) {
   \   00000414   0x2800             CMP      R0,#+0
   \   00000416   0xD406             BMI      ??man_msg_main_79
    969          						man_msg_set_mode_seq(MAN_MSG_SEQ_SEND1_REQ);
   \   00000418   0x2005             MOVS     R0,#+5
   \   0000041A   0x.... 0x....      BL       man_msg_set_mode_seq
   \   0000041E   0xE002             B        ??man_msg_main_79
    970          					}
    971          				}
    972          			}
    973          		}
    974          		
    975          		// 送信データが無くなればCLOSEに移行する
    976          		else {
    977          			// HTTP clientを使用終了開始
    978          			man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT_REQ);
   \                     ??man_msg_main_78: (+1)
   \   00000420   0x2009             MOVS     R0,#+9
   \   00000422   0x.... 0x....      BL       man_msg_set_mode_seq
    979          		}
    980          		break;
   \                     ??man_msg_main_79: (+1)
   \   00000426   0xE1AD             B        ??man_msg_main_74
    981          
    982          	case MAN_MSG_SEQ_OPEN_NG:
    983          		delay_timer = man_timer_get_elapsed_time(man_msg_work.delay_timer, man_timer_get_1ms_count());
   \                     ??man_msg_main_67: (+1)
   \   00000428   0x.... 0x....      BL       man_timer_get_1ms_count
   \   0000042C   0x0001             MOVS     R1,R0
   \   0000042E   0x4846             LDR      R0,??man_msg_main_46
   \   00000430   0x6800             LDR      R0,[R0, #+0]
   \   00000432   0x.... 0x....      BL       man_timer_get_elapsed_time
    984          		// 50ms経過後に異常を解除する
    985          		if (delay_timer >= 50) {
   \   00000436   0x2832             CMP      R0,#+50
   \   00000438   0xD317             BCC      ??man_msg_main_81
    986          			if (man_msg_work.retry < MAN_MSG_RETRY_MAX) {
   \   0000043A   0x487F             LDR      R0,??man_msg_main_72+0x4
   \   0000043C   0x6800             LDR      R0,[R0, #+0]
   \   0000043E   0x2802             CMP      R0,#+2
   \   00000440   0xDA08             BGE      ??man_msg_main_82
    987          				// リトライする
    988          				man_msg_work.retry++;
   \   00000442   0x487D             LDR      R0,??man_msg_main_72+0x4
   \   00000444   0x6800             LDR      R0,[R0, #+0]
   \   00000446   0x1C40             ADDS     R0,R0,#+1
   \   00000448   0x497B             LDR      R1,??man_msg_main_72+0x4
   \   0000044A   0x6008             STR      R0,[R1, #+0]
    989          				man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN_REQ);
   \   0000044C   0x2001             MOVS     R0,#+1
   \   0000044E   0x.... 0x....      BL       man_msg_set_mode_seq
   \   00000452   0xE01D             B        ??man_msg_main_83
    990          			}
    991          			// リトライしてもNGの場合は10秒後に中止する
    992          			else {
    993          				// 中止する
    994          				man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN_NG_WAIT);
   \                     ??man_msg_main_82: (+1)
   \   00000454   0x2010             MOVS     R0,#+16
   \   00000456   0x.... 0x....      BL       man_msg_set_mode_seq
    995          				// 時間監視開始
    996          				man_msg_work.delay_timer = man_timer_get_1ms_count();
   \   0000045A   0x.... 0x....      BL       man_timer_get_1ms_count
   \   0000045E   0x493A             LDR      R1,??man_msg_main_46
   \   00000460   0x6008             STR      R0,[R1, #+0]
    997          				// エラー発生中とする
    998          				man_msg_work.err_sts = MAN_MSG_ERR_STS_ON;
   \   00000462   0x2001             MOVS     R0,#+1
   \   00000464   0x4973             LDR      R1,??man_msg_main_72
   \   00000466   0x7248             STRB     R0,[R1, #+9]
   \   00000468   0xE012             B        ??man_msg_main_83
    999          			}
   1000          		}
   1001          		else {
   1002          			switch (man_msg_work.req_state) {
   \                     ??man_msg_main_81: (+1)
   \   0000046A   0x4894             LDR      R0,??man_msg_main_80+0x14
   \   0000046C   0x6800             LDR      R0,[R0, #+0]
   \   0000046E   0x2801             CMP      R0,#+1
   \   00000470   0xD006             BEQ      ??man_msg_main_84
   \   00000472   0x280B             CMP      R0,#+11
   \   00000474   0xD004             BEQ      ??man_msg_main_84
   \   00000476   0x280C             CMP      R0,#+12
   \   00000478   0xD003             BEQ      ??man_msg_main_85
   \   0000047A   0x280D             CMP      R0,#+13
   \   0000047C   0xD005             BEQ      ??man_msg_main_86
   \   0000047E   0xE007             B        ??man_msg_main_83
   1003          			case MAN_MSG_STATE_RESET:				// リセット発生
   1004          			case MAN_MSG_STATE_NET_CLOSE:			// SM7500JE の自動 NET CLOSE
   1005          				break;
   \                     ??man_msg_main_84: (+1)
   \   00000480   0xE006             B        ??man_msg_main_83
   1006          			case MAN_MSG_STATE_DEV_NOT_SUPPORT:		// SM7500JE のNOT_SUPPORT
   1007          				// OPEN済みとする
   1008          				man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN_OK);
   \                     ??man_msg_main_85: (+1)
   \   00000482   0x2004             MOVS     R0,#+4
   \   00000484   0x.... 0x....      BL       man_msg_set_mode_seq
   1009          				break;
   \   00000488   0xE002             B        ??man_msg_main_83
   1010          			case MAN_MSG_STATE_DEV_BUSY:			// SM7500JE のDEV BUSY
   1011          				// CLOSEを開始する
   1012          				man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT_OK);
   \                     ??man_msg_main_86: (+1)
   \   0000048A   0x200B             MOVS     R0,#+11
   \   0000048C   0x.... 0x....      BL       man_msg_set_mode_seq
   1013          				break;
   1014          			}
   1015          		}
   1016          		break;
   \                     ??man_msg_main_83: (+1)
   \   00000490   0xE178             B        ??man_msg_main_74
   1017          
   1018          	case MAN_MSG_SEQ_OPEN_NG_WAIT:				// 15 : HTTP接続異常安定待ち状態
   1019          		delay_timer = man_timer_get_elapsed_time(man_msg_work.delay_timer, man_timer_get_1ms_count());
   \                     ??man_msg_main_66: (+1)
   \   00000492   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000496   0x0001             MOVS     R1,R0
   \   00000498   0x482B             LDR      R0,??man_msg_main_46
   \   0000049A   0x6800             LDR      R0,[R0, #+0]
   \   0000049C   0x.... 0x....      BL       man_timer_get_elapsed_time
   1020          		// 10000ms経過後に異常を解除する
   1021          		if (delay_timer >= 10000) {
   \   000004A0   0x49AD             LDR      R1,??man_msg_main_87  ;; 0x2710
   \   000004A2   0x4288             CMP      R0,R1
   \   000004A4   0xD30A             BCC      ??man_msg_main_88
   1022          			// 中止する
   1023          			man_msg_set_mode_seq(MAN_MSG_SEQ_READY);
   \   000004A6   0x2000             MOVS     R0,#+0
   \   000004A8   0x.... 0x....      BL       man_msg_set_mode_seq
   \   000004AC   0xE019             B        ??man_msg_main_89
   \   000004AE   0xBF00             Nop      
   \                     ??man_msg_main_37:
   \   000004B0   0x0000034E         DC32     0x34e
   \   000004B4   0x00000352         DC32     0x352
   \   000004B8   0x0000035E         DC32     0x35e
   1024          		}
   1025          		else {
   1026          			switch (man_msg_work.req_state) {
   \                     ??man_msg_main_88: (+1)
   \   000004BC   0x487F             LDR      R0,??man_msg_main_80+0x14
   \   000004BE   0x6800             LDR      R0,[R0, #+0]
   \   000004C0   0x2801             CMP      R0,#+1
   \   000004C2   0xD006             BEQ      ??man_msg_main_90
   \   000004C4   0x280B             CMP      R0,#+11
   \   000004C6   0xD004             BEQ      ??man_msg_main_90
   \   000004C8   0x280C             CMP      R0,#+12
   \   000004CA   0xD003             BEQ      ??man_msg_main_91
   \   000004CC   0x280D             CMP      R0,#+13
   \   000004CE   0xD005             BEQ      ??man_msg_main_92
   \   000004D0   0xE007             B        ??man_msg_main_89
   1027          			case MAN_MSG_STATE_RESET:				// リセット発生
   1028          			case MAN_MSG_STATE_NET_CLOSE:			// SM7500JE の自動 NET CLOSE
   1029          				break;
   \                     ??man_msg_main_90: (+1)
   \   000004D2   0xE006             B        ??man_msg_main_89
   1030          			case MAN_MSG_STATE_DEV_NOT_SUPPORT:		// SM7500JE のNOT_SUPPORT
   1031          				// OPEN済みとする
   1032          				man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN_OK);
   \                     ??man_msg_main_91: (+1)
   \   000004D4   0x2004             MOVS     R0,#+4
   \   000004D6   0x.... 0x....      BL       man_msg_set_mode_seq
   1033          				break;
   \   000004DA   0xE002             B        ??man_msg_main_89
   1034          			case MAN_MSG_STATE_DEV_BUSY:			// SM7500JE のDEV BUSY
   1035          				// CLOSEを開始する
   1036          				man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT_OK);
   \                     ??man_msg_main_92: (+1)
   \   000004DC   0x200B             MOVS     R0,#+11
   \   000004DE   0x.... 0x....      BL       man_msg_set_mode_seq
   1037          				break;
   1038          			}
   1039          		}
   1040          		break;
   \                     ??man_msg_main_89: (+1)
   \   000004E2   0xE14F             B        ??man_msg_main_74
   1041          
   1042          	case MAN_MSG_SEQ_SEND1_REQ:
   1043          		break;
   \                     ??man_msg_main_58: (+1)
   \   000004E4   0xE14E             B        ??man_msg_main_74
   1044          
   1045          	case MAN_MSG_SEQ_SEND1_OK:
   1046          		if (man_msg_work.msg_buff2.data_len == 0) {
   \                     ??man_msg_main_57: (+1)
   \   000004E6   0x48AD             LDR      R0,??man_msg_main_93
   \   000004E8   0x6800             LDR      R0,[R0, #+0]
   \   000004EA   0x2800             CMP      R0,#+0
   \   000004EC   0xD132             BNE      ??man_msg_main_94
   1047          			// HTTPの使用状況を確認する
   1048          			if (sts == 0) {
   \   000004EE   0x2C00             CMP      R4,#+0
   \   000004F0   0xD141             BNE      ??man_msg_main_95
   1049          				// RPT送信終了を待つ
   1050          				if (man_rpt_check_send_state() == 0) {
   \   000004F2   0x.... 0x....      BL       man_rpt_check_send_state
   \   000004F6   0x2800             CMP      R0,#+0
   \   000004F8   0xD13D             BNE      ??man_msg_main_95
   1051          					// デバックログに登録 
   1052          					man_dbglog_setting(MAN_ERROR_DBG_MAN_MSG, MAN_ERROR_DBG_TYPE_EVENT, man_msg_work.req_msg.msg_data.msg_type);
   \   000004FA   0x486C             LDR      R0,??man_msg_main_80+0x4
   \   000004FC   0x6802             LDR      R2,[R0, #+0]
   \   000004FE   0x2104             MOVS     R1,#+4
   \   00000500   0x2006             MOVS     R0,#+6
   \   00000502   0x.... 0x....      BL       man_dbglog_setting
   1053          #ifdef GNSS_DEBUG_OUT_MSG 
   1054          		int32_t		length;
   1055          		if (sts == 0) {
   1056          			sprintf((char *)&man_msg_work.buff[0], "MSG OUT(%d)\n", man_msg_work.req_msg.msg_data.msg_type);
   1057          			length = strlen((char const *)&man_msg_work.buff[0]);
   1058          			man_usb_data_send(&man_msg_work.buff[0], length);
   1059          		}
   1060          #endif
   1061          
   1062          					// 登録メッセージから送信済みのメッセージを削除する
   1063          					man_msg_del_save(man_msg_work.req_msg.read_p);
   \   00000506   0x4868             LDR      R0,??man_msg_main_80
   \   00000508   0x6800             LDR      R0,[R0, #+0]
   \   0000050A   0x.... 0x....      BL       man_msg_del_save
   1064          					// エラー発生を解除する
   1065          					man_msg_work.err_sts = MAN_MSG_ERR_STS_OFF;
   \   0000050E   0x2000             MOVS     R0,#+0
   \   00000510   0x4948             LDR      R1,??man_msg_main_72
   \   00000512   0x7248             STRB     R0,[R1, #+9]
   1066          
   1067          					if (man_msg_check_msg() != 0) {
   \   00000514   0x.... 0x....      BL       man_msg_check_msg
   \   00000518   0x2800             CMP      R0,#+0
   \   0000051A   0xD017             BEQ      ??man_msg_main_96
   1068          						// 登録したメッセージを取り出す
   1069          						man_msg_get_save(&man_msg_work.req_msg.msg_data, &man_msg_work.req_msg.read_p);
   \   0000051C   0x4962             LDR      R1,??man_msg_main_80
   \   0000051E   0x4863             LDR      R0,??man_msg_main_80+0x4
   \   00000520   0x.... 0x....      BL       man_msg_get_save
   1070          						// サーバに通知するメッセージデータを作成
   1071          						man_msg_make_message(&man_msg_work.req_msg.msg_data, &man_msg_work.msg_buff1, &man_msg_work.msg_buff2);
   \   00000524   0x4A62             LDR      R2,??man_msg_main_80+0x8
   \   00000526   0x4963             LDR      R1,??man_msg_main_80+0xC
   \   00000528   0x4860             LDR      R0,??man_msg_main_80+0x4
   \   0000052A   0x.... 0x....      BL       man_msg_make_message
   1072          						// サーバにメッセージを送信
   1073          						ret = man_msg_send_message(MAN_MSG_SEQ_SEND1_REQ, &man_msg_work.msg_buff1.data[0], man_msg_work.msg_buff1.data_len);
   \   0000052E   0x4862             LDR      R0,??man_msg_main_80+0x10
   \   00000530   0x6802             LDR      R2,[R0, #+0]
   \   00000532   0x4960             LDR      R1,??man_msg_main_80+0xC
   \   00000534   0x2005             MOVS     R0,#+5
   \   00000536   0x.... 0x....      BL       man_msg_send_message
   1074          						if (ret >= 0) {
   \   0000053A   0x2800             CMP      R0,#+0
   \   0000053C   0xD41B             BMI      ??man_msg_main_95
   1075          							man_msg_set_mode_seq(MAN_MSG_SEQ_SEND1_REQ);
   \   0000053E   0x2005             MOVS     R0,#+5
   \   00000540   0x.... 0x....      BL       man_msg_set_mode_seq
   \   00000544   0xE017             B        ??man_msg_main_95
   \   00000546   0xBF00             Nop      
   \                     ??man_msg_main_46:
   \   00000548   0x........         DC32     man_msg_work+0x542C
   1076          						}
   1077          					}
   1078          					else {
   1079          						// HTTP clientを使用終了開始
   1080          						man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT_REQ);
   \                     ??man_msg_main_96: (+1)
   \   0000054C   0x2009             MOVS     R0,#+9
   \   0000054E   0x.... 0x....      BL       man_msg_set_mode_seq
   \   00000552   0xE010             B        ??man_msg_main_95
   1081          					}
   1082          				}
   1083          			}
   1084          		}
   1085          		
   1086          		// セカンドメッセージ送信
   1087          		else {
   1088          			if (sts == 0) {
   \                     ??man_msg_main_94: (+1)
   \   00000554   0x2C00             CMP      R4,#+0
   \   00000556   0xD10E             BNE      ??man_msg_main_95
   1089          				// RPT送信終了を待つ
   1090          				if (man_rpt_check_send_state() == 0) {
   \   00000558   0x.... 0x....      BL       man_rpt_check_send_state
   \   0000055C   0x2800             CMP      R0,#+0
   \   0000055E   0xD10A             BNE      ??man_msg_main_95
   1091          					// サーバにセカンドメッセージを送信
   1092          					ret = man_msg_send_message(MAN_MSG_SEQ_SEND2_REQ, &man_msg_work.msg_buff2.data[0], man_msg_work.msg_buff2.data_len);
   \   00000560   0x488E             LDR      R0,??man_msg_main_93
   \   00000562   0x6802             LDR      R2,[R0, #+0]
   \   00000564   0x4952             LDR      R1,??man_msg_main_80+0x8
   \   00000566   0x2007             MOVS     R0,#+7
   \   00000568   0x.... 0x....      BL       man_msg_send_message
   1093          					if (ret >= 0) {
   \   0000056C   0x2800             CMP      R0,#+0
   \   0000056E   0xD402             BMI      ??man_msg_main_95
   1094          						man_msg_set_mode_seq(MAN_MSG_SEQ_SEND2_REQ);
   \   00000570   0x2007             MOVS     R0,#+7
   \   00000572   0x.... 0x....      BL       man_msg_set_mode_seq
   1095          					}
   1096          				}
   1097          			}
   1098          		}
   1099          		break;
   \                     ??man_msg_main_95: (+1)
   \   00000576   0xE105             B        ??man_msg_main_74
   1100          
   1101          	case MAN_MSG_SEQ_SEND1_NG:
   1102          		delay_timer = man_timer_get_elapsed_time(man_msg_work.delay_timer, man_timer_get_1ms_count());
   \                     ??man_msg_main_69: (+1)
   \   00000578   0x.... 0x....      BL       man_timer_get_1ms_count
   \   0000057C   0x0001             MOVS     R1,R0
   \   0000057E   0x48A7             LDR      R0,??man_msg_main_97
   \   00000580   0x6800             LDR      R0,[R0, #+0]
   \   00000582   0x.... 0x....      BL       man_timer_get_elapsed_time
   1103          		// 50ms経過後に異常を解除する
   1104          		if (delay_timer >= 50) {
   \   00000586   0x2832             CMP      R0,#+50
   \   00000588   0xD313             BCC      ??man_msg_main_98
   1105          			if (man_msg_work.retry < MAN_MSG_RETRY_MAX) {
   \   0000058A   0x482B             LDR      R0,??man_msg_main_72+0x4
   \   0000058C   0x6800             LDR      R0,[R0, #+0]
   \   0000058E   0x2802             CMP      R0,#+2
   \   00000590   0xDA08             BGE      ??man_msg_main_99
   1106          				// リトライする
   1107          				man_msg_work.retry++;
   \   00000592   0x4829             LDR      R0,??man_msg_main_72+0x4
   \   00000594   0x6800             LDR      R0,[R0, #+0]
   \   00000596   0x1C40             ADDS     R0,R0,#+1
   \   00000598   0x4927             LDR      R1,??man_msg_main_72+0x4
   \   0000059A   0x6008             STR      R0,[R1, #+0]
   1108          				man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN_OK);
   \   0000059C   0x2004             MOVS     R0,#+4
   \   0000059E   0x.... 0x....      BL       man_msg_set_mode_seq
   \   000005A2   0xE01B             B        ??man_msg_main_100
   1109          			}
   1110          			else {
   1111          				// CLOSEを開始する
   1112          				man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT_OK);
   \                     ??man_msg_main_99: (+1)
   \   000005A4   0x200B             MOVS     R0,#+11
   \   000005A6   0x.... 0x....      BL       man_msg_set_mode_seq
   1113          				// エラー発生中とする
   1114          				man_msg_work.err_sts = MAN_MSG_ERR_STS_ON;
   \   000005AA   0x2001             MOVS     R0,#+1
   \   000005AC   0x4921             LDR      R1,??man_msg_main_72
   \   000005AE   0x7248             STRB     R0,[R1, #+9]
   \   000005B0   0xE014             B        ??man_msg_main_100
   1115          			}
   1116          		}
   1117          		else {
   1118          			switch (man_msg_work.req_state) {
   \                     ??man_msg_main_98: (+1)
   \   000005B2   0x4842             LDR      R0,??man_msg_main_80+0x14
   \   000005B4   0x6800             LDR      R0,[R0, #+0]
   \   000005B6   0x2801             CMP      R0,#+1
   \   000005B8   0xD008             BEQ      ??man_msg_main_101
   \   000005BA   0x280B             CMP      R0,#+11
   \   000005BC   0xD006             BEQ      ??man_msg_main_101
   \   000005BE   0x280C             CMP      R0,#+12
   \   000005C0   0xD005             BEQ      ??man_msg_main_102
   \   000005C2   0x280D             CMP      R0,#+13
   \   000005C4   0xD007             BEQ      ??man_msg_main_103
   \   000005C6   0xE009             B        ??man_msg_main_100
   \                     ??man_msg_main_51:
   \   000005C8   0x........         DC32     man_msg_work+0x53B0
   1119          			case MAN_MSG_STATE_RESET:				// リセット発生
   1120          			case MAN_MSG_STATE_NET_CLOSE:			// SM7500JE の自動 NET CLOSE
   1121          				break;
   \                     ??man_msg_main_101: (+1)
   \   000005CC   0xE006             B        ??man_msg_main_100
   1122          			case MAN_MSG_STATE_DEV_NOT_SUPPORT:		// SM7500JE のNOT_SUPPORT
   1123          //				// OPENから再開する
   1124          //				man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN_REQ);
   1125          //				man_msg_work.retry = 0;
   1126          
   1127          				// CLOSEを開始する
   1128          				man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT_OK);
   \                     ??man_msg_main_102: (+1)
   \   000005CE   0x200B             MOVS     R0,#+11
   \   000005D0   0x.... 0x....      BL       man_msg_set_mode_seq
   1129          
   1130          				break;
   \   000005D4   0xE002             B        ??man_msg_main_100
   1131          			case MAN_MSG_STATE_DEV_BUSY:			// SM7500JE のDEV BUSY
   1132          				// CLOSEを開始する
   1133          				man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT_OK);
   \                     ??man_msg_main_103: (+1)
   \   000005D6   0x200B             MOVS     R0,#+11
   \   000005D8   0x.... 0x....      BL       man_msg_set_mode_seq
   1134          				break;
   1135          			}
   1136          		}
   1137          		break;
   \                     ??man_msg_main_100: (+1)
   \   000005DC   0xE0D2             B        ??man_msg_main_74
   1138          
   1139          	case MAN_MSG_SEQ_SEND2_REQ:
   1140          		break;
   \                     ??man_msg_main_60: (+1)
   \   000005DE   0xE0D1             B        ??man_msg_main_74
   1141          
   1142          	case MAN_MSG_SEQ_SEND2_OK:
   1143          		// HTTPの使用状況を確認する
   1144          		if (sts == 0) {
   \                     ??man_msg_main_59: (+1)
   \   000005E0   0x2C00             CMP      R4,#+0
   \   000005E2   0xD130             BNE      ??man_msg_main_104
   1145          			// RPT送信終了を待つ
   1146          			if (man_rpt_check_send_state() == 0) {
   \   000005E4   0x.... 0x....      BL       man_rpt_check_send_state
   \   000005E8   0x2800             CMP      R0,#+0
   \   000005EA   0xD12C             BNE      ??man_msg_main_104
   1147          				// デバックログに登録 
   1148          				man_dbglog_setting(MAN_ERROR_DBG_MAN_MSG, MAN_ERROR_DBG_TYPE_EVENT, man_msg_work.req_msg.msg_data.msg_type);
   \   000005EC   0x482F             LDR      R0,??man_msg_main_80+0x4
   \   000005EE   0x6802             LDR      R2,[R0, #+0]
   \   000005F0   0x2104             MOVS     R1,#+4
   \   000005F2   0x2006             MOVS     R0,#+6
   \   000005F4   0x.... 0x....      BL       man_dbglog_setting
   1149          #ifdef GNSS_DEBUG_OUT_MSG 
   1150          		int32_t		length;
   1151          		if (sts == 0) {
   1152          			sprintf((char *)&man_msg_work.buff[0], "MSG OUT(%d)\n", man_msg_work.req_msg.msg_data.msg_type);
   1153          			length = strlen((char const *)&man_msg_work.buff[0]);
   1154          			man_usb_data_send(&man_msg_work.buff[0], length);
   1155          		}
   1156          #endif
   1157          
   1158          				// 登録メッセージから送信済みのメッセージを削除する
   1159          				man_msg_del_save(man_msg_work.req_msg.read_p);
   \   000005F8   0x482B             LDR      R0,??man_msg_main_80
   \   000005FA   0x6800             LDR      R0,[R0, #+0]
   \   000005FC   0x.... 0x....      BL       man_msg_del_save
   1160          
   1161          				// エラー発生を解除する
   1162          				man_msg_work.err_sts = MAN_MSG_ERR_STS_OFF;
   \   00000600   0x2000             MOVS     R0,#+0
   \   00000602   0x490C             LDR      R1,??man_msg_main_72
   \   00000604   0x7248             STRB     R0,[R1, #+9]
   1163          
   1164          				if (man_msg_check_msg() != 0) {
   \   00000606   0x.... 0x....      BL       man_msg_check_msg
   \   0000060A   0x2800             CMP      R0,#+0
   \   0000060C   0xD018             BEQ      ??man_msg_main_105
   1165          					man_msg_set_mode_seq(MAN_MSG_SEQ_SEND1_REQ);
   \   0000060E   0x2005             MOVS     R0,#+5
   \   00000610   0x.... 0x....      BL       man_msg_set_mode_seq
   1166          					// 登録したメッセージを取り出す
   1167          					man_msg_get_save(&man_msg_work.req_msg.msg_data, &man_msg_work.req_msg.read_p);
   \   00000614   0x4924             LDR      R1,??man_msg_main_80
   \   00000616   0x4825             LDR      R0,??man_msg_main_80+0x4
   \   00000618   0x.... 0x....      BL       man_msg_get_save
   1168          					// サーバに通知するメッセージデータを作成
   1169          					man_msg_make_message(&man_msg_work.req_msg.msg_data, &man_msg_work.msg_buff1, &man_msg_work.msg_buff2);
   \   0000061C   0x4A24             LDR      R2,??man_msg_main_80+0x8
   \   0000061E   0x4925             LDR      R1,??man_msg_main_80+0xC
   \   00000620   0x4822             LDR      R0,??man_msg_main_80+0x4
   \   00000622   0x.... 0x....      BL       man_msg_make_message
   1170          					// サーバにメッセージを送信
   1171          					man_msg_send_message(MAN_MSG_SEQ_SEND1_REQ, &man_msg_work.msg_buff1.data[0], man_msg_work.msg_buff1.data_len);
   \   00000626   0x4824             LDR      R0,??man_msg_main_80+0x10
   \   00000628   0x6802             LDR      R2,[R0, #+0]
   \   0000062A   0x4922             LDR      R1,??man_msg_main_80+0xC
   \   0000062C   0x2005             MOVS     R0,#+5
   \   0000062E   0x.... 0x....      BL       man_msg_send_message
   \   00000632   0xE008             B        ??man_msg_main_104
   \                     ??man_msg_main_72:
   \   00000634   0x........         DC32     man_msg_work
   \   00000638   0x........         DC32     man_msg_work+0x5428
   \   0000063C   0x........         DC32     man_msg_req_callback
   1172          				}
   1173          				else {
   1174          					// HTTP clientを使用終了開始
   1175          					man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT_REQ);
   \                     ??man_msg_main_105: (+1)
   \   00000640   0x2009             MOVS     R0,#+9
   \   00000642   0x.... 0x....      BL       man_msg_set_mode_seq
   1176          				}
   1177          			}
   1178          		}
   1179          		break;
   \                     ??man_msg_main_104: (+1)
   \   00000646   0xE09D             B        ??man_msg_main_74
   1180          
   1181          	case MAN_MSG_SEQ_SEND2_NG:
   1182          		delay_timer = man_timer_get_elapsed_time(man_msg_work.delay_timer, man_timer_get_1ms_count());
   \                     ??man_msg_main_68: (+1)
   \   00000648   0x.... 0x....      BL       man_timer_get_1ms_count
   \   0000064C   0x0001             MOVS     R1,R0
   \   0000064E   0x4873             LDR      R0,??man_msg_main_97
   \   00000650   0x6800             LDR      R0,[R0, #+0]
   \   00000652   0x.... 0x....      BL       man_timer_get_elapsed_time
   1183          		// 50ms経過後に異常を解除する
   1184          		if (delay_timer >= 50) {
   \   00000656   0x2832             CMP      R0,#+50
   \   00000658   0xD313             BCC      ??man_msg_main_106
   1185          			if (man_msg_work.retry <= MAN_MSG_RETRY_MAX) {
   \   0000065A   0x....             LDR      R0,??DataTable11
   \   0000065C   0x6800             LDR      R0,[R0, #+0]
   \   0000065E   0x2803             CMP      R0,#+3
   \   00000660   0xDA08             BGE      ??man_msg_main_107
   1186          				// リトライする
   1187          				man_msg_work.retry++;
   \   00000662   0x....             LDR      R0,??DataTable11
   \   00000664   0x6800             LDR      R0,[R0, #+0]
   \   00000666   0x1C40             ADDS     R0,R0,#+1
   \   00000668   0x....             LDR      R1,??DataTable11
   \   0000066A   0x6008             STR      R0,[R1, #+0]
   1188          				man_msg_set_mode_seq(MAN_MSG_SEQ_SEND1_OK);
   \   0000066C   0x2006             MOVS     R0,#+6
   \   0000066E   0x.... 0x....      BL       man_msg_set_mode_seq
   \   00000672   0xE028             B        ??man_msg_main_108
   1189          			}
   1190          			else {
   1191          				// CLOSEを開始する
   1192          				man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT_OK);
   \                     ??man_msg_main_107: (+1)
   \   00000674   0x200B             MOVS     R0,#+11
   \   00000676   0x.... 0x....      BL       man_msg_set_mode_seq
   1193          				// エラー発生中とする
   1194          				man_msg_work.err_sts = MAN_MSG_ERR_STS_ON;
   \   0000067A   0x2001             MOVS     R0,#+1
   \   0000067C   0x....             LDR      R1,??DataTable11_1
   \   0000067E   0x7248             STRB     R0,[R1, #+9]
   \   00000680   0xE021             B        ??man_msg_main_108
   1195          			}
   1196          		}
   1197          		else {
   1198          			switch (man_msg_work.req_state) {
   \                     ??man_msg_main_106: (+1)
   \   00000682   0x480E             LDR      R0,??man_msg_main_80+0x14
   \   00000684   0x6800             LDR      R0,[R0, #+0]
   \   00000686   0x2801             CMP      R0,#+1
   \   00000688   0xD006             BEQ      ??man_msg_main_109
   \   0000068A   0x280B             CMP      R0,#+11
   \   0000068C   0xD004             BEQ      ??man_msg_main_109
   \   0000068E   0x280C             CMP      R0,#+12
   \   00000690   0xD003             BEQ      ??man_msg_main_110
   \   00000692   0x280D             CMP      R0,#+13
   \   00000694   0xD014             BEQ      ??man_msg_main_111
   \   00000696   0xE016             B        ??man_msg_main_108
   1199          			case MAN_MSG_STATE_RESET:				// リセット発生
   1200          			case MAN_MSG_STATE_NET_CLOSE:			// SM7500JE の自動 NET CLOSE
   1201          				break;
   \                     ??man_msg_main_109: (+1)
   \   00000698   0xE015             B        ??man_msg_main_108
   1202          			case MAN_MSG_STATE_DEV_NOT_SUPPORT:		// SM7500JE のNOT_SUPPORT
   1203          				// OPENから再開する
   1204          				man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN_REQ);
   \                     ??man_msg_main_110: (+1)
   \   0000069A   0x2001             MOVS     R0,#+1
   \   0000069C   0x.... 0x....      BL       man_msg_set_mode_seq
   1205          				man_msg_work.retry = 0;
   \   000006A0   0x2000             MOVS     R0,#+0
   \   000006A2   0x....             LDR      R1,??DataTable11
   \   000006A4   0x6008             STR      R0,[R1, #+0]
   1206          				break;
   \   000006A6   0xE00E             B        ??man_msg_main_108
   \                     ??man_msg_main_80:
   \   000006A8   0x........         DC32     man_msg_work+0x4DB0
   \   000006AC   0x........         DC32     man_msg_work+0x47B8
   \   000006B0   0x........         DC32     man_msg_work+0x6058
   \   000006B4   0x........         DC32     man_msg_work+0x5C58
   \   000006B8   0x........         DC32     man_msg_work+0x6054
   \   000006BC   0x........         DC32     man_msg_work+0x543C
   1207          			case MAN_MSG_STATE_DEV_BUSY:			// SM7500JE のDEV BUSY
   1208          				// CLOSEを開始する
   1209          				man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT_OK);
   \                     ??man_msg_main_111: (+1)
   \   000006C0   0x200B             MOVS     R0,#+11
   \   000006C2   0x.... 0x....      BL       man_msg_set_mode_seq
   1210          				break;
   1211          			}
   1212          		}
   1213          		break;
   \                     ??man_msg_main_108: (+1)
   \   000006C6   0xE05D             B        ??man_msg_main_74
   1214          
   1215          
   1216          
   1217          	case MAN_MSG_SEQ_CLOSE_WAIT_REQ:
   1218          		man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_WAIT);
   \                     ??man_msg_main_62: (+1)
   \   000006C8   0x200A             MOVS     R0,#+10
   \   000006CA   0x.... 0x....      BL       man_msg_set_mode_seq
   1219          		// 10秒タイマ開始
   1220          		man_timer_start_wait(TIMER_MAN_ID_APL_MSG + MAN_MSG_SEQ_CLOSE_WAIT, 10000, man_msg_req_callback);
   \   000006CE   0x....             LDR      R2,??DataTable11_2
   \   000006D0   0x4921             LDR      R1,??man_msg_main_87  ;; 0x2710
   \   000006D2   0x....             LDR      R0,??DataTable11_3  ;; 0x4020000a
   \   000006D4   0x.... 0x....      BL       man_timer_start_wait
   1221          		break;
   \   000006D8   0xE054             B        ??man_msg_main_74
   1222          	case MAN_MSG_SEQ_CLOSE_WAIT:
   1223          		if (man_msg_check_msg() != 0) {
   \                     ??man_msg_main_61: (+1)
   \   000006DA   0x.... 0x....      BL       man_msg_check_msg
   \   000006DE   0x2800             CMP      R0,#+0
   \   000006E0   0xD007             BEQ      ??man_msg_main_112
   1224          			// タイマを中止する
   1225          			man_timer_cancel_wait(TIMER_MAN_ID_APL_MSG + MAN_MSG_SEQ_CLOSE_WAIT, 10000);
   \   000006E2   0x491D             LDR      R1,??man_msg_main_87  ;; 0x2710
   \   000006E4   0x....             LDR      R0,??DataTable11_3  ;; 0x4020000a
   \   000006E6   0x.... 0x....      BL       man_timer_cancel_wait
   1226          			// 要求が発生すれば送信再開
   1227          			man_msg_set_mode_seq(MAN_MSG_SEQ_OPEN_OK_CHK);
   \   000006EA   0x2003             MOVS     R0,#+3
   \   000006EC   0x.... 0x....      BL       man_msg_set_mode_seq
   \   000006F0   0xE00C             B        ??man_msg_main_113
   1228          		}
   1229          		else {
   1230          			switch (man_msg_work.req_state) {
   \                     ??man_msg_main_112: (+1)
   \   000006F2   0x....             LDR      R0,??DataTable11_4
   \   000006F4   0x6800             LDR      R0,[R0, #+0]
   \   000006F6   0x2801             CMP      R0,#+1
   \   000006F8   0xD006             BEQ      ??man_msg_main_114
   \   000006FA   0x280B             CMP      R0,#+11
   \   000006FC   0xD004             BEQ      ??man_msg_main_114
   \   000006FE   0x280C             CMP      R0,#+12
   \   00000700   0xD003             BEQ      ??man_msg_main_115
   \   00000702   0x280D             CMP      R0,#+13
   \   00000704   0xD002             BEQ      ??man_msg_main_116
   \   00000706   0xE001             B        ??man_msg_main_113
   1231          			case MAN_MSG_STATE_RESET:				// リセット発生
   1232          			case MAN_MSG_STATE_NET_CLOSE:			// SM7500JE の自動 NET CLOSE
   1233          				break;
   \                     ??man_msg_main_114: (+1)
   \   00000708   0xE000             B        ??man_msg_main_113
   1234          			case MAN_MSG_STATE_DEV_NOT_SUPPORT:		// SM7500JE のNOT_SUPPORT
   1235          				break;
   \                     ??man_msg_main_115: (+1)
   \   0000070A   0xE7FF             B        ??man_msg_main_113
   1236          			case MAN_MSG_STATE_DEV_BUSY:			// SM7500JE のDEV BUSY
   1237          				break;
   1238          			}
   1239          		}
   1240          		break;
   \                     ??man_msg_main_116: (+1)
   \                     ??man_msg_main_113: (+1)
   \   0000070C   0xE03A             B        ??man_msg_main_74
   1241          	case MAN_MSG_SEQ_CLOSE_WAIT_OK:
   1242          	case MAN_MSG_SEQ_CLOSE_WAIT_NG:
   1243          		// HTTPの使用状況を確認する
   1244          		if (sts == 0) {
   \                     ??man_msg_main_63: (+1)
   \   0000070E   0x2C00             CMP      R4,#+0
   \   00000710   0xD111             BNE      ??man_msg_main_117
   1245          			// RPT送信終了を待つ
   1246          			if (man_rpt_check_send_state() == 0) {
   \   00000712   0x.... 0x....      BL       man_rpt_check_send_state
   \   00000716   0x2800             CMP      R0,#+0
   \   00000718   0xD10D             BNE      ??man_msg_main_117
   1247          				// HTTP clientを使用終了する
   1248          				ret = man_http_client_close(MAN_MSG_SEQ_CLOSE_REQ, man_msg_req_callback);
   \   0000071A   0x....             LDR      R1,??DataTable11_2
   \   0000071C   0x200D             MOVS     R0,#+13
   \   0000071E   0x.... 0x....      BL       man_http_client_close
   1249          				if (ret >= 0) {
   \   00000722   0x2800             CMP      R0,#+0
   \   00000724   0xD407             BMI      ??man_msg_main_117
   1250          					man_msg_set_mode_seq(MAN_MSG_SEQ_CLOSE_REQ);
   \   00000726   0x200D             MOVS     R0,#+13
   \   00000728   0x.... 0x....      BL       man_msg_set_mode_seq
   1251          					// タイマ開始
   1252          					man_timer_start_wait(TIMER_MAN_ID_APL_MSG + MAN_MSG_RESP_TIMEOUT, MAN_MSG_RESP_CLOSE_TO, man_msg_req_callback);
   \   0000072C   0x....             LDR      R2,??DataTable11_2
   \   0000072E   0x....             LDR      R1,??DataTable11_5  ;; 0x7530
   \   00000730   0x....             LDR      R0,??DataTable11_6  ;; 0x402003e8
   \   00000732   0x.... 0x....      BL       man_timer_start_wait
   1253          				}
   1254          			}
   1255          		}
   1256          		break;
   \                     ??man_msg_main_117: (+1)
   \   00000736   0xE025             B        ??man_msg_main_74
   1257          
   1258          
   1259          	// 応答時に処理を行うため、ここでは処理なし。
   1260          	case MAN_MSG_SEQ_CLOSE_REQ:
   1261          		break;
   \                     ??man_msg_main_65: (+1)
   \   00000738   0xE024             B        ??man_msg_main_74
   1262          
   1263          	case MAN_MSG_SEQ_CLOSE_OK:
   1264          		// CLOSEの完了を待って終了する
   1265          		break;
   \                     ??man_msg_main_64: (+1)
   \   0000073A   0xE023             B        ??man_msg_main_74
   1266          
   1267          	case MAN_MSG_SEQ_CLOSE_NG:
   1268          		delay_timer = man_timer_get_elapsed_time(man_msg_work.delay_timer, man_timer_get_1ms_count());
   \                     ??man_msg_main_70: (+1)
   \   0000073C   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000740   0x0001             MOVS     R1,R0
   \   00000742   0x4836             LDR      R0,??man_msg_main_97
   \   00000744   0x6800             LDR      R0,[R0, #+0]
   \   00000746   0x.... 0x....      BL       man_timer_get_elapsed_time
   1269          		// 50ms経過後に異常を解除する
   1270          		if (delay_timer >= 50) {
   \   0000074A   0x2832             CMP      R0,#+50
   \   0000074C   0xD306             BCC      ??man_msg_main_118
   1271          			man_msg_set_mode_seq(MAN_MSG_SEQ_READY);
   \   0000074E   0x2000             MOVS     R0,#+0
   \   00000750   0x.... 0x....      BL       man_msg_set_mode_seq
   \   00000754   0xE015             B        ??man_msg_main_119
   \   00000756   0xBF00             Nop      
   \                     ??man_msg_main_87:
   \   00000758   0x00002710         DC32     0x2710
   1272          		}
   1273          		else {
   1274          			switch (man_msg_work.req_state) {
   \                     ??man_msg_main_118: (+1)
   \   0000075C   0x....             LDR      R0,??DataTable11_4
   \   0000075E   0x6800             LDR      R0,[R0, #+0]
   \   00000760   0x2801             CMP      R0,#+1
   \   00000762   0xD006             BEQ      ??man_msg_main_120
   \   00000764   0x280B             CMP      R0,#+11
   \   00000766   0xD004             BEQ      ??man_msg_main_120
   \   00000768   0x280C             CMP      R0,#+12
   \   0000076A   0xD003             BEQ      ??man_msg_main_121
   \   0000076C   0x280D             CMP      R0,#+13
   \   0000076E   0xD005             BEQ      ??man_msg_main_122
   \   00000770   0xE007             B        ??man_msg_main_119
   1275          			case MAN_MSG_STATE_RESET:				// リセット発生
   1276          			case MAN_MSG_STATE_NET_CLOSE:			// SM7500JE の自動 NET CLOSE
   1277          				break;
   \                     ??man_msg_main_120: (+1)
   \   00000772   0xE006             B        ??man_msg_main_119
   1278          			case MAN_MSG_STATE_DEV_NOT_SUPPORT:		// SM7500JE のNOT_SUPPORT
   1279          				man_msg_set_mode_seq(MAN_MSG_SEQ_READY);
   \                     ??man_msg_main_121: (+1)
   \   00000774   0x2000             MOVS     R0,#+0
   \   00000776   0x.... 0x....      BL       man_msg_set_mode_seq
   1280          				break;
   \   0000077A   0xE002             B        ??man_msg_main_119
   1281          			case MAN_MSG_STATE_DEV_BUSY:			// SM7500JE のDEV BUSY
   1282          				man_msg_set_mode_seq(MAN_MSG_SEQ_READY);
   \                     ??man_msg_main_122: (+1)
   \   0000077C   0x2000             MOVS     R0,#+0
   \   0000077E   0x.... 0x....      BL       man_msg_set_mode_seq
   1283          				break;
   1284          			}
   1285          		}
   1286          		break;
   \                     ??man_msg_main_119: (+1)
   \   00000782   0xE7FF             B        ??man_msg_main_74
   1287          
   1288          	default:
   1289          		break;
   1290          	}
   1291          
   1292          
   1293          	// ***************************
   1294          	// NETWORK状態を通知処理
   1295          	// ***************************
   1296          	switch (man_msg_work.req_state) {
   \                     ??man_msg_main_71: (+1)
   \                     ??man_msg_main_74: (+1)
   \   00000784   0x....             LDR      R0,??DataTable11_4
   \   00000786   0x6800             LDR      R0,[R0, #+0]
   \   00000788   0x2800             CMP      R0,#+0
   \   0000078A   0xD009             BEQ      ??man_msg_main_123
   \   0000078C   0x1E40             SUBS     R0,R0,#+1
   \   0000078E   0xD008             BEQ      ??man_msg_main_124
   \   00000790   0x380A             SUBS     R0,R0,#+10
   \   00000792   0xD024             BEQ      ??man_msg_main_125
   \   00000794   0x1E40             SUBS     R0,R0,#+1
   \   00000796   0x2801             CMP      R0,#+1
   \   00000798   0xD942             BLS      ??man_msg_main_126
   \   0000079A   0xE050             B        ??man_msg_main_127
   \                     ??man_msg_main_93:
   \   0000079C   0x........         DC32     man_msg_work+0x6454
   1297          	case MAN_MSG_STATE_NON:
   1298          		break;
   \                     ??man_msg_main_123: (+1)
   \   000007A0   0xE04D             B        ??man_msg_main_127
   1299          	case MAN_MSG_STATE_RESET:				// リセット発生
   1300          		// 動作中のタイマを停止させる
   1301          		switch (man_msg_work.seq) {
   \                     ??man_msg_main_124: (+1)
   \   000007A2   0x....             LDR      R0,??DataTable12
   \   000007A4   0x7800             LDRB     R0,[R0, #+0]
   \   000007A6   0x280A             CMP      R0,#+10
   \   000007A8   0xD002             BEQ      ??man_msg_main_128
   \   000007AA   0x280D             CMP      R0,#+13
   \   000007AC   0xD005             BEQ      ??man_msg_main_129
   \   000007AE   0xE009             B        ??man_msg_main_130
   1302          		case MAN_MSG_SEQ_CLOSE_WAIT:
   1303          			man_timer_cancel_wait(TIMER_MAN_ID_APL_MSG + MAN_MSG_SEQ_CLOSE_WAIT, 10000);
   \                     ??man_msg_main_128: (+1)
   \   000007B0   0x....             LDR      R1,??DataTable12_1  ;; 0x2710
   \   000007B2   0x....             LDR      R0,??DataTable11_3  ;; 0x4020000a
   \   000007B4   0x.... 0x....      BL       man_timer_cancel_wait
   1304          			break;
   \   000007B8   0xE004             B        ??man_msg_main_131
   1305          		case MAN_MSG_SEQ_CLOSE_REQ:
   1306          			man_timer_cancel_wait(TIMER_MAN_ID_APL_MSG + MAN_MSG_RESP_TIMEOUT, MAN_MSG_RESP_CLOSE_TO);
   \                     ??man_msg_main_129: (+1)
   \   000007BA   0x....             LDR      R1,??DataTable11_5  ;; 0x7530
   \   000007BC   0x....             LDR      R0,??DataTable11_6  ;; 0x402003e8
   \   000007BE   0x.... 0x....      BL       man_timer_cancel_wait
   1307          			break;
   \   000007C2   0xE7FF             B        ??man_msg_main_131
   1308          		default:
   1309          			break;
   1310          		}
   1311          		man_msg_set_mode_seq(MAN_MSG_SEQ_READY);
   \                     ??man_msg_main_130: (+1)
   \                     ??man_msg_main_131: (+1)
   \   000007C4   0x2000             MOVS     R0,#+0
   \   000007C6   0x.... 0x....      BL       man_msg_set_mode_seq
   1312          		// 内部情報をCLOSE状態とする
   1313          		man_msg_work.mode = MAN_MSG_MODE_STOP;
   \   000007CA   0x2000             MOVS     R0,#+0
   \   000007CC   0x....             LDR      R1,??DataTable11_1
   \   000007CE   0x6008             STR      R0,[R1, #+0]
   1314          		man_msg_work.req_state = MAN_MSG_STATE_NON;
   \   000007D0   0x2000             MOVS     R0,#+0
   \   000007D2   0x....             LDR      R1,??DataTable11_4
   \   000007D4   0x6008             STR      R0,[R1, #+0]
   1315          		// エラー発生を解除する
   1316          		man_msg_work.err_sts = MAN_MSG_ERR_STS_OFF;
   \   000007D6   0x2000             MOVS     R0,#+0
   \   000007D8   0x....             LDR      R1,??DataTable11_1
   \   000007DA   0x7248             STRB     R0,[R1, #+9]
   1317          		break;
   \   000007DC   0xE02F             B        ??man_msg_main_127
   1318          	case MAN_MSG_STATE_NET_CLOSE:			// SM7500JE の自動 NET CLOSE
   1319          		// 動作中のタイマを停止させる
   1320          		switch (man_msg_work.seq) {
   \                     ??man_msg_main_125: (+1)
   \   000007DE   0x....             LDR      R0,??DataTable12
   \   000007E0   0x7800             LDRB     R0,[R0, #+0]
   \   000007E2   0x280A             CMP      R0,#+10
   \   000007E4   0xD002             BEQ      ??man_msg_main_132
   \   000007E6   0x280D             CMP      R0,#+13
   \   000007E8   0xD005             BEQ      ??man_msg_main_133
   \   000007EA   0xE009             B        ??man_msg_main_134
   1321          		case MAN_MSG_SEQ_CLOSE_WAIT:
   1322          			man_timer_cancel_wait(TIMER_MAN_ID_APL_MSG + MAN_MSG_SEQ_CLOSE_WAIT, 10000);
   \                     ??man_msg_main_132: (+1)
   \   000007EC   0x....             LDR      R1,??DataTable12_1  ;; 0x2710
   \   000007EE   0x....             LDR      R0,??DataTable11_3  ;; 0x4020000a
   \   000007F0   0x.... 0x....      BL       man_timer_cancel_wait
   1323          			break;
   \   000007F4   0xE004             B        ??man_msg_main_135
   1324          		case MAN_MSG_SEQ_CLOSE_REQ:
   1325          			man_timer_cancel_wait(TIMER_MAN_ID_APL_MSG + MAN_MSG_RESP_TIMEOUT, MAN_MSG_RESP_CLOSE_TO);
   \                     ??man_msg_main_133: (+1)
   \   000007F6   0x....             LDR      R1,??DataTable11_5  ;; 0x7530
   \   000007F8   0x....             LDR      R0,??DataTable11_6  ;; 0x402003e8
   \   000007FA   0x.... 0x....      BL       man_timer_cancel_wait
   1326          			break;
   \   000007FE   0xE7FF             B        ??man_msg_main_135
   1327          		default:
   1328          			break;
   1329          		}
   1330          		man_msg_set_mode_seq(MAN_MSG_SEQ_READY);
   \                     ??man_msg_main_134: (+1)
   \                     ??man_msg_main_135: (+1)
   \   00000800   0x2000             MOVS     R0,#+0
   \   00000802   0x.... 0x....      BL       man_msg_set_mode_seq
   1331          		// 内部情報をCLOSE状態とする
   1332          		man_msg_work.mode = MAN_MSG_MODE_STOP;
   \   00000806   0x2000             MOVS     R0,#+0
   \   00000808   0x....             LDR      R1,??DataTable11_1
   \   0000080A   0x6008             STR      R0,[R1, #+0]
   1333          		man_msg_work.req_state = MAN_MSG_STATE_NON;
   \   0000080C   0x2000             MOVS     R0,#+0
   \   0000080E   0x....             LDR      R1,??DataTable11_4
   \   00000810   0x6008             STR      R0,[R1, #+0]
   1334          		// エラー発生を解除する
   1335          		man_msg_work.err_sts = MAN_MSG_ERR_STS_OFF;
   \   00000812   0x2000             MOVS     R0,#+0
   \   00000814   0x....             LDR      R1,??DataTable11_1
   \   00000816   0x7248             STRB     R0,[R1, #+9]
   1336          		break;
   \   00000818   0xE011             B        ??man_msg_main_127
   \   0000081A   0xBF00             Nop      
   \                     ??man_msg_main_97:
   \   0000081C   0x........         DC32     man_msg_work+0x542C
   1337          	case MAN_MSG_STATE_DEV_NOT_SUPPORT:		// SM7500JE のNOT_SUPPORT
   1338          	case MAN_MSG_STATE_DEV_BUSY:			// SM7500JE のDEV BUSY
   1339          		// 実行完了時にクリアする
   1340          		if ( (man_msg_work.seq == MAN_MSG_SEQ_OPEN)
   1341          			|| (man_msg_work.seq == MAN_MSG_SEQ_SEND1_REQ)
   1342          			|| (man_msg_work.seq == MAN_MSG_SEQ_SEND2_REQ) ) {
   \                     ??man_msg_main_126: (+1)
   \   00000820   0x....             LDR      R0,??DataTable12
   \   00000822   0x7800             LDRB     R0,[R0, #+0]
   \   00000824   0x2802             CMP      R0,#+2
   \   00000826   0xD00A             BEQ      ??man_msg_main_136
   \   00000828   0x....             LDR      R0,??DataTable12
   \   0000082A   0x7800             LDRB     R0,[R0, #+0]
   \   0000082C   0x2805             CMP      R0,#+5
   \   0000082E   0xD006             BEQ      ??man_msg_main_136
   \   00000830   0x....             LDR      R0,??DataTable12
   \   00000832   0x7800             LDRB     R0,[R0, #+0]
   \   00000834   0x2807             CMP      R0,#+7
   \   00000836   0xD002             BEQ      ??man_msg_main_136
   1343          			;
   1344          		}
   1345          		else {
   1346          			man_msg_work.req_state = MAN_MSG_STATE_NON;
   \   00000838   0x2000             MOVS     R0,#+0
   \   0000083A   0x....             LDR      R1,??DataTable11_4
   \   0000083C   0x6008             STR      R0,[R1, #+0]
   1347          		}
   1348          		break;
   1349          	}
   1350          
   1351          
   1352          	// ***************************
   1353          	// USB出力処理
   1354          	// ***************************
   1355          	if (man_msg_work.usb_info.flag == 1) {
   \                     ??man_msg_main_136: (+1)
   \                     ??man_msg_main_127: (+1)
   \   0000083E   0x....             LDR      R0,??DataTable14
   \   00000840   0x6800             LDR      R0,[R0, #+0]
   \   00000842   0x2801             CMP      R0,#+1
   \   00000844   0xD116             BNE      ??man_msg_main_137
   1356          		man_msg_work.usb_info.flag = 0;
   \   00000846   0x2000             MOVS     R0,#+0
   \   00000848   0x....             LDR      R1,??DataTable14
   \   0000084A   0x6008             STR      R0,[R1, #+0]
   1357          
   1358          		// 登録したメッセージを取り出す
   1359          		man_msg_work.req_msg.msg_data = man_msg_work.usb_info.msg_buf;
   \   0000084C   0x....             LDR      R0,??DataTable15
   \   0000084E   0x....             LDR      R1,??DataTable15_1
   \   00000850   0x22BF             MOVS     R2,#+191
   \   00000852   0x00D2             LSLS     R2,R2,#+3        ;; #+1528
   \   00000854   0x.... 0x....      BL       __aeabi_memcpy4
   1360          		// USBに出力するメッセージデータを作成
   1361          		man_msg_make_message(&man_msg_work.req_msg.msg_data, &man_msg_work.msg_buff1, &man_msg_work.msg_buff2);
   \   00000858   0x....             LDR      R2,??DataTable15_2
   \   0000085A   0x....             LDR      R1,??DataTable19
   \   0000085C   0x....             LDR      R0,??DataTable15
   \   0000085E   0x.... 0x....      BL       man_msg_make_message
   1362          		// USBにメッセージを出力
   1363          		if (man_msg_work.msg_buff1.data_len != 0) {
   \   00000862   0x....             LDR      R0,??DataTable15_3
   \   00000864   0x6800             LDR      R0,[R0, #+0]
   \   00000866   0x2800             CMP      R0,#+0
   \   00000868   0xD004             BEQ      ??man_msg_main_137
   1364          			// USBデータ送信
   1365          			man_usb_data_send(&man_msg_work.msg_buff1.data[0], man_msg_work.msg_buff1.data_len);
   \   0000086A   0x....             LDR      R0,??DataTable15_3
   \   0000086C   0x6801             LDR      R1,[R0, #+0]
   \   0000086E   0x....             LDR      R0,??DataTable19
   \   00000870   0x.... 0x....      BL       man_usb_data_send
   1366          		}
   1367          	}
   1368          }
   \                     ??man_msg_main_137: (+1)
   \   00000874   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1369          
   1370          
   1371          /********************************************************************/
   1372          /*!
   1373           * \name	man_msg_set_type
   1374           * \brief	メッセージ登録処理
   1375           * \param	msg_type  : メッセージタイプ
   1376           * \return   0: 成功
   1377           *          -1:失敗
   1378           * \note	必要時に、呼ばれること
   1379           */
   1380          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1381          int32_t man_msg_set_type( int32_t msg_type )
   1382          {
   \                     man_msg_set_type: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   1383          	int32_t		ret = -1;
   \   00000002   0x2600             MOVS     R6,#+0
   \   00000004   0x43F6             MVNS     R6,R6            ;; #-1
   1384          	int32_t		i;
   1385          	man_msg_msg_info_t 		*msg = &man_msg_work.msg_info;
   \   00000006   0x....             LDR      R4,??DataTable16
   1386          	man_data_get_other_t	*other = man_data_get_other();
   \   00000008   0x.... 0x....      BL       man_data_get_other
   \   0000000C   0x0007             MOVS     R7,R0
   1387          	man_data_get_sensor_t	*sensor_info = man_data_get_sensor();
   \   0000000E   0x.... 0x....      BL       man_data_get_sensor
   \   00000012   0x0005             MOVS     R5,R0
   1388          
   1389          	// 許可されている場合のみ登録する
   1390          	if (man_msg_work.send_mode == MAN_MSG_SEND_START) {
   \   00000014   0x....             LDR      R0,??DataTable17
   \   00000016   0x7A00             LDRB     R0,[R0, #+8]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD000             BEQ      .+4
   \   0000001C   0xE0CC             B        ??man_msg_set_type_0
   1391          
   1392          		// 登録済みの場合、古いメッセージを削除する
   1393          		if (msg->count >= MAN_MSG_BUF_MAX) {
   \   0000001E   0x....             LDR      R0,??DataTable20  ;; 0x47a8
   \   00000020   0x5820             LDR      R0,[R4, R0]
   \   00000022   0x280C             CMP      R0,#+12
   \   00000024   0xDB0E             BLT      ??man_msg_set_type_1
   1394          			man_error_setting(MAN_ERROR_MAN_MSG, msg_type, msg->msg_buf[msg->read_p].msg_type);
   \   00000026   0x....             LDR      R3,??DataTable18  ;; 0x572
   \   00000028   0x....             LDR      R0,??DataTable19_1  ;; 0x47a4
   \   0000002A   0x5820             LDR      R0,[R4, R0]
   \   0000002C   0x21BF             MOVS     R1,#+191
   \   0000002E   0x00C9             LSLS     R1,R1,#+3        ;; #+1528
   \   00000030   0x4348             MULS     R0,R1,R0
   \   00000032   0x5822             LDR      R2,[R4, R0]
   \   00000034   0x9900             LDR      R1,[SP, #+0]
   \   00000036   0x201A             MOVS     R0,#+26
   \   00000038   0x.... 0x....      BL       man_error_set
   1395          			// 登録メッセージから送信済みのメッセージを削除する
   1396          			man_msg_del_save(man_msg_work.msg_info.read_p);
   \   0000003C   0x....             LDR      R0,??DataTable19_2
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x.... 0x....      BL       man_msg_del_save
   1397          		}
   1398          
   1399          		if (msg->count < MAN_MSG_BUF_MAX) {
   \                     ??man_msg_set_type_1: (+1)
   \   00000044   0x....             LDR      R0,??DataTable20  ;; 0x47a8
   \   00000046   0x5820             LDR      R0,[R4, R0]
   \   00000048   0x280C             CMP      R0,#+12
   \   0000004A   0xDB00             BLT      .+4
   \   0000004C   0xE0B5             B        ??man_msg_set_type_2
   1400          			msg->msg_buf[msg->write_p].msg_type = msg_type;
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0x....             LDR      R1,??DataTable19_3  ;; 0x47a0
   \   00000052   0x5861             LDR      R1,[R4, R1]
   \   00000054   0x22BF             MOVS     R2,#+191
   \   00000056   0x00D2             LSLS     R2,R2,#+3        ;; #+1528
   \   00000058   0x4351             MULS     R1,R2,R1
   \   0000005A   0x5060             STR      R0,[R4, R1]
   1401          			// 情報を取得
   1402          			msg->msg_buf[msg->write_p].voltage			= sensor_info->voltage;					// バッテリー電圧(0〜6000[mV])
   \   0000005C   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   0000005E   0x5820             LDR      R0,[R4, R0]
   \   00000060   0x21BF             MOVS     R1,#+191
   \   00000062   0x00C9             LSLS     R1,R1,#+3        ;; #+1528
   \   00000064   0x4348             MULS     R0,R1,R0
   \   00000066   0x1820             ADDS     R0,R4,R0
   \   00000068   0x6E69             LDR      R1,[R5, #+100]
   \   0000006A   0x6041             STR      R1,[R0, #+4]
   1403          			msg->msg_buf[msg->write_p].charge			= sensor_info->charge;					// バッテリー残量(0〜100[％])
   \   0000006C   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   0000006E   0x5820             LDR      R0,[R4, R0]
   \   00000070   0x21BF             MOVS     R1,#+191
   \   00000072   0x00C9             LSLS     R1,R1,#+3        ;; #+1528
   \   00000074   0x4348             MULS     R0,R1,R0
   \   00000076   0x1820             ADDS     R0,R4,R0
   \   00000078   0x6EA9             LDR      R1,[R5, #+104]
   \   0000007A   0x6081             STR      R1,[R0, #+8]
   1404          			msg->msg_buf[msg->write_p].gyro				= sensor_info->nmea_sensor.gyro;		// 角速度・加速度・重力加速度
   \   0000007C   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   0000007E   0x5820             LDR      R0,[R4, R0]
   \   00000080   0x21BF             MOVS     R1,#+191
   \   00000082   0x00C9             LSLS     R1,R1,#+3        ;; #+1528
   \   00000084   0x4348             MULS     R0,R1,R0
   \   00000086   0x1820             ADDS     R0,R4,R0
   \   00000088   0x300C             ADDS     R0,R0,#+12
   \   0000008A   0x21B7             MOVS     R1,#+183
   \   0000008C   0x0109             LSLS     R1,R1,#+4        ;; #+2928
   \   0000008E   0x1869             ADDS     R1,R5,R1
   \   00000090   0x2248             MOVS     R2,#+72
   \   00000092   0x.... 0x....      BL       __aeabi_memcpy4
   1405          			msg->msg_buf[msg->write_p].temperature		= sensor_info->temperature;				// 気温(-** 〜 **[℃])
   \   00000096   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   00000098   0x5820             LDR      R0,[R4, R0]
   \   0000009A   0x21BF             MOVS     R1,#+191
   \   0000009C   0x00C9             LSLS     R1,R1,#+3        ;; #+1528
   \   0000009E   0x4348             MULS     R0,R1,R0
   \   000000A0   0x1820             ADDS     R0,R4,R0
   \   000000A2   0x6D69             LDR      R1,[R5, #+84]
   \   000000A4   0x6541             STR      R1,[R0, #+84]
   1406          			msg->msg_buf[msg->write_p].type_num			= sensor_info->type_num;				// 端末の内部温度を示すコード
   \   000000A6   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   000000A8   0x5820             LDR      R0,[R4, R0]
   \   000000AA   0x21BF             MOVS     R1,#+191
   \   000000AC   0x00C9             LSLS     R1,R1,#+3        ;; #+1528
   \   000000AE   0x4348             MULS     R0,R1,R0
   \   000000B0   0x1820             ADDS     R0,R4,R0
   \   000000B2   0x6DA9             LDR      R1,[R5, #+88]
   \   000000B4   0x6581             STR      R1,[R0, #+88]
   1407          			msg->msg_buf[msg->write_p].pressure			= sensor_info->nmea_sensor.pressure;	// 気圧(******[hPa])
   \   000000B6   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   000000B8   0x5820             LDR      R0,[R4, R0]
   \   000000BA   0x21BF             MOVS     R1,#+191
   \   000000BC   0x00C9             LSLS     R1,R1,#+3        ;; #+1528
   \   000000BE   0x4348             MULS     R0,R1,R0
   \   000000C0   0x1820             ADDS     R0,R4,R0
   \   000000C2   0x....             LDR      R1,??DataTable20_1  ;; 0xbb8
   \   000000C4   0x5869             LDR      R1,[R5, R1]
   \   000000C6   0x65C1             STR      R1,[R0, #+92]
   1408          			msg->msg_buf[msg->write_p].altitude			= sensor_info->nmea_sensor.altitude;	// 高度(-*** 〜 *****[m])
   \   000000C8   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   000000CA   0x5820             LDR      R0,[R4, R0]
   \   000000CC   0x21BF             MOVS     R1,#+191
   \   000000CE   0x00C9             LSLS     R1,R1,#+3        ;; #+1528
   \   000000D0   0x4348             MULS     R0,R1,R0
   \   000000D2   0x1820             ADDS     R0,R4,R0
   \   000000D4   0x....             LDR      R1,??DataTable21  ;; 0xbbc
   \   000000D6   0x5869             LDR      R1,[R5, R1]
   \   000000D8   0x6601             STR      R1,[R0, #+96]
   1409          			msg->msg_buf[msg->write_p].rsrp				= sensor_info->nmea_sensor.rsrp;		// 基準信号受信電力[dbm]
   \   000000DA   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   000000DC   0x5820             LDR      R0,[R4, R0]
   \   000000DE   0x21BF             MOVS     R1,#+191
   \   000000E0   0x00C9             LSLS     R1,R1,#+3        ;; #+1528
   \   000000E2   0x4348             MULS     R0,R1,R0
   \   000000E4   0x1820             ADDS     R0,R4,R0
   \   000000E6   0x21BC             MOVS     R1,#+188
   \   000000E8   0x0109             LSLS     R1,R1,#+4        ;; #+3008
   \   000000EA   0x5869             LDR      R1,[R5, R1]
   \   000000EC   0x6641             STR      R1,[R0, #+100]
   1410          			msg->msg_buf[msg->write_p].rssi				= sensor_info->nmea_sensor.rssi;		// 受信信号強度[dbm]
   \   000000EE   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   000000F0   0x5820             LDR      R0,[R4, R0]
   \   000000F2   0x21BF             MOVS     R1,#+191
   \   000000F4   0x00C9             LSLS     R1,R1,#+3        ;; #+1528
   \   000000F6   0x4348             MULS     R0,R1,R0
   \   000000F8   0x1820             ADDS     R0,R4,R0
   \   000000FA   0x....             LDR      R1,??DataTable21_1  ;; 0xbc4
   \   000000FC   0x5869             LDR      R1,[R5, R1]
   \   000000FE   0x6681             STR      R1,[R0, #+104]
   1411          			man_rtc_get_clock(&msg->msg_buf[msg->write_p].clock);								// RTC JST時間取得
   \   00000100   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   00000102   0x5820             LDR      R0,[R4, R0]
   \   00000104   0x21BF             MOVS     R1,#+191
   \   00000106   0x00C9             LSLS     R1,R1,#+3        ;; #+1528
   \   00000108   0x4348             MULS     R0,R1,R0
   \   0000010A   0x1820             ADDS     R0,R4,R0
   \   0000010C   0x306C             ADDS     R0,R0,#+108
   \   0000010E   0x.... 0x....      BL       man_rtc_get_clock
   1412          			// fixのNMEA保存
   1413          			memcpy(&msg->msg_buf[msg->write_p].nmea[0], &sensor_info->nmea_fix[0], sensor_info->nmea_fix_len);
   \   00000112   0x....             LDR      R0,??DataTable21_2  ;; 0xb6c
   \   00000114   0x582A             LDR      R2,[R5, R0]
   \   00000116   0x....             LDR      R0,??DataTable21_3  ;; 0x5f4
   \   00000118   0x1829             ADDS     R1,R5,R0
   \   0000011A   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   0000011C   0x5820             LDR      R0,[R4, R0]
   \   0000011E   0x23BF             MOVS     R3,#+191
   \   00000120   0x00DB             LSLS     R3,R3,#+3        ;; #+1528
   \   00000122   0x4358             MULS     R0,R3,R0
   \   00000124   0x1820             ADDS     R0,R4,R0
   \   00000126   0x0006             MOVS     R6,R0
   \   00000128   0x367B             ADDS     R6,R6,#+123
   \   0000012A   0x0030             MOVS     R0,R6
   \   0000012C   0x.... 0x....      BL       __aeabi_memcpy
   1414          			msg->msg_buf[msg->write_p].nmea_len = sensor_info->nmea_fix_len;
   \   00000130   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   00000132   0x5820             LDR      R0,[R4, R0]
   \   00000134   0x21BF             MOVS     R1,#+191
   \   00000136   0x00C9             LSLS     R1,R1,#+3        ;; #+1528
   \   00000138   0x4348             MULS     R0,R1,R0
   \   0000013A   0x1820             ADDS     R0,R4,R0
   \   0000013C   0x....             LDR      R1,??DataTable21_3  ;; 0x5f4
   \   0000013E   0x....             LDR      R2,??DataTable21_2  ;; 0xb6c
   \   00000140   0x58AA             LDR      R2,[R5, R2]
   \   00000142   0x5042             STR      R2,[R0, R1]
   1415          
   1416          			// コマンド応答のCIDは受信したCID
   1417          			// 端末が自発的にデータを送信する場合のCIDは“00000000”
   1418          			switch (msg_type) {
   \   00000144   0x9800             LDR      R0,[SP, #+0]
   \   00000146   0x380D             SUBS     R0,R0,#+13
   \   00000148   0xD005             BEQ      ??man_msg_set_type_3
   \   0000014A   0x380C             SUBS     R0,R0,#+12
   \   0000014C   0x2801             CMP      R0,#+1
   \   0000014E   0xD902             BLS      ??man_msg_set_type_3
   \   00000150   0x380B             SUBS     R0,R0,#+11
   \   00000152   0x2805             CMP      R0,#+5
   \   00000154   0xD80E             BHI      ??man_msg_set_type_4
   1419          			case MAN_MSG_TYPE_SETTING:			// 設定情報一括取得（setting）コマンドの応答
   1420          			case MAN_MSG_TYPE_GPS_DATA:			// 最新位置情報取得（getgps）コマンドの応答
   1421          			case MAN_MSG_TYPE_GETBAT:			// バッテリ残量取得（getbat）コマンドの応答
   1422          			case MAN_MSG_TYPE_FIRM_ST:			// 端末ファームウェア更新（otastart）コマンドの応答
   1423          			case MAN_MSG_TYPE_FIRM_FIN:			// 端末ファームウェア更新（otastart）コマンドの応答
   1424          			case MAN_MSG_TYPE_FIRM_ERR:			// 端末ファームウェア更新（otastart）コマンドの応答
   1425          			case MAN_MSG_TYPE_GPS_ST:			// GPSチップファームウェア更新（gpsota）コマンドの応答
   1426          			case MAN_MSG_TYPE_GPS_FIN:			// GPSチップファームウェア更新（gpsota）コマンドの応答
   1427          			case MAN_MSG_TYPE_GPS_ERR:			// GPSチップファームウェア更新（gpsota）コマンドの応答
   1428          				memcpy(&msg->msg_buf[msg->write_p].cid[0], &other->cid[0], MAN_DATA_CID_LENGTH);	// CID
   \                     ??man_msg_set_type_3: (+1)
   \   00000156   0x2208             MOVS     R2,#+8
   \   00000158   0x0039             MOVS     R1,R7
   \   0000015A   0x3110             ADDS     R1,R1,#+16
   \   0000015C   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   0000015E   0x5820             LDR      R0,[R4, R0]
   \   00000160   0x23BF             MOVS     R3,#+191
   \   00000162   0x00DB             LSLS     R3,R3,#+3        ;; #+1528
   \   00000164   0x4358             MULS     R0,R3,R0
   \   00000166   0x1820             ADDS     R0,R4,R0
   \   00000168   0x0005             MOVS     R5,R0
   \   0000016A   0x3572             ADDS     R5,R5,#+114
   \   0000016C   0x0028             MOVS     R0,R5
   \   0000016E   0x.... 0x....      BL       __aeabi_memcpy
   1429          				break;
   \   00000172   0xE00C             B        ??man_msg_set_type_5
   1430          			default:
   1431          				memset(&msg->msg_buf[msg->write_p].cid[0], '0', MAN_DATA_CID_LENGTH);	// CID
   \                     ??man_msg_set_type_4: (+1)
   \   00000174   0x2108             MOVS     R1,#+8
   \   00000176   0x2230             MOVS     R2,#+48
   \   00000178   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   0000017A   0x5820             LDR      R0,[R4, R0]
   \   0000017C   0x23BF             MOVS     R3,#+191
   \   0000017E   0x00DB             LSLS     R3,R3,#+3        ;; #+1528
   \   00000180   0x4358             MULS     R0,R3,R0
   \   00000182   0x1820             ADDS     R0,R4,R0
   \   00000184   0x0005             MOVS     R5,R0
   \   00000186   0x3572             ADDS     R5,R5,#+114
   \   00000188   0x0028             MOVS     R0,R5
   \   0000018A   0x.... 0x....      BL       __aeabi_memset
   1432          				break;
   1433          			}
   1434          
   1435          			msg->write_p++;
   \                     ??man_msg_set_type_5: (+1)
   \   0000018E   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   00000190   0x5820             LDR      R0,[R4, R0]
   \   00000192   0x1C40             ADDS     R0,R0,#+1
   \   00000194   0x....             LDR      R1,??DataTable19_3  ;; 0x47a0
   \   00000196   0x5060             STR      R0,[R4, R1]
   1436          			if (msg->write_p >= MAN_MSG_BUF_MAX) {
   \   00000198   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   0000019A   0x5820             LDR      R0,[R4, R0]
   \   0000019C   0x280C             CMP      R0,#+12
   \   0000019E   0xDB04             BLT      ??man_msg_set_type_6
   1437          				msg->write_p -= MAN_MSG_BUF_MAX;
   \   000001A0   0x....             LDR      R0,??DataTable19_3  ;; 0x47a0
   \   000001A2   0x5820             LDR      R0,[R4, R0]
   \   000001A4   0x380C             SUBS     R0,R0,#+12
   \   000001A6   0x....             LDR      R1,??DataTable19_3  ;; 0x47a0
   \   000001A8   0x5060             STR      R0,[R4, R1]
   1438          			}
   1439          			msg->count++;
   \                     ??man_msg_set_type_6: (+1)
   \   000001AA   0x....             LDR      R0,??DataTable20  ;; 0x47a8
   \   000001AC   0x5820             LDR      R0,[R4, R0]
   \   000001AE   0x1C40             ADDS     R0,R0,#+1
   \   000001B0   0x....             LDR      R1,??DataTable20  ;; 0x47a8
   \   000001B2   0x5060             STR      R0,[R4, R1]
   1440          			ret = 0;
   \   000001B4   0x2600             MOVS     R6,#+0
   \   000001B6   0xE000             B        ??man_msg_set_type_2
   1441          		}
   1442          	}
   1443          	else {
   1444          		ret = 0;
   \                     ??man_msg_set_type_0: (+1)
   \   000001B8   0x2600             MOVS     R6,#+0
   1445          	}
   1446          
   1447          	return ret;
   \                     ??man_msg_set_type_2: (+1)
   \   000001BA   0x0030             MOVS     R0,R6
   \   000001BC   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1448          }
   1449          
   1450          
   1451          /********************************************************************/
   1452          /*!
   1453           * \name	man_msg_set_usb_type
   1454           * \brief	USB出力用メッセージ登録処理
   1455           * \param	msg_type  : メッセージタイプ
   1456           * \return   0: 成功
   1457           *          -1:失敗
   1458           * \note	必要時に、呼ばれること
   1459           */
   1460          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1461          int32_t man_msg_set_usb_type( int32_t msg_type )
   1462          {
   \                     man_msg_set_usb_type: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0006             MOVS     R6,R0
   1463          	man_msg_usb_info_t 		*msg = &man_msg_work.usb_info;
   \   00000004   0x....             LDR      R4,??DataTable14
   1464          	man_data_get_other_t	*other = man_data_get_other();
   \   00000006   0x.... 0x....      BL       man_data_get_other
   \   0000000A   0x0005             MOVS     R5,R0
   1465          
   1466          	msg->msg_buf.msg_type = msg_type;
   \   0000000C   0x6066             STR      R6,[R4, #+4]
   1467          	man_battery_get_data(&msg->msg_buf.voltage, &msg->msg_buf.charge);		// バッテリー情報取得
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0x310C             ADDS     R1,R1,#+12
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x3008             ADDS     R0,R0,#+8
   \   00000016   0x.... 0x....      BL       man_battery_get_data
   1468          	man_gyro_get_data(&msg->msg_buf.gyro);									// 角速度・加速度取得
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x3010             ADDS     R0,R0,#+16
   \   0000001E   0x.... 0x....      BL       man_gyro_get_data
   1469          	man_press_get_data(&msg->msg_buf.temperature, &msg->msg_buf.pressure, &msg->msg_buf.altitude);					// 気圧・高度・温度取得
   \   00000022   0x0022             MOVS     R2,R4
   \   00000024   0x3264             ADDS     R2,R2,#+100
   \   00000026   0x0021             MOVS     R1,R4
   \   00000028   0x3160             ADDS     R1,R1,#+96
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x3058             ADDS     R0,R0,#+88
   \   0000002E   0x.... 0x....      BL       man_press_get_data
   1470          	man_rtc_get_clock(&msg->msg_buf.clock);									// RTC 時間取得
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x3070             ADDS     R0,R0,#+112
   \   00000036   0x.... 0x....      BL       man_rtc_get_clock
   1471          
   1472          	// コマンド応答のCIDは受信したCID
   1473          	switch (msg_type) {
   \   0000003A   0x3E0D             SUBS     R6,R6,#+13
   \   0000003C   0xD005             BEQ      ??man_msg_set_usb_type_0
   \   0000003E   0x3E0C             SUBS     R6,R6,#+12
   \   00000040   0x2E01             CMP      R6,#+1
   \   00000042   0xD902             BLS      ??man_msg_set_usb_type_0
   \   00000044   0x3E0B             SUBS     R6,R6,#+11
   \   00000046   0x2E05             CMP      R6,#+5
   \   00000048   0xD808             BHI      ??man_msg_set_usb_type_1
   1474          	case MAN_MSG_TYPE_SETTING:			// 設定情報一括取得（setting）コマンドの応答
   1475          	case MAN_MSG_TYPE_GPS_DATA:			// 最新位置情報取得（getgps）コマンドの応答
   1476          	case MAN_MSG_TYPE_GETBAT:			// バッテリ残量取得（getbat）コマンドの応答
   1477          	case MAN_MSG_TYPE_FIRM_ST:			// 端末ファームウェア更新（otastart）コマンドの応答
   1478          	case MAN_MSG_TYPE_FIRM_FIN:			// 端末ファームウェア更新（otastart）コマンドの応答
   1479          	case MAN_MSG_TYPE_FIRM_ERR:			// 端末ファームウェア更新（otastart）コマンドの応答
   1480          	case MAN_MSG_TYPE_GPS_ST:			// GPSチップファームウェア更新（gpsota）コマンドの応答
   1481          	case MAN_MSG_TYPE_GPS_FIN:			// GPSチップファームウェア更新（gpsota）コマンドの応答
   1482          	case MAN_MSG_TYPE_GPS_ERR:			// GPSチップファームウェア更新（gpsota）コマンドの応答
   1483          		memcpy(&msg->msg_buf.cid[0], &other->cid[0], MAN_DATA_CID_LENGTH);		// CID
   \                     ??man_msg_set_usb_type_0: (+1)
   \   0000004A   0x2208             MOVS     R2,#+8
   \   0000004C   0x0029             MOVS     R1,R5
   \   0000004E   0x3110             ADDS     R1,R1,#+16
   \   00000050   0x0025             MOVS     R5,R4
   \   00000052   0x3576             ADDS     R5,R5,#+118
   \   00000054   0x0028             MOVS     R0,R5
   \   00000056   0x.... 0x....      BL       __aeabi_memcpy
   1484          		break;
   \   0000005A   0xE006             B        ??man_msg_set_usb_type_2
   1485          	
   1486          	// 端末が自発的にデータを送信する場合のCIDは“00000000”
   1487          	default:
   1488          		memset(&msg->msg_buf.cid[0], '0', MAN_DATA_CID_LENGTH);		// CID
   \                     ??man_msg_set_usb_type_1: (+1)
   \   0000005C   0x2108             MOVS     R1,#+8
   \   0000005E   0x2230             MOVS     R2,#+48
   \   00000060   0x0025             MOVS     R5,R4
   \   00000062   0x3576             ADDS     R5,R5,#+118
   \   00000064   0x0028             MOVS     R0,R5
   \   00000066   0x.... 0x....      BL       __aeabi_memset
   1489          		break;
   1490          	}
   1491          
   1492          	msg->flag = 1;
   \                     ??man_msg_set_usb_type_2: (+1)
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x6020             STR      R0,[R4, #+0]
   1493          
   1494          	return 0;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xBD70             POP      {R4-R6,PC}       ;; return
   1495          }
   1496          
   1497          /********************************************************************/
   1498          /*!
   1499           * \name	man_msg_chk_status_send
   1500           * \brief	送信状態を判定する処理
   1501           * \param	
   1502           * \return   1 : 送信中
   1503           *           0 : 送信可能
   1504           * \note	必要時に、呼ばれること
   1505           */
   1506          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1507          int32_t	man_msg_chk_status_send( void )
   1508          {
   \                     man_msg_chk_status_send: (+1)
   \   00000000   0xB500             PUSH     {LR}
   1509          	int32_t	ret = 1;
   \   00000002   0x2001             MOVS     R0,#+1
   1510          	man_msg_msg_info_t *msg = &man_msg_work.msg_info;
   \   00000004   0x....             LDR      R1,??DataTable16
   1511          
   1512          	if ( (man_msg_work.seq == MAN_MSG_SEQ_READY)
   1513          		|| (man_msg_work.seq == MAN_MSG_SEQ_CLOSE_OK) ) {
   \   00000006   0x....             LDR      R2,??DataTable23
   \   00000008   0x7812             LDRB     R2,[R2, #+0]
   \   0000000A   0x2A00             CMP      R2,#+0
   \   0000000C   0xD003             BEQ      ??man_msg_chk_status_send_0
   \   0000000E   0x....             LDR      R2,??DataTable23
   \   00000010   0x7812             LDRB     R2,[R2, #+0]
   \   00000012   0x2A0E             CMP      R2,#+14
   \   00000014   0xD104             BNE      ??man_msg_chk_status_send_1
   1514          
   1515          		if (msg->count == 0) {
   \                     ??man_msg_chk_status_send_0: (+1)
   \   00000016   0x....             LDR      R2,??DataTable20  ;; 0x47a8
   \   00000018   0x5889             LDR      R1,[R1, R2]
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD100             BNE      ??man_msg_chk_status_send_1
   1516          			ret = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   1517          		}
   1518          	}
   1519          
   1520          	return ret;
   \                     ??man_msg_chk_status_send_1: (+1)
   \   00000020   0xBD00             POP      {PC}             ;; return
   1521          }
   1522          
   1523          
   1524          /********************************************************************/
   1525          /*!
   1526           * \name	man_msg_chk_status_stby
   1527           * \brief	スタンバイIN可能状態を判定する処理
   1528           * \param	
   1529           * \return   1 : 使用中
   1530           *           0 : 未使用中
   1531           * \note	必要時に、呼ばれること
   1532           */
   1533          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1534          int32_t	man_msg_chk_status_stby( void )
   1535          {
   \                     man_msg_chk_status_stby: (+1)
   \   00000000   0xB500             PUSH     {LR}
   1536          	int32_t	ret = 1;
   \   00000002   0x2001             MOVS     R0,#+1
   1537          	man_msg_msg_info_t *msg = &man_msg_work.msg_info;
   \   00000004   0x....             LDR      R1,??DataTable16
   1538          
   1539          	if (man_msg_work.seq == MAN_MSG_SEQ_READY) {
   \   00000006   0x....             LDR      R2,??DataTable23
   \   00000008   0x7812             LDRB     R2,[R2, #+0]
   \   0000000A   0x2A00             CMP      R2,#+0
   \   0000000C   0xD104             BNE      ??man_msg_chk_status_stby_0
   1540          
   1541          		if (msg->count == 0) {
   \   0000000E   0x....             LDR      R2,??DataTable20  ;; 0x47a8
   \   00000010   0x5889             LDR      R1,[R1, R2]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD100             BNE      ??man_msg_chk_status_stby_0
   1542          			ret = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   1543          		}
   1544          	}
   1545          
   1546          	return ret;
   \                     ??man_msg_chk_status_stby_0: (+1)
   \   00000018   0xBD00             POP      {PC}             ;; return
   1547          }
   1548          
   1549          
   1550          /********************************************************************/
   1551          /*!
   1552           * \name	man_msg_req_start
   1553           * \brief	メッセージ機能を開始する処理
   1554           * \param	id       : ユニーク番号
   1555           *          callback : 完了を通知するcallback関数
   1556           * \return   0: 成功
   1557           *          -1:失敗
   1558           * \note	必要時に、呼ばれること
   1559           */
   1560          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1561          int32_t	man_msg_req_start( int32_t id, func_man_msg callback )
   1562          {
   \                     man_msg_req_start: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0002             MOVS     R2,R0
   1563          	int32_t	ret=-1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
   1564          	
   1565          	if (man_msg_work.request.req == MAN_MSG_REQ_READY) {
   \   00000008   0x....             LDR      R3,??DataTable23_1
   \   0000000A   0x681B             LDR      R3,[R3, #+0]
   \   0000000C   0x2B00             CMP      R3,#+0
   \   0000000E   0xD107             BNE      ??man_msg_req_start_0
   1566          		man_msg_work.request.req = MAN_MSG_REQ_START;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x....             LDR      R3,??DataTable23_1
   \   00000014   0x6018             STR      R0,[R3, #+0]
   1567          		man_msg_work.request.id = id;
   \   00000016   0x....             LDR      R0,??DataTable23_2
   \   00000018   0x6002             STR      R2,[R0, #+0]
   1568          		man_msg_work.request.callback = callback;
   \   0000001A   0x....             LDR      R0,??DataTable23_3
   \   0000001C   0x6001             STR      R1,[R0, #+0]
   1569          		ret = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   1570          	}
   1571          	return ret;
   \                     ??man_msg_req_start_0: (+1)
   \   00000020   0xBD00             POP      {PC}             ;; return
   1572          }
   1573          
   1574          
   1575          /********************************************************************/
   1576          /*!
   1577           * \name	man_msg_req_stop
   1578           * \brief	メッセージ機能を停止する処理
   1579           * \param	id       : ユニーク番号
   1580           *          callback : 完了を通知するcallback関数
   1581           * \return   0: 成功
   1582           *          -1:失敗
   1583           * \note	必要時に、呼ばれること
   1584           */
   1585          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1586          int32_t	man_msg_req_stop( int32_t id, func_man_msg callback )
   1587          {
   \                     man_msg_req_stop: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0002             MOVS     R2,R0
   1588          	int32_t	ret=-1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
   1589          	
   1590          	if (man_msg_work.request.req == MAN_MSG_REQ_READY) {
   \   00000008   0x....             LDR      R3,??DataTable23_1
   \   0000000A   0x681B             LDR      R3,[R3, #+0]
   \   0000000C   0x2B00             CMP      R3,#+0
   \   0000000E   0xD107             BNE      ??man_msg_req_stop_0
   1591          		man_msg_work.request.req = MAN_MSG_REQ_STOP;
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x....             LDR      R3,??DataTable23_1
   \   00000014   0x6018             STR      R0,[R3, #+0]
   1592          		man_msg_work.request.id = id;
   \   00000016   0x....             LDR      R0,??DataTable23_2
   \   00000018   0x6002             STR      R2,[R0, #+0]
   1593          		man_msg_work.request.callback = callback;
   \   0000001A   0x....             LDR      R0,??DataTable23_3
   \   0000001C   0x6001             STR      R1,[R0, #+0]
   1594          		ret = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   1595          	}
   1596          	return ret;
   \                     ??man_msg_req_stop_0: (+1)
   \   00000020   0xBD00             POP      {PC}             ;; return
   1597          }
   1598          
   1599          /********************************************************************/
   1600          /*!
   1601           * \name	man_msg_req_send_start
   1602           * \brief	メッセージの送信を開始する処理
   1603           *             登録しているメッセージの送信を開始します
   1604           * \param	なし
   1605           * \return  なし
   1606           * \note	必要時に、呼ばれること
   1607           *          直結モードからの復帰を想定
   1608           */
   1609          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1610          void	man_msg_req_send_start( void )
   1611          {
   1612          	man_msg_work.send_mode = MAN_MSG_SEND_START;		// 出力開始
   \                     man_msg_req_send_start: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR      R1,??DataTable23_4
   \   00000004   0x7208             STRB     R0,[R1, #+8]
   1613          }
   \   00000006   0x4770             BX       LR               ;; return
   1614          
   1615          /********************************************************************/
   1616          /*!
   1617           * \name	man_msg_req_send_stop
   1618           * \brief	メッセージの送信を停止する処理
   1619           *             登録しているメッセージの送信を停止します
   1620           * \param	なし
   1621           * \return  なし
   1622           * \note	必要時に、呼ばれること
   1623           *          直結モード時はメッセージの登録を行わないことに対応
   1624           */
   1625          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1626          void	man_msg_req_send_stop( void )
   1627          {
   1628          	man_msg_work.send_mode = MAN_MSG_SEND_STOP;			// 出力停止
   \                     man_msg_req_send_stop: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR      R1,??DataTable23_4
   \   00000004   0x7208             STRB     R0,[R1, #+8]
   1629          }
   \   00000006   0x4770             BX       LR               ;; return
   1630          
   1631          /********************************************************************/
   1632          /*!
   1633           * \name	man_msg_req_state
   1634           * \brief	NETWORK状態を通知する
   1635           * \param	state         : MAN_MSG_STATE_RESET            : リセット発生
   1636           *                        : MAN_MSG_STATE_NET_CLOSE        : NET CLOSE発生
   1637           *                        : MAN_MSG_STATE_DEV_NOT_SUPPORT  : NET OPEN発生
   1638           *                        : MAN_MSG_STATE_DEV_BUSY         : NET OPEN発生
   1639           * \return  なし
   1640           * \note	必要時に、呼ばれること
   1641           */
   1642          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1643          void man_msg_req_state(int32_t state)
   1644          {
   \                     man_msg_req_state: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1645          	// RESET, NET CLOSE時はカウンタを初期化する
   1646          	if ( (state == MAN_MSG_STATE_RESET) || (state == MAN_MSG_STATE_NET_CLOSE) ) {
   \   00000004   0x2C01             CMP      R4,#+1
   \   00000006   0xD001             BEQ      ??man_msg_req_state_0
   \   00000008   0x2C0B             CMP      R4,#+11
   \   0000000A   0xD102             BNE      ??man_msg_req_state_1
   1647          		man_msg_work.req_state_cnt = 0;
   \                     ??man_msg_req_state_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x....             LDR      R1,??DataTable23_5
   \   00000010   0x6008             STR      R0,[R1, #+0]
   1648          	}
   1649          
   1650          	// LTE RESET 発行後は何も行わない
   1651          	if (man_msg_work.req_state_cnt != 999) {
   \                     ??man_msg_req_state_1: (+1)
   \   00000012   0x....             LDR      R0,??DataTable23_5
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x....             LDR      R1,??DataTable23_6  ;; 0x3e7
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xD015             BEQ      ??man_msg_req_state_2
   1652          		// 10回連続で通知された場合はRESETする
   1653          		if (man_msg_work.req_state_cnt > 10) {
   \   0000001C   0x....             LDR      R0,??DataTable23_5
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x280B             CMP      R0,#+11
   \   00000022   0xDB0C             BLT      ??man_msg_req_state_3
   1654          			// LTE RESET
   1655          			man_net_req_reset();
   \   00000024   0x.... 0x....      BL       man_net_req_reset
   1656          			man_msg_work.req_state_cnt = 999;
   \   00000028   0x....             LDR      R0,??DataTable23_6  ;; 0x3e7
   \   0000002A   0x....             LDR      R1,??DataTable23_5
   \   0000002C   0x6008             STR      R0,[R1, #+0]
   1657          			man_error_setting(MAN_ERROR_MAN_MSG, man_msg_work.seq, 0);
   \   0000002E   0x....             LDR      R3,??DataTable23_7  ;; 0x679
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0x....             LDR      R0,??DataTable23
   \   00000034   0x7801             LDRB     R1,[R0, #+0]
   \   00000036   0x201A             MOVS     R0,#+26
   \   00000038   0x.... 0x....      BL       man_error_set
   \   0000003C   0xE004             B        ??man_msg_req_state_2
   1658          		}
   1659          		else {
   1660          			man_msg_work.req_state_cnt++;
   \                     ??man_msg_req_state_3: (+1)
   \   0000003E   0x....             LDR      R0,??DataTable23_5
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x....             LDR      R1,??DataTable23_5
   \   00000046   0x6008             STR      R0,[R1, #+0]
   1661          		}
   1662          	}
   1663          	man_msg_work.req_state = state;
   \                     ??man_msg_req_state_2: (+1)
   \   00000048   0x....             LDR      R0,??DataTable23_8
   \   0000004A   0x6004             STR      R4,[R0, #+0]
   1664          
   1665          }
   \   0000004C   0xBD10             POP      {R4,PC}          ;; return
   1666          
   1667          /********************************************************************/
   1668          /*!
   1669           * \name	man_msg_noti_error
   1670           * \brief	MSGの異常を通知する
   1671           * \param	id             : ユニーク番号
   1672           *          callback_error : 異常を通知するcallback関数
   1673           * \return   0: 成功
   1674           *          -1:失敗
   1675           * \note	必要時に、呼ばれること
   1676           */
   1677          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1678          int32_t man_msg_noti_error(int32_t id, func_man_msg callback_error)
   1679          {
   \                     man_msg_noti_error: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0002             MOVS     R2,R0
   1680          	int32_t		ret = -1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
   1681          	
   1682          	if (callback_error != NULL) {
   \   00000008   0x000B             MOVS     R3,R1
   \   0000000A   0x2B00             CMP      R3,#+0
   \   0000000C   0xD004             BEQ      ??man_msg_noti_error_0
   1683          		man_msg_work.noti_error.id = id;
   \   0000000E   0x....             LDR      R0,??DataTable23_9
   \   00000010   0x6002             STR      R2,[R0, #+0]
   1684          		man_msg_work.noti_error.callback_error = callback_error;
   \   00000012   0x....             LDR      R0,??DataTable23_10
   \   00000014   0x6001             STR      R1,[R0, #+0]
   1685          		ret = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   1686          	}
   1687          	return ret;
   \                     ??man_msg_noti_error_0: (+1)
   \   00000018   0xBD00             POP      {PC}             ;; return
   1688          }
   1689          
   1690          
   1691          /********************************************************************/
   1692          /*!
   1693           * \name	man_msg_check_send_state
   1694           * \brief	送信状態を確認する
   1695           * \param	なし
   1696           * \return  0 : 送信状態以外
   1697           *          1 : 送信状態
   1698           * \note	必要時に、呼ばれること
   1699           */
   1700          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1701          int32_t man_msg_check_send_state( void )
   1702          {
   \                     man_msg_check_send_state: (+1)
   \   00000000   0xB500             PUSH     {LR}
   1703          	int32_t		ret=0;
   \   00000002   0x2000             MOVS     R0,#+0
   1704          	
   1705          	switch (man_msg_work.seq) {
   \   00000004   0x....             LDR      R1,??DataTable23
   \   00000006   0x7809             LDRB     R1,[R1, #+0]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0x2901             CMP      R1,#+1
   \   0000000C   0xD90F             BLS      ??man_msg_check_send_state_0
   \   0000000E   0x1E89             SUBS     R1,R1,#+2
   \   00000010   0xD00E             BEQ      ??man_msg_check_send_state_1
   \   00000012   0x1E49             SUBS     R1,R1,#+1
   \   00000014   0xD00B             BEQ      ??man_msg_check_send_state_0
   \   00000016   0x1E49             SUBS     R1,R1,#+1
   \   00000018   0x2904             CMP      R1,#+4
   \   0000001A   0xD909             BLS      ??man_msg_check_send_state_1
   \   0000001C   0x1F49             SUBS     R1,R1,#+5
   \   0000001E   0x2907             CMP      R1,#+7
   \   00000020   0xD908             BLS      ??man_msg_check_send_state_2
   \   00000022   0x3908             SUBS     R1,R1,#+8
   \   00000024   0x2901             CMP      R1,#+1
   \   00000026   0xD906             BLS      ??man_msg_check_send_state_3
   \   00000028   0x1E89             SUBS     R1,R1,#+2
   \   0000002A   0xD006             BEQ      ??man_msg_check_send_state_4
   \   0000002C   0xE005             B        ??man_msg_check_send_state_5
   1706          	case MAN_MSG_SEQ_READY:						// 00 : 待ち状態
   1707          	case MAN_MSG_SEQ_OPEN_REQ:					// 01 : HTTP接続開始要求
   1708          	case MAN_MSG_SEQ_OPEN_OK_CHK:				// 03 : OPEN_OK チェック(RPTの状態を確認する)
   1709          		break;
   \                     ??man_msg_check_send_state_0: (+1)
   \   0000002E   0xE004             B        ??man_msg_check_send_state_5
   1710          
   1711          	case MAN_MSG_SEQ_OPEN:						// 02 : HTTP接続開始状態
   1712          	case MAN_MSG_SEQ_OPEN_OK:					// 03 : HTTP接続完了状態
   1713          	case MAN_MSG_SEQ_SEND1_REQ:					// 04 : HTTP送信1開始状態
   1714          	case MAN_MSG_SEQ_SEND1_OK:					// 05 : HTTP送信1完了状態
   1715          	case MAN_MSG_SEQ_SEND2_REQ:					// 06 : HTTP送信2開始状態
   1716          	case MAN_MSG_SEQ_SEND2_OK:					// 07 : HTTP送信2完了状態
   1717          		ret=1;
   \                     ??man_msg_check_send_state_1: (+1)
   \   00000030   0x2001             MOVS     R0,#+1
   1718          		break;
   \   00000032   0xE002             B        ??man_msg_check_send_state_5
   1719          	case MAN_MSG_SEQ_CLOSE_WAIT_REQ:			// 08 : HTTP切断開始10秒待ち要求
   1720          	case MAN_MSG_SEQ_CLOSE_WAIT:				// 09 : HTTP切断開始10秒待ち
   1721          	case MAN_MSG_SEQ_CLOSE_WAIT_OK:				// 10 : HTTP切断開始10秒待ち完了
   1722          	case MAN_MSG_SEQ_CLOSE_WAIT_NG:				// 11 : HTTP切断開始10秒待ち完了
   1723          	case MAN_MSG_SEQ_CLOSE_REQ:					// 12 : HTTP切断開始状態
   1724          	case MAN_MSG_SEQ_CLOSE_OK:					// 13 : HTTP切断受付状態
   1725          	case MAN_MSG_SEQ_OPEN_NG:					// 14 : HTTP接続異常状態
   1726          	case MAN_MSG_SEQ_OPEN_NG_WAIT:				// 15 : HTTP接続異常安定待ち状態
   1727          		break;
   \                     ??man_msg_check_send_state_2: (+1)
   \   00000034   0xE001             B        ??man_msg_check_send_state_5
   1728          	case MAN_MSG_SEQ_SEND1_NG:					// 16 : HTTP送信1完了状態
   1729          	case MAN_MSG_SEQ_SEND2_NG:					// 17 : HTTP送信2完了状態
   1730          		ret=1;
   \                     ??man_msg_check_send_state_3: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   1731          		break;
   \   00000038   0xE7FF             B        ??man_msg_check_send_state_5
   1732          	case MAN_MSG_SEQ_CLOSE_NG:					// 18 : HTTP切断受付状態
   1733          		break;
   1734          	}
   1735          	
   1736          	return ret;
   \                     ??man_msg_check_send_state_4: (+1)
   \                     ??man_msg_check_send_state_5: (+1)
   \   0000003A   0xBD00             POP      {PC}             ;; return
   1737          }
   1738          
   1739          
   1740          /********************************************************************/
   1741          /*!
   1742           * \name	man_msg_check_led_send_state
   1743          * \brief	送信状態を確認する(LED用)
   1744           * \param	なし
   1745           * \return  0 : 送信状態以外
   1746           *          1 : 送信状態
   1747           * \note	必要時に、呼ばれること
   1748           */
   1749          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1750          int32_t man_msg_check_led_send_state( void )
   1751          {
   \                     man_msg_check_led_send_state: (+1)
   \   00000000   0xB500             PUSH     {LR}
   1752          	int32_t		ret=0;
   \   00000002   0x2000             MOVS     R0,#+0
   1753          	
   1754          	switch (man_msg_work.seq) {
   \   00000004   0x....             LDR      R1,??DataTable23
   \   00000006   0x7809             LDRB     R1,[R1, #+0]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0x2904             CMP      R1,#+4
   \   0000000C   0xD90B             BLS      ??man_msg_check_led_send_state_0
   \   0000000E   0x1F49             SUBS     R1,R1,#+5
   \   00000010   0x2903             CMP      R1,#+3
   \   00000012   0xD909             BLS      ??man_msg_check_led_send_state_1
   \   00000014   0x1F09             SUBS     R1,R1,#+4
   \   00000016   0x2907             CMP      R1,#+7
   \   00000018   0xD908             BLS      ??man_msg_check_led_send_state_2
   \   0000001A   0x3908             SUBS     R1,R1,#+8
   \   0000001C   0x2901             CMP      R1,#+1
   \   0000001E   0xD906             BLS      ??man_msg_check_led_send_state_3
   \   00000020   0x1E89             SUBS     R1,R1,#+2
   \   00000022   0xD006             BEQ      ??man_msg_check_led_send_state_4
   \   00000024   0xE005             B        ??man_msg_check_led_send_state_5
   1755          	case MAN_MSG_SEQ_READY:						// 00 : 待ち状態
   1756          	case MAN_MSG_SEQ_OPEN_REQ:					// 01 : HTTP接続開始要求
   1757          	case MAN_MSG_SEQ_OPEN_OK_CHK:				// 03 : OPEN_OK チェック(RPTの状態を確認する)
   1758          	case MAN_MSG_SEQ_OPEN:						// 02 : HTTP接続開始状態
   1759          	case MAN_MSG_SEQ_OPEN_OK:					// 03 : HTTP接続完了状態
   1760          		break;
   \                     ??man_msg_check_led_send_state_0: (+1)
   \   00000026   0xE004             B        ??man_msg_check_led_send_state_5
   1761          	case MAN_MSG_SEQ_SEND1_REQ:					// 04 : HTTP送信1開始状態
   1762          	case MAN_MSG_SEQ_SEND1_OK:					// 05 : HTTP送信1完了状態
   1763          	case MAN_MSG_SEQ_SEND2_REQ:					// 06 : HTTP送信2開始状態
   1764          	case MAN_MSG_SEQ_SEND2_OK:					// 07 : HTTP送信2完了状態
   1765          		ret=1;
   \                     ??man_msg_check_led_send_state_1: (+1)
   \   00000028   0x2001             MOVS     R0,#+1
   1766          		break;
   \   0000002A   0xE002             B        ??man_msg_check_led_send_state_5
   1767          	case MAN_MSG_SEQ_CLOSE_WAIT_REQ:			// 08 : HTTP切断開始10秒待ち要求
   1768          	case MAN_MSG_SEQ_CLOSE_WAIT:				// 09 : HTTP切断開始10秒待ち
   1769          	case MAN_MSG_SEQ_CLOSE_WAIT_OK:				// 10 : HTTP切断開始10秒待ち完了
   1770          	case MAN_MSG_SEQ_CLOSE_WAIT_NG:				// 11 : HTTP切断開始10秒待ち完了
   1771          	case MAN_MSG_SEQ_CLOSE_REQ:					// 12 : HTTP切断開始状態
   1772          	case MAN_MSG_SEQ_CLOSE_OK:					// 13 : HTTP切断受付状態
   1773          	case MAN_MSG_SEQ_OPEN_NG:					// 14 : HTTP接続異常状態
   1774          	case MAN_MSG_SEQ_OPEN_NG_WAIT:				// 15 : HTTP接続異常安定待ち状態
   1775          		break;
   \                     ??man_msg_check_led_send_state_2: (+1)
   \   0000002C   0xE001             B        ??man_msg_check_led_send_state_5
   1776          	case MAN_MSG_SEQ_SEND1_NG:					// 16 : HTTP送信1完了状態
   1777          	case MAN_MSG_SEQ_SEND2_NG:					// 17 : HTTP送信2完了状態
   1778          		ret=1;
   \                     ??man_msg_check_led_send_state_3: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   1779          		break;
   \   00000030   0xE7FF             B        ??man_msg_check_led_send_state_5
   1780          	case MAN_MSG_SEQ_CLOSE_NG:					// 18 : HTTP切断受付状態
   1781          		break;
   1782          	}
   1783          	
   1784          	return ret;
   \                     ??man_msg_check_led_send_state_4: (+1)
   \                     ??man_msg_check_led_send_state_5: (+1)
   \   00000032   0xBD00             POP      {PC}             ;; return
   1785          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     man_msg_work+0x53B4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     man_msg_work+0x53B8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     man_msg_work+0x53BC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     man_msg_work+0x53B0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     man_msg_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     man_msg_work+0x64BC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x00006458         DC32     0x6458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     man_msg_work+0x47B4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     man_msg_work+0x544C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     man_msg_work+0xC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x000047A8         DC32     0x47a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x000047A4         DC32     0x47a4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x000002BD         DC32     0x2bd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x000005F4         DC32     0x5f4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x00000579         DC32     0x579

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0xFFFFFD44         DC32     0xfffffd44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x00000337         DC32     0x337

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     man_msg_work+0x55E8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     man_msg_work+0x5920

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     man_msg_work+0x5450

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     man_msg_work+0x551C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x00000335         DC32     0x335

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x........         DC32     man_msg_req_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x00004E20         DC32     0x4e20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x........         DC32     man_msg_work+0x5438

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x........         DC32     man_msg_work+0x5434

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x........         DC32     man_msg_work+0x5430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x00006524         DC32     0x6524

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x........         DC32     man_msg_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x000003E9         DC32     0x3e9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     man_msg_work+0x5428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     man_msg_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     man_msg_req_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x4020000A         DC32     0x4020000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     man_msg_work+0x543C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x00007530         DC32     0x7530

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x402003E8         DC32     0x402003e8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     man_msg_work+0x53B0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x00002710         DC32     0x2710

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     man_msg_work+0x4DB4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x........         DC32     man_msg_work+0x47B8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     man_msg_work+0x4DB8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x........         DC32     man_msg_work+0x6058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   0x........         DC32     man_msg_work+0x6054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     man_msg_work+0xC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     man_msg_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x00000572         DC32     0x572

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x........         DC32     man_msg_work+0x5C58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0x000047A4         DC32     0x47a4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x........         DC32     man_msg_work+0x47B0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   0x000047A0         DC32     0x47a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x000047A8         DC32     0x47a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x00000BB8         DC32     0xbb8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x00000BBC         DC32     0xbbc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x00000BC4         DC32     0xbc4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \   00000000   0x00000B6C         DC32     0xb6c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_3:
   \   00000000   0x000005F4         DC32     0x5f4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0x........         DC32     man_msg_work+0x53B0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \   00000000   0x........         DC32     man_msg_work+0x5430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \   00000000   0x........         DC32     man_msg_work+0x5434

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_3:
   \   00000000   0x........         DC32     man_msg_work+0x5438

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_4:
   \   00000000   0x........         DC32     man_msg_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_5:
   \   00000000   0x........         DC32     man_msg_work+0x5440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_6:
   \   00000000   0x000003E7         DC32     0x3e7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_7:
   \   00000000   0x00000679         DC32     0x679

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_8:
   \   00000000   0x........         DC32     man_msg_work+0x543C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_9:
   \   00000000   0x........         DC32     man_msg_work+0x5444

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_10:
   \   00000000   0x........         DC32     man_msg_work+0x5448

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x25 0x64          DC8 25H, 64H, 3BH, 25H, 64H, 3BH, 25H, 64H
   \              0x3B 0x25    
   \              0x64 0x3B    
   \              0x25 0x64    
   \   00000008   0x3B 0x25          DC8 3BH, 25H, 64H, 3BH, 25H, 64H, 3BH, 25H
   \              0x64 0x3B    
   \              0x25 0x64    
   \              0x3B 0x25    
   \   00000010   0x64 0x3B          DC8 64H, 3BH, 25H, 64H, 3BH, 25H, 64H, 3BH
   \              0x25 0x64    
   \              0x3B 0x25    
   \              0x64 0x3B    
   \   00000018   0x25 0x64          DC8 25H, 64H, 3BH, 25H, 64H, 3BH, 25H, 64H
   \              0x3B 0x25    
   \              0x64 0x3B    
   \              0x25 0x64    
   \   00000020   0x3B 0x25          DC8 3BH, 25H, 64H, 3BH, 25H, 64H, 2EH, 25H
   \              0x64 0x3B    
   \              0x25 0x64    
   \              0x2E 0x25    
   \   00000028   0x30 0x32          DC8 30H, 32H, 64H, 3BH, 25H, 64H, 3BH, 25H
   \              0x64 0x3B    
   \              0x25 0x64    
   \              0x3B 0x25    
   \   00000030   0x64 0x3B          DC8 64H, 3BH, 30H, 2EH, 30H, 30H, 3BH, 25H
   \              0x30 0x2E    
   \              0x30 0x30    
   \              0x3B 0x25    
   \   00000038   0x64 0x3B          DC8 64H, 3BH, 25H, 64H, 3BH, 0
   \              0x25 0x64    
   \              0x3B 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x47 0x70          DC8 47H, 70H, 73H, 53H, 6CH, 70H, 74H, 6DH
   \              0x73 0x53    
   \              0x6C 0x70    
   \              0x74 0x6D    
   \   00000008   0x28 0x25          DC8 28H, 25H, 64H, 2CH, 25H, 64H, 2CH, 25H
   \              0x64 0x2C    
   \              0x25 0x64    
   \              0x2C 0x25    
   \   00000010   0x64 0x29          DC8 64H, 29H, 53H, 65H, 72H, 76H, 65H, 72H
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \   00000018   0x28 0x25          DC8 28H, 25H, 73H, 29H, 41H, 70H, 6EH, 28H
   \              0x73 0x29    
   \              0x41 0x70    
   \              0x6E 0x28    
   \   00000020   0x25 0x73          DC8 25H, 73H, 29H, 55H, 73H, 65H, 4EH, 6DH
   \              0x29 0x55    
   \              0x73 0x65    
   \              0x4E 0x6D    
   \   00000028   0x28 0x25          DC8 28H, 25H, 73H, 29H, 50H, 61H, 73H, 73H
   \              0x73 0x29    
   \              0x50 0x61    
   \              0x73 0x73    
   \   00000030   0x77 0x28          DC8 77H, 28H, 2AH, 2AH, 2AH, 2AH, 29H, 54H
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x29 0x54    
   \   00000038   0x63 0x70          DC8 63H, 70H, 50H, 6FH, 72H, 74H, 28H, 25H
   \              0x50 0x6F    
   \              0x72 0x74    
   \              0x28 0x25    
   \   00000040   0x73 0x29          DC8 73H, 29H, 55H, 64H, 70H, 50H, 6FH, 72H
   \              0x55 0x64    
   \              0x70 0x50    
   \              0x6F 0x72    
   \   00000048   0x74 0x28          DC8 74H, 28H, 25H, 73H, 29H, 56H, 6FH, 54H
   \              0x25 0x73    
   \              0x29 0x56    
   \              0x6F 0x54    
   \   00000050   0x68 0x72          DC8 68H, 72H, 28H, 25H, 64H, 25H, 25H, 2CH
   \              0x28 0x25    
   \              0x64 0x25    
   \              0x25 0x2C    
   \   00000058   0x25 0x64          DC8 25H, 64H, 25H, 25H, 2CH, 25H, 64H, 25H
   \              0x25 0x25    
   \              0x2C 0x25    
   \              0x64 0x25    
   \   00000060   0x25 0x29          DC8 25H, 29H, 53H, 65H, 6EH, 73H, 6FH, 72H
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \   00000068   0x28 0x25          DC8 28H, 25H, 64H, 29H, 41H, 6CH, 61H, 72H
   \              0x64 0x29    
   \              0x41 0x6C    
   \              0x61 0x72    
   \   00000070   0x6D 0x74          DC8 6DH, 74H, 6DH, 28H, 25H, 64H, 29H, 43H
   \              0x6D 0x28    
   \              0x25 0x64    
   \              0x29 0x43    
   \   00000078   0x6B 0x73          DC8 6BH, 73H, 67H, 74H, 6DH, 28H, 25H, 64H
   \              0x67 0x74    
   \              0x6D 0x28    
   \              0x25 0x64    
   \   00000080   0x29 0x50          DC8 29H, 50H, 6BH, 64H, 75H, 61H, 72H, 28H
   \              0x6B 0x64    
   \              0x75 0x61    
   \              0x72 0x28    
   \   00000088   0x25 0x64          DC8 25H, 64H, 29H, 56H, 65H, 72H, 73H, 69H
   \              0x29 0x56    
   \              0x65 0x72    
   \              0x73 0x69    
   \   00000090   0x6F 0x6E          DC8 6FH, 6EH, 28H, 25H, 73H, 29H, 47H, 56H
   \              0x28 0x25    
   \              0x73 0x29    
   \              0x47 0x56    
   \   00000098   0x65 0x72          DC8 65H, 72H, 73H, 69H, 6FH, 6EH, 28H, 25H
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x28 0x25    
   \   000000A0   0x73 0x29          DC8 73H, 29H, 4CH, 56H, 65H, 72H, 73H, 69H
   \              0x4C 0x56    
   \              0x65 0x72    
   \              0x73 0x69    
   \   000000A8   0x6F 0x6E          DC8 6FH, 6EH, 28H, 25H, 73H, 29H, 41H, 6CH
   \              0x28 0x25    
   \              0x73 0x29    
   \              0x41 0x6C    
   \   000000B0   0x61 0x72          DC8 61H, 72H, 6DH, 54H, 66H, 74H, 6DH, 28H
   \              0x6D 0x54    
   \              0x66 0x74    
   \              0x6D 0x28    
   \   000000B8   0x25 0x64          DC8 25H, 64H, 29H, 0
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x4C 0x54          DC8 4CH, 54H, 45H, 31H, 3BH, 25H, 64H, 3BH
   \              0x45 0x31    
   \              0x3B 0x25    
   \              0x64 0x3B    
   \   00000008   0x25 0x64          DC8 25H, 64H, 3BH, 25H, 73H, 3BH, 25H, 73H
   \              0x3B 0x25    
   \              0x73 0x3B    
   \              0x25 0x73    
   \   00000010   0x3B 0x25          DC8 3BH, 25H, 64H, 3BH, 25H, 64H, 3BH, 25H
   \              0x64 0x3B    
   \              0x25 0x64    
   \              0x3B 0x25    
   \   00000018   0x64 0x25          DC8 64H, 25H, 25H, 3BH, 25H, 64H, 25H, 25H
   \              0x25 0x3B    
   \              0x25 0x64    
   \              0x25 0x25    
   \   00000020   0x3B 0x25          DC8 3BH, 25H, 64H, 3BH, 25H, 30H, 32H, 64H
   \              0x64 0x3B    
   \              0x25 0x30    
   \              0x32 0x64    
   \   00000028   0x25 0x30          DC8 25H, 30H, 32H, 64H, 25H, 30H, 32H, 64H
   \              0x32 0x64    
   \              0x25 0x30    
   \              0x32 0x64    
   \   00000030   0x25 0x30          DC8 25H, 30H, 32H, 64H, 25H, 30H, 32H, 64H
   \              0x32 0x64    
   \              0x25 0x30    
   \              0x32 0x64    
   \   00000038   0x25 0x30          DC8 25H, 30H, 32H, 64H, 3BH, 25H, 64H, 3BH
   \              0x32 0x64    
   \              0x3B 0x25    
   \              0x64 0x3B    
   \   00000040   0x00               DC8 0
   \   00000041   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   1786          
   1787          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   man_msg_check_led_send_state
       4   man_msg_check_msg
       4   man_msg_check_send_state
       4   man_msg_chk_status_send
       4   man_msg_chk_status_stby
       4   man_msg_del_save
      16   man_msg_get_save
        16   -> __aeabi_memcpy4
       8   man_msg_init
         8   -> __aeabi_memset
         8   -> man_http_client_state
      16   man_msg_main
        16   -> __aeabi_memcpy4
        16   -> man_data_get_sensor
        16   -> man_dbglog_setting
        16   -> man_error_set
        16   -> man_http_client_close
        16   -> man_http_client_open
        16   -> man_http_get_status
        16   -> man_msg_check_msg
        16   -> man_msg_del_save
        16   -> man_msg_get_save
        16   -> man_msg_make_message
        16   -> man_msg_return_callback
        16   -> man_msg_send_message
        16   -> man_msg_set_mode_seq
        16   -> man_rpt_check_send_state
        16   -> man_timer_cancel_wait
        16   -> man_timer_get_1ms_count
        16   -> man_timer_get_elapsed_time
        16   -> man_timer_start_wait
        16   -> man_usb_data_send
      88   man_msg_make_info_sensor
        88   -> __aeabi_memcpy
        88   -> __aeabi_memset
        88   -> man_error_set
        88   -> sprintf
        88   -> strlen
        88 __aeabi_idiv
        88 __aeabi_idivmod
     104   man_msg_make_info_setting
       104   -> man_data_get_fixed
       104   -> man_data_get_other
       104   -> man_data_get_setting_alarmtime
       104   -> man_data_get_setting_gprs
       104   -> man_data_get_setting_gpssleeptime
       104   -> man_data_get_setting_other
       104   -> man_data_get_setting_sensor
       104   -> sprintf
       104   -> strlen
      96   man_msg_make_message
        96   -> __aeabi_memcpy
        96   -> gm_time
        96   -> man_data_get_other
        96   -> man_msg_make_info_sensor
        96   -> man_msg_make_info_setting
        96   -> sprintf
        96   -> strlen
       4   man_msg_noti_error
       0   man_msg_req_callback
       0   man_msg_req_send_start
       0   man_msg_req_send_stop
       4   man_msg_req_start
       8   man_msg_req_state
         8   -> man_error_set
         8   -> man_net_req_reset
       4   man_msg_req_stop
       8   man_msg_return_callback
         8   -- Indirect call
      16   man_msg_send_message
        16   -> man_http_client_send_recv
       8   man_msg_set_mode_seq
         8   -> man_dbglog_setting
      24   man_msg_set_type
        24   -> __aeabi_memcpy
        24   -> __aeabi_memcpy4
        24   -> __aeabi_memset
        24   -> man_data_get_other
        24   -> man_data_get_sensor
        24   -> man_error_set
        24   -> man_msg_del_save
        24   -> man_rtc_get_clock
      16   man_msg_set_usb_type
        16   -> __aeabi_memcpy
        16   -> __aeabi_memset
        16   -> man_battery_get_data
        16   -> man_data_get_other
        16   -> man_gyro_get_data
        16   -> man_press_get_data
        16   -> man_rtc_get_clock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable14
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable16
       4  ??DataTable17
       4  ??DataTable18
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_2
       4  ??DataTable19_3
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_2
       4  ??DataTable21_3
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_10
       4  ??DataTable23_2
       4  ??DataTable23_3
       4  ??DataTable23_4
       4  ??DataTable23_5
       4  ??DataTable23_6
       4  ??DataTable23_7
       4  ??DataTable23_8
       4  ??DataTable23_9
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable8
       4  ??DataTable8_1
      64  ?_0
     188  ?_1
      68  ?_2
      52  man_msg_check_led_send_state
      24  man_msg_check_msg
      60  man_msg_check_send_state
      34  man_msg_chk_status_send
      26  man_msg_chk_status_stby
      56  man_msg_del_save
      50  man_msg_get_save
      24  man_msg_init
    2166  man_msg_main
     304  man_msg_make_info_sensor
     164  man_msg_make_info_setting
     516  man_msg_make_message
      26  man_msg_noti_error
      18  man_msg_req_callback
       8  man_msg_req_send_start
       8  man_msg_req_send_stop
      34  man_msg_req_start
      78  man_msg_req_state
      34  man_msg_req_stop
      36  man_msg_return_callback
      32  man_msg_send_message
      68  man_msg_set_mode_seq
     446  man_msg_set_type
     114  man_msg_set_usb_type
   25892  man_msg_work

 
 25 892 bytes in section .bss
    320 bytes in section .rodata
  4 662 bytes in section .text
 
  4 662 bytes of CODE  memory
    320 bytes of CONST memory
 25 892 bytes of DATA  memory

Errors: none
Warnings: none
