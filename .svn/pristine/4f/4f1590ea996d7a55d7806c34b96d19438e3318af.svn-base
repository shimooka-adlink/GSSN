///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM      17/May/2019  13:31:40
// Copyright 1999-2017 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\driver\i2c\drv_i2c_1.c
//    Command line =  
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\driver\i2c\drv_i2c_1.c -D
//        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_A -lCN
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
//        -lA
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
//        --diag_suppress Pe177,Pe111,Pa082 -o
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --no_clustering --no_scheduling --debug --endian=little
//        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
//        (x86)\IAR Systems\Embedded Workbench
//        7.5\arm\INC\c\DLib_Config_Normal.h" -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
//        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
//        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
//        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
//        -Ol
//    Locale       =  Japanese_Japan.932
//    List file    =  
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List\drv_i2c_1.s
//
///////////////////////////////////////////////////////////////////////////////

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__dlib_full_locale_support", "0"
        AAPCS BASE,INTERWORK
        PRESERVE8
        REQUIRE8

        #define SHT_PROGBITS 0x1

        EXTERN ConfigurePortsForI2C
        EXTERN I2C_CH1
        EXTERN __aeabi_memset
        EXTERN man_error_set
        EXTERN man_timer_get_1ms_count
        EXTERN man_timer_get_elapsed_time
        EXTERN seI2C_Disable
        EXTERN seI2C_Enable
        EXTERN seI2C_Init
        EXTERN seI2C_MstReceiveData
        EXTERN seI2C_MstSendData
        EXTERN sePPORT_InitAsInput

        PUBLIC i2c1_Disable
        PUBLIC i2c1_Enable
        PUBLIC i2c1_ReceiveData
        PUBLIC i2c1_SendData
        PUBLIC i2c1_end
        PUBLIC i2c1_init
        PUBLIC i2c1_re_start
        PUBLIC i2c1_timer_max
        
          CFI Names cfiNames0
          CFI StackFrame CFA R13 DATA
          CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
          CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, R13:32, R14:32
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 4
          CFI ReturnAddress R14 CODE
          CFI CFA R13+0
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 Undefined
          CFI R14 SameValue
          CFI EndCommon cfiCommon0
        
// C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\driver\i2c\drv_i2c_1.c
//    1 
//    2 /**
//    3   ******************************************************************************
//    4   * @file    drv_i2c_1.c
//    5   * @author  コア
//    6   * @version V1.0
//    7   * @date    2017.10.2
//    8   * @brief   P00, P01を使用してI2C Ch1 を制御をおこなう。
//    9   *          MASTERモード, 400000bpsで使用する。
//   10   ******************************************************************************
//   11   $Id: drv_i2c_1.c 182 2018-05-25 04:55:18Z shitaoka $
//   12   * @attention
//   13   *
//   14   *  PORT
//   15   *    P00        : SCL
//   16   *    P01        : SDA
//   17   *
//   18   *  I2C_mode     : seI2C_MODE_MASTER
//   19   *  transfer rate: 400000 bps
//   20   *
//   21   *****************************************************************************
//   22 */ 
//   23 
//   24 
//   25 #include <string.h>
//   26 #include <stdio.h>
//   27 #include <stdlib.h>
//   28 #include "board.h"
//   29 #include "system_manager.h"
//   30 #include "settings.h"
//   31 #include "se_clg.h"
//   32 #include "se_i2c.h"
//   33 #include "se_common.h"
//   34 #include "man_timer.h"
//   35 #include "man_error.h"
//   36 
//   37 #pragma section = "DRV_PRG_BLOCK"
//   38 
//   39 // I2Cライブラリの構造

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
//   40 static seI2C_InitTypeDef InitStruct;
InitStruct:
        DS8 12
//   41 
//   42 
//   43 #define	DRV_I2C_CH1_INIT_NON		0
//   44 #define	DRV_I2C_CH1_INIT_OK		1
//   45 
//   46 #define	DRV_I2C_CH1_DSABLE		0
//   47 #define	DRV_I2C_CH1_ENABLE		1
//   48 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
//   49 uint32_t	i2c1_timer_max;
i2c1_timer_max:
        DS8 4
//   50 
//   51 
//   52 
//   53 /********************************************************************/
//   54 /*!
//   55  * \name	i2c1_init
//   56  * \brief	I2C CH1 Driverの初期化
//   57  * \param	なし
//   58  * \return   0: 成功
//   59  *          -1: 失敗
//   60  * \note	
//   61  */
//   62 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function i2c1_init
        THUMB
//   63 int32_t i2c1_init( void ) 
//   64 {
i2c1_init:
        PUSH     {R3-R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
//   65 	seStatus	fStatus;  
//   66 	int32_t		ret=0;
        MOVS     R4,#+0
//   67 
//   68 	memset( &InitStruct, 0, sizeof( InitStruct ) );
        MOVS     R1,#+12
        MOVS     R2,#+0
        LDR      R5,??DataTable6
        MOVS     R0,R5
          CFI FunCall __aeabi_memset
        BL       __aeabi_memset
//   69 
//   70 	/* I2C 使用条件の設定 */
//   71 	InitStruct.I2C_mode		= seI2C_MODE_MASTER;
        MOVS     R0,#+1
        LDR      R1,??DataTable6
        STRB     R0,[R1, #+0]
//   72 #ifdef OSC3_ENABLE_
//   73 	InitStruct.ClkSrc		= seCLG_OSC3;
//   74 	InitStruct.ClkDivider	= seI2C_OSC3_CLKDIV_1;
//   75 	///< Set transfer rate( bps = CLK_I2C / (BRT + 3) x 2 ).
//   76 	///< 12MHz / (12+3) * 2 = 400000 bps.
//   77 	InitStruct.BRT			= 12;
//   78 #else
//   79 	InitStruct.ClkSrc		= seCLG_IOSC;
        MOVS     R0,#+0
        LDR      R1,??DataTable6
        STRB     R0,[R1, #+1]
//   80 	InitStruct.ClkDivider	= seI2C_IOSC_CLKDIV_4;
        MOVS     R0,#+2
        LDR      R1,??DataTable6
        STRH     R0,[R1, #+2]
//   81 	///< Set transfer rate( bps = CLK_I2C / (BRT + 3) x 2 ).
//   82 	///< 8.00MHz / 20 = 400000 bps.
//   83 	InitStruct.BRT			= 17;
        MOVS     R0,#+17
        LDR      R1,??DataTable6
        STRH     R0,[R1, #+4]
//   84 #endif
//   85 	/* I2C CH1 初期化 */
//   86 	fStatus = seI2C_Init( &I2C_CH1, &InitStruct );
        LDR      R1,??DataTable6
        LDR      R0,??DataTable6_1
          CFI FunCall seI2C_Init
        BL       seI2C_Init
//   87 
//   88 	if ( fStatus != seSTATUS_OK ) {
        UXTB     R0,R0
        CMP      R0,#+1
        BEQ      ??i2c1_init_0
//   89 		ret = -1;
        MOVS     R4,#+0
        MVNS     R4,R4            ;; #-1
//   90 	}
//   91 
//   92 	
//   93 	return ret;
??i2c1_init_0:
        MOVS     R0,R4
        POP      {R1,R4,R5,PC}    ;; return
//   94 }
          CFI EndBlock cfiBlock0
//   95 
//   96 /********************************************************************/
//   97 /*!
//   98  * \name	i2c1_end
//   99  * \brief	I2C CH1 Driverの使用終了
//  100  *            SCL, SDA端子をHi-Z stateとする
//  101  * \param	なし
//  102  * \return  なし
//  103  * \note	再開はi2c1_initから開始すること。
//  104  */
//  105 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function i2c1_end
        THUMB
//  106 void i2c1_end( void )
//  107 {
i2c1_end:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//  108 	// SCL端子をHi-Z stateとする
//  109 	sePPORT_InitAsInput( I2C_CH1.SCL.portID );
        LDR      R0,??DataTable6_1
        LDRB     R0,[R0, #+5]
          CFI FunCall sePPORT_InitAsInput
        BL       sePPORT_InitAsInput
//  110 	// SDA端子をHi-Z stateとする
//  111 	sePPORT_InitAsInput( I2C_CH1.SDA.portID );
        LDR      R0,??DataTable6_1
        LDRB     R0,[R0, #+8]
          CFI FunCall sePPORT_InitAsInput
        BL       sePPORT_InitAsInput
//  112 }
        POP      {R0,PC}          ;; return
          CFI EndBlock cfiBlock1
//  113 
//  114 /********************************************************************/
//  115 /*!
//  116  * \name	i2c1_re_start
//  117  * \brief	I2C CH1 Driverの使用再開
//  118  *            SCL, SDA端子を再設定する
//  119  * \param	なし
//  120  * \return  なし
//  121  * \note	i2c1_end後に呼ぶこと。
//  122  */
//  123 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function i2c1_re_start
        THUMB
//  124 void i2c1_re_start( void )
//  125 {
i2c1_re_start:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//  126 	ConfigurePortsForI2C(&I2C_CH1);
        LDR      R0,??DataTable6_1
          CFI FunCall ConfigurePortsForI2C
        BL       ConfigurePortsForI2C
//  127 }
        POP      {R0,PC}          ;; return
          CFI EndBlock cfiBlock2
//  128 
//  129 /********************************************************************/
//  130 /*!
//  131  * \name	i2c1_Enable
//  132  * \brief	I2C CH1 Driverを許可する
//  133  * \param	なし
//  134  * \return   0: 成功
//  135  *          -1: 失敗
//  136  * \note	なし
//  137  */
//  138 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function i2c1_Enable
        THUMB
//  139 int32_t i2c1_Enable( void ) 
//  140 {
i2c1_Enable:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
//  141 	seStatus	fStatus; 
//  142 	int32_t		ret=0;
        MOVS     R4,#+0
//  143 
//  144 	fStatus = seI2C_Enable( I2C_CH1.I2Cx );
        LDR      R0,??DataTable6_1
        LDR      R0,[R0, #+0]
          CFI FunCall seI2C_Enable
        BL       seI2C_Enable
//  145 
//  146 	if ( fStatus != seSTATUS_OK ) {
        UXTB     R0,R0
        CMP      R0,#+1
        BEQ      ??i2c1_Enable_0
//  147 		ret = -1;
        MOVS     R4,#+0
        MVNS     R4,R4            ;; #-1
//  148 	}
//  149 	
//  150 	return ret;
??i2c1_Enable_0:
        MOVS     R0,R4
        POP      {R4,PC}          ;; return
//  151 }
          CFI EndBlock cfiBlock3
//  152 
//  153 /********************************************************************/
//  154 /*!
//  155  * \name	i2c1_Disable
//  156  * \brief	I2C CH1 Driverを禁止する
//  157  * \param	なし
//  158  * \return   0: 成功
//  159  * \note	なし
//  160  */
//  161 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function i2c1_Disable
        THUMB
//  162 int32_t i2c1_Disable( void ) 
//  163 {
i2c1_Disable:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//  164 	seI2C_Disable( I2C_CH1.I2Cx ); 
        LDR      R0,??DataTable6_1
        LDR      R0,[R0, #+0]
          CFI FunCall seI2C_Disable
        BL       seI2C_Disable
//  165 
//  166 	return 0;
        MOVS     R0,#+0
        POP      {R1,PC}          ;; return
//  167 }
          CFI EndBlock cfiBlock4
//  168 
//  169 /********************************************************************/
//  170 /*!
//  171  * \name	i2c1_SendData
//  172  * \brief	I2C CH1 にデータを設定する
//  173  * \param	uint16_t  address      : SLAVE アドレス
//  174  *          uint8_t   data         : 送信データ
//  175  *          uint32_t  size         : 送信データ数
//  176  *          uint32_t  stop_pending : seDISABLE : STOP conditionなし
//  177  *                                   seENABLE  : STOP conditionあり
//  178  * \return   0: 成功
//  179  *          -1: 失敗
//  180  * \note	なし
//  181  */
//  182 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function i2c1_SendData
        THUMB
//  183 int32_t i2c1_SendData( uint16_t address, uint8_t *data, uint32_t size, uint32_t stop_pending )
//  184 {
i2c1_SendData:
        PUSH     {R1,R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        SUB      SP,SP,#+8
          CFI CFA R13+32
        MOVS     R4,R0
        MOVS     R7,R2
        MOVS     R6,R3
//  185 #if 0 //DEBUG
//  186         seStatus	fStatus; 
//  187 
//  188 	fStatus = seI2C_MstSendData( I2C_CH1.I2Cx, address, data, size, stop_pending );
//  189 
//  190 	if ( fStatus == seSTATUS_OK ) {
//  191 		return 0;
//  192 	}
//  193 	else {
//  194 		return -1;
//  195 	}
//  196 #else
//  197 	seStatus	fStatus; 
//  198 	uint32_t	timer_start;
//  199 	uint32_t	timer_end;
//  200 	uint32_t	timer_diff;
//  201 
//  202 
//  203 	timer_start = man_timer_get_1ms_count();
          CFI FunCall man_timer_get_1ms_count
        BL       man_timer_get_1ms_count
        MOVS     R5,R0
//  204 	fStatus = seI2C_MstSendData( I2C_CH1.I2Cx, address, data, size, stop_pending );
        STR      R6,[SP, #+0]
        MOVS     R3,R7
        LDR      R2,[SP, #+8]
        MOVS     R1,R4
        UXTH     R1,R1
        LDR      R0,??DataTable6_1
        LDR      R0,[R0, #+0]
          CFI FunCall seI2C_MstSendData
        BL       seI2C_MstSendData
        MOVS     R4,R0
//  205 	timer_end = man_timer_get_1ms_count();
          CFI FunCall man_timer_get_1ms_count
        BL       man_timer_get_1ms_count
//  206 
//  207 	if ( fStatus == seSTATUS_OK ) {
        UXTB     R4,R4
        CMP      R4,#+1
        BNE      ??i2c1_SendData_0
//  208 		return 0;
        MOVS     R0,#+0
        B        ??i2c1_SendData_1
//  209 	}
//  210 	else {
//  211 		timer_diff = man_timer_get_elapsed_time(timer_start, timer_end);
??i2c1_SendData_0:
        MOVS     R1,R0
        MOVS     R0,R5
          CFI FunCall man_timer_get_elapsed_time
        BL       man_timer_get_elapsed_time
        MOVS     R4,R0
//  212 		if (i2c1_timer_max < timer_diff) {
        LDR      R0,??DataTable6_2
        LDR      R0,[R0, #+0]
        CMP      R0,R4
        BCS      ??i2c1_SendData_2
//  213 			// エラー登録
//  214 			man_error_setting(MAN_ERROR_DRV_I2C1, i2c1_timer_max, timer_diff);
        MOVS     R3,#+214
        MOVS     R2,R4
        LDR      R0,??DataTable6_2
        LDR      R1,[R0, #+0]
        MOVS     R0,#+5
          CFI FunCall man_error_set
        BL       man_error_set
//  215 			i2c1_timer_max = timer_diff;
        LDR      R0,??DataTable6_2
        STR      R4,[R0, #+0]
//  216 		}
//  217 		return -1;
??i2c1_SendData_2:
        MOVS     R0,#+0
        MVNS     R0,R0            ;; #-1
??i2c1_SendData_1:
        POP      {R1-R7,PC}       ;; return
//  218 	}
//  219 #endif        
//  220 }
          CFI EndBlock cfiBlock5
//  221 
//  222  	
//  223 /********************************************************************/
//  224 /*!
//  225  * \name	i2c1_ReceiveData
//  226  * \brief	I2C CH1 からデータを取得する
//  227  * \param	uint16_t  address : SLAVE アドレス
//  228  *          uint8_t   data    : 受信データバッファ
//  229  *          uint32_t  size    : 受信データ数
//  230  *          uint32_t  stop_pending : seDISABLE : STOP conditionなし
//  231  *                                   seENABLE  : STOP conditionあり
//  232  * \return   0: 成功
//  233  *          -1: 失敗
//  234  * \note	なし
//  235  */
//  236 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function i2c1_ReceiveData
        THUMB
//  237 int32_t i2c1_ReceiveData(uint16_t address, uint8_t *data, uint32_t size, uint32_t stop_pending)
//  238 {
i2c1_ReceiveData:
        PUSH     {R1,R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        SUB      SP,SP,#+8
          CFI CFA R13+32
        MOVS     R4,R0
        MOVS     R7,R2
        MOVS     R6,R3
//  239 #if 0
//  240   seStatus	fStatus; 
//  241 
//  242 	fStatus = seI2C_MstReceiveData( I2C_CH1.I2Cx, address, data, size, stop_pending );
//  243 
//  244 	if ( fStatus == seSTATUS_OK ) {
//  245 		return 0;
//  246 	}
//  247 	else {
//  248 		return -1;
//  249 	}
//  250 #else
//  251         seStatus	fStatus; 
//  252 	uint32_t	timer_start;
//  253 	uint32_t	timer_end;
//  254 	uint32_t	timer_diff;
//  255 
//  256 	timer_start = man_timer_get_1ms_count();
          CFI FunCall man_timer_get_1ms_count
        BL       man_timer_get_1ms_count
        MOVS     R5,R0
//  257 	fStatus = seI2C_MstReceiveData( I2C_CH1.I2Cx, address, data, size, stop_pending );
        STR      R6,[SP, #+0]
        MOVS     R3,R7
        LDR      R2,[SP, #+8]
        MOVS     R1,R4
        UXTH     R1,R1
        LDR      R0,??DataTable6_1
        LDR      R0,[R0, #+0]
          CFI FunCall seI2C_MstReceiveData
        BL       seI2C_MstReceiveData
        MOVS     R4,R0
//  258 	timer_end = man_timer_get_1ms_count();
          CFI FunCall man_timer_get_1ms_count
        BL       man_timer_get_1ms_count
//  259 
//  260 	if ( fStatus == seSTATUS_OK ) {
        UXTB     R4,R4
        CMP      R4,#+1
        BNE      ??i2c1_ReceiveData_0
//  261 		return 0;
        MOVS     R0,#+0
        B        ??i2c1_ReceiveData_1
//  262 	}
//  263 	else {
//  264 		timer_diff = man_timer_get_elapsed_time(timer_start, timer_end);
??i2c1_ReceiveData_0:
        MOVS     R1,R0
        MOVS     R0,R5
          CFI FunCall man_timer_get_elapsed_time
        BL       man_timer_get_elapsed_time
        MOVS     R4,R0
//  265 		if (i2c1_timer_max < timer_diff) {
        LDR      R0,??DataTable6_2
        LDR      R0,[R0, #+0]
        CMP      R0,R4
        BCS      ??i2c1_ReceiveData_2
//  266 			// エラー登録
//  267 			man_error_setting(MAN_ERROR_DRV_I2C1, i2c1_timer_max, timer_diff);
        MOVS     R3,#+255
        ADDS     R3,R3,#+12       ;; #+267
        MOVS     R2,R4
        LDR      R0,??DataTable6_2
        LDR      R1,[R0, #+0]
        MOVS     R0,#+5
          CFI FunCall man_error_set
        BL       man_error_set
//  268 			i2c1_timer_max = timer_diff;
        LDR      R0,??DataTable6_2
        STR      R4,[R0, #+0]
//  269 		}
//  270 		return -1;
??i2c1_ReceiveData_2:
        MOVS     R0,#+0
        MVNS     R0,R0            ;; #-1
??i2c1_ReceiveData_1:
        POP      {R1-R7,PC}       ;; return
//  271 	}
//  272 #endif  
//  273 }
          CFI EndBlock cfiBlock6

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable6:
        DC32     InitStruct

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable6_1:
        DC32     I2C_CH1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable6_2:
        DC32     i2c1_timer_max

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION DRV_PRG_BLOCK:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
//  274 
//  275 
// 
//  16 bytes in section .bss
// 330 bytes in section .text
// 
// 330 bytes of CODE memory
//  16 bytes of DATA memory
//
//Errors: none
//Warnings: none
