###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       17/May/2019  13:31:42
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\main.c
#    Command line =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\main.c -D __TARGET_ARCH_7_M
#        -D S1C31W74 -D GNSS_GW_SIDE_A -lCN
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        -lA
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List\main.lst
#    Object file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj\main.o
#
###############################################################################

C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\main.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    main.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    2017.10.2
      8            * @brief   全体を管理する
      9            ******************************************************************************
     10            $Id: main.c 221 2018-07-17 06:38:06Z shitaoka $
     11            * @attention
     12            *
     13            *****************************************************************************
     14          */
     15          
     16          #include <string.h>
     17          #include <stdio.h>
     18          #include "board.h"
     19          
     20          #include "system_manager.h"
     21          #include "ctrl_CXD5600GF.h"
     22          #include "ctrl_MPL3115A2.h"
     23          #include "ctrl_SM7500JE.h"
     24          #include "mid_GPS.h"
     25          #include "mid_HTTP.h"
     26          #include "man_flash.h"
     27          #include "man_gps.h"
     28          #include "man_ope.h"
     29          #include "man_msg.h"
     30          #include "man_cmd.h"
     31          #include "man_data.h"
     32          #include "man_usb.h"
     33          #include "man_http.h"
     34          #include "man_net.h"
     35          #include "man_lte.h"
     36          #include "man_rpt.h"
     37          #include "man_timer.h"
     38          #include "man_press.h"
     39          #include "man_gyro.h"
     40          #include "man_rtc.h"
     41          #include "man_ota.h"
     42          #include "man_gpio.h"
     43          #include "man_error.h"
     44          #include "man_charge.h"
     45          #include "man_battery.h"
     46          #include "drv_uart2_0.h"
     47          #include "drv_uart2_1.h"
     48          #include "ctrl_I2C0.h"
     49          #include "ctrl_I2C1.h"
     50          #include "drv_i2c_0.h"
     51          #include "drv_i2c_1.h"
     52          #include "ctrl_GPIO.h"
     53          #include "ctrl_USB.h"
     54          #include "drv_rtc.h"
     55          #include "drv_wdt.h"
     56          #include "se_wdt2.h"
     57          #include "se_common.h"
     58          #include "se_pport.h"
     59          #include "drv_gpio.h"
     60          
     61          
     62          /************************************************************************/
     63          /* declaration of structure                                             */
     64          /************************************************************************/
     65          
     66          #define	MAIN_INIT_USB		0x00000001		// USB
     67          #define	MAIN_INIT_GPIO		0x00000002		// GPIO
     68          #define	MAIN_INIT_PRESS		0x00000004		// 高度・気温・気圧
     69          #define	MAIN_INIT_GYRO		0x00000008		// 角速度・加速度
     70          #define	MAIN_INIT_HTTP		0x00000010		// HTTP
     71          

   \                                 In section .bss, align 4
     72          system_mgr system_manager;
   \                     system_manager:
   \   00000000                      DS8 20
     73          
     74          /************************************************************************/
     75          /* definition of variables                                              */
     76          /************************************************************************/
     77          
     78          // メイン管理ワーク
     79          typedef struct _main_work_t {
     80          	uint32_t				init_exec;			// 実行した初期化
     81          	uint32_t				init_result;		// 初期化した結果
     82          
     83          	uint32_t				nmea_cnt;			// NMEA受信数
     84          } main_work_t;
     85          

   \                                 In section .bss, align 4
     86          main_work_t		main_work;
   \                     main_work:
   \   00000000                      DS8 12

   \                                 In section .bss, align 1
     87          seCLG_ClkSrc	ClkSrc;
   \                     ClkSrc:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     88          uint32_t		SysClk;
   \                     SysClk:
   \   00000000                      DS8 4
     89          
     90          #define SYSMGR_BUF_SIZE 9096

   \                                 In section .bss, align 4
     91          uint8_t sysmgr_buf[SYSMGR_BUF_SIZE];
   \                     sysmgr_buf:
   \   00000000                      DS8 9096
     92          
     93          typedef struct _sysmgr_log_t {
     94                  uint8_t  flag;
     95          	uint32_t readp;
     96          	uint32_t writep;
     97                  uint8_t  loop;
     98                  uint8_t  lock;
     99                  
    100          } sysmgr_log_t;
    101          

   \                                 In section .bss, align 4
    102          sysmgr_log_t sysmgr_log_tbl;
   \                     sysmgr_log_tbl:
   \   00000000                      DS8 16
    103          
    104          /********************************************************************/
    105          /*	callback関数                                                    */
    106          /********************************************************************/
    107          
    108          /********************************************************************/
    109          /*	static関数                                                      */
    110          /********************************************************************/
    111          extern int32_t man_http_update_date_time();
    112          #define SYSMGR_UPDATE_DATE_TIME_SEC (60*60*12)
    113          #define SYSMGR_UPDATE_DATE_TIME_ERROR 10
    114          

   \                                 In section .bss, align 4
    115          uint32_t sysmgr_update_date_time_val = 0;
   \                     sysmgr_update_date_time_val:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    116          uint32_t sysmgr_update_date_time_error = 0;
   \                     sysmgr_update_date_time_error:
   \   00000000                      DS8 4
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void sysmgr_manual_update_date_time()
    119          {
    120            sysmgr_update_date_time_val = SYSMGR_UPDATE_DATE_TIME_SEC;
   \                     sysmgr_manual_update_date_time: (+1)
   \   00000000   0x....             LDR      R0,??DataTable8  ;; 0xa8c0
   \   00000002   0x....             LDR      R1,??DataTable8_1
   \   00000004   0x6008             STR      R0,[R1, #+0]
    121          }
   \   00000006   0x4770             BX       LR               ;; return
    122          

   \                                 In section .text, align 2, keep-with-next
    123          void sysmgr_update_date_time()
    124          {
   \                     sysmgr_update_date_time: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    125            if(sysmgr_update_date_time_val++ < SYSMGR_UPDATE_DATE_TIME_SEC)
   \   00000002   0x....             LDR      R0,??DataTable8_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0001             MOVS     R1,R0
   \   00000008   0x1C49             ADDS     R1,R1,#+1
   \   0000000A   0x....             LDR      R2,??DataTable8_1
   \   0000000C   0x6011             STR      R1,[R2, #+0]
   \   0000000E   0x....             LDR      R1,??DataTable8  ;; 0xa8c0
   \   00000010   0x4288             CMP      R0,R1
   \   00000012   0xD31E             BCC      ??sysmgr_update_date_time_0
    126            {  
    127              return;
    128            }
    129            if(man_http_update_date_time() > 0 )
   \                     ??sysmgr_update_date_time_1: (+1)
   \   00000014   0x.... 0x....      BL       man_http_update_date_time
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xDB06             BLT      ??sysmgr_update_date_time_2
    130            {
    131              sysmgr_update_date_time_val = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x....             LDR      R1,??DataTable8_1
   \   00000020   0x6008             STR      R0,[R1, #+0]
    132              sysmgr_update_date_time_error = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR      R1,??DataTable8_2
   \   00000026   0x6008             STR      R0,[R1, #+0]
   \   00000028   0xE013             B        ??sysmgr_update_date_time_3
    133            }
    134            else
    135            {
    136              if(sysmgr_update_date_time_error++ <  SYSMGR_UPDATE_DATE_TIME_ERROR)
   \                     ??sysmgr_update_date_time_2: (+1)
   \   0000002A   0x....             LDR      R0,??DataTable8_2
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x0001             MOVS     R1,R0
   \   00000030   0x1C49             ADDS     R1,R1,#+1
   \   00000032   0x....             LDR      R2,??DataTable8_2
   \   00000034   0x6011             STR      R1,[R2, #+0]
   \   00000036   0x280A             CMP      R0,#+10
   \   00000038   0xD205             BCS      ??sysmgr_update_date_time_4
    137              {
    138                sysmgr_update_date_time_val -= 10;
   \   0000003A   0x....             LDR      R0,??DataTable8_1
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x380A             SUBS     R0,R0,#+10
   \   00000040   0x....             LDR      R1,??DataTable8_1
   \   00000042   0x6008             STR      R0,[R1, #+0]
   \   00000044   0xE005             B        ??sysmgr_update_date_time_3
    139              }
    140              else
    141              {
    142                sysmgr_update_date_time_val = 0;
   \                     ??sysmgr_update_date_time_4: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x....             LDR      R1,??DataTable8_1
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    143                sysmgr_update_date_time_error = 0;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x....             LDR      R1,??DataTable8_2
   \   00000050   0x6008             STR      R0,[R1, #+0]
    144              }
    145            }
    146          }
   \                     ??sysmgr_update_date_time_3: (+1)
   \                     ??sysmgr_update_date_time_0: (+1)
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
    147          

   \                                 In section .text, align 2, keep-with-next
    148          void sysmgr_log_enable()
    149          {
   \                     sysmgr_log_enable: (+1)
   \   00000000   0xB500             PUSH     {LR}
    150            if(sysmgr_log_tbl.flag==0)
   \   00000002   0x....             LDR      R0,??DataTable9
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD103             BNE      ??sysmgr_log_enable_0
    151            {
    152              sysmgr_log_tbl.flag=1;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x....             LDR      R1,??DataTable9
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
   \   00000010   0xE002             B        ??sysmgr_log_enable_1
    153            }
    154            else
    155            {
    156                 sysmgr_log_tbl.flag=0;
   \                     ??sysmgr_log_enable_0: (+1)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR      R1,??DataTable9
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    157            }
    158          }
   \                     ??sysmgr_log_enable_1: (+1)
   \   00000018   0xBD00             POP      {PC}             ;; return
    159          

   \                                 In section .text, align 2, keep-with-next
    160          void sysmgr_buf_lock(int8_t flag)
    161          {
    162              sysmgr_log_tbl.lock=flag;
   \                     sysmgr_buf_lock: (+1)
   \   00000000   0x....             LDR      R1,??DataTable9
   \   00000002   0x7348             STRB     R0,[R1, #+13]
    163          }
   \   00000004   0x4770             BX       LR               ;; return
    164          

   \                                 In section .text, align 2, keep-with-next
    165          void sysmgr_log(char *data,int len)
    166          {
   \                     sysmgr_log: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
    167             int log_len=len;
   \   00000008   0x0026             MOVS     R6,R4
    168             int buf_len;
    169             char timebuf[30];
    170             clock_info_t clock;
    171            if( sysmgr_log_tbl.lock == 1)
   \   0000000A   0x....             LDR      R0,??DataTable9
   \   0000000C   0x7B40             LDRB     R0,[R0, #+13]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD064             BEQ      ??sysmgr_log_0
    172             {
    173               return;
    174             }
    175            if((usb_log_flag & LOG_FLAG_NO_USB_OUTPUT) == 0)
   \                     ??sysmgr_log_1: (+1)
   \   00000012   0x....             LDR      R0,??DataTable9_1
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD403             BMI      ??sysmgr_log_2
    176            {
    177             man_usb_data_send((uint8_t *)data,len);
   \   0000001A   0x0021             MOVS     R1,R4
   \   0000001C   0x0028             MOVS     R0,R5
   \   0000001E   0x.... 0x....      BL       man_usb_data_send
    178            }
    179             if(len > 1)
   \                     ??sysmgr_log_2: (+1)
   \   00000022   0x2C02             CMP      R4,#+2
   \   00000024   0xDB37             BLT      ??sysmgr_log_3
    180             {
    181                rtc_get_clock( &clock );
   \   00000026   0xA804             ADD      R0,SP,#+16
   \   00000028   0x.... 0x....      BL       rtc_get_clock
    182                buf_len=sprintf(timebuf,"[%02d/%02d/%02d %02d:%02d:%02d ]",
    183                     clock.year,
    184                     clock.month,
    185                     clock.day,
    186                     clock.hour,
    187                     clock.minute,
    188                     clock.seconds);
   \   0000002C   0xA804             ADD      R0,SP,#+16
   \   0000002E   0x2105             MOVS     R1,#+5
   \   00000030   0x5640             LDRSB    R0,[R0, R1]
   \   00000032   0x9003             STR      R0,[SP, #+12]
   \   00000034   0xA804             ADD      R0,SP,#+16
   \   00000036   0x2104             MOVS     R1,#+4
   \   00000038   0x5640             LDRSB    R0,[R0, R1]
   \   0000003A   0x9002             STR      R0,[SP, #+8]
   \   0000003C   0xA804             ADD      R0,SP,#+16
   \   0000003E   0x2103             MOVS     R1,#+3
   \   00000040   0x5640             LDRSB    R0,[R0, R1]
   \   00000042   0x9001             STR      R0,[SP, #+4]
   \   00000044   0xA804             ADD      R0,SP,#+16
   \   00000046   0x2102             MOVS     R1,#+2
   \   00000048   0x5640             LDRSB    R0,[R0, R1]
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0xA804             ADD      R0,SP,#+16
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0x5643             LDRSB    R3,[R0, R1]
   \   00000052   0x4669             MOV      R1,SP
   \   00000054   0x2010             MOVS     R0,#+16
   \   00000056   0x560A             LDRSB    R2,[R1, R0]
   \   00000058   0x....             LDR      R1,??DataTable9_2
   \   0000005A   0xA806             ADD      R0,SP,#+24
   \   0000005C   0x.... 0x....      BL       sprintf
    189                for(int i=0;i<buf_len;i++)
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0xE016             B        ??sysmgr_log_4
    190                {
    191                    if(sysmgr_log_tbl.writep >= SYSMGR_BUF_SIZE)
   \                     ??sysmgr_log_5: (+1)
   \   00000064   0x....             LDR      R2,??DataTable9
   \   00000066   0x6892             LDR      R2,[R2, #+8]
   \   00000068   0x....             LDR      R3,??DataTable9_3  ;; 0x2388
   \   0000006A   0x429A             CMP      R2,R3
   \   0000006C   0xD305             BCC      ??sysmgr_log_6
    192                    {
    193                      sysmgr_log_tbl.writep=0;
   \   0000006E   0x2200             MOVS     R2,#+0
   \   00000070   0x....             LDR      R3,??DataTable9
   \   00000072   0x609A             STR      R2,[R3, #+8]
    194                      sysmgr_log_tbl.loop=1;
   \   00000074   0x2201             MOVS     R2,#+1
   \   00000076   0x....             LDR      R3,??DataTable9
   \   00000078   0x731A             STRB     R2,[R3, #+12]
    195                    }
    196                    sysmgr_buf[sysmgr_log_tbl.writep] = timebuf[i];
   \                     ??sysmgr_log_6: (+1)
   \   0000007A   0xAA06             ADD      R2,SP,#+24
   \   0000007C   0x5C57             LDRB     R7,[R2, R1]
   \   0000007E   0x....             LDR      R2,??DataTable9_4
   \   00000080   0x....             LDR      R3,??DataTable9
   \   00000082   0x689B             LDR      R3,[R3, #+8]
   \   00000084   0x54D7             STRB     R7,[R2, R3]
    197                    sysmgr_log_tbl.writep++;
   \   00000086   0x....             LDR      R2,??DataTable9
   \   00000088   0x6892             LDR      R2,[R2, #+8]
   \   0000008A   0x1C52             ADDS     R2,R2,#+1
   \   0000008C   0x....             LDR      R3,??DataTable9
   \   0000008E   0x609A             STR      R2,[R3, #+8]
    198                }
   \   00000090   0x1C49             ADDS     R1,R1,#+1
   \                     ??sysmgr_log_4: (+1)
   \   00000092   0x4281             CMP      R1,R0
   \   00000094   0xDBE6             BLT      ??sysmgr_log_5
    199             }
    200             if(len >100)
   \                     ??sysmgr_log_3: (+1)
   \   00000096   0x2C65             CMP      R4,#+101
   \   00000098   0xDB06             BLT      ??sysmgr_log_7
    201             {
    202               log_len=100;
   \   0000009A   0x2664             MOVS     R6,#+100
    203               data[98]='\r'; 
   \   0000009C   0x200D             MOVS     R0,#+13
   \   0000009E   0x2162             MOVS     R1,#+98
   \   000000A0   0x5468             STRB     R0,[R5, R1]
    204               data[99]='\n'; 
   \   000000A2   0x200A             MOVS     R0,#+10
   \   000000A4   0x2163             MOVS     R1,#+99
   \   000000A6   0x5468             STRB     R0,[R5, R1]
    205             }
    206             for(int i=0;i<log_len;i++)
   \                     ??sysmgr_log_7: (+1)
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0xE015             B        ??sysmgr_log_8
    207             {
    208                if(sysmgr_log_tbl.writep >= SYSMGR_BUF_SIZE)
   \                     ??sysmgr_log_9: (+1)
   \   000000AC   0x....             LDR      R1,??DataTable9
   \   000000AE   0x6889             LDR      R1,[R1, #+8]
   \   000000B0   0x....             LDR      R2,??DataTable9_3  ;; 0x2388
   \   000000B2   0x4291             CMP      R1,R2
   \   000000B4   0xD305             BCC      ??sysmgr_log_10
    209                {
    210                  sysmgr_log_tbl.writep=0;
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0x....             LDR      R2,??DataTable9
   \   000000BA   0x6091             STR      R1,[R2, #+8]
    211                  sysmgr_log_tbl.loop=1;
   \   000000BC   0x2101             MOVS     R1,#+1
   \   000000BE   0x....             LDR      R2,??DataTable9
   \   000000C0   0x7311             STRB     R1,[R2, #+12]
    212                }
    213                sysmgr_buf[sysmgr_log_tbl.writep] = data[i];
   \                     ??sysmgr_log_10: (+1)
   \   000000C2   0x5C29             LDRB     R1,[R5, R0]
   \   000000C4   0x....             LDR      R2,??DataTable9_4
   \   000000C6   0x....             LDR      R3,??DataTable9
   \   000000C8   0x689B             LDR      R3,[R3, #+8]
   \   000000CA   0x54D1             STRB     R1,[R2, R3]
    214                sysmgr_log_tbl.writep++;
   \   000000CC   0x....             LDR      R1,??DataTable9
   \   000000CE   0x6889             LDR      R1,[R1, #+8]
   \   000000D0   0x1C49             ADDS     R1,R1,#+1
   \   000000D2   0x....             LDR      R2,??DataTable9
   \   000000D4   0x6091             STR      R1,[R2, #+8]
    215             }
   \   000000D6   0x1C40             ADDS     R0,R0,#+1
   \                     ??sysmgr_log_8: (+1)
   \   000000D8   0x42B0             CMP      R0,R6
   \   000000DA   0xDBE7             BLT      ??sysmgr_log_9
    216          }
   \                     ??sysmgr_log_0: (+1)
   \   000000DC   0xB00F             ADD      SP,SP,#+60
   \   000000DE   0xBDF0             POP      {R4-R7,PC}       ;; return
    217          

   \                                 In section .text, align 2, keep-with-next
    218          void sysmgr_log_usb(char *data,int len)
    219          {
   \                     sysmgr_log_usb: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    220              man_usb_data_send((uint8_t *)data,len);
   \   00000002   0x.... 0x....      BL       man_usb_data_send
    221          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    222          

   \                                 In section .text, align 2, keep-with-next
    223          int sysmgr_get_log(int posi, char *data,int len)
    224          {
   \                     sysmgr_get_log: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0003             MOVS     R3,R0
   \   00000004   0x000C             MOVS     R4,R1
    225            uint32_t readp = posi;
   \   00000006   0x001D             MOVS     R5,R3
    226            int ret=0;
   \   00000008   0x2000             MOVS     R0,#+0
    227            int max=len;
   \   0000000A   0x0011             MOVS     R1,R2
    228            
    229            if(posi > SYSMGR_BUF_SIZE)
   \   0000000C   0x....             LDR      R6,??DataTable10  ;; 0x2389
   \   0000000E   0x42B3             CMP      R3,R6
   \   00000010   0xDB01             BLT      ??sysmgr_get_log_0
    230            {
    231                return 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE02C             B        ??sysmgr_get_log_1
    232            }
    233            if(sysmgr_log_tbl.loop==1)
   \                     ??sysmgr_get_log_0: (+1)
   \   00000016   0x....             LDR      R6,??DataTable9
   \   00000018   0x7B36             LDRB     R6,[R6, #+12]
   \   0000001A   0x2E01             CMP      R6,#+1
   \   0000001C   0xD10D             BNE      ??sysmgr_get_log_2
    234            {
    235              readp=sysmgr_log_tbl.writep+posi;
   \   0000001E   0x....             LDR      R5,??DataTable9
   \   00000020   0x68AD             LDR      R5,[R5, #+8]
   \   00000022   0x18ED             ADDS     R5,R5,R3
    236              if(readp >= SYSMGR_BUF_SIZE)
   \   00000024   0x....             LDR      R3,??DataTable9_3  ;; 0x2388
   \   00000026   0x429D             CMP      R5,R3
   \   00000028   0xD301             BCC      ??sysmgr_get_log_3
    237              {
    238                readp-=SYSMGR_BUF_SIZE;
   \   0000002A   0x....             LDR      R3,??DataTable10_1  ;; 0xffffdc78
   \   0000002C   0x18ED             ADDS     R5,R5,R3
    239              }
    240                  if(len >= SYSMGR_BUF_SIZE)
   \                     ??sysmgr_get_log_3: (+1)
   \   0000002E   0x....             LDR      R3,??DataTable9_3  ;; 0x2388
   \   00000030   0x429A             CMP      R2,R3
   \   00000032   0xDB00             BLT      ??sysmgr_get_log_4
    241              {
    242                max=SYSMGR_BUF_SIZE;
   \   00000034   0x....             LDR      R1,??DataTable9_3  ;; 0x2388
    243              }
    244          
    245            }
    246            else
    247            {
    248              if(posi > sysmgr_log_tbl.writep)
    249              {
    250                return 0;
    251              }
    252              if(len > sysmgr_log_tbl.writep)
    253              {
    254                return max=sysmgr_log_tbl.writep-1;
    255              }
    256          
    257            }
    258            for(int i=0;i<max;i++)
   \                     ??sysmgr_get_log_4: (+1)
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0xE018             B        ??sysmgr_get_log_5
   \                     ??sysmgr_get_log_2: (+1)
   \   0000003A   0x....             LDR      R6,??DataTable9
   \   0000003C   0x68B6             LDR      R6,[R6, #+8]
   \   0000003E   0x429E             CMP      R6,R3
   \   00000040   0xD201             BCS      ??sysmgr_get_log_6
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xE014             B        ??sysmgr_get_log_1
   \                     ??sysmgr_get_log_6: (+1)
   \   00000046   0x....             LDR      R3,??DataTable9
   \   00000048   0x689B             LDR      R3,[R3, #+8]
   \   0000004A   0x4293             CMP      R3,R2
   \   0000004C   0xD2F3             BCS      ??sysmgr_get_log_4
   \   0000004E   0x....             LDR      R0,??DataTable9
   \   00000050   0x6881             LDR      R1,[R0, #+8]
   \   00000052   0x1E49             SUBS     R1,R1,#+1
   \   00000054   0x0008             MOVS     R0,R1
   \   00000056   0xE00B             B        ??sysmgr_get_log_1
    259            {
    260                if(readp >= SYSMGR_BUF_SIZE)
   \                     ??sysmgr_get_log_7: (+1)
   \   00000058   0x....             LDR      R3,??DataTable9_3  ;; 0x2388
   \   0000005A   0x429D             CMP      R5,R3
   \   0000005C   0xD300             BCC      ??sysmgr_get_log_8
    261                {
    262                  readp=0;
   \   0000005E   0x2500             MOVS     R5,#+0
    263                }
    264                data[i] = sysmgr_buf[readp];
   \                     ??sysmgr_get_log_8: (+1)
   \   00000060   0x....             LDR      R3,??DataTable9_4
   \   00000062   0x5D5B             LDRB     R3,[R3, R5]
   \   00000064   0x54A3             STRB     R3,[R4, R2]
    265                readp++;
   \   00000066   0x1C6D             ADDS     R5,R5,#+1
    266                ret++;
   \   00000068   0x1C40             ADDS     R0,R0,#+1
    267            }
   \   0000006A   0x1C52             ADDS     R2,R2,#+1
   \                     ??sysmgr_get_log_5: (+1)
   \   0000006C   0x428A             CMP      R2,R1
   \   0000006E   0xDBF3             BLT      ??sysmgr_get_log_7
    268            return ret;
   \                     ??sysmgr_get_log_1: (+1)
   \   00000070   0xBD70             POP      {R4-R6,PC}       ;; return
    269          }
    270          
    271          /********************************************************************/
    272          /*!
    273           * \name	sysmgr_init
    274           * \brief	システム管理の初期化処理
    275           * \param	なし
    276            * \return     なし
    277           * \note	
    278           */
    279          /********************************************************************/
    280          
    281          

   \                                 In section .text, align 2, keep-with-next
    282          void sysmgr_init()
    283          {
   \                     sysmgr_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    284            system_manager.stop = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR      R1,??DataTable10_2
   \   00000006   0x7008             STRB     R0,[R1, #+0]
    285            system_manager.error = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR      R1,??DataTable10_2
   \   0000000C   0x6048             STR      R0,[R1, #+4]
    286            system_manager.process = 0; 
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR      R1,??DataTable10_2
   \   00000012   0x7048             STRB     R0,[R1, #+1]
    287            system_manager.mode = 0; 
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR      R1,??DataTable10_2
   \   00000018   0x70C8             STRB     R0,[R1, #+3]
    288            system_manager.eprocess = 0; 
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x....             LDR      R1,??DataTable10_2
   \   0000001E   0x6088             STR      R0,[R1, #+8]
    289            system_manager.timer= (-1);
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000024   0x....             LDR      R1,??DataTable10_2
   \   00000026   0x8188             STRH     R0,[R1, #+12]
    290            system_manager.prev_error=0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR      R1,??DataTable10_2
   \   0000002C   0x6108             STR      R0,[R1, #+16]
    291            sysmgr_log_tbl.writep=0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR      R1,??DataTable9
   \   00000032   0x6088             STR      R0,[R1, #+8]
    292            sysmgr_log_tbl.loop=0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR      R1,??DataTable9
   \   00000038   0x7308             STRB     R0,[R1, #+12]
    293            sysmgr_log_tbl.flag=1;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x....             LDR      R1,??DataTable9
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
    294            sysmgr_log_tbl.lock=0;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x....             LDR      R1,??DataTable9
   \   00000044   0x7348             STRB     R0,[R1, #+13]
    295            usb_log_flag=0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x....             LDR      R1,??DataTable9_1
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    296            usb_console_flag=0;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x....             LDR      R1,??DataTable10_3
   \   00000050   0x6008             STR      R0,[R1, #+0]
    297          
    298            memset(sysmgr_buf,'E',SYSMGR_BUF_SIZE);
   \   00000052   0x....             LDR      R1,??DataTable9_3  ;; 0x2388
   \   00000054   0x2245             MOVS     R2,#+69
   \   00000056   0x....             LDR      R4,??DataTable9_4
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x.... 0x....      BL       __aeabi_memset
    299           // usb_log_flag = man_data_get_SIM7500_debug_flag();
    300            
    301          }
   \   0000005E   0xBD10             POP      {R4,PC}          ;; return
    302          

   \                                 In section .text, align 2, keep-with-next
    303          void sysmgr_set_error(uint32_t errorID,int8_t switch_mode)
    304          {
   \                     sysmgr_set_error: (+1)
   \   00000000   0xB500             PUSH     {LR}
    305              if(system_manager.stop == 1)
   \   00000002   0x....             LDR      R2,??DataTable10_2
   \   00000004   0x7812             LDRB     R2,[R2, #+0]
   \   00000006   0x2A01             CMP      R2,#+1
   \   00000008   0xD00C             BEQ      ??sysmgr_set_error_0
    306              {
    307                return;
    308              }
    309               system_manager.mode = switch_mode;
   \                     ??sysmgr_set_error_1: (+1)
   \   0000000A   0x....             LDR      R2,??DataTable10_2
   \   0000000C   0x70D1             STRB     R1,[R2, #+3]
    310              
    311                  
    312              system_manager.stop = 1;
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x....             LDR      R2,??DataTable10_2
   \   00000012   0x7011             STRB     R1,[R2, #+0]
    313              system_manager.process = SYSTEM_ERROR_PROCESS_1;
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x....             LDR      R2,??DataTable10_2
   \   00000018   0x7051             STRB     R1,[R2, #+1]
    314              system_manager.error = errorID;
   \   0000001A   0x....             LDR      R1,??DataTable10_2
   \   0000001C   0x6048             STR      R0,[R1, #+4]
    315              system_manager.timer=SYSTEM_SLEEP_DELAY1;
   \   0000001E   0x2005             MOVS     R0,#+5
   \   00000020   0x....             LDR      R1,??DataTable10_2
   \   00000022   0x8188             STRH     R0,[R1, #+12]
    316           //   system_manager.sw = 0;
    317          }
   \                     ??sysmgr_set_error_0: (+1)
   \   00000024   0xBD00             POP      {PC}             ;; return
    318          
    319          /********************************************************************/
    320          /*!
    321           * \name	sysmgr_reset_table
    322           * \brief	システム管理テーブルリセット処理
    323           * \param	なし
    324            * \return     なし
    325           * \note	
    326           */
    327          /********************************************************************/
    328          

   \                                 In section .text, align 2, keep-with-next
    329          void sysmgr_reset_table()
    330          {
    331            
    332            system_manager.prev_error = system_manager.error;
   \                     sysmgr_reset_table: (+1)
   \   00000000   0x....             LDR      R0,??DataTable10_2
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x....             LDR      R1,??DataTable10_2
   \   00000006   0x6108             STR      R0,[R1, #+16]
    333            system_manager.stop = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR      R1,??DataTable10_2
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    334            system_manager.sw = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR      R1,??DataTable10_2
   \   00000012   0x7088             STRB     R0,[R1, #+2]
    335            system_manager.mode = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR      R1,??DataTable10_2
   \   00000018   0x70C8             STRB     R0,[R1, #+3]
    336            system_manager.process = 0; 
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x....             LDR      R1,??DataTable10_2
   \   0000001E   0x7048             STRB     R0,[R1, #+1]
    337            system_manager.error = 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x....             LDR      R1,??DataTable10_2
   \   00000024   0x6048             STR      R0,[R1, #+4]
    338            system_manager.timer= (-1); 
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000002A   0x....             LDR      R1,??DataTable10_2
   \   0000002C   0x8188             STRH     R0,[R1, #+12]
    339            system_manager.eprocess=0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR      R1,??DataTable10_2
   \   00000032   0x6088             STR      R0,[R1, #+8]
    340          
    341          }
   \   00000034   0x4770             BX       LR               ;; return
    342          

   \                                 In section .text, align 2, keep-with-next
    343          void sysmgr_error_sleep(void)
    344          {
   \                     sysmgr_error_sleep: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    345             if(system_manager.process == SYSTEM_ERROR_PROCESS_1)
   \   00000004   0x....             LDR      R0,??DataTable10_2
   \   00000006   0x7840             LDRB     R0,[R0, #+1]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD10D             BNE      ??sysmgr_error_sleep_0
    346             {
    347                if(system_manager.timer > 0)
   \   0000000C   0x....             LDR      R0,??DataTable10_2
   \   0000000E   0x210C             MOVS     R1,#+12
   \   00000010   0x5E40             LDRSH    R0,[R0, R1]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xDA2F             BGE      ??sysmgr_error_sleep_1
    348                {
    349                  return;
    350                }
    351                wdt_stop();
   \                     ??sysmgr_error_sleep_2: (+1)
   \   00000016   0x.... 0x....      BL       wdt_stop
    352                system_manager.process = SYSTEM_ERROR_PROCESS_2;
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x....             LDR      R1,??DataTable10_2
   \   0000001E   0x7048             STRB     R0,[R1, #+1]
    353                system_manager.timer = SYSTEM_SLEEP_DELAY2;
   \   00000020   0x203C             MOVS     R0,#+60
   \   00000022   0x....             LDR      R1,??DataTable10_2
   \   00000024   0x8188             STRH     R0,[R1, #+12]
   \   00000026   0xE026             B        ??sysmgr_error_sleep_3
    354                              
    355          #ifdef ADLINK_DEBUG_MESSAGE
    356                sprintf(print_buf,"\r\n***** Entering SYSTEM SLEEP mode 1 : %d\r\n",system_manager.error);
    357                man_usb_data_send(print_buf,strlen(print_buf));
    358          #endif //ADLINK_DEBUG_MESSAGE
    359             }
    360             else if(system_manager.process == SYSTEM_ERROR_PROCESS_3)
   \                     ??sysmgr_error_sleep_0: (+1)
   \   00000028   0x....             LDR      R0,??DataTable10_2
   \   0000002A   0x7840             LDRB     R0,[R0, #+1]
   \   0000002C   0x2803             CMP      R0,#+3
   \   0000002E   0xD122             BNE      ??sysmgr_error_sleep_3
    361             {
    362                 if(system_manager.timer > 0)
   \   00000030   0x....             LDR      R0,??DataTable10_2
   \   00000032   0x210C             MOVS     R1,#+12
   \   00000034   0x5E40             LDRSH    R0,[R0, R1]
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xDA1D             BGE      ??sysmgr_error_sleep_1
    363                 {
    364          //           system_manager.timer--;
    365                     return;
    366                 }
    367          #ifdef ADLINK_DEBUG_MESSAGE
    368                 sprintf(print_buf,"\r\n***** Entering SYSTEM SLEEP mode 2\r\n");
    369                 man_usb_data_send(print_buf,strlen(print_buf));
    370          #endif //ADLINK_DEBUG_MESSAGE
    371                 int32_t	pressure=0;
   \                     ??sysmgr_error_sleep_4: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x9001             STR      R0,[SP, #+4]
    372                 int32_t 	temperature = 1;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x9000             STR      R0,[SP, #+0]
    373                  man_gpio_led_pow(MAN_GPIO_CTRL_OFF);
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      BL       man_gpio_led_pow
   \   00000048   0xE7FF             B        ??sysmgr_error_sleep_5
    374          
    375                  while(1)
    376                  {
    377                    ctrc_MPL3115A2_start();
    378                    seSysSleepMS(200);
    379                    int ret = ctrc_MPL3115A2_get_press(&temperature, &pressure);
    380          #ifdef ADLINK_DEBUG_MESSAGE
    381                    sprintf(print_buf,"\r\n SSLEEP 3-1 ret:%d T:%d P:%d\r\n",ret,temperature, pressure);
    382                 man_usb_data_send(print_buf,strlen(print_buf));
    383          #endif //ADLINK_DEBUG_MESSAGE
    384                     if (ret < 0 )
    385                    {
    386                       continue;
   \                     ??sysmgr_error_sleep_6: (+1)
   \                     ??sysmgr_error_sleep_5: (+1)
   \   0000004A   0x.... 0x....      BL       ctrc_MPL3115A2_start
   \   0000004E   0x20C8             MOVS     R0,#+200
   \   00000050   0x.... 0x....      BL       seSysSleepMS
   \   00000054   0xA901             ADD      R1,SP,#+4
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x.... 0x....      BL       ctrc_MPL3115A2_get_press
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD4F4             BMI      ??sysmgr_error_sleep_6
    387          //               return;
    388                    }
    389          #ifdef ADLINK_DEBUG_MESSAGE
    390                     sprintf(print_buf,"\r\n SYSTEM SLEEP 3-2\r\n");
    391                 man_usb_data_send(print_buf,strlen(print_buf));
    392          #endif //ADLINK_DEBUG_MESSAGE
    393                
    394                    if (system_manager.mode ==  SYSTEM_SLEEP_SWITCH_BATTERY)
   \   00000060   0x....             LDR      R0,??DataTable10_2
   \   00000062   0x78C0             LDRB     R0,[R0, #+3]
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xD107             BNE      ??sysmgr_error_sleep_7
    395                    {
    396                        if(temperature <= MAN_DATA_TEMP_BAT_MAX)
   \   00000068   0x9800             LDR      R0,[SP, #+0]
   \   0000006A   0x283D             CMP      R0,#+61
   \   0000006C   0xDA10             BGE      ??sysmgr_error_sleep_8
    397                        {
    398                          break;
    399                        }
    400                    }
    401                    else
    402                    {
    403                       if((temperature <= MAN_DATA_TEMP_EXT_MAX) &&
    404                          ((man_charge_expow_get() == MAN_CHARGE_EXTSTAT_ON) || (man_charge_expow_usb_get() ==  MAN_CHARGE_EXTSTAT_ON) ) )
    405                       {
    406                         break;
    407                       }
    408                    }    
    409          #ifdef ADLINK_DEBUG_MESSAGE
    410                     sprintf(print_buf,"\r\n SYSTEM SLEEP 3-3\r\n");
    411                 man_usb_data_send(print_buf,strlen(print_buf));
    412          #endif //ADLINK_DEBUG_MESSAGE
    413                      ctrl_SLEEP_system_error();
    414          #ifdef ADLINK_DEBUG_MESSAGE
    415                     sprintf(print_buf,"\r\n SYSTEM SLEEP 3-4\r\n");
    416                 man_usb_data_send(print_buf,strlen(print_buf));
    417          #endif //ADLINK_DEBUG_MESSAGE
    418                 }
    419                 sysmgr_reset_table();
   \                     ??sysmgr_error_sleep_9: (+1)
   \   0000006E   0x.... 0x....      BL       sysmgr_reset_table
    420                 wdt_init();
   \   00000072   0x.... 0x....      BL       wdt_init
    421              } 
    422          }
   \                     ??sysmgr_error_sleep_3: (+1)
   \                     ??sysmgr_error_sleep_1: (+1)
   \   00000076   0xBD07             POP      {R0-R2,PC}       ;; return
   \                     ??sysmgr_error_sleep_7: (+1)
   \   00000078   0x9800             LDR      R0,[SP, #+0]
   \   0000007A   0x2847             CMP      R0,#+71
   \   0000007C   0xDA08             BGE      ??sysmgr_error_sleep_8
   \   0000007E   0x.... 0x....      BL       man_charge_expow_get
   \   00000082   0x2801             CMP      R0,#+1
   \   00000084   0xD003             BEQ      ??sysmgr_error_sleep_10
   \   00000086   0x.... 0x....      BL       man_charge_expow_usb_get
   \   0000008A   0x2801             CMP      R0,#+1
   \   0000008C   0xD100             BNE      ??sysmgr_error_sleep_8
   \                     ??sysmgr_error_sleep_10: (+1)
   \   0000008E   0xE7EE             B        ??sysmgr_error_sleep_9
   \                     ??sysmgr_error_sleep_8: (+1)
   \   00000090   0x.... 0x....      BL       ctrl_SLEEP_system_error
   \   00000094   0xE7D9             B        ??sysmgr_error_sleep_5
    423          
    424          
    425          /********************************************************************/
    426          /*!
    427           * \name	main_init
    428           * \brief	全体の初期化処理
    429           * \param	init_exec   : 初期化実行
    430           *          init_result : 初期化結果
    431           * \return  なし
    432           * \note	
    433           */
    434          /********************************************************************/
    435          
    436          

   \                                 In section .text, align 2, keep-with-next
    437          static void main_init(uint32_t *init_exec, uint32_t *init_result)
    438          {
   \                     main_init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    439          	int32_t		ret;
    440          
    441          #if 0
    442                  usb_log_flag=0;
    443          //       usb_log_flag = ( LOG_FLAG_LTE | LOG_FLAG_BATTERY | LOG_FLAG_PRESS_TEMP);
    444          //        usb_log_flag = ( LOG_FLAG_LTE | LOG_FLAG_PRESS_TEMP);
    445          //      usb_log_flag = ( LOG_FLAG_LTE |LOG_FLAG_BATTERY);
    446          //       usb_log_flag =  LOG_FLAG_LTE;
    447                 usb_log_flag = LOG_FLAG_BATTERY;
    448                  usb_console_flag=0;
    449          #endif
    450                  
    451                  sysmgr_init();
   \   00000006   0x.... 0x....      BL       sysmgr_init
    452          	// エラーの初期化
    453          	man_error_init();
   \   0000000A   0x.... 0x....      BL       man_error_init
    454          
    455          	// GPIO管理
    456          	man_gpio_init();
   \   0000000E   0x.... 0x....      BL       man_gpio_init
    457          
    458          	// 時間待ちを開始する
    459          	// t16 CH3
    460          	man_timer_init();
   \   00000012   0x.... 0x....      BL       man_timer_init
    461          
    462          	// RTC初期化処理
    463          	man_rtc_init();
   \   00000016   0x.... 0x....      BL       man_rtc_init
    464          
    465          	// データ管理の初期化処理
    466          	//   flash driver
    467          	man_data_init();
   \   0000001A   0x.... 0x....      BL       man_data_init
    468          
    469          	// 3.3V電源ON
    470          	man_gpio_3p3v_power(MAN_GPIO_CTRL_OFF);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       man_gpio_3p3v_power
    471                  seSysSleepMS(200);
   \   00000024   0x20C8             MOVS     R0,#+200
   \   00000026   0x.... 0x....      BL       seSysSleepMS
    472          	man_gpio_3p3v_power(MAN_GPIO_CTRL_ON);
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      BL       man_gpio_3p3v_power
    473          
    474          	// USBの初期化
    475          	//   USB Driver
    476          	ret = man_usb_init();
   \   00000030   0x.... 0x....      BL       man_usb_init
    477          	*init_exec |= MAIN_INIT_USB;
   \   00000034   0x6829             LDR      R1,[R5, #+0]
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0x430A             ORRS     R2,R2,R1
   \   0000003A   0x602A             STR      R2,[R5, #+0]
    478          	if (ret >= 0) {
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD403             BMI      ??main_init_0
    479          		// 初期化成功
    480          		*init_result |= MAIN_INIT_USB;
   \   00000040   0x6820             LDR      R0,[R4, #+0]
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x4301             ORRS     R1,R1,R0
   \   00000046   0x6021             STR      R1,[R4, #+0]
    481          	}
    482          
    483          	// I2C CH0初期化
    484          	ctrl_I2C0_init();
   \                     ??main_init_0: (+1)
   \   00000048   0x.... 0x....      BL       ctrl_I2C0_init
    485          
    486          	// 高度・気温・気圧の初期化処理
    487          	//     I2C Ch0
    488          	ret = man_press_init();
   \   0000004C   0x.... 0x....      BL       man_press_init
    489          	*init_exec |= MAIN_INIT_PRESS;
   \   00000050   0x6829             LDR      R1,[R5, #+0]
   \   00000052   0x2204             MOVS     R2,#+4
   \   00000054   0x430A             ORRS     R2,R2,R1
   \   00000056   0x602A             STR      R2,[R5, #+0]
    490          	if (ret >= 0) {
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD403             BMI      ??main_init_1
    491          		// 初期化成功
    492          		*init_result |= MAIN_INIT_PRESS;
   \   0000005C   0x6820             LDR      R0,[R4, #+0]
   \   0000005E   0x2104             MOVS     R1,#+4
   \   00000060   0x4301             ORRS     R1,R1,R0
   \   00000062   0x6021             STR      R1,[R4, #+0]
    493          	}
    494          
    495          	// 角速度・加速度の初期化処理
    496          	//     I2C Ch0
    497          	ret = man_gyro_init();
   \                     ??main_init_1: (+1)
   \   00000064   0x.... 0x....      BL       man_gyro_init
    498          	*init_exec |= MAIN_INIT_GYRO;
   \   00000068   0x6829             LDR      R1,[R5, #+0]
   \   0000006A   0x2208             MOVS     R2,#+8
   \   0000006C   0x430A             ORRS     R2,R2,R1
   \   0000006E   0x602A             STR      R2,[R5, #+0]
    499          	if (ret >= 0) {
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD403             BMI      ??main_init_2
    500          		// 初期化成功
    501          		*init_result |= MAIN_INIT_GYRO;
   \   00000074   0x6820             LDR      R0,[R4, #+0]
   \   00000076   0x2108             MOVS     R1,#+8
   \   00000078   0x4301             ORRS     R1,R1,R0
   \   0000007A   0x6021             STR      R1,[R4, #+0]
    502          	}
    503          
    504          	// I2C CH1初期化
    505          	ctrl_I2C1_init();
   \                     ??main_init_2: (+1)
   \   0000007C   0x.... 0x....      BL       ctrl_I2C1_init
    506          
    507          	// 充電情報の初期化
    508          	//     I2C Ch1
    509          	ret = man_charge_init();
   \   00000080   0x.... 0x....      BL       man_charge_init
    510          
    511          	// バッテリーの初期化
    512          	//     I2C Ch1
    513          	ret = man_battery_init();
   \   00000084   0x.... 0x....      BL       man_battery_init
    514          
    515          
    516          	// GPSの初期化
    517          	// UART2 CH1 driver
    518          	man_gps_init();
   \   00000088   0x.... 0x....      BL       man_gps_init
    519          
    520          	// HTTPの初期化
    521          	// UART2 CH0 driver
    522          	man_http_init();
   \   0000008C   0x.... 0x....      BL       man_http_init
    523          
    524          	// LTE電源ON
    525          	man_gpio_lte_power(MAN_GPIO_CTRL_ON);
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x.... 0x....      BL       man_gpio_lte_power
    526          	
    527          	// LTE管理
    528          	man_lte_init();
   \   00000096   0x.... 0x....      BL       man_lte_init
    529          
    530          	// メッセージ管理
    531          	man_msg_init();
   \   0000009A   0x.... 0x....      BL       man_msg_init
    532          	
    533          	// コマンド管理
    534          	man_cmd_init();
   \   0000009E   0x.... 0x....      BL       man_cmd_init
    535          
    536          	// レポート管理
    537          	man_rpt_init();
   \   000000A2   0x.... 0x....      BL       man_rpt_init
    538          
    539          	// ファームウェア更新管理
    540          	man_ota_init();
   \   000000A6   0x.... 0x....      BL       man_ota_init
    541          
    542          	// ネットワーク管理
    543          	man_net_init();
   \   000000AA   0x.... 0x....      BL       man_net_init
    544          
    545          	// 操作管理の初期化
    546          	//   rtc driver
    547          	man_ope_init();
   \   000000AE   0x.... 0x....      BL       man_ope_init
    548          
    549          	// FLASH管理の初期化処理
    550          	man_flash_init();
   \   000000B2   0x.... 0x....      BL       man_flash_init
    551                  
    552                  usb_log_flag = man_data_get_SIM7500_debug_flag();
   \   000000B6   0x.... 0x....      BL       man_data_get_SIM7500_debug_flag
   \   000000BA   0x....             LDR      R1,??DataTable11
   \   000000BC   0x6008             STR      R0,[R1, #+0]
    553            
    554          }
   \   000000BE   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    555          
    556          
    557          /********************************************************************/
    558          /*!
    559           * \name	PRG_main
    560           * \brief	メイン処理
    561           * \param	なし
    562           * \return  なし
    563           * \note	
    564           */
    565          /********************************************************************/
    566          

   \                                 In section .bss, align 4
    567          char print_buf[SYSMGR_PRINT_BUF_SIZE];
   \                     print_buf:
   \   00000000                      DS8 128

   \                                 In section .data, align 1
    568          char loopflag=1;
   \                     loopflag:
   \   00000000   0x01               DC8 1
    569          

   \                                 In section .text, align 2, keep-with-next
    570          int PRG_main( void )
    571          {
   \                     PRG_main: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    572          	uint32_t	ms_cont=0;
   \   00000002   0x2000             MOVS     R0,#+0
    573          	uint32_t	ms_cont_old=0;
   \   00000004   0x2400             MOVS     R4,#+0
    574          	uint32_t	nmea_cnt=0;
   \   00000006   0x2000             MOVS     R0,#+0
    575          
    576                 
    577          	// 内部変数を初期化する
    578          	memset(&main_work, 0, sizeof(main_work_t));
   \   00000008   0x210C             MOVS     R1,#+12
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x....             LDR      R5,??DataTable11_1
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x.... 0x....      BL       __aeabi_memset
    579          
    580          	seSysSleepMS(10);  // let printf characters flush out before re-initializing UART
   \   00000014   0x200A             MOVS     R0,#+10
   \   00000016   0x.... 0x....      BL       seSysSleepMS
    581          
    582          	seCLG_Start( seCLG_IOSC );		// 20000000Hz
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       seCLG_Start
    583          	seCLG_Start( seCLG_OSC1 );		// 32768Hz
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       seCLG_Start
    584          	seCLG_Start( seCLG_OSC3 );		// 12000000Hz
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x.... 0x....      BL       seCLG_Start
    585          
    586          	seSysSleepMS(10);  // let printf characters flush out before re-initializing UART
   \   0000002C   0x200A             MOVS     R0,#+10
   \   0000002E   0x.... 0x....      BL       seSysSleepMS
    587          
    588          	if ( seCLG_OSC1 == seCLG_GetSysClkSrc() ) {
   \   00000032   0x.... 0x....      BL       seCLG_GetSysClkSrc
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD107             BNE      ??PRG_main_0
    589          		ClkSrc = seCLG_OSC1;		// 1
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x....             LDR      R1,??DataTable11_2
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
    590          		SysClk = seCLG_GetSysClk();
   \   00000040   0x.... 0x....      BL       seCLG_GetSysClk
   \   00000044   0x....             LDR      R1,??DataTable11_3
   \   00000046   0x6008             STR      R0,[R1, #+0]
   \   00000048   0xE01E             B        ??PRG_main_1
    591          	} else if ( seCLG_OSC3 == seCLG_GetSysClkSrc() ) {
   \                     ??PRG_main_0: (+1)
   \   0000004A   0x.... 0x....      BL       seCLG_GetSysClkSrc
   \   0000004E   0x2802             CMP      R0,#+2
   \   00000050   0xD107             BNE      ??PRG_main_2
    592          		ClkSrc = seCLG_OSC3;		// 2
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x....             LDR      R1,??DataTable11_2
   \   00000056   0x7008             STRB     R0,[R1, #+0]
    593          		SysClk = seCLG_GetSysClk();
   \   00000058   0x.... 0x....      BL       seCLG_GetSysClk
   \   0000005C   0x....             LDR      R1,??DataTable11_3
   \   0000005E   0x6008             STR      R0,[R1, #+0]
   \   00000060   0xE012             B        ??PRG_main_1
    594          	} else if ( seCLG_IOSC == seCLG_GetSysClkSrc() ) {
   \                     ??PRG_main_2: (+1)
   \   00000062   0x.... 0x....      BL       seCLG_GetSysClkSrc
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD107             BNE      ??PRG_main_3
    595          		ClkSrc = seCLG_IOSC;		// 0
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x....             LDR      R1,??DataTable11_2
   \   0000006E   0x7008             STRB     R0,[R1, #+0]
    596          		SysClk = seCLG_GetSysClk();
   \   00000070   0x.... 0x....      BL       seCLG_GetSysClk
   \   00000074   0x....             LDR      R1,??DataTable11_3
   \   00000076   0x6008             STR      R0,[R1, #+0]
   \   00000078   0xE006             B        ??PRG_main_1
    597          	} else {
    598          		ClkSrc = seCLG_EXOSC;
   \                     ??PRG_main_3: (+1)
   \   0000007A   0x2003             MOVS     R0,#+3
   \   0000007C   0x....             LDR      R1,??DataTable11_2
   \   0000007E   0x7008             STRB     R0,[R1, #+0]
    599          		SysClk = seCLG_GetSysClk();
   \   00000080   0x.... 0x....      BL       seCLG_GetSysClk
   \   00000084   0x....             LDR      R1,??DataTable11_3
   \   00000086   0x6008             STR      R0,[R1, #+0]
    600          	}
    601          
    602          
    603          	// 初期化処理
    604          	main_init(&main_work.init_exec, &main_work.init_result);
   \                     ??PRG_main_1: (+1)
   \   00000088   0x....             LDR      R1,??DataTable11_4
   \   0000008A   0x....             LDR      R0,??DataTable11_1
   \   0000008C   0x.... 0x....      BL       main_init
    605          
    606          	wdt_init();
   \   00000090   0x.... 0x....      BL       wdt_init
    607                  
    608          //        wdt_start();
    609          
    610          	// メイン処理
    611          	while(1) {
    612                          // システムが稼動できない場合にスリープ状態に移る　
    613                        if(system_manager.stop == 1)
   \                     ??PRG_main_4: (+1)
   \   00000094   0x....             LDR      R0,??DataTable11_5
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0x2801             CMP      R0,#+1
   \   0000009A   0xD101             BNE      ??PRG_main_5
    614                        {
    615                           sysmgr_error_sleep();
   \   0000009C   0x.... 0x....      BL       sysmgr_error_sleep
    616                        }
    617                          
    618          		// WDT カウンタリセット
    619          		wdt_resetCounter();
   \                     ??PRG_main_5: (+1)
   \   000000A0   0x.... 0x....      BL       wdt_resetCounter
    620          
    621          		// driver main処理
    622          
    623          		// hal main処理
    624          		ctrl_CXD5600GF_main();
   \   000000A4   0x.... 0x....      BL       ctrl_CXD5600GF_main
    625          		ctrl_SM7500JE_main();
   \   000000A8   0x.... 0x....      BL       ctrl_SM7500JE_main
    626          
    627          		ctrl_USB_main();
   \   000000AC   0x.... 0x....      BL       ctrl_USB_main
    628          		// mid main処理
    629          		mid_GPS_main();
   \   000000B0   0x.... 0x....      BL       mid_GPS_main
    630          		mid_HTTP_main();
   \   000000B4   0x.... 0x....      BL       mid_HTTP_main
    631          
    632          		// apl main処理
    633          		man_flash_main();		// FLASH管理
   \   000000B8   0x.... 0x....      BL       man_flash_main
    634          		man_ope_main();			// 操作管理
   \   000000BC   0x.... 0x....      BL       man_ope_main
    635          		man_gps_main();			// GPS管理
   \   000000C0   0x.... 0x....      BL       man_gps_main
    636          		man_http_main();		// HTTP管理
   \   000000C4   0x.... 0x....      BL       man_http_main
    637          		man_usb_main();			// USB管理
   \   000000C8   0x.... 0x....      BL       man_usb_main
    638          		man_net_main();			// ネットワーク管理
   \   000000CC   0x.... 0x....      BL       man_net_main
    639          		man_lte_main();			// LTE管理
   \   000000D0   0x.... 0x....      BL       man_lte_main
    640          		man_cmd_main();			// コマンド管理処理
   \   000000D4   0x.... 0x....      BL       man_cmd_main
    641          		man_msg_main();			// メッセージ管理処理
   \   000000D8   0x.... 0x....      BL       man_msg_main
    642          		man_rpt_main();			// レポート管理
   \   000000DC   0x.... 0x....      BL       man_rpt_main
    643          		man_data_main();		// データ管理
   \   000000E0   0x.... 0x....      BL       man_data_main
    644          		man_ota_main();			// ファームウェア更新管理処理
   \   000000E4   0x.... 0x....      BL       man_ota_main
    645          
    646          		// 1ms毎
    647          		ms_cont = man_timer_get_1ms_count();
   \   000000E8   0x.... 0x....      BL       man_timer_get_1ms_count
    648          		if (ms_cont != ms_cont_old) {
   \   000000EC   0x42A0             CMP      R0,R4
   \   000000EE   0xD002             BEQ      ??PRG_main_6
    649          			ms_cont_old = ms_cont;
   \   000000F0   0x0004             MOVS     R4,R0
    650          			man_timer_main();
   \   000000F2   0x.... 0x....      BL       man_timer_main
    651          		}
    652          
    653          		// 10ms毎
    654          		if (man_timer_chk_10ms() != 0) {
   \                     ??PRG_main_6: (+1)
   \   000000F6   0x.... 0x....      BL       man_timer_chk_10ms
   \   000000FA   0x2800             CMP      R0,#+0
   \   000000FC   0xD001             BEQ      ??PRG_main_7
    655          			man_ope_10ms_main();
   \   000000FE   0x.... 0x....      BL       man_ope_10ms_main
    656          		}
    657          
    658          		// 100ms毎
    659          		if (man_timer_chk_100ms() != 0) {
   \                     ??PRG_main_7: (+1)
   \   00000102   0x.... 0x....      BL       man_timer_chk_100ms
   \   00000106   0x2800             CMP      R0,#+0
   \   00000108   0xD009             BEQ      ??PRG_main_8
    660          			// 高度・気温・気圧の取得
    661          			man_press_main();
   \   0000010A   0x.... 0x....      BL       man_press_main
    662          			// 角速度・加速度 main処理
    663          			man_gyro_main();
   \   0000010E   0x.... 0x....      BL       man_gyro_main
    664          			// USB
    665          			man_usb_100ms_main();
   \   00000112   0x.... 0x....      BL       man_usb_100ms_main
    666          			// GPS
    667          			man_gps_100ms_main();
   \   00000116   0x.... 0x....      BL       man_gps_100ms_main
    668          			// 操作
    669          			man_ope_100ms_main();
   \   0000011A   0x.... 0x....      BL       man_ope_100ms_main
    670          
    671          		}
    672          
    673          		// 500ms毎
    674          		if (man_timer_chk_500ms() != 0) {
   \                     ??PRG_main_8: (+1)
   \   0000011E   0x.... 0x....      BL       man_timer_chk_500ms
   \   00000122   0x2800             CMP      R0,#+0
   \   00000124   0xD005             BEQ      ??PRG_main_9
    675          			man_battery_500ms_main();
   \   00000126   0x.... 0x....      BL       man_battery_500ms_main
    676          			man_ope_500ms_main();
   \   0000012A   0x.... 0x....      BL       man_ope_500ms_main
    677          			man_gpio_main_500ms();
   \   0000012E   0x.... 0x....      BL       man_gpio_main_500ms
    678          		}
    679          		
    680          		// 1000ms毎
    681          		if (man_timer_chk_1000ms() != 0) {
   \                     ??PRG_main_9: (+1)
   \   00000132   0x.... 0x....      BL       man_timer_chk_1000ms
   \   00000136   0x2800             CMP      R0,#+0
   \   00000138   0xD039             BEQ      ??PRG_main_10
    682          			man_charge_1000ms_main();
   \   0000013A   0x.... 0x....      BL       man_charge_1000ms_main
    683          			man_data_1000ms_main();
   \   0000013E   0x.... 0x....      BL       man_data_1000ms_main
    684          			man_ope_set_msg_charge();		// 充電系のメッセージ出力処理
   \   00000142   0x.... 0x....      BL       man_ope_set_msg_charge
    685          			// GPSが異常な場合
    686          			if (man_gps_get_state() == MAN_GPS_NOTI_OPEN_ERROR) {
   \   00000146   0x.... 0x....      BL       man_gps_get_state
   \   0000014A   0x2807             CMP      R0,#+7
   \   0000014C   0xD103             BNE      ??PRG_main_11
    687          				// 無線電波を確認する
    688          				man_lte_1000ms_main();
   \   0000014E   0x.... 0x....      BL       man_lte_1000ms_main
    689          				// 内部時間のタイミングでレポート報告する
    690          				man_rpt_1000ms_main();
   \   00000152   0x.... 0x....      BL       man_rpt_1000ms_main
    691          			}
    692          			man_error_1000ms_main();
   \                     ??PRG_main_11: (+1)
   \   00000156   0x.... 0x....      BL       man_error_1000ms_main
    693          
    694                                  if(system_manager.stop == 1)
   \   0000015A   0x....             LDR      R0,??DataTable11_5
   \   0000015C   0x7800             LDRB     R0,[R0, #+0]
   \   0000015E   0x2801             CMP      R0,#+1
   \   00000160   0xD104             BNE      ??PRG_main_12
    695                                  {
    696                                      system_manager.timer--;
   \   00000162   0x....             LDR      R0,??DataTable11_5
   \   00000164   0x8980             LDRH     R0,[R0, #+12]
   \   00000166   0x1E40             SUBS     R0,R0,#+1
   \   00000168   0x....             LDR      R1,??DataTable11_5
   \   0000016A   0x8188             STRH     R0,[R1, #+12]
    697                                  }
    698          
    699                                if(usb_log_flag & LOG_FLAG_BATTERY)
   \                     ??PRG_main_12: (+1)
   \   0000016C   0x....             LDR      R0,??DataTable11
   \   0000016E   0x7800             LDRB     R0,[R0, #+0]
   \   00000170   0x0700             LSLS     R0,R0,#+28
   \   00000172   0xD503             BPL      ??PRG_main_13
    700                                {
    701                                  man_battery_status_log();
   \   00000174   0x.... 0x....      BL       man_battery_status_log
    702                                  man_charge_status_log();
   \   00000178   0x.... 0x....      BL       man_charge_status_log
    703                                }
    704                                if(usb_log_flag & LOG_FLAG_PRESS_TEMP)
   \                     ??PRG_main_13: (+1)
   \   0000017C   0x....             LDR      R0,??DataTable11
   \   0000017E   0x7800             LDRB     R0,[R0, #+0]
   \   00000180   0x06C0             LSLS     R0,R0,#+27
   \   00000182   0xD501             BPL      ??PRG_main_14
    705                                {
    706                                  man_temp_status_log();
   \   00000184   0x.... 0x....      BL       man_temp_status_log
    707                                }
    708                                if(usb_log_flag & LOG_FLAG_LTE)
   \                     ??PRG_main_14: (+1)
   \   00000188   0x....             LDR      R0,??DataTable11
   \   0000018A   0x7800             LDRB     R0,[R0, #+0]
   \   0000018C   0x0780             LSLS     R0,R0,#+30
   \   0000018E   0xD50E             BPL      ??PRG_main_10
    709                                {
    710                                   sprintf(print_buf,"LTE_STATUS: %d\r\n",gpio_get_port( INPORT16 ));
   \   00000190   0x2014             MOVS     R0,#+20
   \   00000192   0x.... 0x....      BL       gpio_get_port
   \   00000196   0x0002             MOVS     R2,R0
   \   00000198   0x....             LDR      R1,??DataTable11_6
   \   0000019A   0x....             LDR      R0,??DataTable11_7
   \   0000019C   0x.... 0x....      BL       sprintf
    711                                  sysmgr_log(print_buf,strlen(print_buf));
   \   000001A0   0x....             LDR      R0,??DataTable11_7
   \   000001A2   0x.... 0x....      BL       strlen
   \   000001A6   0x0001             MOVS     R1,R0
   \   000001A8   0x....             LDR      R0,??DataTable11_7
   \   000001AA   0x.... 0x....      BL       sysmgr_log
    712                                }
    713          #if 0 //20190517時間同期機能OFF
    714                                sysmgr_update_date_time();
    715          #endif
    716          		}
    717          
    718          		// NMEA受信判断(1000ms経過)
    719          		nmea_cnt = man_gps_get_nmea_cnt();
   \                     ??PRG_main_10: (+1)
   \   000001AE   0x.... 0x....      BL       man_gps_get_nmea_cnt
    720          		if (main_work.nmea_cnt != nmea_cnt) {
   \   000001B2   0x....             LDR      R1,??DataTable11_1
   \   000001B4   0x6889             LDR      R1,[R1, #+8]
   \   000001B6   0x4281             CMP      R1,R0
   \   000001B8   0xD100             BNE      .+4
   \   000001BA   0xE76B             B        ??PRG_main_4
    721          			main_work.nmea_cnt = nmea_cnt;
   \   000001BC   0x....             LDR      R1,??DataTable11_1
   \   000001BE   0x6088             STR      R0,[R1, #+8]
    722          
    723          			// GPSが正常な場合
    724          			if (man_gps_get_state() != MAN_GPS_NOTI_OPEN_ERROR) {
   \   000001C0   0x.... 0x....      BL       man_gps_get_state
   \   000001C4   0x2807             CMP      R0,#+7
   \   000001C6   0xD100             BNE      .+4
   \   000001C8   0xE764             B        ??PRG_main_4
    725          				// 無線電波を確認する
    726          				man_lte_1000ms_main();
   \   000001CA   0x.... 0x....      BL       man_lte_1000ms_main
    727          				// NMEA受信のタイミングでレポート報告する
    728          				man_rpt_1000ms_main();
   \   000001CE   0x.... 0x....      BL       man_rpt_1000ms_main
   \   000001D2   0xE75F             B        ??PRG_main_4
    729          			}
    730          		}
    731          	}
    732          
    733          	return seSTATUS_OK;
    734          } 

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x0000A8C0         DC32     0xa8c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     sysmgr_update_date_time_val

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     sysmgr_update_date_time_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     sysmgr_log_tbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     usb_log_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x00002388         DC32     0x2388

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     sysmgr_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x00002389         DC32     0x2389

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0xFFFFDC78         DC32     0xffffdc78

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     system_manager

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     usb_console_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     usb_log_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     main_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     ClkSrc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     SysClk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     main_work+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     system_manager

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     print_buf

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x5B 0x25          DC8 "[%02d/%02d/%02d %02d:%02d:%02d ]"
   \              0x30 0x32    
   \              0x64 0x2F    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x2F 0x25    
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x20 0x5D    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x4C 0x54          DC8 "LTE_STATUS: %d\015\012"
   \              0x45 0x5F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    735          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   PRG_main
        16   -> __aeabi_memset
        16   -> ctrl_CXD5600GF_main
        16   -> ctrl_SM7500JE_main
        16   -> ctrl_USB_main
        16   -> gpio_get_port
        16   -> main_init
        16   -> man_battery_500ms_main
        16   -> man_battery_status_log
        16   -> man_charge_1000ms_main
        16   -> man_charge_status_log
        16   -> man_cmd_main
        16   -> man_data_1000ms_main
        16   -> man_data_main
        16   -> man_error_1000ms_main
        16   -> man_flash_main
        16   -> man_gpio_main_500ms
        16   -> man_gps_100ms_main
        16   -> man_gps_get_nmea_cnt
        16   -> man_gps_get_state
        16   -> man_gps_main
        16   -> man_gyro_main
        16   -> man_http_main
        16   -> man_lte_1000ms_main
        16   -> man_lte_main
        16   -> man_msg_main
        16   -> man_net_main
        16   -> man_ope_100ms_main
        16   -> man_ope_10ms_main
        16   -> man_ope_500ms_main
        16   -> man_ope_main
        16   -> man_ope_set_msg_charge
        16   -> man_ota_main
        16   -> man_press_main
        16   -> man_rpt_1000ms_main
        16   -> man_rpt_main
        16   -> man_temp_status_log
        16   -> man_timer_chk_1000ms
        16   -> man_timer_chk_100ms
        16   -> man_timer_chk_10ms
        16   -> man_timer_chk_500ms
        16   -> man_timer_get_1ms_count
        16   -> man_timer_main
        16   -> man_usb_100ms_main
        16   -> man_usb_main
        16   -> mid_GPS_main
        16   -> mid_HTTP_main
        16   -> seCLG_GetSysClk
        16   -> seCLG_GetSysClkSrc
        16   -> seCLG_Start
        16   -> seSysSleepMS
        16   -> sprintf
        16   -> strlen
        16   -> sysmgr_error_sleep
        16   -> sysmgr_log
        16   -> wdt_init
        16   -> wdt_resetCounter
      16   main_init
        16   -> ctrl_I2C0_init
        16   -> ctrl_I2C1_init
        16   -> man_battery_init
        16   -> man_charge_init
        16   -> man_cmd_init
        16   -> man_data_get_SIM7500_debug_flag
        16   -> man_data_init
        16   -> man_error_init
        16   -> man_flash_init
        16   -> man_gpio_3p3v_power
        16   -> man_gpio_init
        16   -> man_gpio_lte_power
        16   -> man_gps_init
        16   -> man_gyro_init
        16   -> man_http_init
        16   -> man_lte_init
        16   -> man_msg_init
        16   -> man_net_init
        16   -> man_ope_init
        16   -> man_ota_init
        16   -> man_press_init
        16   -> man_rpt_init
        16   -> man_rtc_init
        16   -> man_timer_init
        16   -> man_usb_init
        16   -> seSysSleepMS
        16   -> sysmgr_init
       0   sysmgr_buf_lock
      16   sysmgr_error_sleep
        16   -> ctrc_MPL3115A2_get_press
        16   -> ctrc_MPL3115A2_start
        16   -> ctrl_SLEEP_system_error
        16   -> man_charge_expow_get
        16   -> man_charge_expow_usb_get
        16   -> man_gpio_led_pow
        16   -> seSysSleepMS
        16   -> sysmgr_reset_table
        16   -> wdt_init
        16   -> wdt_stop
      16   sysmgr_get_log
       8   sysmgr_init
         8   -> __aeabi_memset
      80   sysmgr_log
        80   -> man_usb_data_send
        80   -> rtc_get_clock
        80   -> sprintf
       4   sysmgr_log_enable
       8   sysmgr_log_usb
         8   -> man_usb_data_send
       0   sysmgr_manual_update_date_time
       0   sysmgr_reset_table
       4   sysmgr_set_error
       8   sysmgr_update_date_time
         8   -> man_http_update_date_time


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
      36  ?_0
      20  ?_1
       1  ClkSrc
     468  PRG_main
       4  SysClk
       1  loopflag
     192  main_init
      12  main_work
     128  print_buf
    9096  sysmgr_buf
       6  sysmgr_buf_lock
     150  sysmgr_error_sleep
     114  sysmgr_get_log
      96  sysmgr_init
     224  sysmgr_log
      26  sysmgr_log_enable
      16  sysmgr_log_tbl
       8  sysmgr_log_usb
       8  sysmgr_manual_update_date_time
      54  sysmgr_reset_table
      38  sysmgr_set_error
      84  sysmgr_update_date_time
       4  sysmgr_update_date_time_error
       4  sysmgr_update_date_time_val
      20  system_manager

 
 9 285 bytes in section .bss
     1 byte  in section .data
    56 bytes in section .rodata
 1 548 bytes in section .text
 
 1 548 bytes of CODE  memory
    56 bytes of CONST memory
 9 286 bytes of DATA  memory

Errors: none
Warnings: 5
