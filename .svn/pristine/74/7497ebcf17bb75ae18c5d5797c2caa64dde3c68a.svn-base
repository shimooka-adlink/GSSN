###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       17/May/2019  13:31:45
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_lte.c
#    Command line =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_lte.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_A -lCN
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        -lA
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List\man_lte.lst
#    Object file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj\man_lte.o
#
###############################################################################

C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_lte.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    man_lte.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    2017.10.2
      8            * @brief   LTEを管理する
      9            ******************************************************************************
     10            $Id: man_lte.c 256 2018-08-02 01:06:38Z shitaoka $
     11            * @attention
     12            *
     13            *****************************************************************************
     14          */
     15          
     16          #include <string.h>
     17          #include <stdio.h>
     18          #include <stdlib.h>
     19          
     20          #include "board.h"
     21          #include "system_manager.h"
     22          #include "gnss_gw_common.h"
     23          #include "man_http.h"
     24          #include "man_timer.h"
     25          #include "man_lte.h"
     26          #include "man_gpio.h"
     27          #include "man_error.h"
     28          #include "man_usb.h"
     29          #include "mid_http.h"
     30          
     31          #pragma section = "APL_PRG_BLOCK"
     32          
     33          /************************************************************************/
     34          /* declaration of structure                                             */
     35          /************************************************************************/
     36          
     37          
     38          //#define	MAN_LTE_CSQ_INTERVAL			10		// CSQチェック間隔(秒)
     39          #define	MAN_LTE_CSQ_INTERVAL			5		// CSQチェック間隔(秒)
     40          
     41          #define	MAN_LTE_RETRY_MAX				2		// 2度 CLOSE, OPENを行う
     42          #define	MAN_LTE_OPEN_WAIT_TIME			3000	// 3秒
     43          #define	MAN_LTE_CLOSE_WAIT_TIME			30000	// 30秒
     44          #define	MAN_LTE_PWRKEY_ON_WAIT_TIME		500		// 500ms(マニュアルに合わせる)
     45          #define	MAN_LTE_PWRKEY_OFF_WAIT_TIME	23000	// 23000ms
     46          //#define	MAN_LTE_PWRKEY_OFF_WAIT_TIME	60000	// 23000ms
     47          #define	MAN_LTE_STBY_OUT_WAIT_TIME		1000	// 1000ms
     48          #define	MAN_LTE_RESET_ON_WAIT_TIME		1000	// 1000ms
     49          #define	MAN_LTE_STBY_OUT_NG_WAIT_TIME	5000	// 5000ms
     50          #define	MAN_LTE_RESET_WAIT_TIME			60000	// 60000ms
     51          #define	MAN_LTE_OFF_WAIT_TIME			3000	// 3000ms
     52          #define	MAN_LTE_STS_OFF_WAIT_TIME		30000	// 30000ms
     53          #define	MAN_LTE_OTA_OFF_WAIT_TIME		3000	// 3000ms
     54          
     55          
     56          #define	MAN_LTE_RETRY_OTA_OFF			9		// OTA禁止リトライ回数
     57          #define	MAN_LTE_RETRY_AT			20		// ATリトライ回数
     58          
     59          
     60          #define	MAN_LTE_STS_POWER_ON	0x01	// POWER ON実施済み
     61          #define	MAN_LTE_STS_LTE_INIT	0x02	// LTE INIT実施済み
     62          #define	MAN_LTE_STS_LTE_READY	0x04	// LTE READY実施済み
     63          #define	MAN_LTE_STS_LTE_OPEN	0x08	// LTE OPEN実施済み
     64          #define	MAN_LTE_STS_LTE_STBY	0x10	// LTE STBY実施済み
     65          #define	MAN_LTE_STS_OTA_OFF		0x20	// OTA OFF機能実施済み
     66          
     67          // 要求
     68          #define	MAN_CMD_REQ_CMD_NON			0		// 要求待ち
     69          #define	MAN_CMD_REQ_CMD_INIT		1		// network使用初期化
     70          #define	MAN_CMD_REQ_CMD_READY		2		// network使用準備
     71          #define	MAN_CMD_REQ_CMD_START		3		// network使用開始
     72          #define	MAN_CMD_REQ_CMD_STOP		4		// network使用終了
     73          #define	MAN_CMD_REQ_CMD_STBY		5		// network STBY
     74          #define	MAN_CMD_REQ_CMD_WAKEUP		6		// network WAKE UP
     75          #define	MAN_CMD_REQ_CMD_RESET		7		// network RESET
     76          #define	MAN_CMD_REQ_CMD_OFF			8		// network POWER OFF
     77          
     78          // LTE管理シーケンス
     79          typedef enum {
     80          	MAN_LTE_SEQ_READY,					// 00 : 要求待ち
     81          
     82          	MAN_LTE_SEQ_LTE_POWON_REQ,			// 01 : power on要求
     83          
     84          	MAN_LTE_SEQ_PWRKEY_ON_WAIT,			// 02 : PWRKEY ON 1000ms待ち
     85          	MAN_LTE_SEQ_PWRKEY_ON_WAIT_OK,		// 03 : PWRKEY ON 1000ms待ち完了
     86          	MAN_LTE_SEQ_PWRKEY_ON_WAIT_NG,		// 04 : PWRKEY ON 1000ms待ち異常
     87          
     88          	MAN_LTE_SEQ_PWRKEY_OFF_WAIT,		// 05 : LTEの安定の20秒間待ち
     89          	MAN_LTE_SEQ_PWRKEY_OFF_WAIT_OK,		// 06 : LTEの安定の20秒間待ち完了
     90          	MAN_LTE_SEQ_PWRKEY_OFF_WAIT_NG,		// 07 : LTEの安定の20秒間待ち異常
     91          
     92          	MAN_LTE_SEQ_LTE_OTA_OFF_REQ,		// 08 : OTA機能停止要求
     93          	MAN_LTE_SEQ_LTE_OTA_OFF_REQ_RETRY,		// 08 : OTA機能停止要求
     94          	MAN_LTE_SEQ_LTE_OTA_OFF,			// 09 : OTA機能停止中
     95          	MAN_LTE_SEQ_LTE_OTA_OFF_OK,			// 10 : OTA機能停止完了
     96          	MAN_LTE_SEQ_LTE_OTA_OFF_NG,			// 11 : OTA機能停止異常
     97          	MAN_LTE_SEQ_LTE_OTA_OFF_NG_WAIT,	// 12 : OTA機能停止異常 リトライ3秒待ち
     98          	MAN_LTE_SEQ_LTE_OTA_OFF_NG_WAIT_OK,	// 13 : OTA機能停止異常 リトライ3秒待ち完了
     99          	MAN_LTE_SEQ_LTE_OTA_OFF_NG_WAIT_NG,	// 14 : OTA機能停止異常 リトライ3秒待ち完了
    100          
    101          	MAN_LTE_SEQ_LTE_INIT_REQ,			// 15 : NETWORK使用初期化要求
    102          	MAN_LTE_SEQ_LTE_INIT,				// 16 : NETWORK使用初期化
    103          	MAN_LTE_SEQ_LTE_INIT_OK,			// 17 : NETWORK使用初期化完了
    104          	MAN_LTE_SEQ_LTE_INIT_NG,			// 18 : NETWORK使用初期化異常
    105          
    106          	MAN_LTE_SEQ_LTE_READY_REQ,			// 19 : NETWORK使用準備要求
    107          	MAN_LTE_SEQ_LTE_READY,				// 20 : NETWORK使用準備
    108          	MAN_LTE_SEQ_LTE_READY_OK,			// 21 : NETWORK使用準備完了
    109          	MAN_LTE_SEQ_LTE_READY_NG,			// 22 : NETWORK使用準備異常
    110          	
    111          	MAN_LTE_SEQ_LTE_START_REQ,			// 23 : NETWORK使用開始要求
    112          	MAN_LTE_SEQ_LTE_START,				// 24 : NETWORK使用開始
    113          	MAN_LTE_SEQ_LTE_START_OK,			// 25 : NETWORK使用開始完了
    114          	MAN_LTE_SEQ_LTE_START_NG,			// 26 : NETWORK使用開始異常
    115          	MAN_LTE_SEQ_LTE_OPEN_STOP,			// 27 : 一旦、CLOSE中
    116          	MAN_LTE_SEQ_LTE_OPEN_STOP_OK,		// 28 : CLOSE完了
    117          	MAN_LTE_SEQ_LTE_OPEN_STOP_NG,		// 29 : CLOSE異常
    118          	MAN_LTE_SEQ_LTE_OPEN_WAIT,			// 30 : 待ち中
    119          	MAN_LTE_SEQ_LTE_OPEN_WAIT_OK,		// 31 : 待ち終了
    120          	MAN_LTE_SEQ_LTE_OPEN_WAIT_NG,		// 32 : 待ち終了異常
    121          
    122          	MAN_LTE_SEQ_LTE_STOP_REQ,			// 33 : NETWORK使用終了要求
    123          	MAN_LTE_SEQ_LTE_STOP,				// 34 : NETWORK使用終了
    124          	MAN_LTE_SEQ_LTE_STOP_OK,			// 35 : NETWORK使用終了完了
    125          	MAN_LTE_SEQ_LTE_STOP_NG,			// 36 : NETWORK使用終了異常
    126          	MAN_LTE_SEQ_LTE_STOP_NG_WAIT,		// 37 : 通知によるCLOSEを30秒待つ
    127          	MAN_LTE_SEQ_LTE_STOP_NG_WAIT_OK,	// 38 : 30秒経過
    128          	MAN_LTE_SEQ_LTE_STOP_NG_WAIT_NG,	// 39 : 30秒経過
    129          	MAN_LTE_SEQ_LTE_STOP_NOTI_OK,		// 40 : NETWORK使用終了完了(通知)
    130          	MAN_LTE_SEQ_LTE_STOP_NOTI_NG,		// 41 : NETWORK使用終了異常(通知)
    131          
    132          	MAN_LTE_SEQ_LTE_STBY_IN_REQ,		// 42 : NETWORK STBY IN要求
    133          	MAN_LTE_SEQ_LTE_STBY_IN,			// 43 : NETWORK STBY IN中
    134          	MAN_LTE_SEQ_LTE_STBY_IN_OK,			// 44 : NETWORK STBY IN完了
    135          	MAN_LTE_SEQ_LTE_STBY_IN_NG,			// 45 : NETWORK STBY IN異常
    136          	MAN_LTE_SEQ_LTE_STBY_OUT_REQ,		// 46 : NETWORK STBY OUT要求
    137          	MAN_LTE_SEQ_LTE_STBY_OUT,			// 47 : NETWORK STBY OUT中
    138          	MAN_LTE_SEQ_LTE_STBY_OUT_OK,		// 48 : NETWORK STBY OUT完了
    139          	MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT,	// 49 : NETWORK STBY OUT RESET待ち
    140          	MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT_OK,// 50 : NETWORK STBY OUT RESET待ち終了
    141          	MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT_NG,// 51 : NETWORK STBY OUT RESET待ち終了
    142          	
    143          	MAN_LTE_SEQ_LTE_STBY_OUT_NG,		// 52 : NETWORK STBY OUT異常
    144          	MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT,	// 53 : NETWORK STBY OUT RESET待ち
    145          	MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT_OK,// 54 : NETWORK STBY OUT RESET待ち終了
    146          	MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT_NG,// 55 : NETWORK STBY OUT RESET待ち終了
    147          
    148          	MAN_LTE_SEQ_LTE_STBY_OUT_WAIT,		// 56 : NETWORK STBY OUT安定待ち
    149          	MAN_LTE_SEQ_LTE_STBY_OUT_WAIT_OK,	// 57 : NETWORK STBY OUT安定待ち完了
    150          	MAN_LTE_SEQ_LTE_STBY_OUT_WAIT_NG,	// 58 : NETWORK STBY OUT安定待ち異常
    151          
    152          	MAN_LTE_SEQ_LTE_RESET_REQ,			// 59 : NETWORK RESET要求
    153          	MAN_LTE_SEQ_LTE_RESET_ON_WAIT,		// 60 : NETWORK RESET ON１秒待ち
    154          	MAN_LTE_SEQ_LTE_RESET_ON_WAIT_OK,	// 61 : NETWORK RESET ON１秒待ち完了
    155          	MAN_LTE_SEQ_LTE_RESET_ON_WAIT_NG,	// 62 : NETWORK RESET ON１秒待ち異常
    156          	MAN_LTE_SEQ_LTE_RESET_OFF_WAIT,		// 63 : NETWORK RESET ON２０秒待ち
    157          	MAN_LTE_SEQ_LTE_RESET_OFF_WAIT_OK,	// 64 : NETWORK RESET ON２０秒待ち完了
    158          	MAN_LTE_SEQ_LTE_RESET_OFF_WAIT_NG,	// 65 : NETWORK RESET ON２０秒待ち異常
    159          
    160          	MAN_LTE_SEQ_LTE_ATRESET_REQ,		// 66 : NETWORK AT RESET要求
    161          	MAN_LTE_SEQ_LTE_ATRESET,			// 67 : NETWORK AT RESET実行開始中
    162          	MAN_LTE_SEQ_LTE_ATRESET_OK,			// 68 : NETWORK AT RESET実行開始OK
    163          	MAN_LTE_SEQ_LTE_ATRESET_NG,			// 69 : NETWORK AT RESET実行開始NG
    164          	MAN_LTE_SEQ_LTE_ATRESET_WAIT,		// 70 : NETWORK AT RESET実行完了待ち
    165          	MAN_LTE_SEQ_LTE_ATRESET_WAIT_OK,	// 71 : NETWORK AT RESET実行完了失敗
    166          	MAN_LTE_SEQ_LTE_ATRESET_WAIT_NG,	// 72 : NETWORK AT RESET実行完了失敗
    167          	MAN_LTE_SEQ_LTE_ATRESET_EXEC_OK,	// 73 : NETWORK AT RESET実行完了成功
    168          
    169          	MAN_LTE_SEQ_LTE_POWOFF_REQ,			// 74 : power off要求
    170          	MAN_LTE_SEQ_LTE_POWOFF,				// 75 : power off(PWRKEY LOW安定待ち)
    171          	MAN_LTE_SEQ_LTE_POWOFF_OK,			// 76 : power off(PWRKEY LOW安定待ち完了)
    172          	MAN_LTE_SEQ_LTE_POWOFF_NG,			// 77 : power off(PWRKEY LOW安定待ち完了)
    173          	MAN_LTE_SEQ_LTE_POWOFF_WAIT,		// 78 : power off STATUS待ち
    174          	MAN_LTE_SEQ_LTE_POWOFF_WAIT_OK,		// 79 : power off STATUS完了成功
    175          	MAN_LTE_SEQ_LTE_POWOFF_WAIT_NG,		// 80 : power off STATUS完了失敗
    176          
    177          } man_lte_seq_def;
    178          
    179          #define	MAN_LTE_NOTI_STATE		1000
    180          
    181          
    182          // 要求
    183          typedef struct _man_lte_req_info_t {
    184          	int32_t					req_cmd;	// 要求
    185          	int32_t					id;			// ユニークID
    186          	func_man_lte			callback;	// 結果を通知するcallback関数
    187          } man_lte_req_info_t;
    188          
    189          // 要求に対する応答
    190          typedef struct _man_lte_resp_cmd_t {
    191          	int32_t					flag;
    192          	int32_t					id;
    193          	int32_t					status;
    194          } man_lte_resp_cmd_t;
    195          
    196          
    197          // 受信状態通知先情報
    198          typedef struct _man_lte_state_info_t {
    199          	int32_t					id;					// ユニークID
    200          	func_man_http_state		callback_state;		// 状態を通知するcallback関数
    201          	int32_t					state;				// 通知した状態
    202          } man_lte_state_info_t;
    203          
    204          
    205          // レポート管理ワーク
    206          typedef struct _man_lte_work_t {
    207          	man_lte_mode_def		mode;		// モード
    208          	man_lte_seq_def			sequense;	// シーケンス
    209          	man_lte_req_info_t		request;	// 要求
    210          	man_lte_resp_cmd_t		resp_cmd;	// 要求に対する応答
    211          	int32_t					retry;
    212          	int32_t					ota_off_flag;
    213          
    214          	int32_t					lte_sts;
    215          
    216          	int32_t					chk_csq;		// CSQ確認
    217          	int32_t					csq_interval;
    218          
    219          	man_lte_state_info_t	noti_state;		// 受信状態通知先情報
    220          	int32_t					req_state;
    221          	man_lte_seq_def			seq_log[100];	// シーケンスログ
    222          	int32_t					seq_wp;
    223          
    224          	uint8_t					buff[100];
    225          } man_lte_work_t;
    226          
    227          /************************************************************************/
    228          /* definition of variables                                              */
    229          /************************************************************************/
    230          

   \                                 In section .bss, align 4
    231          man_lte_work_t	man_lte_work;
   \                     man_lte_work:
   \   00000000                      DS8 268
    232          
    233          
    234          
    235          
    236          /********************************************************************/
    237          /*	callback関数                                                    */
    238          /********************************************************************/
    239          
    240          /********************************************************************/
    241          /*!
    242           * \name	man_lte_req_callback
    243           * \brief	要求に対するcallback処理
    244           * \param	id     : ユニークID
    245           *          status : 受信結果
    246           * \return  なし
    247           * \note	
    248           */
    249          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    250          static void man_lte_req_callback(int32_t id, int32_t status)
    251          {
    252          	man_lte_work.resp_cmd.flag = 1;
   \                     man_lte_req_callback: (+1)
   \   00000000   0x2201             MOVS     R2,#+1
   \   00000002   0x....             LDR      R3,??DataTable3
   \   00000004   0x611A             STR      R2,[R3, #+16]
    253          	man_lte_work.resp_cmd.id = id & TIMER_MAN_ID_MASK;
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x....             LDR      R2,??DataTable3
   \   0000000A   0x6150             STR      R0,[R2, #+20]
    254          	man_lte_work.resp_cmd.status = status;
   \   0000000C   0x....             LDR      R0,??DataTable3
   \   0000000E   0x6181             STR      R1,[R0, #+24]
    255          }
   \   00000010   0x4770             BX       LR               ;; return
    256          
    257          
    258          /********************************************************************/
    259          /*	static関数                                                      */
    260          /********************************************************************/
    261          
    262          /********************************************************************/
    263          /*!
    264           * \name	man_lte_set_sequense
    265           * \brief	シーケンスを設定する
    266           * \param	sequense : 設定するシーケンス
    267           * \return  なし
    268           * \note	
    269           */
    270          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    271          static void man_lte_set_sequense( man_lte_seq_def sequense )
    272          {
   \                     man_lte_set_sequense: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    273          	if (man_lte_work.sequense != sequense) {
   \   00000002   0x....             LDR      R1,??DataTable3
   \   00000004   0x7849             LDRB     R1,[R1, #+1]
   \   00000006   0x0002             MOVS     R2,R0
   \   00000008   0xB2D2             UXTB     R2,R2
   \   0000000A   0x4291             CMP      R1,R2
   \   0000000C   0xD019             BEQ      ??man_lte_set_sequense_0
    274          		man_lte_work.sequense = sequense;
   \   0000000E   0x....             LDR      R1,??DataTable3
   \   00000010   0x7048             STRB     R0,[R1, #+1]
    275          		man_lte_work.seq_log[man_lte_work.seq_wp] = sequense;
   \   00000012   0x....             LDR      R1,??DataTable3
   \   00000014   0x....             LDR      R2,??DataTable3_1
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0x1889             ADDS     R1,R1,R2
   \   0000001A   0x2240             MOVS     R2,#+64
   \   0000001C   0x5488             STRB     R0,[R1, R2]
    276          		man_lte_work.seq_wp++;
   \   0000001E   0x....             LDR      R1,??DataTable3_1
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x1C49             ADDS     R1,R1,#+1
   \   00000024   0x....             LDR      R2,??DataTable3_1
   \   00000026   0x6011             STR      R1,[R2, #+0]
    277          		if (man_lte_work.seq_wp >= 100) {
   \   00000028   0x....             LDR      R1,??DataTable3_1
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x2964             CMP      R1,#+100
   \   0000002E   0xDB02             BLT      ??man_lte_set_sequense_1
    278          			man_lte_work.seq_wp = 0;
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x....             LDR      R2,??DataTable3_1
   \   00000034   0x6011             STR      R1,[R2, #+0]
    279          		}
    280          
    281          		// デバックログに登録 
    282          		man_dbglog_setting(MAN_ERROR_DBG_MAN_LTE, MAN_ERROR_DBG_TYPE_SEQ, sequense);
   \                     ??man_lte_set_sequense_1: (+1)
   \   00000036   0xB2C0             UXTB     R0,R0
   \   00000038   0x0002             MOVS     R2,R0
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2004             MOVS     R0,#+4
   \   0000003E   0x.... 0x....      BL       man_dbglog_setting
    283          
    284          #ifdef GNSS_DEBUG_MAN_LTE 
    285          			int32_t		length;
    286          			sprintf((char *)&man_lte_work.buff[0], "LTE SEQ(%d)\n", sequense);
    287          			length = strlen((char const *)&man_lte_work.buff[0]);
    288          			man_usb_data_send(&man_lte_work.buff[0], length);
    289          #endif
    290          		
    291          	}
    292          }
   \                     ??man_lte_set_sequense_0: (+1)
   \   00000042   0xBD01             POP      {R0,PC}          ;; return
    293          
    294          
    295          /********************************************************************/
    296          /*!
    297           * \name	man_lte_return_callback
    298           * \brief	callback応答を返す処理
    299           * \param	status : 通知するステータス
    300           * \return   0: 成功
    301           *          -1:失敗
    302           * \note	
    303           */
    304          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    305          static void man_lte_return_callback( int32_t status )
    306          {
   \                     man_lte_return_callback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    307          
    308          	// callback関数で終了通知
    309          	if (man_lte_work.request.callback != NULL) {
   \   00000002   0x....             LDR      R1,??DataTable3
   \   00000004   0x68C9             LDR      R1,[R1, #+12]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD008             BEQ      ??man_lte_return_callback_0
    310          		man_lte_work.request.callback(man_lte_work.request.id, status);
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0x....             LDR      R0,??DataTable3
   \   0000000E   0x6880             LDR      R0,[R0, #+8]
   \   00000010   0x....             LDR      R2,??DataTable3
   \   00000012   0x68D2             LDR      R2,[R2, #+12]
   \   00000014   0x4790             BLX      R2
    311          		man_lte_work.request.callback = NULL;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR      R1,??DataTable3
   \   0000001A   0x60C8             STR      R0,[R1, #+12]
    312          	}
    313          	man_lte_set_sequense(MAN_LTE_SEQ_READY);
   \                     ??man_lte_return_callback_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       man_lte_set_sequense
    314          	man_lte_work.request.req_cmd = MAN_CMD_REQ_CMD_NON;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR      R1,??DataTable3
   \   00000026   0x6048             STR      R0,[R1, #+4]
    315          }
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
    316          
    317          
    318          /********************************************************************/
    319          /*	extern関数                                                      */
    320          /********************************************************************/
    321          
    322          /********************************************************************/
    323          /*!
    324           * \name	man_lte_init
    325           * \brief	LTE管理の初期化処理
    326           * \param	なし
    327           * \return  なし
    328           * \note	起動時に、呼ばれること
    329           */
    330          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    331          void man_lte_init(void)
    332          {
   \                     man_lte_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    333          	// 内部変数を初期化する
    334          	memset(&man_lte_work, 0, sizeof(man_lte_work_t));
   \   00000002   0x2186             MOVS     R1,#+134
   \   00000004   0x0049             LSLS     R1,R1,#+1        ;; #+268
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x....             LDR      R4,??DataTable3
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
    335          
    336          	// 状態変化の通知を依頼する
    337          	man_http_lte_state(MAN_LTE_NOTI_STATE, man_lte_req_callback);
   \   00000010   0x....             LDR      R1,??DataTable3_2
   \   00000012   0x20FA             MOVS     R0,#+250
   \   00000014   0x0080             LSLS     R0,R0,#+2        ;; #+1000
   \   00000016   0x.... 0x....      BL       man_http_lte_state
    338          }
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    339          
    340          
    341          /********************************************************************/
    342          /*!
    343           * \name	man_lte_main
    344           * \brief	LTE管理のメイン処理
    345           * \param	なし
    346           * \return  なし
    347           * \note	毎回、呼ばれること
    348           */
    349          /********************************************************************/

   \                                 In section .text, align 4, keep-with-next
    350          void man_lte_main( void )
    351          {
   \                     man_lte_main: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    352          	int32_t		ret;
    353          	int32_t		sts;
    354          	sts = man_http_get_status();
   \   00000004   0x.... 0x....      BL       man_http_get_status
   \   00000008   0x0004             MOVS     R4,R0
    355          
    356          	// ******************************************************
    357          	// 応答処理
    358          	// ******************************************************
    359          	if (man_lte_work.resp_cmd.flag == 1) {
   \   0000000A   0x486A             LDR      R0,??man_lte_main_0
   \   0000000C   0x6900             LDR      R0,[R0, #+16]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD000             BEQ      .+4
   \   00000012   0xE236             B        ??man_lte_main_1
    360          		man_lte_work.resp_cmd.flag = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x4967             LDR      R1,??man_lte_main_0
   \   00000018   0x6108             STR      R0,[R1, #+16]
    361          
    362          		// 状態通知処理
    363          		if (man_lte_work.resp_cmd.id == MAN_LTE_NOTI_STATE) {
   \   0000001A   0x4866             LDR      R0,??man_lte_main_0
   \   0000001C   0x6940             LDR      R0,[R0, #+20]
   \   0000001E   0x21FA             MOVS     R1,#+250
   \   00000020   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000022   0x4288             CMP      R0,R1
   \   00000024   0xD000             BEQ      .+4
   \   00000026   0xE0E1             B        ??man_lte_main_2
    364          
    365          #ifdef GNSS_DEBUG_MAN_LTE 
    366          			int32_t		length;
    367          			sprintf((char *)&man_lte_work.buff[0], "LTE NOTI(%d)\n", man_lte_work.resp_cmd.status);
    368          			length = strlen((char const *)&man_lte_work.buff[0]);
    369          			man_usb_data_send(&man_lte_work.buff[0], length);
    370          #endif
    371          			// デバックログに登録 
    372          			man_dbglog_setting(MAN_ERROR_DBG_MAN_LTE, MAN_ERROR_DBG_TYPE_NOTI, man_lte_work.resp_cmd.status);
   \   00000028   0x4862             LDR      R0,??man_lte_main_0
   \   0000002A   0x6982             LDR      R2,[R0, #+24]
   \   0000002C   0x2102             MOVS     R1,#+2
   \   0000002E   0x2004             MOVS     R0,#+4
   \   00000030   0x.... 0x....      BL       man_dbglog_setting
    373          
    374          			switch (man_lte_work.resp_cmd.status) {
   \   00000034   0x485F             LDR      R0,??man_lte_main_0
   \   00000036   0x6980             LDR      R0,[R0, #+24]
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD05D             BEQ      ??man_lte_main_3
   \   0000003C   0x2805             CMP      R0,#+5
   \   0000003E   0xD00E             BEQ      ??man_lte_main_4
   \   00000040   0x2807             CMP      R0,#+7
   \   00000042   0xD071             BEQ      ??man_lte_main_5
   \   00000044   0x280B             CMP      R0,#+11
   \   00000046   0xD100             BNE      .+4
   \   00000048   0xE086             B        ??man_lte_main_6
   \   0000004A   0x280C             CMP      R0,#+12
   \   0000004C   0xD100             BNE      .+4
   \   0000004E   0xE092             B        ??man_lte_main_7
   \   00000050   0x280D             CMP      R0,#+13
   \   00000052   0xD100             BNE      .+4
   \   00000054   0xE09E             B        ??man_lte_main_8
   \   00000056   0x280E             CMP      R0,#+14
   \   00000058   0xD100             BNE      .+4
   \   0000005A   0xE0B7             B        ??man_lte_main_9
   \   0000005C   0xE0C5             B        ??man_lte_main_10
    375          			// PB DONE(リセット)
    376          			case MAN_HTTP_STATE_RESET_OK:
    377          				// 電波状況を圏外にする
    378          				man_http_set_rssi_ng();
   \                     ??man_lte_main_4: (+1)
   \   0000005E   0x.... 0x....      BL       man_http_set_rssi_ng
    379          
    380          				// 起動時、RESETが発生しても20秒待つ
    381          				if (man_lte_work.sequense == MAN_LTE_SEQ_PWRKEY_OFF_WAIT) {
   \   00000062   0x4854             LDR      R0,??man_lte_main_0
   \   00000064   0x7840             LDRB     R0,[R0, #+1]
   \   00000066   0x2805             CMP      R0,#+5
   \   00000068   0xD045             BEQ      ??man_lte_main_11
    382          					;
    383          				}
    384          				// リセット実施中、RESETが発生しても20秒待つ
    385          				else if (man_lte_work.sequense == MAN_LTE_SEQ_LTE_RESET_OFF_WAIT) {
   \   0000006A   0x4852             LDR      R0,??man_lte_main_0
   \   0000006C   0x7840             LDRB     R0,[R0, #+1]
   \   0000006E   0x2840             CMP      R0,#+64
   \   00000070   0xD041             BEQ      ??man_lte_main_11
    386          					;
    387          				}
    388          				// STBY OUT時は復帰処理を開始する
    389          				else if (man_lte_work.sequense == MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT) {
   \   00000072   0x4850             LDR      R0,??man_lte_main_0
   \   00000074   0x7840             LDRB     R0,[R0, #+1]
   \   00000076   0x2832             CMP      R0,#+50
   \   00000078   0xD10D             BNE      ??man_lte_main_12
    390          					// 5秒タイマ停止
    391          					man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT, MAN_LTE_STBY_OUT_NG_WAIT_TIME);
   \   0000007A   0x494F             LDR      R1,??man_lte_main_0+0x4  ;; 0x1388
   \   0000007C   0x484F             LDR      R0,??man_lte_main_0+0x8  ;; 0x40400032
   \   0000007E   0x.... 0x....      BL       man_timer_cancel_wait
    392          					// LTE スタンバイ解除済み
    393          					man_lte_work.lte_sts &= ~MAN_LTE_STS_LTE_STBY;
   \   00000082   0x484C             LDR      R0,??man_lte_main_0
   \   00000084   0x6A40             LDR      R0,[R0, #+36]
   \   00000086   0x2110             MOVS     R1,#+16
   \   00000088   0x4388             BICS     R0,R0,R1
   \   0000008A   0x494A             LDR      R1,??man_lte_main_0
   \   0000008C   0x6248             STR      R0,[R1, #+36]
    394          					// 正常復帰
    395          					man_lte_return_callback(MAN_LTE_STATUS_OK);
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x.... 0x....      BL       man_lte_return_callback
   \   00000094   0xE02F             B        ??man_lte_main_11
    396          				}
    397          
    398          				else if (man_lte_work.sequense == MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT) {
   \                     ??man_lte_main_12: (+1)
   \   00000096   0x4847             LDR      R0,??man_lte_main_0
   \   00000098   0x7840             LDRB     R0,[R0, #+1]
   \   0000009A   0x2836             CMP      R0,#+54
   \   0000009C   0xD10D             BNE      ??man_lte_main_13
    399          					// 5秒タイマ停止
    400          					man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT, MAN_LTE_STBY_OUT_NG_WAIT_TIME);
   \   0000009E   0x4946             LDR      R1,??man_lte_main_0+0x4  ;; 0x1388
   \   000000A0   0x4847             LDR      R0,??man_lte_main_0+0xC  ;; 0x40400036
   \   000000A2   0x.... 0x....      BL       man_timer_cancel_wait
    401          					// LTE スタンバイ解除済み
    402          					man_lte_work.lte_sts &= ~MAN_LTE_STS_LTE_STBY;
   \   000000A6   0x4843             LDR      R0,??man_lte_main_0
   \   000000A8   0x6A40             LDR      R0,[R0, #+36]
   \   000000AA   0x2110             MOVS     R1,#+16
   \   000000AC   0x4388             BICS     R0,R0,R1
   \   000000AE   0x4941             LDR      R1,??man_lte_main_0
   \   000000B0   0x6248             STR      R0,[R1, #+36]
    403          					// 正常復帰
    404          					man_lte_return_callback(MAN_LTE_STATUS_OK);
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x.... 0x....      BL       man_lte_return_callback
   \   000000B8   0xE01D             B        ??man_lte_main_11
    405          				}
    406          				
    407          				else if (man_lte_work.sequense == MAN_LTE_SEQ_LTE_ATRESET_WAIT) {
   \                     ??man_lte_main_13: (+1)
   \   000000BA   0x483E             LDR      R0,??man_lte_main_0
   \   000000BC   0x7840             LDRB     R0,[R0, #+1]
   \   000000BE   0x2847             CMP      R0,#+71
   \   000000C0   0xD107             BNE      ??man_lte_main_14
    408          					// 60秒タイマ停止
    409          					man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_ATRESET_WAIT, MAN_LTE_RESET_WAIT_TIME);
   \   000000C2   0x4940             LDR      R1,??man_lte_main_0+0x10  ;; 0xea60
   \   000000C4   0x4840             LDR      R0,??man_lte_main_0+0x14  ;; 0x40400047
   \   000000C6   0x.... 0x....      BL       man_timer_cancel_wait
    410          					// LTEが起床済み
    411          					man_lte_set_sequense(MAN_LTE_SEQ_LTE_ATRESET_WAIT_OK);
   \   000000CA   0x2048             MOVS     R0,#+72
   \   000000CC   0x.... 0x....      BL       man_lte_set_sequense
   \   000000D0   0xE011             B        ??man_lte_main_11
    412          				}
    413          				
    414          				
    415          				// 意図したタイミング以外でリセット発生した場合は上位に通知する
    416          				else {
    417          					// POWER OFF実行中は無視する
    418          					if (man_lte_work.lte_sts != 0) {
   \                     ??man_lte_main_14: (+1)
   \   000000D2   0x4838             LDR      R0,??man_lte_main_0
   \   000000D4   0x6A40             LDR      R0,[R0, #+36]
   \   000000D6   0x2800             CMP      R0,#+0
   \   000000D8   0xD00D             BEQ      ??man_lte_main_11
    419          						man_lte_work.noti_state.state = MAN_LTE_STATE_RESET;
   \   000000DA   0x2001             MOVS     R0,#+1
   \   000000DC   0x4935             LDR      R1,??man_lte_main_0
   \   000000DE   0x6388             STR      R0,[R1, #+56]
    420          						if (man_lte_work.noti_state.callback_state != NULL) {
   \   000000E0   0x4834             LDR      R0,??man_lte_main_0
   \   000000E2   0x6B40             LDR      R0,[R0, #+52]
   \   000000E4   0x2800             CMP      R0,#+0
   \   000000E6   0xD006             BEQ      ??man_lte_main_11
    421          							man_lte_work.noti_state.callback_state(man_lte_work.noti_state.id, man_lte_work.noti_state.state);
   \   000000E8   0x4832             LDR      R0,??man_lte_main_0
   \   000000EA   0x6B81             LDR      R1,[R0, #+56]
   \   000000EC   0x4831             LDR      R0,??man_lte_main_0
   \   000000EE   0x6B00             LDR      R0,[R0, #+48]
   \   000000F0   0x4A30             LDR      R2,??man_lte_main_0
   \   000000F2   0x6B52             LDR      R2,[R2, #+52]
   \   000000F4   0x4790             BLX      R2
    422          						}
    423          					}
    424          				}
    425          				break;
   \                     ??man_lte_main_11: (+1)
   \   000000F6   0xE1C4             B        ??man_lte_main_1
    426          
    427          			// NET CLOSEに成功
    428          			case MAN_HTTP_STATE_CLOSE:
    429          				if ( (man_lte_work.sequense == MAN_LTE_SEQ_LTE_STOP_NG) || (man_lte_work.sequense == MAN_LTE_SEQ_LTE_STOP) ) {
   \                     ??man_lte_main_3: (+1)
   \   000000F8   0x482E             LDR      R0,??man_lte_main_0
   \   000000FA   0x7840             LDRB     R0,[R0, #+1]
   \   000000FC   0x2825             CMP      R0,#+37
   \   000000FE   0xD003             BEQ      ??man_lte_main_15
   \   00000100   0x482C             LDR      R0,??man_lte_main_0
   \   00000102   0x7840             LDRB     R0,[R0, #+1]
   \   00000104   0x2823             CMP      R0,#+35
   \   00000106   0xD103             BNE      ??man_lte_main_16
    430          					man_lte_set_sequense(MAN_LTE_SEQ_LTE_STOP_NOTI_OK);
   \                     ??man_lte_main_15: (+1)
   \   00000108   0x2029             MOVS     R0,#+41
   \   0000010A   0x.... 0x....      BL       man_lte_set_sequense
   \   0000010E   0xE00A             B        ??man_lte_main_17
    431          				}
    432          				else if (man_lte_work.sequense == MAN_LTE_SEQ_LTE_STOP_NG_WAIT) {
   \                     ??man_lte_main_16: (+1)
   \   00000110   0x4828             LDR      R0,??man_lte_main_0
   \   00000112   0x7840             LDRB     R0,[R0, #+1]
   \   00000114   0x2826             CMP      R0,#+38
   \   00000116   0xD106             BNE      ??man_lte_main_17
    433          					man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_STOP_NG_WAIT, MAN_LTE_CLOSE_WAIT_TIME);
   \   00000118   0x49A2             LDR      R1,??man_lte_main_18  ;; 0x7530
   \   0000011A   0x48A3             LDR      R0,??man_lte_main_18+0x4  ;; 0x40400026
   \   0000011C   0x.... 0x....      BL       man_timer_cancel_wait
    434          					man_lte_set_sequense(MAN_LTE_SEQ_LTE_STOP_NOTI_OK);
   \   00000120   0x2029             MOVS     R0,#+41
   \   00000122   0x.... 0x....      BL       man_lte_set_sequense
    435          				}
    436          				break;
   \                     ??man_lte_main_17: (+1)
   \   00000126   0xE1AC             B        ??man_lte_main_1
    437          
    438          			// NET CLOSEに失敗
    439          			case MAN_HTTP_STATE_CLOSE_NG:
    440          				if ( (man_lte_work.sequense == MAN_LTE_SEQ_LTE_STOP_NG) || (man_lte_work.sequense == MAN_LTE_SEQ_LTE_STOP) ) {
   \                     ??man_lte_main_5: (+1)
   \   00000128   0x4822             LDR      R0,??man_lte_main_0
   \   0000012A   0x7840             LDRB     R0,[R0, #+1]
   \   0000012C   0x2825             CMP      R0,#+37
   \   0000012E   0xD003             BEQ      ??man_lte_main_19
   \   00000130   0x4820             LDR      R0,??man_lte_main_0
   \   00000132   0x7840             LDRB     R0,[R0, #+1]
   \   00000134   0x2823             CMP      R0,#+35
   \   00000136   0xD103             BNE      ??man_lte_main_20
    441          					man_lte_set_sequense(MAN_LTE_SEQ_LTE_STOP_NOTI_NG);
   \                     ??man_lte_main_19: (+1)
   \   00000138   0x202A             MOVS     R0,#+42
   \   0000013A   0x.... 0x....      BL       man_lte_set_sequense
   \   0000013E   0xE00A             B        ??man_lte_main_21
    442          				}
    443          				else if (man_lte_work.sequense == MAN_LTE_SEQ_LTE_STOP_NG_WAIT) {
   \                     ??man_lte_main_20: (+1)
   \   00000140   0x481C             LDR      R0,??man_lte_main_0
   \   00000142   0x7840             LDRB     R0,[R0, #+1]
   \   00000144   0x2826             CMP      R0,#+38
   \   00000146   0xD106             BNE      ??man_lte_main_21
    444          					man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_STOP_NG_WAIT, MAN_LTE_CLOSE_WAIT_TIME);
   \   00000148   0x4996             LDR      R1,??man_lte_main_18  ;; 0x7530
   \   0000014A   0x4897             LDR      R0,??man_lte_main_18+0x4  ;; 0x40400026
   \   0000014C   0x.... 0x....      BL       man_timer_cancel_wait
    445          					man_lte_set_sequense(MAN_LTE_SEQ_LTE_STOP_NOTI_NG);
   \   00000150   0x202A             MOVS     R0,#+42
   \   00000152   0x.... 0x....      BL       man_lte_set_sequense
    446          				}
    447          				break;
   \                     ??man_lte_main_21: (+1)
   \   00000156   0xE194             B        ??man_lte_main_1
    448          
    449          			// SM7500JE の自動 NET CLOSE
    450          			case MAN_HTTP_STATE_NET_CLOSE_OK:
    451          				man_lte_work.noti_state.state = MAN_LTE_STATE_NET_CLOSE;
   \                     ??man_lte_main_6: (+1)
   \   00000158   0x200B             MOVS     R0,#+11
   \   0000015A   0x4916             LDR      R1,??man_lte_main_0
   \   0000015C   0x6388             STR      R0,[R1, #+56]
    452          				if (man_lte_work.noti_state.callback_state != NULL) {
   \   0000015E   0x4815             LDR      R0,??man_lte_main_0
   \   00000160   0x6B40             LDR      R0,[R0, #+52]
   \   00000162   0x2800             CMP      R0,#+0
   \   00000164   0xD006             BEQ      ??man_lte_main_22
    453          					man_lte_work.noti_state.callback_state(man_lte_work.noti_state.id, man_lte_work.noti_state.state);
   \   00000166   0x4813             LDR      R0,??man_lte_main_0
   \   00000168   0x6B81             LDR      R1,[R0, #+56]
   \   0000016A   0x4812             LDR      R0,??man_lte_main_0
   \   0000016C   0x6B00             LDR      R0,[R0, #+48]
   \   0000016E   0x4A11             LDR      R2,??man_lte_main_0
   \   00000170   0x6B52             LDR      R2,[R2, #+52]
   \   00000172   0x4790             BLX      R2
    454          				}
    455          				break;
   \                     ??man_lte_main_22: (+1)
   \   00000174   0xE185             B        ??man_lte_main_1
    456          				
    457          			// SM7500JE のNOT_SUPPORT
    458          			case MAN_HTTP_STATE_DEV_NOT_SUPPORT:
    459          				man_lte_work.noti_state.state = MAN_LTE_STATE_DEV_NOT_SUPPORT;
   \                     ??man_lte_main_7: (+1)
   \   00000176   0x200C             MOVS     R0,#+12
   \   00000178   0x490E             LDR      R1,??man_lte_main_0
   \   0000017A   0x6388             STR      R0,[R1, #+56]
    460          				if (man_lte_work.noti_state.callback_state != NULL) {
   \   0000017C   0x480D             LDR      R0,??man_lte_main_0
   \   0000017E   0x6B40             LDR      R0,[R0, #+52]
   \   00000180   0x2800             CMP      R0,#+0
   \   00000182   0xD006             BEQ      ??man_lte_main_23
    461          					man_lte_work.noti_state.callback_state(man_lte_work.noti_state.id, man_lte_work.noti_state.state);
   \   00000184   0x480B             LDR      R0,??man_lte_main_0
   \   00000186   0x6B81             LDR      R1,[R0, #+56]
   \   00000188   0x480A             LDR      R0,??man_lte_main_0
   \   0000018A   0x6B00             LDR      R0,[R0, #+48]
   \   0000018C   0x4A09             LDR      R2,??man_lte_main_0
   \   0000018E   0x6B52             LDR      R2,[R2, #+52]
   \   00000190   0x4790             BLX      R2
    462          				}
    463          				break;
   \                     ??man_lte_main_23: (+1)
   \   00000192   0xE176             B        ??man_lte_main_1
    464          
    465          			// SM7500JE のDEV BUSY
    466          			case MAN_HTTP_STATE_DEV_BUSY:
    467          				man_lte_work.noti_state.state = MAN_LTE_STATE_DEV_BUSY;
   \                     ??man_lte_main_8: (+1)
   \   00000194   0x200D             MOVS     R0,#+13
   \   00000196   0x4907             LDR      R1,??man_lte_main_0
   \   00000198   0x6388             STR      R0,[R1, #+56]
    468          				if (man_lte_work.noti_state.callback_state != NULL) {
   \   0000019A   0x4806             LDR      R0,??man_lte_main_0
   \   0000019C   0x6B40             LDR      R0,[R0, #+52]
   \   0000019E   0x2800             CMP      R0,#+0
   \   000001A0   0xD006             BEQ      ??man_lte_main_24
    469          					man_lte_work.noti_state.callback_state(man_lte_work.noti_state.id, man_lte_work.noti_state.state);
   \   000001A2   0x4804             LDR      R0,??man_lte_main_0
   \   000001A4   0x6B81             LDR      R1,[R0, #+56]
   \   000001A6   0x4803             LDR      R0,??man_lte_main_0
   \   000001A8   0x6B00             LDR      R0,[R0, #+48]
   \   000001AA   0x4A02             LDR      R2,??man_lte_main_0
   \   000001AC   0x6B52             LDR      R2,[R2, #+52]
   \   000001AE   0x4790             BLX      R2
    470          				}
    471          				break;
   \                     ??man_lte_main_24: (+1)
   \   000001B0   0xE167             B        ??man_lte_main_1
   \   000001B2   0xBF00             Nop      
   \                     ??man_lte_main_0:
   \   000001B4   0x........         DC32     man_lte_work
   \   000001B8   0x00001388         DC32     0x1388
   \   000001BC   0x40400032         DC32     0x40400032
   \   000001C0   0x40400036         DC32     0x40400036
   \   000001C4   0x0000EA60         DC32     0xea60
   \   000001C8   0x40400047         DC32     0x40400047
    472          
    473          			// 使用できないSIMCARD
    474          			case MAN_HTTP_STATE_SIMCARD_NG:
    475          				man_lte_work.noti_state.state = MAN_LTE_STATE_SIMCARD_NG;
   \                     ??man_lte_main_9: (+1)
   \   000001CC   0x200E             MOVS     R0,#+14
   \   000001CE   0x4977             LDR      R1,??man_lte_main_18+0x8
   \   000001D0   0x6388             STR      R0,[R1, #+56]
    476          				if (man_lte_work.noti_state.callback_state != NULL) {
   \   000001D2   0x4876             LDR      R0,??man_lte_main_18+0x8
   \   000001D4   0x6B40             LDR      R0,[R0, #+52]
   \   000001D6   0x2800             CMP      R0,#+0
   \   000001D8   0xD006             BEQ      ??man_lte_main_25
    477          					man_lte_work.noti_state.callback_state(man_lte_work.noti_state.id, man_lte_work.noti_state.state);
   \   000001DA   0x4874             LDR      R0,??man_lte_main_18+0x8
   \   000001DC   0x6B81             LDR      R1,[R0, #+56]
   \   000001DE   0x4873             LDR      R0,??man_lte_main_18+0x8
   \   000001E0   0x6B00             LDR      R0,[R0, #+48]
   \   000001E2   0x4A72             LDR      R2,??man_lte_main_18+0x8
   \   000001E4   0x6B52             LDR      R2,[R2, #+52]
   \   000001E6   0x4790             BLX      R2
    478          				}
    479          				break;
   \                     ??man_lte_main_25: (+1)
   \   000001E8   0xE14B             B        ??man_lte_main_1
    480          
    481          			default:
    482          				break;
   \                     ??man_lte_main_10: (+1)
   \   000001EA   0xE14A             B        ??man_lte_main_1
    483          			}
    484          		}
    485          		
    486          		// コマンド応答処理
    487          		else {
    488          			// 応答が正常な場合
    489          			if (man_lte_work.resp_cmd.status == MAN_HTTP_STATUS_OK) {
   \                     ??man_lte_main_2: (+1)
   \   000001EC   0x486F             LDR      R0,??man_lte_main_18+0x8
   \   000001EE   0x6980             LDR      R0,[R0, #+24]
   \   000001F0   0x2800             CMP      R0,#+0
   \   000001F2   0xD000             BEQ      .+4
   \   000001F4   0xE0A0             B        ??man_lte_main_26
    490          				// 要求したコマンド応答の場合
    491          				if (man_lte_work.resp_cmd.id == man_lte_work.sequense) {
   \   000001F6   0x486D             LDR      R0,??man_lte_main_18+0x8
   \   000001F8   0x6940             LDR      R0,[R0, #+20]
   \   000001FA   0x496C             LDR      R1,??man_lte_main_18+0x8
   \   000001FC   0x7849             LDRB     R1,[R1, #+1]
   \   000001FE   0x4288             CMP      R0,R1
   \   00000200   0xD000             BEQ      .+4
   \   00000202   0xE090             B        ??man_lte_main_27
    492          					switch (man_lte_work.resp_cmd.id) {
   \   00000204   0x4869             LDR      R0,??man_lte_main_18+0x8
   \   00000206   0x6940             LDR      R0,[R0, #+20]
   \   00000208   0x2802             CMP      R0,#+2
   \   0000020A   0xD02A             BEQ      ??man_lte_main_28
   \   0000020C   0x2805             CMP      R0,#+5
   \   0000020E   0xD02C             BEQ      ??man_lte_main_29
   \   00000210   0x280A             CMP      R0,#+10
   \   00000212   0xD02E             BEQ      ??man_lte_main_30
   \   00000214   0x280D             CMP      R0,#+13
   \   00000216   0xD030             BEQ      ??man_lte_main_31
   \   00000218   0x2811             CMP      R0,#+17
   \   0000021A   0xD032             BEQ      ??man_lte_main_32
   \   0000021C   0x2815             CMP      R0,#+21
   \   0000021E   0xD034             BEQ      ??man_lte_main_33
   \   00000220   0x2819             CMP      R0,#+25
   \   00000222   0xD036             BEQ      ??man_lte_main_34
   \   00000224   0x281C             CMP      R0,#+28
   \   00000226   0xD058             BEQ      ??man_lte_main_35
   \   00000228   0x281F             CMP      R0,#+31
   \   0000022A   0xD05A             BEQ      ??man_lte_main_36
   \   0000022C   0x2823             CMP      R0,#+35
   \   0000022E   0xD034             BEQ      ??man_lte_main_37
   \   00000230   0x2826             CMP      R0,#+38
   \   00000232   0xD036             BEQ      ??man_lte_main_38
   \   00000234   0x282C             CMP      R0,#+44
   \   00000236   0xD038             BEQ      ??man_lte_main_39
   \   00000238   0x2830             CMP      R0,#+48
   \   0000023A   0xD03A             BEQ      ??man_lte_main_40
   \   0000023C   0x2832             CMP      R0,#+50
   \   0000023E   0xD03C             BEQ      ??man_lte_main_41
   \   00000240   0x2836             CMP      R0,#+54
   \   00000242   0xD03E             BEQ      ??man_lte_main_42
   \   00000244   0x2839             CMP      R0,#+57
   \   00000246   0xD050             BEQ      ??man_lte_main_43
   \   00000248   0x283D             CMP      R0,#+61
   \   0000024A   0xD03E             BEQ      ??man_lte_main_44
   \   0000024C   0x2840             CMP      R0,#+64
   \   0000024E   0xD040             BEQ      ??man_lte_main_45
   \   00000250   0x2844             CMP      R0,#+68
   \   00000252   0xD04E             BEQ      ??man_lte_main_46
   \   00000254   0x2847             CMP      R0,#+71
   \   00000256   0xD050             BEQ      ??man_lte_main_47
   \   00000258   0x284C             CMP      R0,#+76
   \   0000025A   0xD052             BEQ      ??man_lte_main_48
   \   0000025C   0x284F             CMP      R0,#+79
   \   0000025E   0xD054             BEQ      ??man_lte_main_49
   \   00000260   0xE057             B        ??man_lte_main_50
    493          					case MAN_LTE_SEQ_PWRKEY_ON_WAIT:
    494          						man_lte_set_sequense(MAN_LTE_SEQ_PWRKEY_ON_WAIT_OK);
   \                     ??man_lte_main_28: (+1)
   \   00000262   0x2003             MOVS     R0,#+3
   \   00000264   0x.... 0x....      BL       man_lte_set_sequense
    495          						break;
   \   00000268   0xE10B             B        ??man_lte_main_1
    496          					case MAN_LTE_SEQ_PWRKEY_OFF_WAIT:
    497          						man_lte_set_sequense(MAN_LTE_SEQ_PWRKEY_OFF_WAIT_OK);
   \                     ??man_lte_main_29: (+1)
   \   0000026A   0x2006             MOVS     R0,#+6
   \   0000026C   0x.... 0x....      BL       man_lte_set_sequense
    498          						break;
   \   00000270   0xE107             B        ??man_lte_main_1
    499          					case MAN_LTE_SEQ_LTE_OTA_OFF:
    500          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_OTA_OFF_OK);
   \                     ??man_lte_main_30: (+1)
   \   00000272   0x200B             MOVS     R0,#+11
   \   00000274   0x.... 0x....      BL       man_lte_set_sequense
    501          						break;
   \   00000278   0xE103             B        ??man_lte_main_1
    502          					case MAN_LTE_SEQ_LTE_OTA_OFF_NG_WAIT:
    503          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_OTA_OFF_NG_WAIT_OK);
   \                     ??man_lte_main_31: (+1)
   \   0000027A   0x200E             MOVS     R0,#+14
   \   0000027C   0x.... 0x....      BL       man_lte_set_sequense
    504          						break;
   \   00000280   0xE0FF             B        ??man_lte_main_1
    505          					case MAN_LTE_SEQ_LTE_INIT:
    506          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_INIT_OK);
   \                     ??man_lte_main_32: (+1)
   \   00000282   0x2012             MOVS     R0,#+18
   \   00000284   0x.... 0x....      BL       man_lte_set_sequense
    507          						break;
   \   00000288   0xE0FB             B        ??man_lte_main_1
    508          					case MAN_LTE_SEQ_LTE_READY:
    509          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_READY_OK);
   \                     ??man_lte_main_33: (+1)
   \   0000028A   0x2016             MOVS     R0,#+22
   \   0000028C   0x.... 0x....      BL       man_lte_set_sequense
    510          						break;
   \   00000290   0xE0F7             B        ??man_lte_main_1
    511          					case MAN_LTE_SEQ_LTE_START:
    512          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_START_OK);
   \                     ??man_lte_main_34: (+1)
   \   00000292   0x201A             MOVS     R0,#+26
   \   00000294   0x.... 0x....      BL       man_lte_set_sequense
    513          						break;
   \   00000298   0xE0F3             B        ??man_lte_main_1
    514          					case MAN_LTE_SEQ_LTE_STOP:
    515          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STOP_OK);
   \                     ??man_lte_main_37: (+1)
   \   0000029A   0x2024             MOVS     R0,#+36
   \   0000029C   0x.... 0x....      BL       man_lte_set_sequense
    516          						break;
   \   000002A0   0xE0EF             B        ??man_lte_main_1
    517          					case MAN_LTE_SEQ_LTE_STOP_NG_WAIT:
    518          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STOP_NG_WAIT_OK);
   \                     ??man_lte_main_38: (+1)
   \   000002A2   0x2027             MOVS     R0,#+39
   \   000002A4   0x.... 0x....      BL       man_lte_set_sequense
    519          						break;
   \   000002A8   0xE0EB             B        ??man_lte_main_1
    520          					case MAN_LTE_SEQ_LTE_STBY_IN:
    521          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_IN_OK);
   \                     ??man_lte_main_39: (+1)
   \   000002AA   0x202D             MOVS     R0,#+45
   \   000002AC   0x.... 0x....      BL       man_lte_set_sequense
    522          						break;
   \   000002B0   0xE0E7             B        ??man_lte_main_1
    523          					case MAN_LTE_SEQ_LTE_STBY_OUT:
    524          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_OUT_OK);
   \                     ??man_lte_main_40: (+1)
   \   000002B2   0x2031             MOVS     R0,#+49
   \   000002B4   0x.... 0x....      BL       man_lte_set_sequense
    525          						break;
   \   000002B8   0xE0E3             B        ??man_lte_main_1
    526          					case MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT:
    527          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT_OK);
   \                     ??man_lte_main_41: (+1)
   \   000002BA   0x2033             MOVS     R0,#+51
   \   000002BC   0x.... 0x....      BL       man_lte_set_sequense
    528          						break;
   \   000002C0   0xE0DF             B        ??man_lte_main_1
    529          					case MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT:
    530          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT_OK);
   \                     ??man_lte_main_42: (+1)
   \   000002C2   0x2037             MOVS     R0,#+55
   \   000002C4   0x.... 0x....      BL       man_lte_set_sequense
    531          						break;
   \   000002C8   0xE0DB             B        ??man_lte_main_1
    532          					case MAN_LTE_SEQ_LTE_RESET_ON_WAIT:
    533          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_RESET_ON_WAIT_OK);
   \                     ??man_lte_main_44: (+1)
   \   000002CA   0x203E             MOVS     R0,#+62
   \   000002CC   0x.... 0x....      BL       man_lte_set_sequense
    534          						break;
   \   000002D0   0xE0D7             B        ??man_lte_main_1
    535          					case MAN_LTE_SEQ_LTE_RESET_OFF_WAIT:
    536          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_RESET_OFF_WAIT_OK);
   \                     ??man_lte_main_45: (+1)
   \   000002D2   0x2041             MOVS     R0,#+65
   \   000002D4   0x.... 0x....      BL       man_lte_set_sequense
    537          						break;
   \   000002D8   0xE0D3             B        ??man_lte_main_1
    538          					case MAN_LTE_SEQ_LTE_OPEN_STOP:
    539          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_OPEN_STOP_OK);
   \                     ??man_lte_main_35: (+1)
   \   000002DA   0x201D             MOVS     R0,#+29
   \   000002DC   0x.... 0x....      BL       man_lte_set_sequense
    540          						break;
   \   000002E0   0xE0CF             B        ??man_lte_main_1
    541          					case MAN_LTE_SEQ_LTE_OPEN_WAIT:
    542          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_OPEN_WAIT_OK);
   \                     ??man_lte_main_36: (+1)
   \   000002E2   0x2020             MOVS     R0,#+32
   \   000002E4   0x.... 0x....      BL       man_lte_set_sequense
    543          						break;
   \   000002E8   0xE0CB             B        ??man_lte_main_1
    544          					case MAN_LTE_SEQ_LTE_STBY_OUT_WAIT:
    545          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_OUT_WAIT_OK);
   \                     ??man_lte_main_43: (+1)
   \   000002EA   0x203A             MOVS     R0,#+58
   \   000002EC   0x.... 0x....      BL       man_lte_set_sequense
    546          						break;
   \   000002F0   0xE0C7             B        ??man_lte_main_1
    547          					case MAN_LTE_SEQ_LTE_ATRESET:
    548          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_ATRESET_OK);
   \                     ??man_lte_main_46: (+1)
   \   000002F2   0x2045             MOVS     R0,#+69
   \   000002F4   0x.... 0x....      BL       man_lte_set_sequense
    549          						break;
   \   000002F8   0xE0C3             B        ??man_lte_main_1
    550          					case MAN_LTE_SEQ_LTE_ATRESET_WAIT:
    551          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_ATRESET_WAIT_OK);
   \                     ??man_lte_main_47: (+1)
   \   000002FA   0x2048             MOVS     R0,#+72
   \   000002FC   0x.... 0x....      BL       man_lte_set_sequense
    552          						break;
   \   00000300   0xE0BF             B        ??man_lte_main_1
    553          					case MAN_LTE_SEQ_LTE_POWOFF:
    554          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_POWOFF_OK);
   \                     ??man_lte_main_48: (+1)
   \   00000302   0x204D             MOVS     R0,#+77
   \   00000304   0x.... 0x....      BL       man_lte_set_sequense
    555          						break;
   \   00000308   0xE0BB             B        ??man_lte_main_1
    556          					case MAN_LTE_SEQ_LTE_POWOFF_WAIT:
    557          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_POWOFF_WAIT_OK);
   \                     ??man_lte_main_49: (+1)
   \   0000030A   0x2050             MOVS     R0,#+80
   \   0000030C   0x.... 0x....      BL       man_lte_set_sequense
    558          						break;
   \   00000310   0xE0B7             B        ??man_lte_main_1
    559          					default:
    560          						man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.resp_cmd.id, man_lte_work.resp_cmd.status);
   \                     ??man_lte_main_50: (+1)
   \   00000312   0x238C             MOVS     R3,#+140
   \   00000314   0x009B             LSLS     R3,R3,#+2        ;; #+560
   \   00000316   0x4825             LDR      R0,??man_lte_main_18+0x8
   \   00000318   0x6982             LDR      R2,[R0, #+24]
   \   0000031A   0x4824             LDR      R0,??man_lte_main_18+0x8
   \   0000031C   0x6941             LDR      R1,[R0, #+20]
   \   0000031E   0x2018             MOVS     R0,#+24
   \   00000320   0x.... 0x....      BL       man_error_set
    561          						break;
   \   00000324   0xE0AD             B        ??man_lte_main_1
    562          					}
    563          				}
    564          				else {
    565          					man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, man_lte_work.resp_cmd.id);
   \                     ??man_lte_main_27: (+1)
   \   00000326   0x4B9D             LDR      R3,??man_lte_main_51  ;; 0x235
   \   00000328   0x4820             LDR      R0,??man_lte_main_18+0x8
   \   0000032A   0x6942             LDR      R2,[R0, #+20]
   \   0000032C   0x481F             LDR      R0,??man_lte_main_18+0x8
   \   0000032E   0x7841             LDRB     R1,[R0, #+1]
   \   00000330   0x2018             MOVS     R0,#+24
   \   00000332   0x.... 0x....      BL       man_error_set
   \   00000336   0xE0A4             B        ??man_lte_main_1
    566          				}
    567          			}
    568          
    569          			// 応答が異常場合
    570          			else {
    571          				// 要求したコマンド応答の場合
    572          				if (man_lte_work.resp_cmd.id == man_lte_work.sequense) {
   \                     ??man_lte_main_26: (+1)
   \   00000338   0x481C             LDR      R0,??man_lte_main_18+0x8
   \   0000033A   0x6940             LDR      R0,[R0, #+20]
   \   0000033C   0x491B             LDR      R1,??man_lte_main_18+0x8
   \   0000033E   0x7849             LDRB     R1,[R1, #+1]
   \   00000340   0x4288             CMP      R0,R1
   \   00000342   0xD000             BEQ      .+4
   \   00000344   0xE095             B        ??man_lte_main_52
    573          					switch (man_lte_work.resp_cmd.id) {
   \   00000346   0x4819             LDR      R0,??man_lte_main_18+0x8
   \   00000348   0x6940             LDR      R0,[R0, #+20]
   \   0000034A   0x2802             CMP      R0,#+2
   \   0000034C   0xD030             BEQ      ??man_lte_main_53
   \   0000034E   0x2805             CMP      R0,#+5
   \   00000350   0xD032             BEQ      ??man_lte_main_54
   \   00000352   0x280A             CMP      R0,#+10
   \   00000354   0xD034             BEQ      ??man_lte_main_55
   \   00000356   0x280D             CMP      R0,#+13
   \   00000358   0xD036             BEQ      ??man_lte_main_56
   \   0000035A   0x2811             CMP      R0,#+17
   \   0000035C   0xD038             BEQ      ??man_lte_main_57
   \   0000035E   0x2815             CMP      R0,#+21
   \   00000360   0xD03A             BEQ      ??man_lte_main_58
   \   00000362   0x2819             CMP      R0,#+25
   \   00000364   0xD03C             BEQ      ??man_lte_main_59
   \   00000366   0x281C             CMP      R0,#+28
   \   00000368   0xD05E             BEQ      ??man_lte_main_60
   \   0000036A   0x281F             CMP      R0,#+31
   \   0000036C   0xD060             BEQ      ??man_lte_main_61
   \   0000036E   0x2823             CMP      R0,#+35
   \   00000370   0xD03A             BEQ      ??man_lte_main_62
   \   00000372   0x2826             CMP      R0,#+38
   \   00000374   0xD03C             BEQ      ??man_lte_main_63
   \   00000376   0x282C             CMP      R0,#+44
   \   00000378   0xD03E             BEQ      ??man_lte_main_64
   \   0000037A   0x2830             CMP      R0,#+48
   \   0000037C   0xD040             BEQ      ??man_lte_main_65
   \   0000037E   0x2832             CMP      R0,#+50
   \   00000380   0xD042             BEQ      ??man_lte_main_66
   \   00000382   0x2836             CMP      R0,#+54
   \   00000384   0xD044             BEQ      ??man_lte_main_67
   \   00000386   0x2839             CMP      R0,#+57
   \   00000388   0xD056             BEQ      ??man_lte_main_68
   \   0000038A   0x283D             CMP      R0,#+61
   \   0000038C   0xD044             BEQ      ??man_lte_main_69
   \   0000038E   0x2840             CMP      R0,#+64
   \   00000390   0xD046             BEQ      ??man_lte_main_70
   \   00000392   0x2844             CMP      R0,#+68
   \   00000394   0xD054             BEQ      ??man_lte_main_71
   \   00000396   0x2847             CMP      R0,#+71
   \   00000398   0xD056             BEQ      ??man_lte_main_72
   \   0000039A   0x284C             CMP      R0,#+76
   \   0000039C   0xD058             BEQ      ??man_lte_main_73
   \   0000039E   0x284F             CMP      R0,#+79
   \   000003A0   0xD05A             BEQ      ??man_lte_main_74
   \   000003A2   0xE05D             B        ??man_lte_main_75
   \                     ??man_lte_main_18:
   \   000003A4   0x00007530         DC32     0x7530
   \   000003A8   0x40400026         DC32     0x40400026
   \   000003AC   0x........         DC32     man_lte_work
    574          					case MAN_LTE_SEQ_PWRKEY_ON_WAIT:
    575          						man_lte_set_sequense(MAN_LTE_SEQ_PWRKEY_ON_WAIT_NG);
   \                     ??man_lte_main_53: (+1)
   \   000003B0   0x2004             MOVS     R0,#+4
   \   000003B2   0x.... 0x....      BL       man_lte_set_sequense
    576          						break;
   \   000003B6   0xE064             B        ??man_lte_main_1
    577          					case MAN_LTE_SEQ_PWRKEY_OFF_WAIT:
    578          						man_lte_set_sequense(MAN_LTE_SEQ_PWRKEY_OFF_WAIT_NG);
   \                     ??man_lte_main_54: (+1)
   \   000003B8   0x2007             MOVS     R0,#+7
   \   000003BA   0x.... 0x....      BL       man_lte_set_sequense
    579          						break;
   \   000003BE   0xE060             B        ??man_lte_main_1
    580          					case MAN_LTE_SEQ_LTE_OTA_OFF:
    581          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_OTA_OFF_NG);
   \                     ??man_lte_main_55: (+1)
   \   000003C0   0x200C             MOVS     R0,#+12
   \   000003C2   0x.... 0x....      BL       man_lte_set_sequense
    582          						break;
   \   000003C6   0xE05C             B        ??man_lte_main_1
    583          					case MAN_LTE_SEQ_LTE_OTA_OFF_NG_WAIT:
    584          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_OTA_OFF_NG_WAIT_NG);
   \                     ??man_lte_main_56: (+1)
   \   000003C8   0x200F             MOVS     R0,#+15
   \   000003CA   0x.... 0x....      BL       man_lte_set_sequense
    585          						break;
   \   000003CE   0xE058             B        ??man_lte_main_1
    586          					case MAN_LTE_SEQ_LTE_INIT:
    587          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_INIT_NG);
   \                     ??man_lte_main_57: (+1)
   \   000003D0   0x2013             MOVS     R0,#+19
   \   000003D2   0x.... 0x....      BL       man_lte_set_sequense
    588          						break;
   \   000003D6   0xE054             B        ??man_lte_main_1
    589          					case MAN_LTE_SEQ_LTE_READY:
    590          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_READY_NG);
   \                     ??man_lte_main_58: (+1)
   \   000003D8   0x2017             MOVS     R0,#+23
   \   000003DA   0x.... 0x....      BL       man_lte_set_sequense
    591          						break;
   \   000003DE   0xE050             B        ??man_lte_main_1
    592          					case MAN_LTE_SEQ_LTE_START:
    593          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_START_NG);
   \                     ??man_lte_main_59: (+1)
   \   000003E0   0x201B             MOVS     R0,#+27
   \   000003E2   0x.... 0x....      BL       man_lte_set_sequense
    594          						break;
   \   000003E6   0xE04C             B        ??man_lte_main_1
    595          					case MAN_LTE_SEQ_LTE_STOP:
    596          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STOP_NG);
   \                     ??man_lte_main_62: (+1)
   \   000003E8   0x2025             MOVS     R0,#+37
   \   000003EA   0x.... 0x....      BL       man_lte_set_sequense
    597          						break;
   \   000003EE   0xE048             B        ??man_lte_main_1
    598          					case MAN_LTE_SEQ_LTE_STOP_NG_WAIT:
    599          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STOP_NG_WAIT_NG);
   \                     ??man_lte_main_63: (+1)
   \   000003F0   0x2028             MOVS     R0,#+40
   \   000003F2   0x.... 0x....      BL       man_lte_set_sequense
    600          						break;
   \   000003F6   0xE044             B        ??man_lte_main_1
    601          					case MAN_LTE_SEQ_LTE_STBY_IN:
    602          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_IN_NG);
   \                     ??man_lte_main_64: (+1)
   \   000003F8   0x202E             MOVS     R0,#+46
   \   000003FA   0x.... 0x....      BL       man_lte_set_sequense
    603          						break;
   \   000003FE   0xE040             B        ??man_lte_main_1
    604          					case MAN_LTE_SEQ_LTE_STBY_OUT:
    605          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_OUT_NG);
   \                     ??man_lte_main_65: (+1)
   \   00000400   0x2035             MOVS     R0,#+53
   \   00000402   0x.... 0x....      BL       man_lte_set_sequense
    606          						break;
   \   00000406   0xE03C             B        ??man_lte_main_1
    607          					case MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT:
    608          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT_NG);
   \                     ??man_lte_main_66: (+1)
   \   00000408   0x2034             MOVS     R0,#+52
   \   0000040A   0x.... 0x....      BL       man_lte_set_sequense
    609          						break;
   \   0000040E   0xE038             B        ??man_lte_main_1
    610          					case MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT:
    611          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT_NG);
   \                     ??man_lte_main_67: (+1)
   \   00000410   0x2038             MOVS     R0,#+56
   \   00000412   0x.... 0x....      BL       man_lte_set_sequense
    612          						break;
   \   00000416   0xE034             B        ??man_lte_main_1
    613          					case MAN_LTE_SEQ_LTE_RESET_ON_WAIT:
    614          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_RESET_ON_WAIT_NG);
   \                     ??man_lte_main_69: (+1)
   \   00000418   0x203F             MOVS     R0,#+63
   \   0000041A   0x.... 0x....      BL       man_lte_set_sequense
    615          						break;
   \   0000041E   0xE030             B        ??man_lte_main_1
    616          					case MAN_LTE_SEQ_LTE_RESET_OFF_WAIT:
    617          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_RESET_OFF_WAIT_NG);
   \                     ??man_lte_main_70: (+1)
   \   00000420   0x2042             MOVS     R0,#+66
   \   00000422   0x.... 0x....      BL       man_lte_set_sequense
    618          						break;
   \   00000426   0xE02C             B        ??man_lte_main_1
    619          					case MAN_LTE_SEQ_LTE_OPEN_STOP:
    620          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_OPEN_STOP_NG);
   \                     ??man_lte_main_60: (+1)
   \   00000428   0x201E             MOVS     R0,#+30
   \   0000042A   0x.... 0x....      BL       man_lte_set_sequense
    621          						break;
   \   0000042E   0xE028             B        ??man_lte_main_1
    622          					case MAN_LTE_SEQ_LTE_OPEN_WAIT:
    623          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_OPEN_WAIT_NG);
   \                     ??man_lte_main_61: (+1)
   \   00000430   0x2021             MOVS     R0,#+33
   \   00000432   0x.... 0x....      BL       man_lte_set_sequense
    624          						break;
   \   00000436   0xE024             B        ??man_lte_main_1
    625          					case MAN_LTE_SEQ_LTE_STBY_OUT_WAIT:
    626          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_OUT_WAIT_NG);
   \                     ??man_lte_main_68: (+1)
   \   00000438   0x203B             MOVS     R0,#+59
   \   0000043A   0x.... 0x....      BL       man_lte_set_sequense
    627          						break;
   \   0000043E   0xE020             B        ??man_lte_main_1
    628          					case MAN_LTE_SEQ_LTE_ATRESET:
    629          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_ATRESET_NG);
   \                     ??man_lte_main_71: (+1)
   \   00000440   0x2046             MOVS     R0,#+70
   \   00000442   0x.... 0x....      BL       man_lte_set_sequense
    630          						break;
   \   00000446   0xE01C             B        ??man_lte_main_1
    631          					case MAN_LTE_SEQ_LTE_ATRESET_WAIT:
    632          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_ATRESET_WAIT_NG);
   \                     ??man_lte_main_72: (+1)
   \   00000448   0x2049             MOVS     R0,#+73
   \   0000044A   0x.... 0x....      BL       man_lte_set_sequense
    633          						break;
   \   0000044E   0xE018             B        ??man_lte_main_1
    634          					case MAN_LTE_SEQ_LTE_POWOFF:
    635          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_POWOFF_NG);
   \                     ??man_lte_main_73: (+1)
   \   00000450   0x204E             MOVS     R0,#+78
   \   00000452   0x.... 0x....      BL       man_lte_set_sequense
    636          						break;
   \   00000456   0xE014             B        ??man_lte_main_1
    637          					case MAN_LTE_SEQ_LTE_POWOFF_WAIT:
    638          						man_lte_set_sequense(MAN_LTE_SEQ_LTE_POWOFF_WAIT_NG);
   \                     ??man_lte_main_74: (+1)
   \   00000458   0x2051             MOVS     R0,#+81
   \   0000045A   0x.... 0x....      BL       man_lte_set_sequense
    639          						break;
   \   0000045E   0xE010             B        ??man_lte_main_1
    640          					default:
    641          						man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.resp_cmd.id, man_lte_work.resp_cmd.status);
   \                     ??man_lte_main_75: (+1)
   \   00000460   0x4B4F             LDR      R3,??man_lte_main_51+0x4  ;; 0x281
   \   00000462   0x4850             LDR      R0,??man_lte_main_51+0x8
   \   00000464   0x6982             LDR      R2,[R0, #+24]
   \   00000466   0x484F             LDR      R0,??man_lte_main_51+0x8
   \   00000468   0x6941             LDR      R1,[R0, #+20]
   \   0000046A   0x2018             MOVS     R0,#+24
   \   0000046C   0x.... 0x....      BL       man_error_set
    642          						break;
   \   00000470   0xE007             B        ??man_lte_main_1
    643          					}
    644          				}
    645          				else {
    646          					man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, man_lte_work.resp_cmd.id);
   \                     ??man_lte_main_52: (+1)
   \   00000472   0x4B4D             LDR      R3,??man_lte_main_51+0xC  ;; 0x286
   \   00000474   0x484B             LDR      R0,??man_lte_main_51+0x8
   \   00000476   0x6942             LDR      R2,[R0, #+20]
   \   00000478   0x484A             LDR      R0,??man_lte_main_51+0x8
   \   0000047A   0x7841             LDRB     R1,[R0, #+1]
   \   0000047C   0x2018             MOVS     R0,#+24
   \   0000047E   0x.... 0x....      BL       man_error_set
    647          				}
    648          			}
    649          		}
    650          	}
    651          
    652          
    653          
    654          	// ******************************************************
    655          	// 要求処理
    656          	// ******************************************************
    657          	switch (man_lte_work.request.req_cmd) {
   \                     ??man_lte_main_1: (+1)
   \   00000482   0x4848             LDR      R0,??man_lte_main_51+0x8
   \   00000484   0x6840             LDR      R0,[R0, #+4]
   \   00000486   0x2800             CMP      R0,#+0
   \   00000488   0xD00C             BEQ      ??man_lte_main_76
   \   0000048A   0x2802             CMP      R0,#+2
   \   0000048C   0xD032             BEQ      ??man_lte_main_77
   \   0000048E   0xD30A             BCC      ??man_lte_main_78
   \   00000490   0x2804             CMP      R0,#+4
   \   00000492   0xD047             BEQ      ??man_lte_main_79
   \   00000494   0xD336             BCC      ??man_lte_main_80
   \   00000496   0x2806             CMP      R0,#+6
   \   00000498   0xD05C             BEQ      ??man_lte_main_81
   \   0000049A   0xD353             BCC      ??man_lte_main_82
   \   0000049C   0x2808             CMP      R0,#+8
   \   0000049E   0xD075             BEQ      ??man_lte_main_83
   \   000004A0   0xD360             BCC      ??man_lte_main_84
   \   000004A2   0xE085             B        ??man_lte_main_85
    658          	case MAN_CMD_REQ_CMD_NON:
    659          		break;
   \                     ??man_lte_main_76: (+1)
   \   000004A4   0xE08C             B        ??man_lte_main_86
    660          
    661          	case MAN_CMD_REQ_CMD_INIT:			// network使用初期化
    662          		if (man_lte_work.sequense == MAN_LTE_SEQ_READY) {
   \                     ??man_lte_main_78: (+1)
   \   000004A6   0x483F             LDR      R0,??man_lte_main_51+0x8
   \   000004A8   0x7840             LDRB     R0,[R0, #+1]
   \   000004AA   0x2800             CMP      R0,#+0
   \   000004AC   0xD121             BNE      ??man_lte_main_87
    663          			// 既にONしているため、初期化から始める
    664          			if (man_lte_work.req_state == MAN_LTE_STATE_RESET) {
   \   000004AE   0x483D             LDR      R0,??man_lte_main_51+0x8
   \   000004B0   0x6BC0             LDR      R0,[R0, #+60]
   \   000004B2   0x2801             CMP      R0,#+1
   \   000004B4   0xD10F             BNE      ??man_lte_main_88
    665          				man_lte_work.req_state = MAN_LTE_STATE_NON;
   \   000004B6   0x2000             MOVS     R0,#+0
   \   000004B8   0x493A             LDR      R1,??man_lte_main_51+0x8
   \   000004BA   0x63C8             STR      R0,[R1, #+60]
    666          
    667          				// 内部状態を初期化する
    668          				man_lte_work.lte_sts = 0;
   \   000004BC   0x2000             MOVS     R0,#+0
   \   000004BE   0x4939             LDR      R1,??man_lte_main_51+0x8
   \   000004C0   0x6248             STR      R0,[R1, #+36]
    669          				man_lte_work.mode = MAN_LTE_MODE_CLOSE;
   \   000004C2   0x2000             MOVS     R0,#+0
   \   000004C4   0x4937             LDR      R1,??man_lte_main_51+0x8
   \   000004C6   0x7008             STRB     R0,[R1, #+0]
    670          #if 0 //DEBUG  Matsushita 20180928
    671          				man_lte_set_sequense(MAN_LTE_SEQ_LTE_INIT_REQ);
    672          #else
    673          				// OTA機能停止を開始する
    674          				man_lte_set_sequense(MAN_LTE_SEQ_LTE_OTA_OFF_REQ);
   \   000004C8   0x2008             MOVS     R0,#+8
   \   000004CA   0x.... 0x....      BL       man_lte_set_sequense
    675          				man_lte_work.retry = 0;
   \   000004CE   0x2000             MOVS     R0,#+0
   \   000004D0   0x4934             LDR      R1,??man_lte_main_51+0x8
   \   000004D2   0x61C8             STR      R0,[R1, #+28]
   \   000004D4   0xE00D             B        ??man_lte_main_87
    676          #endif
    677          			}
    678          			else {
    679          				if ( (man_lte_work.lte_sts & MAN_LTE_STS_POWER_ON) == 0) {
   \                     ??man_lte_main_88: (+1)
   \   000004D6   0x4835             LDR      R0,??man_lte_main_51+0x10
   \   000004D8   0x7800             LDRB     R0,[R0, #+0]
   \   000004DA   0x07C0             LSLS     R0,R0,#+31
   \   000004DC   0xD403             BMI      ??man_lte_main_89
    680          					// LTE電源ON開始
    681          					man_lte_set_sequense(MAN_LTE_SEQ_LTE_POWON_REQ);
   \   000004DE   0x2001             MOVS     R0,#+1
   \   000004E0   0x.... 0x....      BL       man_lte_set_sequense
   \   000004E4   0xE005             B        ??man_lte_main_87
    682          				}
    683          				else {
    684          #if 0 //DEBUG  Matsushita 20180928
    685                                            man_lte_set_sequense(MAN_LTE_SEQ_LTE_INIT_REQ);
    686          #else
    687                                            // OTA機能停止を開始する
    688                                            man_lte_set_sequense(MAN_LTE_SEQ_LTE_OTA_OFF_REQ);
   \                     ??man_lte_main_89: (+1)
   \   000004E6   0x2008             MOVS     R0,#+8
   \   000004E8   0x.... 0x....      BL       man_lte_set_sequense
    689                                            man_lte_work.retry = 0;
   \   000004EC   0x2000             MOVS     R0,#+0
   \   000004EE   0x492D             LDR      R1,??man_lte_main_51+0x8
   \   000004F0   0x61C8             STR      R0,[R1, #+28]
    690          #endif
    691          				}
    692          			}
    693          		}
    694          		break;
   \                     ??man_lte_main_87: (+1)
   \   000004F2   0xE065             B        ??man_lte_main_86
    695          
    696          	case MAN_CMD_REQ_CMD_READY:			// network使用準備
    697          		if (man_lte_work.sequense == MAN_LTE_SEQ_READY) {
   \                     ??man_lte_main_77: (+1)
   \   000004F4   0x482B             LDR      R0,??man_lte_main_51+0x8
   \   000004F6   0x7840             LDRB     R0,[R0, #+1]
   \   000004F8   0x2800             CMP      R0,#+0
   \   000004FA   0xD102             BNE      ??man_lte_main_90
    698          			// network使用準備開始
    699          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_READY_REQ);
   \   000004FC   0x2014             MOVS     R0,#+20
   \   000004FE   0x.... 0x....      BL       man_lte_set_sequense
    700          		}
    701          		break;
   \                     ??man_lte_main_90: (+1)
   \   00000502   0xE05D             B        ??man_lte_main_86
    702          
    703          	case MAN_CMD_REQ_CMD_START:			// network使用開始
    704          		if (man_lte_work.sequense == MAN_LTE_SEQ_READY) {
   \                     ??man_lte_main_80: (+1)
   \   00000504   0x4827             LDR      R0,??man_lte_main_51+0x8
   \   00000506   0x7840             LDRB     R0,[R0, #+1]
   \   00000508   0x2800             CMP      R0,#+0
   \   0000050A   0xD10A             BNE      ??man_lte_main_91
    705          			// CLOSE時はOPENする
    706          			if (man_lte_work.mode == MAN_LTE_MODE_CLOSE) {
   \   0000050C   0x4825             LDR      R0,??man_lte_main_51+0x8
   \   0000050E   0x7800             LDRB     R0,[R0, #+0]
   \   00000510   0x2800             CMP      R0,#+0
   \   00000512   0xD103             BNE      ??man_lte_main_92
    707          				// NETWORK使用開始
    708          				man_lte_set_sequense(MAN_LTE_SEQ_LTE_START_REQ);
   \   00000514   0x2018             MOVS     R0,#+24
   \   00000516   0x.... 0x....      BL       man_lte_set_sequense
   \   0000051A   0xE002             B        ??man_lte_main_91
    709          			}
    710          			// OPEN時は完了を返す
    711          			else {
    712          				man_lte_return_callback(MAN_LTE_STATUS_OK);
   \                     ??man_lte_main_92: (+1)
   \   0000051C   0x2000             MOVS     R0,#+0
   \   0000051E   0x.... 0x....      BL       man_lte_return_callback
    713          			}
    714          		}
    715          		break;
   \                     ??man_lte_main_91: (+1)
   \   00000522   0xE04D             B        ??man_lte_main_86
    716          
    717          	case MAN_CMD_REQ_CMD_STOP:			// network使用終了
    718          		if (man_lte_work.sequense == MAN_LTE_SEQ_READY) {
   \                     ??man_lte_main_79: (+1)
   \   00000524   0x481F             LDR      R0,??man_lte_main_51+0x8
   \   00000526   0x7840             LDRB     R0,[R0, #+1]
   \   00000528   0x2800             CMP      R0,#+0
   \   0000052A   0xD10A             BNE      ??man_lte_main_93
    719          			// OPEN時はCLOSEする
    720          			if (man_lte_work.mode == MAN_LTE_MODE_OPEN) {
   \   0000052C   0x481D             LDR      R0,??man_lte_main_51+0x8
   \   0000052E   0x7800             LDRB     R0,[R0, #+0]
   \   00000530   0x2801             CMP      R0,#+1
   \   00000532   0xD103             BNE      ??man_lte_main_94
    721          				// NETWORK使用終了
    722          				man_lte_set_sequense(MAN_LTE_SEQ_LTE_STOP_REQ);
   \   00000534   0x2022             MOVS     R0,#+34
   \   00000536   0x.... 0x....      BL       man_lte_set_sequense
   \   0000053A   0xE002             B        ??man_lte_main_93
    723          			}
    724          			// CLOSE時は完了を返す
    725          			else {
    726          				man_lte_return_callback(MAN_LTE_STATUS_OK);
   \                     ??man_lte_main_94: (+1)
   \   0000053C   0x2000             MOVS     R0,#+0
   \   0000053E   0x.... 0x....      BL       man_lte_return_callback
    727          			}
    728          		}
    729          		break;
   \                     ??man_lte_main_93: (+1)
   \   00000542   0xE03D             B        ??man_lte_main_86
    730          
    731          	case MAN_CMD_REQ_CMD_STBY:
    732          		if (man_lte_work.sequense == MAN_LTE_SEQ_READY) {
   \                     ??man_lte_main_82: (+1)
   \   00000544   0x4817             LDR      R0,??man_lte_main_51+0x8
   \   00000546   0x7840             LDRB     R0,[R0, #+1]
   \   00000548   0x2800             CMP      R0,#+0
   \   0000054A   0xD102             BNE      ??man_lte_main_95
    733          			// シーケンスを更新する
    734          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_IN_REQ);
   \   0000054C   0x202B             MOVS     R0,#+43
   \   0000054E   0x.... 0x....      BL       man_lte_set_sequense
    735          		}
    736          		break;
   \                     ??man_lte_main_95: (+1)
   \   00000552   0xE035             B        ??man_lte_main_86
    737          	case MAN_CMD_REQ_CMD_WAKEUP:
    738          		if (man_lte_work.sequense == MAN_LTE_SEQ_READY) {
   \                     ??man_lte_main_81: (+1)
   \   00000554   0x4813             LDR      R0,??man_lte_main_51+0x8
   \   00000556   0x7840             LDRB     R0,[R0, #+1]
   \   00000558   0x2800             CMP      R0,#+0
   \   0000055A   0xD102             BNE      ??man_lte_main_96
    739          			// シーケンスを更新する
    740          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_OUT_REQ);
   \   0000055C   0x202F             MOVS     R0,#+47
   \   0000055E   0x.... 0x....      BL       man_lte_set_sequense
    741          		}
    742          		break;
   \                     ??man_lte_main_96: (+1)
   \   00000562   0xE02D             B        ??man_lte_main_86
    743          
    744          	case MAN_CMD_REQ_CMD_RESET:
    745          		switch(man_lte_work.sequense) {
   \                     ??man_lte_main_84: (+1)
   \   00000564   0x480F             LDR      R0,??man_lte_main_51+0x8
   \   00000566   0x7840             LDRB     R0,[R0, #+1]
   \   00000568   0x383C             SUBS     R0,R0,#+60
   \   0000056A   0x280E             CMP      R0,#+14
   \   0000056C   0xD904             BLS      ??man_lte_main_97
   \   0000056E   0x3810             SUBS     R0,R0,#+16
   \   00000570   0xD003             BEQ      ??man_lte_main_98
   \   00000572   0x1EC0             SUBS     R0,R0,#+3
   \   00000574   0xD001             BEQ      ??man_lte_main_98
   \   00000576   0xE005             B        ??man_lte_main_99
    746          		case MAN_LTE_SEQ_LTE_RESET_REQ:			// NETWORK RESET要求
    747          		case MAN_LTE_SEQ_LTE_RESET_ON_WAIT:		// NETWORK RESET ON１秒待ち
    748          		case MAN_LTE_SEQ_LTE_RESET_ON_WAIT_OK:	// NETWORK RESET ON１秒待ち完了
    749          		case MAN_LTE_SEQ_LTE_RESET_ON_WAIT_NG:	// NETWORK RESET ON１秒待ち異常
    750          		case MAN_LTE_SEQ_LTE_RESET_OFF_WAIT:	// NETWORK RESET ON２０秒待ち
    751          		case MAN_LTE_SEQ_LTE_RESET_OFF_WAIT_OK:	// NETWORK RESET ON２０秒待ち完了
    752          		case MAN_LTE_SEQ_LTE_RESET_OFF_WAIT_NG:	// NETWORK RESET ON２０秒待ち異常
    753          
    754          		case MAN_LTE_SEQ_LTE_ATRESET_REQ:		// NETWORK AT RESET要求
    755          		case MAN_LTE_SEQ_LTE_ATRESET:			// NETWORK AT RESET実行開始中
    756          		case MAN_LTE_SEQ_LTE_ATRESET_OK:		// NETWORK AT RESET実行開始OK
    757          		case MAN_LTE_SEQ_LTE_ATRESET_NG:		// NETWORK AT RESET実行開始NG
    758          		case MAN_LTE_SEQ_LTE_ATRESET_WAIT:		// NETWORK AT RESET実行完了待ち
    759          		case MAN_LTE_SEQ_LTE_ATRESET_WAIT_OK:	// NETWORK AT RESET実行完了失敗
    760          		case MAN_LTE_SEQ_LTE_ATRESET_WAIT_NG:	// NETWORK AT RESET実行完了失敗
    761          		case MAN_LTE_SEQ_LTE_ATRESET_EXEC_OK:	// NETWORK AT RESET実行完了成功
    762          			break;
   \                     ??man_lte_main_97: (+1)
   \   00000578   0xE007             B        ??man_lte_main_100
    763          		case MAN_LTE_SEQ_LTE_POWOFF:			// POWER OFF中にRESET発生時
    764          		case MAN_LTE_SEQ_LTE_POWOFF_WAIT:		
    765          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \                     ??man_lte_main_98: (+1)
   \   0000057A   0x2000             MOVS     R0,#+0
   \   0000057C   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000057E   0x.... 0x....      BL       man_lte_return_callback
    766          			break;
   \   00000582   0xE002             B        ??man_lte_main_100
    767          		default:
    768          			// シーケンスを更新する
    769          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_RESET_REQ);
   \                     ??man_lte_main_99: (+1)
   \   00000584   0x203C             MOVS     R0,#+60
   \   00000586   0x.... 0x....      BL       man_lte_set_sequense
    770          			break;
    771          		}
    772          		break;
   \                     ??man_lte_main_100: (+1)
   \   0000058A   0xE019             B        ??man_lte_main_86
    773          
    774          	case MAN_CMD_REQ_CMD_OFF:
    775          		if (man_lte_work.sequense == MAN_LTE_SEQ_READY) {
   \                     ??man_lte_main_83: (+1)
   \   0000058C   0x4805             LDR      R0,??man_lte_main_51+0x8
   \   0000058E   0x7840             LDRB     R0,[R0, #+1]
   \   00000590   0x2800             CMP      R0,#+0
   \   00000592   0xD102             BNE      ??man_lte_main_101
    776          			// シーケンスを更新する
    777          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_POWOFF_REQ);
   \   00000594   0x204B             MOVS     R0,#+75
   \   00000596   0x.... 0x....      BL       man_lte_set_sequense
    778          		}
    779          		break;
   \                     ??man_lte_main_101: (+1)
   \   0000059A   0xE011             B        ??man_lte_main_86
   \                     ??man_lte_main_51:
   \   0000059C   0x00000235         DC32     0x235
   \   000005A0   0x00000281         DC32     0x281
   \   000005A4   0x........         DC32     man_lte_work
   \   000005A8   0x00000286         DC32     0x286
   \   000005AC   0x........         DC32     man_lte_work+0x24
    780          
    781          	default:
    782          		man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, man_lte_work.request.req_cmd);
   \                     ??man_lte_main_85: (+1)
   \   000005B0   0x4BA3             LDR      R3,??man_lte_main_102  ;; 0x30e
   \   000005B2   0x48A4             LDR      R0,??man_lte_main_102+0x4
   \   000005B4   0x6842             LDR      R2,[R0, #+4]
   \   000005B6   0x48A3             LDR      R0,??man_lte_main_102+0x4
   \   000005B8   0x7841             LDRB     R1,[R0, #+1]
   \   000005BA   0x2018             MOVS     R0,#+24
   \   000005BC   0x.... 0x....      BL       man_error_set
    783          		break;
    784          	}
    785          
    786          	// ******************************************************
    787          	// 時刻再取得処理
    788          	// ******************************************************
    789          	// 圏外から圏内に移行時に再取得を行う
    790          
    791          
    792          
    793          
    794          
    795          	// ******************************************************
    796          	// シーケンス処理
    797          	// ******************************************************
    798          	switch (man_lte_work.sequense) {
   \                     ??man_lte_main_86: (+1)
   \   000005C0   0x48A0             LDR      R0,??man_lte_main_102+0x4
   \   000005C2   0x7840             LDRB     R0,[R0, #+1]
   \   000005C4   0x2800             CMP      R0,#+0
   \   000005C6   0xD100             BNE      .+4
   \   000005C8   0xE0CB             B        ??man_lte_main_103
   \   000005CA   0x2802             CMP      R0,#+2
   \   000005CC   0xD100             BNE      .+4
   \   000005CE   0xE0F0             B        ??man_lte_main_104
   \   000005D0   0xD200             BCS      .+4
   \   000005D2   0xE0C8             B        ??man_lte_main_105
   \   000005D4   0x2804             CMP      R0,#+4
   \   000005D6   0xD100             BNE      .+4
   \   000005D8   0xE104             B        ??man_lte_main_106
   \   000005DA   0xD200             BCS      .+4
   \   000005DC   0xE0EA             B        ??man_lte_main_107
   \   000005DE   0x2806             CMP      R0,#+6
   \   000005E0   0xD100             BNE      .+4
   \   000005E2   0xE10C             B        ??man_lte_main_108
   \   000005E4   0xD200             BCS      .+4
   \   000005E6   0xE109             B        ??man_lte_main_109
   \   000005E8   0x2808             CMP      R0,#+8
   \   000005EA   0xD100             BNE      .+4
   \   000005EC   0xE12C             B        ??man_lte_main_110
   \   000005EE   0xD200             BCS      .+4
   \   000005F0   0xE11A             B        ??man_lte_main_111
   \   000005F2   0x280A             CMP      R0,#+10
   \   000005F4   0xD100             BNE      .+4
   \   000005F6   0xE156             B        ??man_lte_main_112
   \   000005F8   0xD200             BCS      .+4
   \   000005FA   0xE13C             B        ??man_lte_main_113
   \   000005FC   0x280C             CMP      R0,#+12
   \   000005FE   0xD100             BNE      .+4
   \   00000600   0xE15F             B        ??man_lte_main_114
   \   00000602   0xD200             BCS      .+4
   \   00000604   0xE150             B        ??man_lte_main_115
   \   00000606   0x280E             CMP      R0,#+14
   \   00000608   0xD100             BNE      .+4
   \   0000060A   0xE170             B        ??man_lte_main_116
   \   0000060C   0xD200             BCS      .+4
   \   0000060E   0xE16D             B        ??man_lte_main_117
   \   00000610   0x2810             CMP      R0,#+16
   \   00000612   0xD100             BNE      .+4
   \   00000614   0xE19B             B        ??man_lte_main_118
   \   00000616   0xD200             BCS      .+4
   \   00000618   0xE169             B        ??man_lte_main_116
   \   0000061A   0x2812             CMP      R0,#+18
   \   0000061C   0xD100             BNE      .+4
   \   0000061E   0xE1AE             B        ??man_lte_main_119
   \   00000620   0xD200             BCS      .+4
   \   00000622   0xE1AB             B        ??man_lte_main_120
   \   00000624   0x2814             CMP      R0,#+20
   \   00000626   0xD100             BNE      .+4
   \   00000628   0xE1BF             B        ??man_lte_main_121
   \   0000062A   0xD200             BCS      .+4
   \   0000062C   0xE1B1             B        ??man_lte_main_122
   \   0000062E   0x2816             CMP      R0,#+22
   \   00000630   0xD100             BNE      .+4
   \   00000632   0xE1D2             B        ??man_lte_main_123
   \   00000634   0xD200             BCS      .+4
   \   00000636   0xE1CF             B        ??man_lte_main_124
   \   00000638   0x2818             CMP      R0,#+24
   \   0000063A   0xD100             BNE      .+4
   \   0000063C   0xE1E3             B        ??man_lte_main_125
   \   0000063E   0xD200             BCS      .+4
   \   00000640   0xE1D5             B        ??man_lte_main_126
   \   00000642   0x281A             CMP      R0,#+26
   \   00000644   0xD100             BNE      .+4
   \   00000646   0xE1FA             B        ??man_lte_main_127
   \   00000648   0xD200             BCS      .+4
   \   0000064A   0xE1F7             B        ??man_lte_main_128
   \   0000064C   0x281C             CMP      R0,#+28
   \   0000064E   0xD100             BNE      .+4
   \   00000650   0xE230             B        ??man_lte_main_129
   \   00000652   0xD200             BCS      .+4
   \   00000654   0xE200             B        ??man_lte_main_130
   \   00000656   0x281E             CMP      R0,#+30
   \   00000658   0xD100             BNE      .+4
   \   0000065A   0xE24F             B        ??man_lte_main_131
   \   0000065C   0xD200             BCS      .+4
   \   0000065E   0xE22A             B        ??man_lte_main_132
   \   00000660   0x2820             CMP      R0,#+32
   \   00000662   0xD100             BNE      .+4
   \   00000664   0xE260             B        ??man_lte_main_133
   \   00000666   0xD200             BCS      .+4
   \   00000668   0xE25D             B        ??man_lte_main_134
   \   0000066A   0x2822             CMP      R0,#+34
   \   0000066C   0xD100             BNE      .+4
   \   0000066E   0xE282             B        ??man_lte_main_135
   \   00000670   0xD200             BCS      .+4
   \   00000672   0xE275             B        ??man_lte_main_136
   \   00000674   0x2824             CMP      R0,#+36
   \   00000676   0xD100             BNE      .+4
   \   00000678   0xE295             B        ??man_lte_main_137
   \   0000067A   0xD200             BCS      .+4
   \   0000067C   0xE292             B        ??man_lte_main_138
   \   0000067E   0x2826             CMP      R0,#+38
   \   00000680   0xD100             BNE      .+4
   \   00000682   0xE2BF             B        ??man_lte_main_139
   \   00000684   0xD200             BCS      .+4
   \   00000686   0xE29B             B        ??man_lte_main_140
   \   00000688   0x2828             CMP      R0,#+40
   \   0000068A   0xD100             BNE      .+4
   \   0000068C   0xE2BB             B        ??man_lte_main_141
   \   0000068E   0xD200             BCS      .+4
   \   00000690   0xE2B9             B        ??man_lte_main_141
   \   00000692   0x282A             CMP      R0,#+42
   \   00000694   0xD100             BNE      .+4
   \   00000696   0xE2C9             B        ??man_lte_main_142
   \   00000698   0xD200             BCS      .+4
   \   0000069A   0xE2C0             B        ??man_lte_main_143
   \   0000069C   0x282C             CMP      R0,#+44
   \   0000069E   0xD100             BNE      .+4
   \   000006A0   0xE2E0             B        ??man_lte_main_144
   \   000006A2   0xD200             BCS      .+4
   \   000006A4   0xE2C7             B        ??man_lte_main_145
   \   000006A6   0x282E             CMP      R0,#+46
   \   000006A8   0xD100             BNE      .+4
   \   000006AA   0xE2E6             B        ??man_lte_main_146
   \   000006AC   0xD200             BCS      .+4
   \   000006AE   0xE2DA             B        ??man_lte_main_147
   \   000006B0   0x2830             CMP      R0,#+48
   \   000006B2   0xD100             BNE      .+4
   \   000006B4   0xE2FD             B        ??man_lte_main_148
   \   000006B6   0xD200             BCS      .+4
   \   000006B8   0xE2E4             B        ??man_lte_main_149
   \   000006BA   0x2832             CMP      R0,#+50
   \   000006BC   0xD100             BNE      .+4
   \   000006BE   0xE313             B        ??man_lte_main_150
   \   000006C0   0xD200             BCS      .+4
   \   000006C2   0xE2F7             B        ??man_lte_main_151
   \   000006C4   0x2834             CMP      R0,#+52
   \   000006C6   0xD100             BNE      .+4
   \   000006C8   0xE30F             B        ??man_lte_main_152
   \   000006CA   0xD200             BCS      .+4
   \   000006CC   0xE30D             B        ??man_lte_main_152
   \   000006CE   0x2836             CMP      R0,#+54
   \   000006D0   0xD100             BNE      .+4
   \   000006D2   0xE329             B        ??man_lte_main_153
   \   000006D4   0xD200             BCS      .+4
   \   000006D6   0xE312             B        ??man_lte_main_154
   \   000006D8   0x2838             CMP      R0,#+56
   \   000006DA   0xD100             BNE      .+4
   \   000006DC   0xE325             B        ??man_lte_main_155
   \   000006DE   0xD200             BCS      .+4
   \   000006E0   0xE323             B        ??man_lte_main_155
   \   000006E2   0x283A             CMP      R0,#+58
   \   000006E4   0xD100             BNE      .+4
   \   000006E6   0xE326             B        ??man_lte_main_156
   \   000006E8   0xD200             BCS      .+4
   \   000006EA   0xE323             B        ??man_lte_main_157
   \   000006EC   0x283C             CMP      R0,#+60
   \   000006EE   0xD100             BNE      .+4
   \   000006F0   0xE32A             B        ??man_lte_main_158
   \   000006F2   0xD200             BCS      .+4
   \   000006F4   0xE323             B        ??man_lte_main_159
   \   000006F6   0x283E             CMP      R0,#+62
   \   000006F8   0xD100             BNE      .+4
   \   000006FA   0xE341             B        ??man_lte_main_160
   \   000006FC   0xD200             BCS      .+4
   \   000006FE   0xE33E             B        ??man_lte_main_161
   \   00000700   0x2840             CMP      R0,#+64
   \   00000702   0xD100             BNE      .+4
   \   00000704   0xE364             B        ??man_lte_main_162
   \   00000706   0xD200             BCS      .+4
   \   00000708   0xE33A             B        ??man_lte_main_160
   \   0000070A   0x2842             CMP      R0,#+66
   \   0000070C   0xD100             BNE      .+4
   \   0000070E   0xE360             B        ??man_lte_main_163
   \   00000710   0xD200             BCS      .+4
   \   00000712   0xE35E             B        ??man_lte_main_163
   \   00000714   0x2844             CMP      R0,#+68
   \   00000716   0xD100             BNE      .+4
   \   00000718   0xE376             B        ??man_lte_main_164
   \   0000071A   0xD200             BCS      .+4
   \   0000071C   0xE35D             B        ??man_lte_main_165
   \   0000071E   0x2846             CMP      R0,#+70
   \   00000720   0xD100             BNE      .+4
   \   00000722   0xE372             B        ??man_lte_main_166
   \   00000724   0xD200             BCS      .+4
   \   00000726   0xE370             B        ??man_lte_main_166
   \   00000728   0x2848             CMP      R0,#+72
   \   0000072A   0xD100             BNE      .+4
   \   0000072C   0xE389             B        ??man_lte_main_167
   \   0000072E   0xD200             BCS      .+4
   \   00000730   0xE386             B        ??man_lte_main_168
   \   00000732   0x284A             CMP      R0,#+74
   \   00000734   0xD100             BNE      .+4
   \   00000736   0xE38E             B        ??man_lte_main_169
   \   00000738   0xD200             BCS      .+4
   \   0000073A   0xE382             B        ??man_lte_main_167
   \   0000073C   0x284C             CMP      R0,#+76
   \   0000073E   0xD100             BNE      .+4
   \   00000740   0xE3B6             B        ??man_lte_main_170
   \   00000742   0xD200             BCS      .+4
   \   00000744   0xE391             B        ??man_lte_main_171
   \   00000746   0x284E             CMP      R0,#+78
   \   00000748   0xD100             BNE      .+4
   \   0000074A   0xE3B2             B        ??man_lte_main_172
   \   0000074C   0xD200             BCS      .+4
   \   0000074E   0xE3B0             B        ??man_lte_main_172
   \   00000750   0x2850             CMP      R0,#+80
   \   00000752   0xD100             BNE      .+4
   \   00000754   0xE3D6             B        ??man_lte_main_173
   \   00000756   0xD200             BCS      .+4
   \   00000758   0xE3C1             B        ??man_lte_main_174
   \   0000075A   0x2851             CMP      R0,#+81
   \   0000075C   0xD100             BNE      .+4
   \   0000075E   0xE3D1             B        ??man_lte_main_173
   \   00000760   0xE3E8             B        ??man_lte_main_175
    799          	case MAN_LTE_SEQ_READY:					// 要求待ち
    800          		break;
   \                     ??man_lte_main_103: (+1)
   \   00000762   0xF000 0xFBEE      BL       ??man_lte_main_176
    801          
    802          	// ******************************
    803          	//    man_lte_req_init
    804          	//    (man_lte_work.lte_sts & MAN_LTE_STS_POWER_ON) == 0
    805          	// ******************************
    806          	case MAN_LTE_SEQ_LTE_POWON_REQ:
    807          		man_gpio_lte_power(MAN_GPIO_CTRL_ON);		// POWER ON
   \                     ??man_lte_main_105: (+1)
   \   00000766   0x2001             MOVS     R0,#+1
   \   00000768   0x.... 0x....      BL       man_gpio_lte_power
    808          		seSysSleepMS(10);
   \   0000076C   0x200A             MOVS     R0,#+10
   \   0000076E   0x.... 0x....      BL       seSysSleepMS
    809          		man_gpio_lte_pwrkey(MAN_GPIO_CTRL_OFF);		// PWRKEY OFF
   \   00000772   0x2000             MOVS     R0,#+0
   \   00000774   0x.... 0x....      BL       man_gpio_lte_pwrkey
    810          		seSysSleepMS(5);
   \   00000778   0x2005             MOVS     R0,#+5
   \   0000077A   0x.... 0x....      BL       seSysSleepMS
    811          
    812          		// PWRKEYを500ms間押す
    813          		man_gpio_lte_pwrkey(MAN_GPIO_CTRL_ON);		// PWRKEY ON
   \   0000077E   0x2001             MOVS     R0,#+1
   \   00000780   0x.... 0x....      BL       man_gpio_lte_pwrkey
    814          
    815          		// シーケンスを更新する
    816          		man_lte_set_sequense(MAN_LTE_SEQ_PWRKEY_ON_WAIT);
   \   00000784   0x2002             MOVS     R0,#+2
   \   00000786   0x.... 0x....      BL       man_lte_set_sequense
    817          		ret = man_timer_start_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_PWRKEY_ON_WAIT, MAN_LTE_PWRKEY_ON_WAIT_TIME, man_lte_req_callback);
   \   0000078A   0x4AC8             LDR      R2,??man_lte_main_177
   \   0000078C   0x21FA             MOVS     R1,#+250
   \   0000078E   0x0049             LSLS     R1,R1,#+1        ;; #+500
   \   00000790   0x48C7             LDR      R0,??man_lte_main_177+0x4  ;; 0x40400002
   \   00000792   0x.... 0x....      BL       man_timer_start_wait
    818          		if (ret < 0) {
   \   00000796   0x2800             CMP      R0,#+0
   \   00000798   0xD50A             BPL      ??man_lte_main_178
    819          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   0000079A   0x2000             MOVS     R0,#+0
   \   0000079C   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000079E   0x.... 0x....      BL       man_lte_return_callback
    820          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   000007A2   0x23CD             MOVS     R3,#+205
   \   000007A4   0x009B             LSLS     R3,R3,#+2        ;; #+820
   \   000007A6   0x2200             MOVS     R2,#+0
   \   000007A8   0x2100             MOVS     R1,#+0
   \   000007AA   0x2018             MOVS     R0,#+24
   \   000007AC   0x.... 0x....      BL       man_error_set
    821          		}
    822          		break;
   \                     ??man_lte_main_178: (+1)
   \   000007B0   0xE3C7             B        ??man_lte_main_176
    823          
    824          
    825          	// PWRKEYを500ms間押下後
    826          	case MAN_LTE_SEQ_PWRKEY_ON_WAIT:			// PWRKEY ON 500ms待ち中
    827          		break;
   \                     ??man_lte_main_104: (+1)
   \   000007B2   0xE3C6             B        ??man_lte_main_176
    828          	case MAN_LTE_SEQ_PWRKEY_ON_WAIT_OK:			// PWRKEY ON 500ms待ち完了
    829          		// 500ms後にPWRKEYを放す
    830          		man_gpio_lte_pwrkey(MAN_GPIO_CTRL_OFF);
   \                     ??man_lte_main_107: (+1)
   \   000007B4   0x2000             MOVS     R0,#+0
   \   000007B6   0x.... 0x....      BL       man_gpio_lte_pwrkey
    831          
    832          		// LTEの安定を23秒間待つ
    833          		man_lte_set_sequense(MAN_LTE_SEQ_PWRKEY_OFF_WAIT);
   \   000007BA   0x2005             MOVS     R0,#+5
   \   000007BC   0x.... 0x....      BL       man_lte_set_sequense
    834          		ret = man_timer_start_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_PWRKEY_OFF_WAIT, MAN_LTE_PWRKEY_OFF_WAIT_TIME, man_lte_req_callback);
   \   000007C0   0x4ABA             LDR      R2,??man_lte_main_177
   \   000007C2   0x49CA             LDR      R1,??man_lte_main_179  ;; 0x59d8
   \   000007C4   0x48CA             LDR      R0,??man_lte_main_179+0x4  ;; 0x40400005
   \   000007C6   0x.... 0x....      BL       man_timer_start_wait
    835          		if (ret < 0) {
   \   000007CA   0x2800             CMP      R0,#+0
   \   000007CC   0xD509             BPL      ??man_lte_main_180
    836          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   000007CE   0x2000             MOVS     R0,#+0
   \   000007D0   0x43C0             MVNS     R0,R0            ;; #-1
   \   000007D2   0x.... 0x....      BL       man_lte_return_callback
    837          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   000007D6   0x4BC7             LDR      R3,??man_lte_main_179+0x8  ;; 0x345
   \   000007D8   0x2200             MOVS     R2,#+0
   \   000007DA   0x2100             MOVS     R1,#+0
   \   000007DC   0x2018             MOVS     R0,#+24
   \   000007DE   0x.... 0x....      BL       man_error_set
    838          		}
    839          		break;
   \                     ??man_lte_main_180: (+1)
   \   000007E2   0xE3AE             B        ??man_lte_main_176
    840          	case MAN_LTE_SEQ_PWRKEY_ON_WAIT_NG:			// PWRKEY ON 1000ms待ち異常
    841          		man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \                     ??man_lte_main_106: (+1)
   \   000007E4   0x4BC4             LDR      R3,??man_lte_main_179+0xC  ;; 0x349
   \   000007E6   0x2200             MOVS     R2,#+0
   \   000007E8   0x4816             LDR      R0,??man_lte_main_102+0x4
   \   000007EA   0x7841             LDRB     R1,[R0, #+1]
   \   000007EC   0x2018             MOVS     R0,#+24
   \   000007EE   0x.... 0x....      BL       man_error_set
    842          		man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   000007F2   0x2000             MOVS     R0,#+0
   \   000007F4   0x43C0             MVNS     R0,R0            ;; #-1
   \   000007F6   0x.... 0x....      BL       man_lte_return_callback
    843          		break;
   \   000007FA   0xE3A2             B        ??man_lte_main_176
    844          
    845          
    846          	// LTEの安定を20秒後
    847          	case MAN_LTE_SEQ_PWRKEY_OFF_WAIT:
    848          		break;
   \                     ??man_lte_main_109: (+1)
   \   000007FC   0xE3A1             B        ??man_lte_main_176
    849          
    850          	case MAN_LTE_SEQ_PWRKEY_OFF_WAIT_OK:
    851          		// POWER ONを確認
    852          		if (man_gpio_lte_power_get() == MAN_GPIO_LTEPOW_ON) {
   \                     ??man_lte_main_108: (+1)
   \   000007FE   0x.... 0x....      BL       man_gpio_lte_power_get
   \   00000802   0x2801             CMP      R0,#+1
   \   00000804   0xD10C             BNE      ??man_lte_main_181
    853          			// POWER ON実施
    854          			man_lte_work.lte_sts |= MAN_LTE_STS_POWER_ON;
   \   00000806   0x480F             LDR      R0,??man_lte_main_102+0x4
   \   00000808   0x6A40             LDR      R0,[R0, #+36]
   \   0000080A   0x2101             MOVS     R1,#+1
   \   0000080C   0x4301             ORRS     R1,R1,R0
   \   0000080E   0x480D             LDR      R0,??man_lte_main_102+0x4
   \   00000810   0x6241             STR      R1,[R0, #+36]
    855          
    856          #if 0 //DEBUG Matsushita 20180928
    857          				man_lte_set_sequense(MAN_LTE_SEQ_LTE_INIT_REQ);
    858          #else
    859          			// OTA機能停止を開始する
    860          				man_lte_set_sequense(MAN_LTE_SEQ_LTE_OTA_OFF_REQ);
   \   00000812   0x2008             MOVS     R0,#+8
   \   00000814   0x.... 0x....      BL       man_lte_set_sequense
    861          				man_lte_work.retry = 0;
   \   00000818   0x2000             MOVS     R0,#+0
   \   0000081A   0x490A             LDR      R1,??man_lte_main_102+0x4
   \   0000081C   0x61C8             STR      R0,[R1, #+28]
   \   0000081E   0xE002             B        ??man_lte_main_182
    862          #endif
    863          		}
    864          		else {
    865          			// 再度POWER ONする
    866          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_POWON_REQ);
   \                     ??man_lte_main_181: (+1)
   \   00000820   0x2001             MOVS     R0,#+1
   \   00000822   0x.... 0x....      BL       man_lte_set_sequense
    867          		}
    868          		break;
   \                     ??man_lte_main_182: (+1)
   \   00000826   0xE38C             B        ??man_lte_main_176
    869          	case MAN_LTE_SEQ_PWRKEY_OFF_WAIT_NG:
    870          		man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \                     ??man_lte_main_111: (+1)
   \   00000828   0x4BCA             LDR      R3,??man_lte_main_183  ;; 0x366
   \   0000082A   0x2200             MOVS     R2,#+0
   \   0000082C   0x4805             LDR      R0,??man_lte_main_102+0x4
   \   0000082E   0x7841             LDRB     R1,[R0, #+1]
   \   00000830   0x2018             MOVS     R0,#+24
   \   00000832   0x.... 0x....      BL       man_error_set
    871          		man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000836   0x2000             MOVS     R0,#+0
   \   00000838   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000083A   0x.... 0x....      BL       man_lte_return_callback
    872          		break;
   \   0000083E   0xE380             B        ??man_lte_main_176
   \                     ??man_lte_main_102:
   \   00000840   0x0000030E         DC32     0x30e
   \   00000844   0x........         DC32     man_lte_work
    873          
    874          
    875          
    876          	// ******************************
    877          	//    man_lte_req_init
    878          	//    (man_lte_work.lte_sts & MAN_LTE_STS_POWER_ON) == MAN_LTE_STS_POWER_ON
    879          	// ******************************
    880          	case MAN_LTE_SEQ_LTE_OTA_OFF_REQ:			// OTA機能停止要求
    881          		// HTTPの使用状況を確認する
    882          		if (sts == 0) {
   \                     ??man_lte_main_110: (+1)
   \   00000848   0x2C00             CMP      R4,#+0
   \   0000084A   0xD113             BNE      ??man_lte_main_184
    883          			// シーケンスを更新する
    884          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_OTA_OFF);
   \   0000084C   0x200A             MOVS     R0,#+10
   \   0000084E   0x.... 0x....      BL       man_lte_set_sequense
    885          			ret = man_http_lte_ota_off(MAN_LTE_SEQ_LTE_OTA_OFF, man_lte_req_callback);
   \   00000852   0x4996             LDR      R1,??man_lte_main_177
   \   00000854   0x200A             MOVS     R0,#+10
   \   00000856   0x.... 0x....      BL       man_http_lte_ota_off
    886          			if (ret < 0) {
   \   0000085A   0x2800             CMP      R0,#+0
   \   0000085C   0xD50A             BPL      ??man_lte_main_184
    887          				man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \   0000085E   0x4BBE             LDR      R3,??man_lte_main_183+0x4  ;; 0x377
   \   00000860   0x2200             MOVS     R2,#+0
   \   00000862   0x48BE             LDR      R0,??man_lte_main_183+0x8
   \   00000864   0x7841             LDRB     R1,[R0, #+1]
   \   00000866   0x2018             MOVS     R0,#+24
   \   00000868   0x.... 0x....      BL       man_error_set
    888          				man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   0000086C   0x2000             MOVS     R0,#+0
   \   0000086E   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000870   0x.... 0x....      BL       man_lte_return_callback
    889          			}
    890          		}
    891          		break;
   \                     ??man_lte_main_184: (+1)
   \   00000874   0xE365             B        ??man_lte_main_176
    892          #if 1 //DEBUG Matsushita 0928
    893          	case MAN_LTE_SEQ_LTE_OTA_OFF_REQ_RETRY:			// OTA機能停止要求
    894          		// HTTPの使用状況を確認する
    895          		if (sts == 0) {
   \                     ??man_lte_main_113: (+1)
   \   00000876   0x2C00             CMP      R4,#+0
   \   00000878   0xD114             BNE      ??man_lte_main_185
    896          			// シーケンスを更新する
    897          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_OTA_OFF);
   \   0000087A   0x200A             MOVS     R0,#+10
   \   0000087C   0x.... 0x....      BL       man_lte_set_sequense
    898          			ret = man_http_lte_ota_off(MAN_LTE_SEQ_LTE_OTA_OFF, man_lte_req_callback);
   \   00000880   0x498A             LDR      R1,??man_lte_main_177
   \   00000882   0x200A             MOVS     R0,#+10
   \   00000884   0x.... 0x....      BL       man_http_lte_ota_off
    899          			if (ret < 0) {
   \   00000888   0x2800             CMP      R0,#+0
   \   0000088A   0xD50B             BPL      ??man_lte_main_185
    900          				man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \   0000088C   0x23E1             MOVS     R3,#+225
   \   0000088E   0x009B             LSLS     R3,R3,#+2        ;; #+900
   \   00000890   0x2200             MOVS     R2,#+0
   \   00000892   0x48B2             LDR      R0,??man_lte_main_183+0x8
   \   00000894   0x7841             LDRB     R1,[R0, #+1]
   \   00000896   0x2018             MOVS     R0,#+24
   \   00000898   0x.... 0x....      BL       man_error_set
    901          				man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   0000089C   0x2000             MOVS     R0,#+0
   \   0000089E   0x43C0             MVNS     R0,R0            ;; #-1
   \   000008A0   0x.... 0x....      BL       man_lte_return_callback
    902          			}
    903          		}
    904          		break;
   \                     ??man_lte_main_185: (+1)
   \   000008A4   0xE34D             B        ??man_lte_main_176
    905          #endif
    906          	case MAN_LTE_SEQ_LTE_OTA_OFF:				// OTA機能停止中
    907          		break;
   \                     ??man_lte_main_112: (+1)
   \   000008A6   0xE34C             B        ??man_lte_main_176
    908          	case MAN_LTE_SEQ_LTE_OTA_OFF_OK:			// OTA機能停止完了
    909          		// OTA OFF機能実施
    910          		man_lte_work.lte_sts |= MAN_LTE_STS_OTA_OFF;
   \                     ??man_lte_main_115: (+1)
   \   000008A8   0x48AC             LDR      R0,??man_lte_main_183+0x8
   \   000008AA   0x6A40             LDR      R0,[R0, #+36]
   \   000008AC   0x2120             MOVS     R1,#+32
   \   000008AE   0x4301             ORRS     R1,R1,R0
   \   000008B0   0x48AA             LDR      R0,??man_lte_main_183+0x8
   \   000008B2   0x6241             STR      R1,[R0, #+36]
    911          		man_lte_work.ota_off_flag = 1;			// 成功
   \   000008B4   0x2001             MOVS     R0,#+1
   \   000008B6   0x49A9             LDR      R1,??man_lte_main_183+0x8
   \   000008B8   0x6208             STR      R0,[R1, #+32]
    912          		// LTEの初期化を開始する
    913          		man_lte_set_sequense(MAN_LTE_SEQ_LTE_INIT_REQ);
   \   000008BA   0x2010             MOVS     R0,#+16
   \   000008BC   0x.... 0x....      BL       man_lte_set_sequense
    914          		break;
   \   000008C0   0xE33F             B        ??man_lte_main_176
    915          	case MAN_LTE_SEQ_LTE_OTA_OFF_NG:			// OTA機能停止異常
    916          		// リトライまで3秒間待つ
    917          		man_lte_set_sequense(MAN_LTE_SEQ_LTE_OTA_OFF_NG_WAIT);
   \                     ??man_lte_main_114: (+1)
   \   000008C2   0x200D             MOVS     R0,#+13
   \   000008C4   0x.... 0x....      BL       man_lte_set_sequense
    918          		ret = man_timer_start_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_OTA_OFF_NG_WAIT, MAN_LTE_OTA_OFF_WAIT_TIME, man_lte_req_callback);
   \   000008C8   0x4A78             LDR      R2,??man_lte_main_177
   \   000008CA   0x49C8             LDR      R1,??man_lte_main_186  ;; 0xbb8
   \   000008CC   0x48C8             LDR      R0,??man_lte_main_186+0x4  ;; 0x4040000d
   \   000008CE   0x.... 0x....      BL       man_timer_start_wait
    919          		if (ret < 0) {
   \   000008D2   0x2800             CMP      R0,#+0
   \   000008D4   0xD509             BPL      ??man_lte_main_187
    920          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   000008D6   0x2000             MOVS     R0,#+0
   \   000008D8   0x43C0             MVNS     R0,R0            ;; #-1
   \   000008DA   0x.... 0x....      BL       man_lte_return_callback
    921          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   000008DE   0x4BC5             LDR      R3,??man_lte_main_186+0x8  ;; 0x399
   \   000008E0   0x2200             MOVS     R2,#+0
   \   000008E2   0x2100             MOVS     R1,#+0
   \   000008E4   0x2018             MOVS     R0,#+24
   \   000008E6   0x.... 0x....      BL       man_error_set
    922          		}
    923          		break;
   \                     ??man_lte_main_187: (+1)
   \   000008EA   0xE32A             B        ??man_lte_main_176
    924          	case MAN_LTE_SEQ_LTE_OTA_OFF_NG_WAIT:		// OTA機能停止異常 リトライ3秒待ち
    925          		break;
   \                     ??man_lte_main_117: (+1)
   \   000008EC   0xE329             B        ??man_lte_main_176
    926          	case MAN_LTE_SEQ_LTE_OTA_OFF_NG_WAIT_OK:	// OTA機能停止異常 リトライ3秒待ち完了
    927          	case MAN_LTE_SEQ_LTE_OTA_OFF_NG_WAIT_NG:	// OTA機能停止異常 リトライ3秒待ち完了
    928          		man_lte_work.retry++;
   \                     ??man_lte_main_116: (+1)
   \   000008EE   0x489B             LDR      R0,??man_lte_main_183+0x8
   \   000008F0   0x69C0             LDR      R0,[R0, #+28]
   \   000008F2   0x1C40             ADDS     R0,R0,#+1
   \   000008F4   0x4999             LDR      R1,??man_lte_main_183+0x8
   \   000008F6   0x61C8             STR      R0,[R1, #+28]
    929                          int8_t flag, retry;
    930                          man_data_get_SIM7500_cfotaswitch(&flag, &retry);
   \   000008F8   0x4669             MOV      R1,SP
   \   000008FA   0xA800             ADD      R0,SP,#+0
   \   000008FC   0x1C40             ADDS     R0,R0,#+1
   \   000008FE   0x.... 0x....      BL       man_data_get_SIM7500_cfotaswitch
    931                          if(retry == 0)
   \   00000902   0x4669             MOV      R1,SP
   \   00000904   0x2000             MOVS     R0,#+0
   \   00000906   0x5608             LDRSB    R0,[R1, R0]
   \   00000908   0x2800             CMP      R0,#+0
   \   0000090A   0xD102             BNE      ??man_lte_main_188
    932                          {
    933                            retry = MAN_LTE_RETRY_OTA_OFF;
   \   0000090C   0x2009             MOVS     R0,#+9
   \   0000090E   0x4669             MOV      R1,SP
   \   00000910   0x7008             STRB     R0,[R1, #+0]
    934                          }
    935          		if (man_lte_work.retry <= retry) {
   \                     ??man_lte_main_188: (+1)
   \   00000912   0x4669             MOV      R1,SP
   \   00000914   0x2000             MOVS     R0,#+0
   \   00000916   0x5608             LDRSB    R0,[R1, R0]
   \   00000918   0x4990             LDR      R1,??man_lte_main_183+0x8
   \   0000091A   0x69C9             LDR      R1,[R1, #+28]
   \   0000091C   0x4288             CMP      R0,R1
   \   0000091E   0xDB03             BLT      ??man_lte_main_189
    936          //		if (man_lte_work.retry <= MAN_LTE_RETRY_OTA_OFF) {
    937          			// OTA機能停止開始
    938          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_OTA_OFF_REQ_RETRY);
   \   00000920   0x2009             MOVS     R0,#+9
   \   00000922   0x.... 0x....      BL       man_lte_set_sequense
   \   00000926   0xE011             B        ??man_lte_main_190
    939          		}
    940          		// 10回連続失敗時は異常と判断する
    941          		else {
    942          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \                     ??man_lte_main_189: (+1)
   \   00000928   0x4BB3             LDR      R3,??man_lte_main_186+0xC  ;; 0x3ae
   \   0000092A   0x2200             MOVS     R2,#+0
   \   0000092C   0x2100             MOVS     R1,#+0
   \   0000092E   0x2018             MOVS     R0,#+24
   \   00000930   0x.... 0x....      BL       man_error_set
    943          			// OTA OFF機能実施
    944          			man_lte_work.lte_sts |= MAN_LTE_STS_OTA_OFF;
   \   00000934   0x4889             LDR      R0,??man_lte_main_183+0x8
   \   00000936   0x6A40             LDR      R0,[R0, #+36]
   \   00000938   0x2120             MOVS     R1,#+32
   \   0000093A   0x4301             ORRS     R1,R1,R0
   \   0000093C   0x4887             LDR      R0,??man_lte_main_183+0x8
   \   0000093E   0x6241             STR      R1,[R0, #+36]
    945          			man_lte_work.ota_off_flag = 0;			// 失敗
   \   00000940   0x2000             MOVS     R0,#+0
   \   00000942   0x4986             LDR      R1,??man_lte_main_183+0x8
   \   00000944   0x6208             STR      R0,[R1, #+32]
    946          			// LTEの初期化を開始する
    947          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_INIT_REQ);
   \   00000946   0x2010             MOVS     R0,#+16
   \   00000948   0x.... 0x....      BL       man_lte_set_sequense
    948          		}
    949          		break;
   \                     ??man_lte_main_190: (+1)
   \   0000094C   0xE2F9             B        ??man_lte_main_176
    950          
    951          
    952          
    953          	// ******************************
    954          	//    man_lte_req_init
    955          	//    (man_lte_work.lte_sts & MAN_LTE_STS_POWER_ON) == MAN_LTE_STS_POWER_ON
    956          	//    (man_lte_work.lte_sts & MAN_LTE_STS_OTA_OFF) == MAN_LTE_STS_OTA_OFF
    957          	// ******************************
    958          	case MAN_LTE_SEQ_LTE_INIT_REQ:			// network使用初期化要求
    959          		// HTTPの使用状況を確認する
    960          		if (sts == 0) {
   \                     ??man_lte_main_118: (+1)
   \   0000094E   0x2C00             CMP      R4,#+0
   \   00000950   0xD113             BNE      ??man_lte_main_191
    961          			// 要求を実施する
    962          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_INIT);
   \   00000952   0x2011             MOVS     R0,#+17
   \   00000954   0x.... 0x....      BL       man_lte_set_sequense
    963          			ret = man_http_lte_init(MAN_LTE_SEQ_LTE_INIT, man_lte_req_callback);
   \   00000958   0x4954             LDR      R1,??man_lte_main_177
   \   0000095A   0x2011             MOVS     R0,#+17
   \   0000095C   0x.... 0x....      BL       man_http_lte_init
    964          			if (ret < 0) {
   \   00000960   0x2800             CMP      R0,#+0
   \   00000962   0xD50A             BPL      ??man_lte_main_191
    965          				man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \   00000964   0x4BA5             LDR      R3,??man_lte_main_186+0x10  ;; 0x3c5
   \   00000966   0x2200             MOVS     R2,#+0
   \   00000968   0x487C             LDR      R0,??man_lte_main_183+0x8
   \   0000096A   0x7841             LDRB     R1,[R0, #+1]
   \   0000096C   0x2018             MOVS     R0,#+24
   \   0000096E   0x.... 0x....      BL       man_error_set
    966          				man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000972   0x2000             MOVS     R0,#+0
   \   00000974   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000976   0x.... 0x....      BL       man_lte_return_callback
    967          			}
    968          		}
    969          		break;
   \                     ??man_lte_main_191: (+1)
   \   0000097A   0xE2E2             B        ??man_lte_main_176
    970          	case MAN_LTE_SEQ_LTE_INIT:				// network使用初期化
    971          		break;
   \                     ??man_lte_main_120: (+1)
   \   0000097C   0xE2E1             B        ??man_lte_main_176
    972          	case MAN_LTE_SEQ_LTE_INIT_OK:			// network使用初期化完了
    973          		// LTE INIT実施
    974          		man_lte_work.lte_sts |= MAN_LTE_STS_LTE_INIT;
   \                     ??man_lte_main_119: (+1)
   \   0000097E   0x4877             LDR      R0,??man_lte_main_183+0x8
   \   00000980   0x6A40             LDR      R0,[R0, #+36]
   \   00000982   0x2102             MOVS     R1,#+2
   \   00000984   0x4301             ORRS     R1,R1,R0
   \   00000986   0x4875             LDR      R0,??man_lte_main_183+0x8
   \   00000988   0x6241             STR      R1,[R0, #+36]
    975          		man_lte_return_callback(MAN_LTE_STATUS_OK);
   \   0000098A   0x2000             MOVS     R0,#+0
   \   0000098C   0x.... 0x....      BL       man_lte_return_callback
    976          		break;
   \   00000990   0xE2D7             B        ??man_lte_main_176
    977          	case MAN_LTE_SEQ_LTE_INIT_NG:			// network使用初期化異常
    978          		man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \                     ??man_lte_main_122: (+1)
   \   00000992   0x4B9B             LDR      R3,??man_lte_main_186+0x14  ;; 0x3d2
   \   00000994   0x2200             MOVS     R2,#+0
   \   00000996   0x4871             LDR      R0,??man_lte_main_183+0x8
   \   00000998   0x7841             LDRB     R1,[R0, #+1]
   \   0000099A   0x2018             MOVS     R0,#+24
   \   0000099C   0x.... 0x....      BL       man_error_set
    979          		man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   000009A0   0x2000             MOVS     R0,#+0
   \   000009A2   0x43C0             MVNS     R0,R0            ;; #-1
   \   000009A4   0x.... 0x....      BL       man_lte_return_callback
    980          		break;
   \   000009A8   0xE2CB             B        ??man_lte_main_176
    981          
    982          
    983          
    984          	// ******************************
    985          	//    man_lte_req_ready
    986          	// ******************************
    987          	case MAN_LTE_SEQ_LTE_READY_REQ:			// network使用準備要求
    988          		// HTTPの使用状況を確認する
    989          		if (sts == 0) {
   \                     ??man_lte_main_121: (+1)
   \   000009AA   0x2C00             CMP      R4,#+0
   \   000009AC   0xD113             BNE      ??man_lte_main_192
    990          			// シーケンスを更新する
    991          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_READY);
   \   000009AE   0x2015             MOVS     R0,#+21
   \   000009B0   0x.... 0x....      BL       man_lte_set_sequense
    992          			ret = man_http_lte_ready(MAN_LTE_SEQ_LTE_READY, man_lte_req_callback);
   \   000009B4   0x493D             LDR      R1,??man_lte_main_177
   \   000009B6   0x2015             MOVS     R0,#+21
   \   000009B8   0x.... 0x....      BL       man_http_lte_ready
    993          			if (ret < 0) {
   \   000009BC   0x2800             CMP      R0,#+0
   \   000009BE   0xD50A             BPL      ??man_lte_main_192
    994          				man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \   000009C0   0x4BC7             LDR      R3,??man_lte_main_193  ;; 0x3e2
   \   000009C2   0x2200             MOVS     R2,#+0
   \   000009C4   0x4865             LDR      R0,??man_lte_main_183+0x8
   \   000009C6   0x7841             LDRB     R1,[R0, #+1]
   \   000009C8   0x2018             MOVS     R0,#+24
   \   000009CA   0x.... 0x....      BL       man_error_set
    995          				man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   000009CE   0x2000             MOVS     R0,#+0
   \   000009D0   0x43C0             MVNS     R0,R0            ;; #-1
   \   000009D2   0x.... 0x....      BL       man_lte_return_callback
    996          			}
    997          		}
    998          		break;
   \                     ??man_lte_main_192: (+1)
   \   000009D6   0xE2B4             B        ??man_lte_main_176
    999          	case MAN_LTE_SEQ_LTE_READY:				// network使用準備
   1000          		break;
   \                     ??man_lte_main_124: (+1)
   \   000009D8   0xE2B3             B        ??man_lte_main_176
   1001          	case MAN_LTE_SEQ_LTE_READY_OK:			// network使用準備完了
   1002          		// LTE READY実施
   1003          		man_lte_work.lte_sts |= MAN_LTE_STS_LTE_READY;
   \                     ??man_lte_main_123: (+1)
   \   000009DA   0x4860             LDR      R0,??man_lte_main_183+0x8
   \   000009DC   0x6A40             LDR      R0,[R0, #+36]
   \   000009DE   0x2104             MOVS     R1,#+4
   \   000009E0   0x4301             ORRS     R1,R1,R0
   \   000009E2   0x485E             LDR      R0,??man_lte_main_183+0x8
   \   000009E4   0x6241             STR      R1,[R0, #+36]
   1004          		man_lte_return_callback(MAN_LTE_STATUS_OK);
   \   000009E6   0x2000             MOVS     R0,#+0
   \   000009E8   0x.... 0x....      BL       man_lte_return_callback
   1005          		break;
   \   000009EC   0xE2A9             B        ??man_lte_main_176
   1006          	case MAN_LTE_SEQ_LTE_READY_NG:			// network使用準備異常
   1007          		man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \                     ??man_lte_main_126: (+1)
   \   000009EE   0x4BBD             LDR      R3,??man_lte_main_193+0x4  ;; 0x3ef
   \   000009F0   0x2200             MOVS     R2,#+0
   \   000009F2   0x485A             LDR      R0,??man_lte_main_183+0x8
   \   000009F4   0x7841             LDRB     R1,[R0, #+1]
   \   000009F6   0x2018             MOVS     R0,#+24
   \   000009F8   0x.... 0x....      BL       man_error_set
   1008          		man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   000009FC   0x2000             MOVS     R0,#+0
   \   000009FE   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000A00   0x.... 0x....      BL       man_lte_return_callback
   1009          		break;
   \   00000A04   0xE29D             B        ??man_lte_main_176
   1010          
   1011          
   1012          
   1013          	// ******************************
   1014          	//    man_lte_req_start
   1015          	// ******************************
   1016          	case MAN_LTE_SEQ_LTE_START_REQ:			// NETWORK使用開始要求
   1017          		// HTTPの使用状況を確認する
   1018          		if (sts == 0) {
   \                     ??man_lte_main_125: (+1)
   \   00000A06   0x2C00             CMP      R4,#+0
   \   00000A08   0xD117             BNE      ??man_lte_main_194
   1019          			man_lte_work.retry = 0;
   \   00000A0A   0x2000             MOVS     R0,#+0
   \   00000A0C   0x4953             LDR      R1,??man_lte_main_183+0x8
   \   00000A0E   0x61C8             STR      R0,[R1, #+28]
   1020          			// シーケンスを更新する
   1021          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_START);
   \   00000A10   0x2019             MOVS     R0,#+25
   \   00000A12   0x.... 0x....      BL       man_lte_set_sequense
   1022          			ret = man_http_lte_open(MAN_LTE_SEQ_LTE_START, man_lte_req_callback);
   \   00000A16   0x4925             LDR      R1,??man_lte_main_177
   \   00000A18   0x2019             MOVS     R0,#+25
   \   00000A1A   0x.... 0x....      BL       man_http_lte_open
   1023          			if (ret < 0) {
   \   00000A1E   0x2800             CMP      R0,#+0
   \   00000A20   0xD50B             BPL      ??man_lte_main_194
   1024          				man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \   00000A22   0x2380             MOVS     R3,#+128
   \   00000A24   0x00DB             LSLS     R3,R3,#+3        ;; #+1024
   \   00000A26   0x2200             MOVS     R2,#+0
   \   00000A28   0x484C             LDR      R0,??man_lte_main_183+0x8
   \   00000A2A   0x7841             LDRB     R1,[R0, #+1]
   \   00000A2C   0x2018             MOVS     R0,#+24
   \   00000A2E   0x.... 0x....      BL       man_error_set
   1025          				man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000A32   0x2000             MOVS     R0,#+0
   \   00000A34   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000A36   0x.... 0x....      BL       man_lte_return_callback
   1026          			}
   1027          		}
   1028          		break;
   \                     ??man_lte_main_194: (+1)
   \   00000A3A   0xE282             B        ??man_lte_main_176
   1029          	case MAN_LTE_SEQ_LTE_START:				// NETWORK使用開始
   1030          		break;
   \                     ??man_lte_main_128: (+1)
   \   00000A3C   0xE281             B        ??man_lte_main_176
   1031          	case MAN_LTE_SEQ_LTE_START_OK:			// NETWORK使用開始完了
   1032          		// LTE OPEN実施
   1033          		man_lte_work.lte_sts |= MAN_LTE_STS_LTE_OPEN;
   \                     ??man_lte_main_127: (+1)
   \   00000A3E   0x4847             LDR      R0,??man_lte_main_183+0x8
   \   00000A40   0x6A40             LDR      R0,[R0, #+36]
   \   00000A42   0x2108             MOVS     R1,#+8
   \   00000A44   0x4301             ORRS     R1,R1,R0
   \   00000A46   0x4845             LDR      R0,??man_lte_main_183+0x8
   \   00000A48   0x6241             STR      R1,[R0, #+36]
   1034          		man_lte_return_callback(MAN_LTE_STATUS_OK);
   \   00000A4A   0x2000             MOVS     R0,#+0
   \   00000A4C   0x.... 0x....      BL       man_lte_return_callback
   1035          		// LTE接続状態
   1036          		man_lte_work.mode = MAN_LTE_MODE_OPEN;
   \   00000A50   0x2001             MOVS     R0,#+1
   \   00000A52   0x4942             LDR      R1,??man_lte_main_183+0x8
   \   00000A54   0x7008             STRB     R0,[R1, #+0]
   1037          		break;
   \   00000A56   0xE274             B        ??man_lte_main_176
   1038          
   1039          	case MAN_LTE_SEQ_LTE_START_NG:			// NETWORK使用開始異常
   1040          		// HTTPの使用状況を確認する
   1041          		if (sts == 0) {
   \                     ??man_lte_main_130: (+1)
   \   00000A58   0x2C00             CMP      R4,#+0
   \   00000A5A   0xD126             BNE      ??man_lte_main_195
   1042          			man_lte_work.retry++;
   \   00000A5C   0x483F             LDR      R0,??man_lte_main_183+0x8
   \   00000A5E   0x69C0             LDR      R0,[R0, #+28]
   \   00000A60   0x1C40             ADDS     R0,R0,#+1
   \   00000A62   0x493E             LDR      R1,??man_lte_main_183+0x8
   \   00000A64   0x61C8             STR      R0,[R1, #+28]
   1043          			if (man_lte_work.retry <= MAN_LTE_RETRY_MAX) {
   \   00000A66   0x483D             LDR      R0,??man_lte_main_183+0x8
   \   00000A68   0x69C0             LDR      R0,[R0, #+28]
   \   00000A6A   0x2803             CMP      R0,#+3
   \   00000A6C   0xDA13             BGE      ??man_lte_main_196
   1044          				// LTE を CLOSE後に再度OPENする
   1045          				man_lte_set_sequense(MAN_LTE_SEQ_LTE_OPEN_STOP);
   \   00000A6E   0x201C             MOVS     R0,#+28
   \   00000A70   0x.... 0x....      BL       man_lte_set_sequense
   1046          				ret = man_http_lte_close(MAN_LTE_SEQ_LTE_OPEN_STOP, man_lte_req_callback);
   \   00000A74   0x490D             LDR      R1,??man_lte_main_177
   \   00000A76   0x201C             MOVS     R0,#+28
   \   00000A78   0x.... 0x....      BL       man_http_lte_close
   1047          				if (ret < 0) {
   \   00000A7C   0x2800             CMP      R0,#+0
   \   00000A7E   0xD514             BPL      ??man_lte_main_195
   1048          					man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000A80   0x2000             MOVS     R0,#+0
   \   00000A82   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000A84   0x.... 0x....      BL       man_lte_return_callback
   1049          					man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000A88   0x4BCC             LDR      R3,??man_lte_main_197  ;; 0x419
   \   00000A8A   0x2200             MOVS     R2,#+0
   \   00000A8C   0x2100             MOVS     R1,#+0
   \   00000A8E   0x2018             MOVS     R0,#+24
   \   00000A90   0x.... 0x....      BL       man_error_set
   \   00000A94   0xE009             B        ??man_lte_main_195
   1050          				}
   1051          			}
   1052          			else {
   1053          				man_lte_return_callback(MAN_LTE_STATUS_NG);
   \                     ??man_lte_main_196: (+1)
   \   00000A96   0x2000             MOVS     R0,#+0
   \   00000A98   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000A9A   0x.... 0x....      BL       man_lte_return_callback
   1054          				man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000A9E   0x4BC8             LDR      R3,??man_lte_main_197+0x4  ;; 0x41e
   \   00000AA0   0x2200             MOVS     R2,#+0
   \   00000AA2   0x2100             MOVS     R1,#+0
   \   00000AA4   0x2018             MOVS     R0,#+24
   \   00000AA6   0x.... 0x....      BL       man_error_set
   1055          			}
   1056          		}
   1057          		break;
   \                     ??man_lte_main_195: (+1)
   \   00000AAA   0xE24A             B        ??man_lte_main_176
   \                     ??man_lte_main_177:
   \   00000AAC   0x........         DC32     man_lte_req_callback
   \   00000AB0   0x40400002         DC32     0x40400002
   1058          
   1059          	case MAN_LTE_SEQ_LTE_OPEN_STOP:			// 一旦、CLOSE中
   1060          		break;
   \                     ??man_lte_main_129: (+1)
   \   00000AB4   0xE245             B        ??man_lte_main_176
   1061          	case MAN_LTE_SEQ_LTE_OPEN_STOP_OK:		// CLOSE完了
   1062          		// LTE CLOSE実施
   1063          		man_lte_work.lte_sts &= ~MAN_LTE_STS_LTE_OPEN;
   \                     ??man_lte_main_132: (+1)
   \   00000AB6   0x4829             LDR      R0,??man_lte_main_183+0x8
   \   00000AB8   0x6A40             LDR      R0,[R0, #+36]
   \   00000ABA   0x2108             MOVS     R1,#+8
   \   00000ABC   0x4388             BICS     R0,R0,R1
   \   00000ABE   0x4927             LDR      R1,??man_lte_main_183+0x8
   \   00000AC0   0x6248             STR      R0,[R1, #+36]
   1064          
   1065          		// 3秒後に再度OPENする
   1066          		man_lte_set_sequense(MAN_LTE_SEQ_LTE_OPEN_WAIT);
   \   00000AC2   0x201F             MOVS     R0,#+31
   \   00000AC4   0x.... 0x....      BL       man_lte_set_sequense
   1067          		ret = man_timer_start_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_OPEN_WAIT, MAN_LTE_OPEN_WAIT_TIME, man_lte_req_callback);
   \   00000AC8   0x4ABE             LDR      R2,??man_lte_main_197+0x8
   \   00000ACA   0x4948             LDR      R1,??man_lte_main_186  ;; 0xbb8
   \   00000ACC   0x48BE             LDR      R0,??man_lte_main_197+0xC  ;; 0x4040001f
   \   00000ACE   0x.... 0x....      BL       man_timer_start_wait
   1068          		if (ret < 0) {
   \   00000AD2   0x2800             CMP      R0,#+0
   \   00000AD4   0xD509             BPL      ??man_lte_main_198
   1069          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000AD6   0x2000             MOVS     R0,#+0
   \   00000AD8   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000ADA   0x.... 0x....      BL       man_lte_return_callback
   1070          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000ADE   0x4BBB             LDR      R3,??man_lte_main_197+0x10  ;; 0x42e
   \   00000AE0   0x2200             MOVS     R2,#+0
   \   00000AE2   0x2100             MOVS     R1,#+0
   \   00000AE4   0x2018             MOVS     R0,#+24
   \   00000AE6   0x.... 0x....      BL       man_error_set
   1071          		}
   1072          		break;
   \                     ??man_lte_main_198: (+1)
   \   00000AEA   0xE22A             B        ??man_lte_main_176
   \                     ??man_lte_main_179:
   \   00000AEC   0x000059D8         DC32     0x59d8
   \   00000AF0   0x40400005         DC32     0x40400005
   \   00000AF4   0x00000345         DC32     0x345
   \   00000AF8   0x00000349         DC32     0x349
   1073          	case MAN_LTE_SEQ_LTE_OPEN_STOP_NG:		// CLOSE異常
   1074          		// 3秒後に再度OPENする
   1075          		man_lte_set_sequense(MAN_LTE_SEQ_LTE_OPEN_WAIT);
   \                     ??man_lte_main_131: (+1)
   \   00000AFC   0x201F             MOVS     R0,#+31
   \   00000AFE   0x.... 0x....      BL       man_lte_set_sequense
   1076          		ret = man_timer_start_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_OPEN_WAIT, MAN_LTE_OPEN_WAIT_TIME, man_lte_req_callback);
   \   00000B02   0x4AB0             LDR      R2,??man_lte_main_197+0x8
   \   00000B04   0x4939             LDR      R1,??man_lte_main_186  ;; 0xbb8
   \   00000B06   0x48B0             LDR      R0,??man_lte_main_197+0xC  ;; 0x4040001f
   \   00000B08   0x.... 0x....      BL       man_timer_start_wait
   1077          		if (ret < 0) {
   \   00000B0C   0x2800             CMP      R0,#+0
   \   00000B0E   0xD509             BPL      ??man_lte_main_199
   1078          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000B10   0x2000             MOVS     R0,#+0
   \   00000B12   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000B14   0x.... 0x....      BL       man_lte_return_callback
   1079          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000B18   0x4BC6             LDR      R3,??man_lte_main_200  ;; 0x437
   \   00000B1A   0x2200             MOVS     R2,#+0
   \   00000B1C   0x2100             MOVS     R1,#+0
   \   00000B1E   0x2018             MOVS     R0,#+24
   \   00000B20   0x.... 0x....      BL       man_error_set
   1080          		}
   1081          		break;
   \                     ??man_lte_main_199: (+1)
   \   00000B24   0xE20D             B        ??man_lte_main_176
   1082          	case MAN_LTE_SEQ_LTE_OPEN_WAIT:			// 待ち中
   1083          		break;
   \                     ??man_lte_main_134: (+1)
   \   00000B26   0xE20C             B        ??man_lte_main_176
   1084          	case MAN_LTE_SEQ_LTE_OPEN_WAIT_OK:		// 待ち終了
   1085          		// HTTPの使用状況を確認する
   1086          		if (sts == 0) {
   \                     ??man_lte_main_133: (+1)
   \   00000B28   0x2C00             CMP      R4,#+0
   \   00000B2A   0xD112             BNE      ??man_lte_main_201
   1087          			// 再度OPENする
   1088          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_START);
   \   00000B2C   0x2019             MOVS     R0,#+25
   \   00000B2E   0x.... 0x....      BL       man_lte_set_sequense
   1089          			ret = man_http_lte_open(MAN_LTE_SEQ_LTE_START, man_lte_req_callback);
   \   00000B32   0x49A4             LDR      R1,??man_lte_main_197+0x8
   \   00000B34   0x2019             MOVS     R0,#+25
   \   00000B36   0x.... 0x....      BL       man_http_lte_open
   1090          			if (ret < 0) {
   \   00000B3A   0x2800             CMP      R0,#+0
   \   00000B3C   0xD509             BPL      ??man_lte_main_201
   1091          				man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000B3E   0x2000             MOVS     R0,#+0
   \   00000B40   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000B42   0x.... 0x....      BL       man_lte_return_callback
   1092          				man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000B46   0x4BBC             LDR      R3,??man_lte_main_200+0x4  ;; 0x444
   \   00000B48   0x2200             MOVS     R2,#+0
   \   00000B4A   0x2100             MOVS     R1,#+0
   \   00000B4C   0x2018             MOVS     R0,#+24
   \   00000B4E   0x.... 0x....      BL       man_error_set
   1093          			}
   1094          		}
   1095          		break;
   \                     ??man_lte_main_201: (+1)
   \   00000B52   0xE1F6             B        ??man_lte_main_176
   \                     ??man_lte_main_183:
   \   00000B54   0x00000366         DC32     0x366
   \   00000B58   0x00000377         DC32     0x377
   \   00000B5C   0x........         DC32     man_lte_work
   1096          	case MAN_LTE_SEQ_LTE_OPEN_WAIT_NG:		// 待ち終了異常
   1097          		man_lte_return_callback(MAN_LTE_STATUS_NG);
   \                     ??man_lte_main_136: (+1)
   \   00000B60   0x2000             MOVS     R0,#+0
   \   00000B62   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000B64   0x.... 0x....      BL       man_lte_return_callback
   1098          		man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000B68   0x4BB4             LDR      R3,??man_lte_main_200+0x8  ;; 0x44a
   \   00000B6A   0x2200             MOVS     R2,#+0
   \   00000B6C   0x2100             MOVS     R1,#+0
   \   00000B6E   0x2018             MOVS     R0,#+24
   \   00000B70   0x.... 0x....      BL       man_error_set
   1099          		break;
   \   00000B74   0xE1E5             B        ??man_lte_main_176
   1100          
   1101          
   1102          
   1103          	// ******************************
   1104          	//    man_lte_req_stop
   1105          	// ******************************
   1106          	case MAN_LTE_SEQ_LTE_STOP_REQ:			// NETWORK使用終了要求
   1107          		// HTTPの使用状況を確認する
   1108          		if (sts == 0) {
   \                     ??man_lte_main_135: (+1)
   \   00000B76   0x2C00             CMP      R4,#+0
   \   00000B78   0xD113             BNE      ??man_lte_main_202
   1109          			// シーケンスを更新する
   1110          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_STOP);
   \   00000B7A   0x2023             MOVS     R0,#+35
   \   00000B7C   0x.... 0x....      BL       man_lte_set_sequense
   1111          			ret = man_http_lte_close(MAN_LTE_SEQ_LTE_STOP, man_lte_req_callback);
   \   00000B80   0x4990             LDR      R1,??man_lte_main_197+0x8
   \   00000B82   0x2023             MOVS     R0,#+35
   \   00000B84   0x.... 0x....      BL       man_http_lte_close
   1112          			if (ret < 0) {
   \   00000B88   0x2800             CMP      R0,#+0
   \   00000B8A   0xD50A             BPL      ??man_lte_main_202
   1113          				man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \   00000B8C   0x4BC6             LDR      R3,??man_lte_main_203  ;; 0x459
   \   00000B8E   0x2200             MOVS     R2,#+0
   \   00000B90   0x48C6             LDR      R0,??man_lte_main_203+0x4
   \   00000B92   0x7841             LDRB     R1,[R0, #+1]
   \   00000B94   0x2018             MOVS     R0,#+24
   \   00000B96   0x.... 0x....      BL       man_error_set
   1114          				man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000B9A   0x2000             MOVS     R0,#+0
   \   00000B9C   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000B9E   0x.... 0x....      BL       man_lte_return_callback
   1115          			}
   1116          		}
   1117          		break;
   \                     ??man_lte_main_202: (+1)
   \   00000BA2   0xE1CE             B        ??man_lte_main_176
   1118          	case MAN_LTE_SEQ_LTE_STOP:				// NETWORK使用終了
   1119          		break;
   \                     ??man_lte_main_138: (+1)
   \   00000BA4   0xE1CD             B        ??man_lte_main_176
   1120          	case MAN_LTE_SEQ_LTE_STOP_OK:			// NETWORK使用終了完了
   1121          		// LTE CLOSE実施
   1122          		man_lte_work.lte_sts &= ~MAN_LTE_STS_LTE_OPEN;
   \                     ??man_lte_main_137: (+1)
   \   00000BA6   0x48C1             LDR      R0,??man_lte_main_203+0x4
   \   00000BA8   0x6A40             LDR      R0,[R0, #+36]
   \   00000BAA   0x2108             MOVS     R1,#+8
   \   00000BAC   0x4388             BICS     R0,R0,R1
   \   00000BAE   0x49BF             LDR      R1,??man_lte_main_203+0x4
   \   00000BB0   0x6248             STR      R0,[R1, #+36]
   1123          		man_lte_return_callback(MAN_LTE_STATUS_OK);
   \   00000BB2   0x2000             MOVS     R0,#+0
   \   00000BB4   0x.... 0x....      BL       man_lte_return_callback
   1124          		// LTE切断状態
   1125          		man_lte_work.mode = MAN_LTE_MODE_CLOSE;
   \   00000BB8   0x2000             MOVS     R0,#+0
   \   00000BBA   0x49BC             LDR      R1,??man_lte_main_203+0x4
   \   00000BBC   0x7008             STRB     R0,[R1, #+0]
   1126          		break;
   \   00000BBE   0xE1C0             B        ??man_lte_main_176
   1127          	case MAN_LTE_SEQ_LTE_STOP_NG:			// NETWORK使用終了異常
   1128          		// 通知によるCLOSEを30秒待つ
   1129          		man_lte_set_sequense(MAN_LTE_SEQ_LTE_STOP_NG_WAIT);
   \                     ??man_lte_main_140: (+1)
   \   00000BC0   0x2026             MOVS     R0,#+38
   \   00000BC2   0x.... 0x....      BL       man_lte_set_sequense
   1130          		ret = man_timer_start_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_STOP_NG_WAIT, MAN_LTE_CLOSE_WAIT_TIME, man_lte_req_callback);
   \   00000BC6   0x4A7F             LDR      R2,??man_lte_main_197+0x8
   \   00000BC8   0x49CB             LDR      R1,??man_lte_main_204  ;; 0x7530
   \   00000BCA   0x48CC             LDR      R0,??man_lte_main_204+0x4  ;; 0x40400026
   \   00000BCC   0x.... 0x....      BL       man_timer_start_wait
   1131          		if (ret < 0) {
   \   00000BD0   0x2800             CMP      R0,#+0
   \   00000BD2   0xD509             BPL      ??man_lte_main_205
   1132          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000BD4   0x2000             MOVS     R0,#+0
   \   00000BD6   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000BD8   0x.... 0x....      BL       man_lte_return_callback
   1133          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000BDC   0x4BC8             LDR      R3,??man_lte_main_204+0x8  ;; 0x46d
   \   00000BDE   0x2200             MOVS     R2,#+0
   \   00000BE0   0x2100             MOVS     R1,#+0
   \   00000BE2   0x2018             MOVS     R0,#+24
   \   00000BE4   0x.... 0x....      BL       man_error_set
   1134          		}
   1135          		break;
   \                     ??man_lte_main_205: (+1)
   \   00000BE8   0xE1AB             B        ??man_lte_main_176
   \   00000BEA   0xBF00             Nop      
   \                     ??man_lte_main_186:
   \   00000BEC   0x00000BB8         DC32     0xbb8
   \   00000BF0   0x4040000D         DC32     0x4040000d
   \   00000BF4   0x00000399         DC32     0x399
   \   00000BF8   0x000003AE         DC32     0x3ae
   \   00000BFC   0x000003C5         DC32     0x3c5
   \   00000C00   0x000003D2         DC32     0x3d2
   1136          	case MAN_LTE_SEQ_LTE_STOP_NG_WAIT:
   1137          		break;
   \                     ??man_lte_main_139: (+1)
   \   00000C04   0xE19D             B        ??man_lte_main_176
   1138          	case MAN_LTE_SEQ_LTE_STOP_NG_WAIT_OK:
   1139          	case MAN_LTE_SEQ_LTE_STOP_NG_WAIT_NG:
   1140          		man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \                     ??man_lte_main_141: (+1)
   \   00000C06   0x4BC8             LDR      R3,??man_lte_main_206  ;; 0x474
   \   00000C08   0x2200             MOVS     R2,#+0
   \   00000C0A   0x48A8             LDR      R0,??man_lte_main_203+0x4
   \   00000C0C   0x7841             LDRB     R1,[R0, #+1]
   \   00000C0E   0x2018             MOVS     R0,#+24
   \   00000C10   0x.... 0x....      BL       man_error_set
   1141          		man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000C14   0x2000             MOVS     R0,#+0
   \   00000C16   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000C18   0x.... 0x....      BL       man_lte_return_callback
   1142          		break;
   \   00000C1C   0xE191             B        ??man_lte_main_176
   1143          	case MAN_LTE_SEQ_LTE_STOP_NOTI_OK:		// NETWORK使用終了完了
   1144          		man_lte_return_callback(MAN_LTE_STATUS_OK);
   \                     ??man_lte_main_143: (+1)
   \   00000C1E   0x2000             MOVS     R0,#+0
   \   00000C20   0x.... 0x....      BL       man_lte_return_callback
   1145          		// LTE切断状態
   1146          		man_lte_work.mode = MAN_LTE_MODE_CLOSE;
   \   00000C24   0x2000             MOVS     R0,#+0
   \   00000C26   0x49A1             LDR      R1,??man_lte_main_203+0x4
   \   00000C28   0x7008             STRB     R0,[R1, #+0]
   1147          		break;
   \   00000C2A   0xE18A             B        ??man_lte_main_176
   1148          	case MAN_LTE_SEQ_LTE_STOP_NOTI_NG:
   1149          		man_lte_return_callback(MAN_LTE_STATUS_NG);
   \                     ??man_lte_main_142: (+1)
   \   00000C2C   0x2000             MOVS     R0,#+0
   \   00000C2E   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000C30   0x.... 0x....      BL       man_lte_return_callback
   1150          		break;
   \   00000C34   0xE185             B        ??man_lte_main_176
   1151          
   1152          
   1153          	// ******************************
   1154          	//    man_lte_req_stby
   1155          	// ******************************
   1156          	case MAN_LTE_SEQ_LTE_STBY_IN_REQ:
   1157          		// HTTPの使用状況を確認する
   1158          		if (sts == 0) {
   \                     ??man_lte_main_145: (+1)
   \   00000C36   0x2C00             CMP      R4,#+0
   \   00000C38   0xD113             BNE      ??man_lte_main_207
   1159          			// スタンバイIN
   1160          //			man_gpio_lte_stby(MAN_GPIO_CTRL_ON);
   1161          			// シーケンスを更新する
   1162          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_IN);
   \   00000C3A   0x202C             MOVS     R0,#+44
   \   00000C3C   0x.... 0x....      BL       man_lte_set_sequense
   1163          			ret = man_http_lte_stby_in(MAN_LTE_SEQ_LTE_STBY_IN, man_lte_req_callback);
   \   00000C40   0x4960             LDR      R1,??man_lte_main_197+0x8
   \   00000C42   0x202C             MOVS     R0,#+44
   \   00000C44   0x.... 0x....      BL       man_http_lte_stby_in
   1164          			if (ret < 0) {
   \   00000C48   0x2800             CMP      R0,#+0
   \   00000C4A   0xD50A             BPL      ??man_lte_main_207
   1165          				man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \   00000C4C   0x4BB7             LDR      R3,??man_lte_main_206+0x4  ;; 0x48d
   \   00000C4E   0x2200             MOVS     R2,#+0
   \   00000C50   0x4896             LDR      R0,??man_lte_main_203+0x4
   \   00000C52   0x7841             LDRB     R1,[R0, #+1]
   \   00000C54   0x2018             MOVS     R0,#+24
   \   00000C56   0x.... 0x....      BL       man_error_set
   1166          				man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000C5A   0x2000             MOVS     R0,#+0
   \   00000C5C   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000C5E   0x.... 0x....      BL       man_lte_return_callback
   1167          			}
   1168          		}
   1169          		break;
   \                     ??man_lte_main_207: (+1)
   \   00000C62   0xE16E             B        ??man_lte_main_176
   1170          	case MAN_LTE_SEQ_LTE_STBY_IN:
   1171          		break;
   \                     ??man_lte_main_144: (+1)
   \   00000C64   0xE16D             B        ??man_lte_main_176
   1172          	case MAN_LTE_SEQ_LTE_STBY_IN_OK:
   1173          		man_lte_return_callback(MAN_LTE_STATUS_OK);
   \                     ??man_lte_main_147: (+1)
   \   00000C66   0x2000             MOVS     R0,#+0
   \   00000C68   0x.... 0x....      BL       man_lte_return_callback
   1174          		// LTE スタンバイ実施済み
   1175          		man_lte_work.lte_sts |= MAN_LTE_STS_LTE_STBY;
   \   00000C6C   0x488F             LDR      R0,??man_lte_main_203+0x4
   \   00000C6E   0x6A40             LDR      R0,[R0, #+36]
   \   00000C70   0x2110             MOVS     R1,#+16
   \   00000C72   0x4301             ORRS     R1,R1,R0
   \   00000C74   0x488D             LDR      R0,??man_lte_main_203+0x4
   \   00000C76   0x6241             STR      R1,[R0, #+36]
   1176          		break;
   \   00000C78   0xE163             B        ??man_lte_main_176
   1177          	case MAN_LTE_SEQ_LTE_STBY_IN_NG:
   1178          		man_lte_return_callback(MAN_LTE_STATUS_NG);
   \                     ??man_lte_main_146: (+1)
   \   00000C7A   0x2000             MOVS     R0,#+0
   \   00000C7C   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000C7E   0x.... 0x....      BL       man_lte_return_callback
   1179          		break;
   \   00000C82   0xE15E             B        ??man_lte_main_176
   1180          
   1181          
   1182          
   1183          	// ******************************
   1184          	//    man_lte_req_wakeup
   1185          	// ******************************
   1186          	case MAN_LTE_SEQ_LTE_STBY_OUT_REQ:
   1187          		// HTTPの使用状況を確認する
   1188          		if (sts == 0) {
   \                     ??man_lte_main_149: (+1)
   \   00000C84   0x2C00             CMP      R4,#+0
   \   00000C86   0xD113             BNE      ??man_lte_main_208
   1189          			// スタンバイOUT
   1190          //			man_gpio_lte_stby(MAN_GPIO_CTRL_OFF);
   1191          			// シーケンスを更新する
   1192          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_OUT);
   \   00000C88   0x2030             MOVS     R0,#+48
   \   00000C8A   0x.... 0x....      BL       man_lte_set_sequense
   1193          			ret = man_http_lte_stby_out(MAN_LTE_SEQ_LTE_STBY_OUT, man_lte_req_callback);
   \   00000C8E   0x494D             LDR      R1,??man_lte_main_197+0x8
   \   00000C90   0x2030             MOVS     R0,#+48
   \   00000C92   0x.... 0x....      BL       man_http_lte_stby_out
   1194          			if (ret < 0) {
   \   00000C96   0x2800             CMP      R0,#+0
   \   00000C98   0xD50A             BPL      ??man_lte_main_208
   1195          				man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \   00000C9A   0x4BA5             LDR      R3,??man_lte_main_206+0x8  ;; 0x4ab
   \   00000C9C   0x2200             MOVS     R2,#+0
   \   00000C9E   0x4883             LDR      R0,??man_lte_main_203+0x4
   \   00000CA0   0x7841             LDRB     R1,[R0, #+1]
   \   00000CA2   0x2018             MOVS     R0,#+24
   \   00000CA4   0x.... 0x....      BL       man_error_set
   1196          				man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000CA8   0x2000             MOVS     R0,#+0
   \   00000CAA   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000CAC   0x.... 0x....      BL       man_lte_return_callback
   1197          			}
   1198          		}
   1199          		break;
   \                     ??man_lte_main_208: (+1)
   \   00000CB0   0xE147             B        ??man_lte_main_176
   1200          	case MAN_LTE_SEQ_LTE_STBY_OUT:
   1201          		break;
   \                     ??man_lte_main_148: (+1)
   \   00000CB2   0xE146             B        ??man_lte_main_176
   1202          	case MAN_LTE_SEQ_LTE_STBY_OUT_OK:
   1203          		// 5秒以内でRESETが発生しない場合は成功とみなす。
   1204          		man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT);
   \                     ??man_lte_main_151: (+1)
   \   00000CB4   0x2032             MOVS     R0,#+50
   \   00000CB6   0x.... 0x....      BL       man_lte_set_sequense
   1205          		ret = man_timer_start_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT, MAN_LTE_STBY_OUT_NG_WAIT_TIME, man_lte_req_callback);
   \   00000CBA   0x4A42             LDR      R2,??man_lte_main_197+0x8
   \   00000CBC   0x49C2             LDR      R1,??man_lte_main_209  ;; 0x1388
   \   00000CBE   0x48C3             LDR      R0,??man_lte_main_209+0x4  ;; 0x40400032
   \   00000CC0   0x.... 0x....      BL       man_timer_start_wait
   1206          		if (ret < 0) {
   \   00000CC4   0x2800             CMP      R0,#+0
   \   00000CC6   0xD50A             BPL      ??man_lte_main_210
   1207          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000CC8   0x2000             MOVS     R0,#+0
   \   00000CCA   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000CCC   0x.... 0x....      BL       man_lte_return_callback
   1208          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000CD0   0x2397             MOVS     R3,#+151
   \   00000CD2   0x00DB             LSLS     R3,R3,#+3        ;; #+1208
   \   00000CD4   0x2200             MOVS     R2,#+0
   \   00000CD6   0x2100             MOVS     R1,#+0
   \   00000CD8   0x2018             MOVS     R0,#+24
   \   00000CDA   0x.... 0x....      BL       man_error_set
   1209          		}
   1210          		break;
   \                     ??man_lte_main_210: (+1)
   \   00000CDE   0xE130             B        ??man_lte_main_176
   \                     ??man_lte_main_193:
   \   00000CE0   0x000003E2         DC32     0x3e2
   \   00000CE4   0x000003EF         DC32     0x3ef
   1211          
   1212          	case MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT:
   1213          		break;
   \                     ??man_lte_main_150: (+1)
   \   00000CE8   0xE12B             B        ??man_lte_main_176
   1214          	case MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT_OK:
   1215          	case MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT_NG:
   1216          		// LTE スタンバイ解除済み
   1217          		man_lte_work.lte_sts &= ~MAN_LTE_STS_LTE_STBY;
   \                     ??man_lte_main_152: (+1)
   \   00000CEA   0x4870             LDR      R0,??man_lte_main_203+0x4
   \   00000CEC   0x6A40             LDR      R0,[R0, #+36]
   \   00000CEE   0x2110             MOVS     R1,#+16
   \   00000CF0   0x4388             BICS     R0,R0,R1
   \   00000CF2   0x496E             LDR      R1,??man_lte_main_203+0x4
   \   00000CF4   0x6248             STR      R0,[R1, #+36]
   1218          		man_lte_return_callback(MAN_LTE_STATUS_OK);
   \   00000CF6   0x2000             MOVS     R0,#+0
   \   00000CF8   0x.... 0x....      BL       man_lte_return_callback
   1219          		break;
   \   00000CFC   0xE121             B        ??man_lte_main_176
   1220          
   1221          
   1222          	case MAN_LTE_SEQ_LTE_STBY_OUT_NG:
   1223          		// 5秒以内でRESETが発生しない場合は異常とする。
   1224          		man_lte_set_sequense(MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT);
   \                     ??man_lte_main_154: (+1)
   \   00000CFE   0x2036             MOVS     R0,#+54
   \   00000D00   0x.... 0x....      BL       man_lte_set_sequense
   1225          		ret = man_timer_start_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT, MAN_LTE_STBY_OUT_NG_WAIT_TIME, man_lte_req_callback);
   \   00000D04   0x4A2F             LDR      R2,??man_lte_main_197+0x8
   \   00000D06   0x49B0             LDR      R1,??man_lte_main_209  ;; 0x1388
   \   00000D08   0x48B1             LDR      R0,??man_lte_main_209+0x8  ;; 0x40400036
   \   00000D0A   0x.... 0x....      BL       man_timer_start_wait
   1226          		if (ret < 0) {
   \   00000D0E   0x2800             CMP      R0,#+0
   \   00000D10   0xD509             BPL      ??man_lte_main_211
   1227          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000D12   0x2000             MOVS     R0,#+0
   \   00000D14   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000D16   0x.... 0x....      BL       man_lte_return_callback
   1228          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000D1A   0x4BC3             LDR      R3,??man_lte_main_212  ;; 0x4cc
   \   00000D1C   0x2200             MOVS     R2,#+0
   \   00000D1E   0x2100             MOVS     R1,#+0
   \   00000D20   0x2018             MOVS     R0,#+24
   \   00000D22   0x.... 0x....      BL       man_error_set
   1229          		}
   1230          		break;
   \                     ??man_lte_main_211: (+1)
   \   00000D26   0xE10C             B        ??man_lte_main_176
   1231          	case MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT:
   1232          		break;
   \                     ??man_lte_main_153: (+1)
   \   00000D28   0xE10B             B        ??man_lte_main_176
   1233          	case MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT_OK:
   1234          	case MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT_NG:
   1235          		man_lte_return_callback(MAN_LTE_STATUS_NG);
   \                     ??man_lte_main_155: (+1)
   \   00000D2A   0x2000             MOVS     R0,#+0
   \   00000D2C   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000D2E   0x.... 0x....      BL       man_lte_return_callback
   1236          		break;
   \   00000D32   0xE106             B        ??man_lte_main_176
   1237          
   1238          
   1239          
   1240          
   1241          
   1242          	case MAN_LTE_SEQ_LTE_STBY_OUT_WAIT:
   1243          		break;
   \                     ??man_lte_main_157: (+1)
   \   00000D34   0xE105             B        ??man_lte_main_176
   1244          	case MAN_LTE_SEQ_LTE_STBY_OUT_WAIT_OK:
   1245          		man_lte_return_callback(MAN_LTE_STATUS_OK);
   \                     ??man_lte_main_156: (+1)
   \   00000D36   0x2000             MOVS     R0,#+0
   \   00000D38   0x.... 0x....      BL       man_lte_return_callback
   1246          		break;
   \   00000D3C   0xE101             B        ??man_lte_main_176
   1247          	case MAN_LTE_SEQ_LTE_STBY_OUT_WAIT_NG:
   1248          		man_lte_return_callback(MAN_LTE_STATUS_NG);
   \                     ??man_lte_main_159: (+1)
   \   00000D3E   0x2000             MOVS     R0,#+0
   \   00000D40   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000D42   0x.... 0x....      BL       man_lte_return_callback
   1249          		break;
   \   00000D46   0xE0FC             B        ??man_lte_main_176
   1250          
   1251          
   1252          
   1253          	// ******************************
   1254          	//    man_lte_req_reset(H/W)
   1255          	// ******************************
   1256          	case MAN_LTE_SEQ_LTE_RESET_REQ:
   1257          		// RESET ON
   1258          		man_gpio_lte_reset(MAN_GPIO_CTRL_ON);
   \                     ??man_lte_main_158: (+1)
   \   00000D48   0x2001             MOVS     R0,#+1
   \   00000D4A   0x.... 0x....      BL       man_gpio_lte_reset
   1259          		// 電波状況を圏外にする
   1260          		man_http_set_rssi_ng();
   \   00000D4E   0x.... 0x....      BL       man_http_set_rssi_ng
   1261          		// 1秒後にOFFする。
   1262          		man_lte_set_sequense(MAN_LTE_SEQ_LTE_RESET_ON_WAIT);
   \   00000D52   0x203D             MOVS     R0,#+61
   \   00000D54   0x.... 0x....      BL       man_lte_set_sequense
   1263          		ret = man_timer_start_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_RESET_ON_WAIT, MAN_LTE_RESET_ON_WAIT_TIME, man_lte_req_callback);
   \   00000D58   0x4A1A             LDR      R2,??man_lte_main_197+0x8
   \   00000D5A   0x21FA             MOVS     R1,#+250
   \   00000D5C   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000D5E   0x48C0             LDR      R0,??man_lte_main_213  ;; 0x4040003d
   \   00000D60   0x.... 0x....      BL       man_timer_start_wait
   1264          		if (ret < 0) {
   \   00000D64   0x2800             CMP      R0,#+0
   \   00000D66   0xD509             BPL      ??man_lte_main_214
   1265          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000D68   0x2000             MOVS     R0,#+0
   \   00000D6A   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000D6C   0x.... 0x....      BL       man_lte_return_callback
   1266          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000D70   0x4BBF             LDR      R3,??man_lte_main_215  ;; 0x4f2
   \   00000D72   0x2200             MOVS     R2,#+0
   \   00000D74   0x2100             MOVS     R1,#+0
   \   00000D76   0x2018             MOVS     R0,#+24
   \   00000D78   0x.... 0x....      BL       man_error_set
   1267          		}
   1268          		break;
   \                     ??man_lte_main_214: (+1)
   \   00000D7C   0xE0E1             B        ??man_lte_main_176
   1269          	case MAN_LTE_SEQ_LTE_RESET_ON_WAIT:
   1270          		break;
   \                     ??man_lte_main_161: (+1)
   \   00000D7E   0xE0E0             B        ??man_lte_main_176
   1271          	case MAN_LTE_SEQ_LTE_RESET_ON_WAIT_OK:
   1272          	case MAN_LTE_SEQ_LTE_RESET_ON_WAIT_NG:
   1273          		// RESET OFF
   1274          		man_gpio_lte_reset(MAN_GPIO_CTRL_OFF);
   \                     ??man_lte_main_160: (+1)
   \   00000D80   0x2000             MOVS     R0,#+0
   \   00000D82   0x.... 0x....      BL       man_gpio_lte_reset
   1275          		
   1276          		// POWER ON状態
   1277          		man_lte_work.lte_sts = MAN_LTE_STS_POWER_ON;
   \   00000D86   0x2001             MOVS     R0,#+1
   \   00000D88   0x4948             LDR      R1,??man_lte_main_203+0x4
   \   00000D8A   0x6248             STR      R0,[R1, #+36]
   1278          		// LTE切断状態
   1279          		man_lte_work.mode = MAN_LTE_MODE_CLOSE;
   \   00000D8C   0x2000             MOVS     R0,#+0
   \   00000D8E   0x4947             LDR      R1,??man_lte_main_203+0x4
   \   00000D90   0x7008             STRB     R0,[R1, #+0]
   1280          
   1281          		// 20秒後に再開する。
   1282          		man_lte_set_sequense(MAN_LTE_SEQ_LTE_RESET_OFF_WAIT);
   \   00000D92   0x2040             MOVS     R0,#+64
   \   00000D94   0x.... 0x....      BL       man_lte_set_sequense
   1283          		ret = man_timer_start_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_RESET_OFF_WAIT, MAN_LTE_PWRKEY_OFF_WAIT_TIME, man_lte_req_callback);
   \   00000D98   0x4A0A             LDR      R2,??man_lte_main_197+0x8
   \   00000D9A   0x49B6             LDR      R1,??man_lte_main_215+0x4  ;; 0x59d8
   \   00000D9C   0x48B6             LDR      R0,??man_lte_main_215+0x8  ;; 0x40400040
   \   00000D9E   0x.... 0x....      BL       man_timer_start_wait
   1284          		if (ret < 0) {
   \   00000DA2   0x2800             CMP      R0,#+0
   \   00000DA4   0xD509             BPL      ??man_lte_main_216
   1285          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000DA6   0x2000             MOVS     R0,#+0
   \   00000DA8   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000DAA   0x.... 0x....      BL       man_lte_return_callback
   1286          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000DAE   0x4BB3             LDR      R3,??man_lte_main_215+0xC  ;; 0x506
   \   00000DB0   0x2200             MOVS     R2,#+0
   \   00000DB2   0x2100             MOVS     R1,#+0
   \   00000DB4   0x2018             MOVS     R0,#+24
   \   00000DB6   0x.... 0x....      BL       man_error_set
   1287          		}
   1288          		break;
   \                     ??man_lte_main_216: (+1)
   \   00000DBA   0xE0C2             B        ??man_lte_main_176
   \                     ??man_lte_main_197:
   \   00000DBC   0x00000419         DC32     0x419
   \   00000DC0   0x0000041E         DC32     0x41e
   \   00000DC4   0x........         DC32     man_lte_req_callback
   \   00000DC8   0x4040001F         DC32     0x4040001f
   \   00000DCC   0x0000042E         DC32     0x42e
   1289          	case MAN_LTE_SEQ_LTE_RESET_OFF_WAIT:
   1290          		break;
   \                     ??man_lte_main_162: (+1)
   \   00000DD0   0xE0B7             B        ??man_lte_main_176
   1291          	case MAN_LTE_SEQ_LTE_RESET_OFF_WAIT_OK:
   1292          	case MAN_LTE_SEQ_LTE_RESET_OFF_WAIT_NG:
   1293          		man_lte_return_callback(MAN_LTE_STATUS_OK);
   \                     ??man_lte_main_163: (+1)
   \   00000DD2   0x2000             MOVS     R0,#+0
   \   00000DD4   0x.... 0x....      BL       man_lte_return_callback
   1294          		break;
   \   00000DD8   0xE0B3             B        ??man_lte_main_176
   1295          
   1296          
   1297          
   1298          	// ******************************
   1299          	//    man_lte_req_reset(ATコマンド)
   1300          	// ******************************
   1301          	case MAN_LTE_SEQ_LTE_ATRESET_REQ:
   1302          		// HTTPの使用状況を確認する
   1303          		if (sts == 0) {
   \                     ??man_lte_main_165: (+1)
   \   00000DDA   0x2C00             CMP      R4,#+0
   \   00000DDC   0xD113             BNE      ??man_lte_main_217
   1304          			// シーケンスを更新する
   1305          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_ATRESET);
   \   00000DDE   0x2044             MOVS     R0,#+68
   \   00000DE0   0x.... 0x....      BL       man_lte_set_sequense
   1306          			// リセット実行
   1307          			ret = man_http_lte_exec_reset(MAN_LTE_SEQ_LTE_ATRESET, man_lte_req_callback);
   \   00000DE4   0x49A6             LDR      R1,??man_lte_main_215+0x10
   \   00000DE6   0x2044             MOVS     R0,#+68
   \   00000DE8   0x.... 0x....      BL       man_http_lte_exec_reset
   1308          			if (ret < 0) {
   \   00000DEC   0x2800             CMP      R0,#+0
   \   00000DEE   0xD50A             BPL      ??man_lte_main_217
   1309          				man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \   00000DF0   0x4BC4             LDR      R3,??man_lte_main_218  ;; 0x51d
   \   00000DF2   0x2200             MOVS     R2,#+0
   \   00000DF4   0x482D             LDR      R0,??man_lte_main_203+0x4
   \   00000DF6   0x7841             LDRB     R1,[R0, #+1]
   \   00000DF8   0x2018             MOVS     R0,#+24
   \   00000DFA   0x.... 0x....      BL       man_error_set
   1310          				man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000DFE   0x2000             MOVS     R0,#+0
   \   00000E00   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000E02   0x.... 0x....      BL       man_lte_return_callback
   1311          			}
   1312          		}
   1313          		break;
   \                     ??man_lte_main_217: (+1)
   \   00000E06   0xE09C             B        ??man_lte_main_176
   1314          	case MAN_LTE_SEQ_LTE_ATRESET:
   1315          		break;
   \                     ??man_lte_main_164: (+1)
   \   00000E08   0xE09B             B        ??man_lte_main_176
   1316          	case MAN_LTE_SEQ_LTE_ATRESET_OK:
   1317          	case MAN_LTE_SEQ_LTE_ATRESET_NG:
   1318          		// リセットが発生しない場合、60秒後に再開する。
   1319          		man_lte_set_sequense(MAN_LTE_SEQ_LTE_ATRESET_WAIT);
   \                     ??man_lte_main_166: (+1)
   \   00000E0A   0x2047             MOVS     R0,#+71
   \   00000E0C   0x.... 0x....      BL       man_lte_set_sequense
   1320          		ret = man_timer_start_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_ATRESET_WAIT, MAN_LTE_RESET_WAIT_TIME, man_lte_req_callback);
   \   00000E10   0x4A9B             LDR      R2,??man_lte_main_215+0x10
   \   00000E12   0x....             LDR      R1,??DataTable4  ;; 0xea60
   \   00000E14   0x....             LDR      R0,??DataTable4_1  ;; 0x40400047
   \   00000E16   0x.... 0x....      BL       man_timer_start_wait
   1321          		if (ret < 0) {
   \   00000E1A   0x2800             CMP      R0,#+0
   \   00000E1C   0xD509             BPL      ??man_lte_main_219
   1322          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000E1E   0x2000             MOVS     R0,#+0
   \   00000E20   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000E22   0x.... 0x....      BL       man_lte_return_callback
   1323          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000E26   0x....             LDR      R3,??DataTable4_2  ;; 0x52b
   \   00000E28   0x2200             MOVS     R2,#+0
   \   00000E2A   0x2100             MOVS     R1,#+0
   \   00000E2C   0x2018             MOVS     R0,#+24
   \   00000E2E   0x.... 0x....      BL       man_error_set
   1324          		}
   1325          		break;
   \                     ??man_lte_main_219: (+1)
   \   00000E32   0xE086             B        ??man_lte_main_176
   \                     ??man_lte_main_200:
   \   00000E34   0x00000437         DC32     0x437
   \   00000E38   0x00000444         DC32     0x444
   \   00000E3C   0x0000044A         DC32     0x44a
   1326          	case MAN_LTE_SEQ_LTE_ATRESET_WAIT:
   1327          		// リセット発生待ち
   1328          		break;
   \                     ??man_lte_main_168: (+1)
   \   00000E40   0xE07F             B        ??man_lte_main_176
   1329          	case MAN_LTE_SEQ_LTE_ATRESET_WAIT_OK:
   1330          	case MAN_LTE_SEQ_LTE_ATRESET_WAIT_NG:
   1331          		// POWER ON状態
   1332          		man_lte_work.lte_sts = MAN_LTE_STS_POWER_ON;
   \                     ??man_lte_main_167: (+1)
   \   00000E42   0x2001             MOVS     R0,#+1
   \   00000E44   0x4919             LDR      R1,??man_lte_main_203+0x4
   \   00000E46   0x6248             STR      R0,[R1, #+36]
   1333          		// LTE切断状態
   1334          		man_lte_work.mode = MAN_LTE_MODE_CLOSE;
   \   00000E48   0x2000             MOVS     R0,#+0
   \   00000E4A   0x4918             LDR      R1,??man_lte_main_203+0x4
   \   00000E4C   0x7008             STRB     R0,[R1, #+0]
   1335          		// 20秒経過しないとCSQの結果が安定しない
   1336          		man_lte_return_callback(MAN_LTE_STATUS_OK);
   \   00000E4E   0x2000             MOVS     R0,#+0
   \   00000E50   0x.... 0x....      BL       man_lte_return_callback
   1337          		break;
   \   00000E54   0xE075             B        ??man_lte_main_176
   1338          	case MAN_LTE_SEQ_LTE_ATRESET_EXEC_OK:
   1339          		// POWER ON状態
   1340          		man_lte_work.lte_sts = MAN_LTE_STS_POWER_ON;
   \                     ??man_lte_main_169: (+1)
   \   00000E56   0x2001             MOVS     R0,#+1
   \   00000E58   0x4914             LDR      R1,??man_lte_main_203+0x4
   \   00000E5A   0x6248             STR      R0,[R1, #+36]
   1341          		// LTE切断状態
   1342          		man_lte_work.mode = MAN_LTE_MODE_CLOSE;
   \   00000E5C   0x2000             MOVS     R0,#+0
   \   00000E5E   0x4913             LDR      R1,??man_lte_main_203+0x4
   \   00000E60   0x7008             STRB     R0,[R1, #+0]
   1343          		man_lte_return_callback(MAN_LTE_STATUS_OK);
   \   00000E62   0x2000             MOVS     R0,#+0
   \   00000E64   0x.... 0x....      BL       man_lte_return_callback
   1344          		break;
   \   00000E68   0xE06B             B        ??man_lte_main_176
   1345          
   1346          
   1347          	// ******************************
   1348          	//    man_lte_req_off
   1349          	// ******************************
   1350          	case MAN_LTE_SEQ_LTE_POWOFF_REQ:
   1351          		// 電波状況を圏外にする
   1352          		man_http_set_rssi_ng();
   \                     ??man_lte_main_171: (+1)
   \   00000E6A   0x.... 0x....      BL       man_http_set_rssi_ng
   1353          		// POWER OFF状態
   1354          		man_lte_work.lte_sts = 0;
   \   00000E6E   0x2000             MOVS     R0,#+0
   \   00000E70   0x490E             LDR      R1,??man_lte_main_203+0x4
   \   00000E72   0x6248             STR      R0,[R1, #+36]
   1355          		man_lte_work.mode = MAN_LTE_MODE_CLOSE;
   \   00000E74   0x2000             MOVS     R0,#+0
   \   00000E76   0x490D             LDR      R1,??man_lte_main_203+0x4
   \   00000E78   0x7008             STRB     R0,[R1, #+0]
   1356                          mid_HTTP_req_LTE_PowerOFF();
   \   00000E7A   0x.... 0x....      BL       mid_HTTP_req_LTE_PowerOFF
   1357          		// 3秒タイマ開始。
   1358          		man_lte_set_sequense(MAN_LTE_SEQ_LTE_POWOFF);
   \   00000E7E   0x204C             MOVS     R0,#+76
   \   00000E80   0x.... 0x....      BL       man_lte_set_sequense
   1359          		ret = man_timer_start_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_POWOFF, MAN_LTE_OFF_WAIT_TIME, man_lte_req_callback);
   \   00000E84   0x4A7E             LDR      R2,??man_lte_main_215+0x10
   \   00000E86   0x....             LDR      R1,??DataTable6  ;; 0xbb8
   \   00000E88   0x....             LDR      R0,??DataTable4_3  ;; 0x4040004c
   \   00000E8A   0x.... 0x....      BL       man_timer_start_wait
   1360          		if (ret < 0) {
   \   00000E8E   0x2800             CMP      R0,#+0
   \   00000E90   0xD509             BPL      ??man_lte_main_220
   1361          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000E92   0x2000             MOVS     R0,#+0
   \   00000E94   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000E96   0x.... 0x....      BL       man_lte_return_callback
   1362          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000E9A   0x....             LDR      R3,??DataTable5  ;; 0x552
   \   00000E9C   0x2200             MOVS     R2,#+0
   \   00000E9E   0x2100             MOVS     R1,#+0
   \   00000EA0   0x2018             MOVS     R0,#+24
   \   00000EA2   0x.... 0x....      BL       man_error_set
   1363          		}
   1364          		break;
   \                     ??man_lte_main_220: (+1)
   \   00000EA6   0xE04C             B        ??man_lte_main_176
   \                     ??man_lte_main_203:
   \   00000EA8   0x00000459         DC32     0x459
   \   00000EAC   0x........         DC32     man_lte_work
   1365          
   1366          	case MAN_LTE_SEQ_LTE_POWOFF:
   1367          		break;
   \                     ??man_lte_main_170: (+1)
   \   00000EB0   0xE047             B        ??man_lte_main_176
   1368          
   1369          	case MAN_LTE_SEQ_LTE_POWOFF_OK:
   1370          	case MAN_LTE_SEQ_LTE_POWOFF_NG:
   1371          		// 60秒タイマ開始。
   1372          		man_lte_set_sequense(MAN_LTE_SEQ_LTE_POWOFF_WAIT);
   \                     ??man_lte_main_172: (+1)
   \   00000EB2   0x204F             MOVS     R0,#+79
   \   00000EB4   0x.... 0x....      BL       man_lte_set_sequense
   1373          		ret = man_timer_start_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_POWOFF_WAIT, MAN_LTE_STS_OFF_WAIT_TIME, man_lte_req_callback);
   \   00000EB8   0x4A71             LDR      R2,??man_lte_main_215+0x10
   \   00000EBA   0x490F             LDR      R1,??man_lte_main_204  ;; 0x7530
   \   00000EBC   0x....             LDR      R0,??DataTable7  ;; 0x4040004f
   \   00000EBE   0x.... 0x....      BL       man_timer_start_wait
   1374          		if (ret < 0) {
   \   00000EC2   0x2800             CMP      R0,#+0
   \   00000EC4   0xD50A             BPL      ??man_lte_main_221
   1375          			man_lte_return_callback(MAN_LTE_STATUS_NG);
   \   00000EC6   0x2000             MOVS     R0,#+0
   \   00000EC8   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000ECA   0x.... 0x....      BL       man_lte_return_callback
   1376          			man_error_setting(MAN_ERROR_MAN_LTE, 0, 0);
   \   00000ECE   0x23AC             MOVS     R3,#+172
   \   00000ED0   0x00DB             LSLS     R3,R3,#+3        ;; #+1376
   \   00000ED2   0x2200             MOVS     R2,#+0
   \   00000ED4   0x2100             MOVS     R1,#+0
   \   00000ED6   0x2018             MOVS     R0,#+24
   \   00000ED8   0x.... 0x....      BL       man_error_set
   1377          		}
   1378          		break;
   \                     ??man_lte_main_221: (+1)
   \   00000EDC   0xE031             B        ??man_lte_main_176
   1379          
   1380          	case MAN_LTE_SEQ_LTE_POWOFF_WAIT:
   1381          		// POWER OFFを確認
   1382          		if (man_gpio_lte_power_get() == MAN_GPIO_LTEPOW_OFF) {
   \                     ??man_lte_main_174: (+1)
   \   00000EDE   0x.... 0x....      BL       man_gpio_lte_power_get
   \   00000EE2   0x2800             CMP      R0,#+0
   \   00000EE4   0xD106             BNE      ??man_lte_main_222
   1383          			// 60秒タイマ停止
   1384          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_POWOFF_WAIT, MAN_LTE_STS_OFF_WAIT_TIME);
   \   00000EE6   0x4904             LDR      R1,??man_lte_main_204  ;; 0x7530
   \   00000EE8   0x....             LDR      R0,??DataTable7  ;; 0x4040004f
   \   00000EEA   0x.... 0x....      BL       man_timer_cancel_wait
   1385          			man_lte_set_sequense(MAN_LTE_SEQ_LTE_POWOFF_WAIT_OK);
   \   00000EEE   0x2050             MOVS     R0,#+80
   \   00000EF0   0x.... 0x....      BL       man_lte_set_sequense
   1386          		}
   1387          		break;
   \                     ??man_lte_main_222: (+1)
   \   00000EF4   0xE025             B        ??man_lte_main_176
   \   00000EF6   0xBF00             Nop      
   \                     ??man_lte_main_204:
   \   00000EF8   0x00007530         DC32     0x7530
   \   00000EFC   0x40400026         DC32     0x40400026
   \   00000F00   0x0000046D         DC32     0x46d
   1388          	case MAN_LTE_SEQ_LTE_POWOFF_WAIT_OK:
   1389          	case MAN_LTE_SEQ_LTE_POWOFF_WAIT_NG:
   1390                         man_gpio_lte_power(MAN_GPIO_CTRL_OFF);
   \                     ??man_lte_main_173: (+1)
   \   00000F04   0x2000             MOVS     R0,#+0
   \   00000F06   0x.... 0x....      BL       man_gpio_lte_power
   1391                          if(usb_log_flag & LOG_FLAG_LTE)
   \   00000F0A   0x....             LDR      R0,??DataTable9
   \   00000F0C   0x7800             LDRB     R0,[R0, #+0]
   \   00000F0E   0x0780             LSLS     R0,R0,#+30
   \   00000F10   0xD503             BPL      ??man_lte_main_223
   1392                          {
   1393                            sysmgr_log("VLTE OFF\r\n",10);
   \   00000F12   0x210A             MOVS     R1,#+10
   \   00000F14   0x....             LDR      R0,??DataTable10
   \   00000F16   0x.... 0x....      BL       sysmgr_log
   1394                          }
   1395          		man_lte_work.request.req_cmd = MAN_CMD_REQ_CMD_NON;
   \                     ??man_lte_main_223: (+1)
   \   00000F1A   0x2000             MOVS     R0,#+0
   \   00000F1C   0x....             LDR      R1,??DataTable13
   \   00000F1E   0x6048             STR      R0,[R1, #+4]
   1396          		man_lte_return_callback(MAN_LTE_STATUS_OK);
   \   00000F20   0x2000             MOVS     R0,#+0
   \   00000F22   0x.... 0x....      BL       man_lte_return_callback
   1397          		break;
   \   00000F26   0xE00C             B        ??man_lte_main_176
   \                     ??man_lte_main_206:
   \   00000F28   0x00000474         DC32     0x474
   \   00000F2C   0x0000048D         DC32     0x48d
   \   00000F30   0x000004AB         DC32     0x4ab
   1398          
   1399          
   1400          	default:
   1401          		man_error_setting(MAN_ERROR_MAN_LTE, man_lte_work.sequense, 0);
   \                     ??man_lte_main_175: (+1)
   \   00000F34   0x....             LDR      R3,??DataTable11  ;; 0x579
   \   00000F36   0x2200             MOVS     R2,#+0
   \   00000F38   0x....             LDR      R0,??DataTable13
   \   00000F3A   0x7841             LDRB     R1,[R0, #+1]
   \   00000F3C   0x2018             MOVS     R0,#+24
   \   00000F3E   0x.... 0x....      BL       man_error_set
   1402          		break;
   1403          	}
   1404          
   1405          
   1406          	// ******************************************************
   1407          	// 上位からの通知処理
   1408          	// ******************************************************
   1409          	switch (man_lte_work.req_state) {
   \                     ??man_lte_main_176: (+1)
   \   00000F42   0x....             LDR      R0,??DataTable13
   \   00000F44   0x6BC0             LDR      R0,[R0, #+60]
   \   00000F46   0x2800             CMP      R0,#+0
   \   00000F48   0xD008             BEQ      ??man_lte_main_224
   \   00000F4A   0x1E40             SUBS     R0,R0,#+1
   \   00000F4C   0xD007             BEQ      ??man_lte_main_225
   \   00000F4E   0x380A             SUBS     R0,R0,#+10
   \   00000F50   0xD053             BEQ      ??man_lte_main_226
   \   00000F52   0x1E40             SUBS     R0,R0,#+1
   \   00000F54   0x2802             CMP      R0,#+2
   \   00000F56   0xD800             BHI      .+4
   \   00000F58   0xE0AA             B        ??man_lte_main_227
   \   00000F5A   0xE0AD             B        ??man_lte_main_228
   1410          	case MAN_LTE_STATE_NON:
   1411          		break;
   \                     ??man_lte_main_224: (+1)
   \   00000F5C   0xE0AF             B        ??man_lte_main_229
   1412          	case MAN_LTE_STATE_RESET:
   1413          		// 動作中のタイマーを停止させる
   1414          		switch (man_lte_work.sequense) {
   \                     ??man_lte_main_225: (+1)
   \   00000F5E   0x....             LDR      R0,??DataTable13
   \   00000F60   0x7840             LDRB     R0,[R0, #+1]
   \   00000F62   0x2805             CMP      R0,#+5
   \   00000F64   0xD00C             BEQ      ??man_lte_main_230
   \   00000F66   0x281F             CMP      R0,#+31
   \   00000F68   0xD00F             BEQ      ??man_lte_main_231
   \   00000F6A   0x2826             CMP      R0,#+38
   \   00000F6C   0xD012             BEQ      ??man_lte_main_232
   \   00000F6E   0x2832             CMP      R0,#+50
   \   00000F70   0xD015             BEQ      ??man_lte_main_233
   \   00000F72   0x2836             CMP      R0,#+54
   \   00000F74   0xD018             BEQ      ??man_lte_main_234
   \   00000F76   0x283D             CMP      R0,#+61
   \   00000F78   0xD01B             BEQ      ??man_lte_main_235
   \   00000F7A   0x2840             CMP      R0,#+64
   \   00000F7C   0xD01F             BEQ      ??man_lte_main_236
   \   00000F7E   0xE029             B        ??man_lte_main_237
   1415          		case MAN_LTE_SEQ_PWRKEY_OFF_WAIT:
   1416          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_PWRKEY_OFF_WAIT, MAN_LTE_PWRKEY_OFF_WAIT_TIME);
   \                     ??man_lte_main_230: (+1)
   \   00000F80   0x493C             LDR      R1,??man_lte_main_215+0x4  ;; 0x59d8
   \   00000F82   0x....             LDR      R0,??DataTable16  ;; 0x40400005
   \   00000F84   0x.... 0x....      BL       man_timer_cancel_wait
   1417          			break;
   \   00000F88   0xE024             B        ??man_lte_main_238
   1418          		case MAN_LTE_SEQ_LTE_OPEN_WAIT:
   1419          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_OPEN_WAIT, MAN_LTE_OPEN_WAIT_TIME);
   \                     ??man_lte_main_231: (+1)
   \   00000F8A   0x....             LDR      R1,??DataTable6  ;; 0xbb8
   \   00000F8C   0x....             LDR      R0,??DataTable16_1  ;; 0x4040001f
   \   00000F8E   0x.... 0x....      BL       man_timer_cancel_wait
   1420          			break;
   \   00000F92   0xE01F             B        ??man_lte_main_238
   1421          		case MAN_LTE_SEQ_LTE_STOP_NG_WAIT:
   1422          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_STOP_NG_WAIT, MAN_LTE_CLOSE_WAIT_TIME);
   \                     ??man_lte_main_232: (+1)
   \   00000F94   0x....             LDR      R1,??DataTable8  ;; 0x7530
   \   00000F96   0x....             LDR      R0,??DataTable16_2  ;; 0x40400026
   \   00000F98   0x.... 0x....      BL       man_timer_cancel_wait
   1423          			break;
   \   00000F9C   0xE01A             B        ??man_lte_main_238
   1424          		case MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT:
   1425          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT, MAN_LTE_STBY_OUT_NG_WAIT_TIME);
   \                     ??man_lte_main_233: (+1)
   \   00000F9E   0x490A             LDR      R1,??man_lte_main_209  ;; 0x1388
   \   00000FA0   0x480A             LDR      R0,??man_lte_main_209+0x4  ;; 0x40400032
   \   00000FA2   0x.... 0x....      BL       man_timer_cancel_wait
   1426          			break;
   \   00000FA6   0xE015             B        ??man_lte_main_238
   1427          		case MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT:
   1428          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT, MAN_LTE_STBY_OUT_NG_WAIT_TIME);
   \                     ??man_lte_main_234: (+1)
   \   00000FA8   0x4907             LDR      R1,??man_lte_main_209  ;; 0x1388
   \   00000FAA   0x4809             LDR      R0,??man_lte_main_209+0x8  ;; 0x40400036
   \   00000FAC   0x.... 0x....      BL       man_timer_cancel_wait
   1429          			break;
   \   00000FB0   0xE010             B        ??man_lte_main_238
   1430          		case MAN_LTE_SEQ_LTE_RESET_ON_WAIT:
   1431          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_RESET_ON_WAIT, MAN_LTE_RESET_ON_WAIT_TIME);
   \                     ??man_lte_main_235: (+1)
   \   00000FB2   0x21FA             MOVS     R1,#+250
   \   00000FB4   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000FB6   0x482A             LDR      R0,??man_lte_main_213  ;; 0x4040003d
   \   00000FB8   0x.... 0x....      BL       man_timer_cancel_wait
   1432          			break;
   \   00000FBC   0xE00A             B        ??man_lte_main_238
   1433          		case MAN_LTE_SEQ_LTE_RESET_OFF_WAIT:
   1434          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_RESET_OFF_WAIT, MAN_LTE_PWRKEY_OFF_WAIT_TIME);
   \                     ??man_lte_main_236: (+1)
   \   00000FBE   0x492D             LDR      R1,??man_lte_main_215+0x4  ;; 0x59d8
   \   00000FC0   0x482D             LDR      R0,??man_lte_main_215+0x8  ;; 0x40400040
   \   00000FC2   0x.... 0x....      BL       man_timer_cancel_wait
   1435          			break;
   \   00000FC6   0xE005             B        ??man_lte_main_238
   \                     ??man_lte_main_209:
   \   00000FC8   0x00001388         DC32     0x1388
   \   00000FCC   0x40400032         DC32     0x40400032
   \   00000FD0   0x40400036         DC32     0x40400036
   1436          		default:
   1437          			break;
   1438          		}
   1439          		// 応答は返さない
   1440          		man_lte_work.request.callback = NULL;
   \                     ??man_lte_main_237: (+1)
   \                     ??man_lte_main_238: (+1)
   \   00000FD4   0x2000             MOVS     R0,#+0
   \   00000FD6   0x....             LDR      R1,??DataTable13
   \   00000FD8   0x60C8             STR      R0,[R1, #+12]
   1441          		man_lte_set_sequense(MAN_LTE_SEQ_READY);
   \   00000FDA   0x2000             MOVS     R0,#+0
   \   00000FDC   0x.... 0x....      BL       man_lte_set_sequense
   1442          		man_lte_work.request.req_cmd = MAN_CMD_REQ_CMD_NON;
   \   00000FE0   0x2000             MOVS     R0,#+0
   \   00000FE2   0x....             LDR      R1,??DataTable13
   \   00000FE4   0x6048             STR      R0,[R1, #+4]
   1443          		// 内部状態を初期化する
   1444          		man_lte_work.lte_sts = MAN_LTE_STS_POWER_ON;
   \   00000FE6   0x2001             MOVS     R0,#+1
   \   00000FE8   0x....             LDR      R1,??DataTable13
   \   00000FEA   0x6248             STR      R0,[R1, #+36]
   1445          		man_lte_work.mode = MAN_LTE_MODE_CLOSE;
   \   00000FEC   0x2000             MOVS     R0,#+0
   \   00000FEE   0x....             LDR      R1,??DataTable13
   \   00000FF0   0x7008             STRB     R0,[R1, #+0]
   1446          		man_lte_work.req_state = MAN_LTE_STATE_NON;
   \   00000FF2   0x2000             MOVS     R0,#+0
   \   00000FF4   0x....             LDR      R1,??DataTable13
   \   00000FF6   0x63C8             STR      R0,[R1, #+60]
   1447          		break;
   \   00000FF8   0xE061             B        ??man_lte_main_229
   1448          
   1449          	case MAN_LTE_STATE_NET_CLOSE:
   1450          		// 動作中のタイマーを停止させる
   1451          		switch (man_lte_work.sequense) {
   \                     ??man_lte_main_226: (+1)
   \   00000FFA   0x....             LDR      R0,??DataTable13
   \   00000FFC   0x7840             LDRB     R0,[R0, #+1]
   \   00000FFE   0x2805             CMP      R0,#+5
   \   00001000   0xD00C             BEQ      ??man_lte_main_239
   \   00001002   0x281F             CMP      R0,#+31
   \   00001004   0xD012             BEQ      ??man_lte_main_240
   \   00001006   0x2826             CMP      R0,#+38
   \   00001008   0xD015             BEQ      ??man_lte_main_241
   \   0000100A   0x2832             CMP      R0,#+50
   \   0000100C   0xD018             BEQ      ??man_lte_main_242
   \   0000100E   0x2836             CMP      R0,#+54
   \   00001010   0xD01B             BEQ      ??man_lte_main_243
   \   00001012   0x283D             CMP      R0,#+61
   \   00001014   0xD01E             BEQ      ??man_lte_main_244
   \   00001016   0x2840             CMP      R0,#+64
   \   00001018   0xD024             BEQ      ??man_lte_main_245
   \   0000101A   0xE033             B        ??man_lte_main_246
   1452          		case MAN_LTE_SEQ_PWRKEY_OFF_WAIT:
   1453          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_PWRKEY_OFF_WAIT, MAN_LTE_PWRKEY_OFF_WAIT_TIME);
   \                     ??man_lte_main_239: (+1)
   \   0000101C   0x4915             LDR      R1,??man_lte_main_215+0x4  ;; 0x59d8
   \   0000101E   0x....             LDR      R0,??DataTable16  ;; 0x40400005
   \   00001020   0x.... 0x....      BL       man_timer_cancel_wait
   1454          			break;
   \   00001024   0xE02E             B        ??man_lte_main_247
   \   00001026   0xBF00             Nop      
   \                     ??man_lte_main_212:
   \   00001028   0x000004CC         DC32     0x4cc
   1455          		case MAN_LTE_SEQ_LTE_OPEN_WAIT:
   1456          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_OPEN_WAIT, MAN_LTE_OPEN_WAIT_TIME);
   \                     ??man_lte_main_240: (+1)
   \   0000102C   0x....             LDR      R1,??DataTable6  ;; 0xbb8
   \   0000102E   0x....             LDR      R0,??DataTable16_1  ;; 0x4040001f
   \   00001030   0x.... 0x....      BL       man_timer_cancel_wait
   1457          			break;
   \   00001034   0xE026             B        ??man_lte_main_247
   1458          		case MAN_LTE_SEQ_LTE_STOP_NG_WAIT:
   1459          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_STOP_NG_WAIT, MAN_LTE_CLOSE_WAIT_TIME);
   \                     ??man_lte_main_241: (+1)
   \   00001036   0x....             LDR      R1,??DataTable8  ;; 0x7530
   \   00001038   0x....             LDR      R0,??DataTable16_2  ;; 0x40400026
   \   0000103A   0x.... 0x....      BL       man_timer_cancel_wait
   1460          			break;
   \   0000103E   0xE021             B        ??man_lte_main_247
   1461          		case MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT:
   1462          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_STBY_OUT_OK_WAIT, MAN_LTE_STBY_OUT_NG_WAIT_TIME);
   \                     ??man_lte_main_242: (+1)
   \   00001040   0x....             LDR      R1,??DataTable17  ;; 0x1388
   \   00001042   0x....             LDR      R0,??DataTable16_3  ;; 0x40400032
   \   00001044   0x.... 0x....      BL       man_timer_cancel_wait
   1463          			break;
   \   00001048   0xE01C             B        ??man_lte_main_247
   1464          		case MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT:
   1465          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_STBY_OUT_NG_WAIT, MAN_LTE_STBY_OUT_NG_WAIT_TIME);
   \                     ??man_lte_main_243: (+1)
   \   0000104A   0x....             LDR      R1,??DataTable17  ;; 0x1388
   \   0000104C   0x....             LDR      R0,??DataTable17_1  ;; 0x40400036
   \   0000104E   0x.... 0x....      BL       man_timer_cancel_wait
   1466          			break;
   \   00001052   0xE017             B        ??man_lte_main_247
   1467          		case MAN_LTE_SEQ_LTE_RESET_ON_WAIT:
   1468          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_RESET_ON_WAIT, MAN_LTE_RESET_ON_WAIT_TIME);
   \                     ??man_lte_main_244: (+1)
   \   00001054   0x21FA             MOVS     R1,#+250
   \   00001056   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00001058   0x4801             LDR      R0,??man_lte_main_213  ;; 0x4040003d
   \   0000105A   0x.... 0x....      BL       man_timer_cancel_wait
   1469          			break;
   \   0000105E   0xE011             B        ??man_lte_main_247
   \                     ??man_lte_main_213:
   \   00001060   0x4040003D         DC32     0x4040003d
   1470          		case MAN_LTE_SEQ_LTE_RESET_OFF_WAIT:
   1471          			man_timer_cancel_wait(TIMER_MAN_ID_APL_LTE + MAN_LTE_SEQ_LTE_RESET_OFF_WAIT, MAN_LTE_PWRKEY_OFF_WAIT_TIME);
   \                     ??man_lte_main_245: (+1)
   \   00001064   0x4903             LDR      R1,??man_lte_main_215+0x4  ;; 0x59d8
   \   00001066   0x4804             LDR      R0,??man_lte_main_215+0x8  ;; 0x40400040
   \   00001068   0x.... 0x....      BL       man_timer_cancel_wait
   1472          			break;
   \   0000106C   0xE00A             B        ??man_lte_main_247
   \   0000106E   0xBF00             Nop      
   \                     ??man_lte_main_215:
   \   00001070   0x000004F2         DC32     0x4f2
   \   00001074   0x000059D8         DC32     0x59d8
   \   00001078   0x40400040         DC32     0x40400040
   \   0000107C   0x00000506         DC32     0x506
   \   00001080   0x........         DC32     man_lte_req_callback
   1473          		default:
   1474          			break;
   1475          		}
   1476          		// 応答は返さない
   1477          		man_lte_work.request.callback = NULL;
   \                     ??man_lte_main_246: (+1)
   \                     ??man_lte_main_247: (+1)
   \   00001084   0x2000             MOVS     R0,#+0
   \   00001086   0x....             LDR      R1,??DataTable13
   \   00001088   0x60C8             STR      R0,[R1, #+12]
   1478          		man_lte_set_sequense(MAN_LTE_SEQ_READY);
   \   0000108A   0x2000             MOVS     R0,#+0
   \   0000108C   0x.... 0x....      BL       man_lte_set_sequense
   1479          		man_lte_work.request.req_cmd = MAN_CMD_REQ_CMD_NON;
   \   00001090   0x2000             MOVS     R0,#+0
   \   00001092   0x....             LDR      R1,??DataTable13
   \   00001094   0x6048             STR      R0,[R1, #+4]
   1480          		// 内部状態をCLOSEにする
   1481          		man_lte_work.lte_sts &= ~MAN_LTE_STS_LTE_OPEN;
   \   00001096   0x....             LDR      R0,??DataTable13
   \   00001098   0x6A40             LDR      R0,[R0, #+36]
   \   0000109A   0x2108             MOVS     R1,#+8
   \   0000109C   0x4388             BICS     R0,R0,R1
   \   0000109E   0x....             LDR      R1,??DataTable13
   \   000010A0   0x6248             STR      R0,[R1, #+36]
   1482          		man_lte_work.mode = MAN_LTE_MODE_CLOSE;
   \   000010A2   0x2000             MOVS     R0,#+0
   \   000010A4   0x....             LDR      R1,??DataTable13
   \   000010A6   0x7008             STRB     R0,[R1, #+0]
   1483          		man_lte_work.req_state = MAN_LTE_STATE_NON;
   \   000010A8   0x2000             MOVS     R0,#+0
   \   000010AA   0x....             LDR      R1,??DataTable13
   \   000010AC   0x63C8             STR      R0,[R1, #+60]
   1484          		break;
   \   000010AE   0xE006             B        ??man_lte_main_229
   1485          
   1486          	case MAN_LTE_STATE_DEV_NOT_SUPPORT:
   1487          	case MAN_LTE_STATE_DEV_BUSY:
   1488          	case MAN_LTE_STATE_SIMCARD_NG:
   1489          		man_lte_work.req_state = MAN_LTE_STATE_NON;
   \                     ??man_lte_main_227: (+1)
   \   000010B0   0x2000             MOVS     R0,#+0
   \   000010B2   0x....             LDR      R1,??DataTable13
   \   000010B4   0x63C8             STR      R0,[R1, #+60]
   1490          		break;
   \   000010B6   0xE002             B        ??man_lte_main_229
   1491          
   1492          	default:
   1493          		man_lte_work.req_state = MAN_LTE_STATE_NON;
   \                     ??man_lte_main_228: (+1)
   \   000010B8   0x2000             MOVS     R0,#+0
   \   000010BA   0x....             LDR      R1,??DataTable13
   \   000010BC   0x63C8             STR      R0,[R1, #+60]
   1494          		break;
   1495          	}
   1496          
   1497          
   1498          	// 無線電波を確認する
   1499          	if (man_lte_work.chk_csq != 0) {
   \                     ??man_lte_main_229: (+1)
   \   000010BE   0x....             LDR      R0,??DataTable13
   \   000010C0   0x6A80             LDR      R0,[R0, #+40]
   \   000010C2   0x2800             CMP      R0,#+0
   \   000010C4   0xD01D             BEQ      ??man_lte_main_248
   1500          		// HTTPの使用状況を確認する
   1501          		sts = man_http_get_status();
   \   000010C6   0x.... 0x....      BL       man_http_get_status
   \   000010CA   0x0004             MOVS     R4,R0
   1502          		if (sts == 0) {
   \   000010CC   0x2C00             CMP      R4,#+0
   \   000010CE   0xD118             BNE      ??man_lte_main_248
   1503          			// STBY時は実施しない
   1504          			if ( (man_lte_work.lte_sts & MAN_LTE_STS_LTE_STBY) == 0) {
   \   000010D0   0x....             LDR      R0,??DataTable17_2
   \   000010D2   0x7800             LDRB     R0,[R0, #+0]
   \   000010D4   0x06C0             LSLS     R0,R0,#+27
   \   000010D6   0xD411             BMI      ??man_lte_main_249
   1505          				// LTE 電源ON, LTE INIT設定済み, READY設定済み
   1506          				if ( (man_lte_work.lte_sts & (MAN_LTE_STS_POWER_ON | MAN_LTE_STS_LTE_INIT | MAN_LTE_STS_LTE_READY)) == (MAN_LTE_STS_POWER_ON | MAN_LTE_STS_LTE_INIT | MAN_LTE_STS_LTE_READY) ) {
   \   000010D8   0x....             LDR      R0,??DataTable17_2
   \   000010DA   0x7800             LDRB     R0,[R0, #+0]
   \   000010DC   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   000010DE   0x0F40             LSRS     R0,R0,#+29
   \   000010E0   0x2807             CMP      R0,#+7
   \   000010E2   0xD10B             BNE      ??man_lte_main_249
   1507          					// NET CLOSE中は実施しない
   1508          					if ( (man_lte_work.sequense != MAN_LTE_SEQ_LTE_STOP) && (man_lte_work.sequense != MAN_LTE_SEQ_LTE_STOP_NG_WAIT) ) {
   \   000010E4   0x....             LDR      R0,??DataTable13
   \   000010E6   0x7840             LDRB     R0,[R0, #+1]
   \   000010E8   0x2823             CMP      R0,#+35
   \   000010EA   0xD007             BEQ      ??man_lte_main_249
   \   000010EC   0x....             LDR      R0,??DataTable13
   \   000010EE   0x7840             LDRB     R0,[R0, #+1]
   \   000010F0   0x2826             CMP      R0,#+38
   \   000010F2   0xD003             BEQ      ??man_lte_main_249
   1509          						// 無線電波の確認
   1510          //						man_http_lte_get_csq(0, NULL);
   1511          						man_http_lte_get_cpsi(0, NULL);
   \   000010F4   0x2100             MOVS     R1,#+0
   \   000010F6   0x2000             MOVS     R0,#+0
   \   000010F8   0x.... 0x....      BL       man_http_lte_get_cpsi
   1512          					}
   1513          				}
   1514          			}
   1515          			man_lte_work.chk_csq = 0;
   \                     ??man_lte_main_249: (+1)
   \   000010FC   0x2000             MOVS     R0,#+0
   \   000010FE   0x....             LDR      R1,??DataTable13
   \   00001100   0x6288             STR      R0,[R1, #+40]
   1516          		}
   1517          	}
   1518          }
   \                     ??man_lte_main_248: (+1)
   \   00001102   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   \                     ??man_lte_main_218:
   \   00001104   0x0000051D         DC32     0x51d
   1519          
   1520          
   1521          
   1522          
   1523          
   1524          /********************************************************************/
   1525          /*!
   1526           * \name	man_lte_req_init
   1527           * \brief	network使用初期化処理
   1528           * \param	id       : ユニーク番号
   1529           *          callback : 完了を通知するcallback関数
   1530           * \return   0: 成功
   1531           * \note	必要時に、呼ばれること
   1532           */
   1533          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1534          int32_t man_lte_req_init(int32_t id, func_man_lte callback)
   1535          {
   \                     man_lte_req_init: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
   1536          	int32_t	ret=0;
   \   00000004   0x2000             MOVS     R0,#+0
   1537          
   1538          	// 要求を保存する
   1539          	man_lte_work.request.req_cmd = MAN_CMD_REQ_CMD_INIT;
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0x....             LDR      R4,??DataTable17_3
   \   0000000A   0x6063             STR      R3,[R4, #+4]
   1540          	man_lte_work.request.id = id;
   \   0000000C   0x....             LDR      R3,??DataTable17_3
   \   0000000E   0x609A             STR      R2,[R3, #+8]
   1541          	man_lte_work.request.callback = callback;
   \   00000010   0x....             LDR      R2,??DataTable17_3
   \   00000012   0x60D1             STR      R1,[R2, #+12]
   1542          
   1543          	return ret;
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return
   1544          
   1545          }
   1546          
   1547          
   1548          /********************************************************************/
   1549          /*!
   1550           * \name	man_lte_req_ready
   1551           * \brief	network使用準備処理
   1552           * \param	id       : ユニーク番号
   1553           *          callback : 完了を通知するcallback関数
   1554           * \return   0: 成功
   1555           * \note	必要時に、呼ばれること
   1556           */
   1557          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1558          int32_t man_lte_req_ready(int32_t id, func_man_lte callback)
   1559          {
   \                     man_lte_req_ready: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
   1560          	int32_t	ret=0;
   \   00000004   0x2000             MOVS     R0,#+0
   1561          
   1562          	// 要求を保存する
   1563          	man_lte_work.request.req_cmd = MAN_CMD_REQ_CMD_READY;
   \   00000006   0x2302             MOVS     R3,#+2
   \   00000008   0x....             LDR      R4,??DataTable17_3
   \   0000000A   0x6063             STR      R3,[R4, #+4]
   1564          	man_lte_work.request.id = id;
   \   0000000C   0x....             LDR      R3,??DataTable17_3
   \   0000000E   0x609A             STR      R2,[R3, #+8]
   1565          	man_lte_work.request.callback = callback;
   \   00000010   0x....             LDR      R2,??DataTable17_3
   \   00000012   0x60D1             STR      R1,[R2, #+12]
   1566          
   1567          	return ret;
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return
   1568          }
   1569          
   1570          
   1571          
   1572          /********************************************************************/
   1573          /*!
   1574           * \name	man_lte_req_start
   1575           * \brief	NETWORK使用開始処理
   1576           * \param	id       : ユニーク番号
   1577           *          callback : 完了を通知するcallback関数
   1578           * \return   0: 成功
   1579           * \note	必要時に、呼ばれること
   1580           */
   1581          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1582          int32_t man_lte_req_start(int32_t id, func_man_lte callback)
   1583          {
   \                     man_lte_req_start: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
   1584          
   1585          	int32_t	ret=0;
   \   00000004   0x2000             MOVS     R0,#+0
   1586          
   1587          	// 要求を保存する
   1588          	man_lte_work.request.req_cmd = MAN_CMD_REQ_CMD_START;
   \   00000006   0x2303             MOVS     R3,#+3
   \   00000008   0x....             LDR      R4,??DataTable17_3
   \   0000000A   0x6063             STR      R3,[R4, #+4]
   1589          	man_lte_work.request.id = id;
   \   0000000C   0x....             LDR      R3,??DataTable17_3
   \   0000000E   0x609A             STR      R2,[R3, #+8]
   1590          	man_lte_work.request.callback = callback;
   \   00000010   0x....             LDR      R2,??DataTable17_3
   \   00000012   0x60D1             STR      R1,[R2, #+12]
   1591          
   1592          	return ret;
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return
   1593          }
   1594          
   1595          
   1596          /********************************************************************/
   1597          /*!
   1598           * \name	man_lte_req_stop
   1599           * \brief	NETWORK使用終了処理
   1600           * \param	id       : ユニーク番号
   1601           *          callback : 完了を通知するcallback関数
   1602           * \return   0: 成功
   1603           * \note	必要時に、呼ばれること
   1604           */
   1605          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1606          int32_t man_lte_req_stop(int32_t id, func_man_lte callback)
   1607          {
   \                     man_lte_req_stop: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
   1608          
   1609          	int32_t	ret=0;
   \   00000004   0x2000             MOVS     R0,#+0
   1610          
   1611          	// 要求を保存する
   1612          	man_lte_work.request.req_cmd = MAN_CMD_REQ_CMD_STOP;
   \   00000006   0x2304             MOVS     R3,#+4
   \   00000008   0x....             LDR      R4,??DataTable17_3
   \   0000000A   0x6063             STR      R3,[R4, #+4]
   1613          	man_lte_work.request.id = id;
   \   0000000C   0x....             LDR      R3,??DataTable17_3
   \   0000000E   0x609A             STR      R2,[R3, #+8]
   1614          	man_lte_work.request.callback = callback;
   \   00000010   0x....             LDR      R2,??DataTable17_3
   \   00000012   0x60D1             STR      R1,[R2, #+12]
   1615          
   1616          	return ret;
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return
   1617          }
   1618          
   1619          
   1620          /********************************************************************/
   1621          /*!
   1622           * \name	man_lte_req_stby
   1623           * \brief	NETWORK スタンバイIN処理
   1624           * \param	id       : ユニーク番号
   1625           *          callback : 完了を通知するcallback関数
   1626           * \return   0: 成功
   1627           * \note	必要時に、呼ばれること
   1628           */
   1629          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1630          int32_t man_lte_req_stby(int32_t id, func_man_lte callback)
   1631          {
   \                     man_lte_req_stby: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
   1632          	int32_t	ret=0;
   \   00000004   0x2000             MOVS     R0,#+0
   1633          
   1634          	// 要求を保存する
   1635          	man_lte_work.request.req_cmd = MAN_CMD_REQ_CMD_STBY;
   \   00000006   0x2305             MOVS     R3,#+5
   \   00000008   0x....             LDR      R4,??DataTable17_3
   \   0000000A   0x6063             STR      R3,[R4, #+4]
   1636          	man_lte_work.request.id = id;
   \   0000000C   0x....             LDR      R3,??DataTable17_3
   \   0000000E   0x609A             STR      R2,[R3, #+8]
   1637          	man_lte_work.request.callback = callback;
   \   00000010   0x....             LDR      R2,??DataTable17_3
   \   00000012   0x60D1             STR      R1,[R2, #+12]
   1638          
   1639          	return ret;
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return
   1640          }
   1641          
   1642          
   1643          /********************************************************************/
   1644          /*!
   1645           * \name	man_lte_req_wakeup
   1646           * \brief	NETWORK wake up 処理
   1647           * \param	id       : ユニーク番号
   1648           *          callback : 完了を通知するcallback関数
   1649           * \return   0: 成功
   1650           *          -1:失敗
   1651           * \note	必要時に、呼ばれること
   1652           */
   1653          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1654          int32_t man_lte_req_wakeup(int32_t id, func_man_lte callback)
   1655          {
   \                     man_lte_req_wakeup: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
   1656          	int32_t	ret=0;
   \   00000004   0x2000             MOVS     R0,#+0
   1657          
   1658          	// 要求を保存する
   1659          	man_lte_work.request.req_cmd = MAN_CMD_REQ_CMD_WAKEUP;
   \   00000006   0x2306             MOVS     R3,#+6
   \   00000008   0x....             LDR      R4,??DataTable17_3
   \   0000000A   0x6063             STR      R3,[R4, #+4]
   1660          	man_lte_work.request.id = id;
   \   0000000C   0x....             LDR      R3,??DataTable17_3
   \   0000000E   0x609A             STR      R2,[R3, #+8]
   1661          	man_lte_work.request.callback = callback;
   \   00000010   0x....             LDR      R2,??DataTable17_3
   \   00000012   0x60D1             STR      R1,[R2, #+12]
   1662          
   1663          	return ret;
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return
   1664          }
   1665          
   1666          /********************************************************************/
   1667          /*!
   1668           * \name	man_lte_req_reset
   1669           * \brief	NETWORK RESET 処理
   1670           * \param	id       : ユニーク番号
   1671           *          callback : 完了を通知するcallback関数
   1672           * \return   0: 成功
   1673           *          -1:失敗
   1674           * \note	必要時に、呼ばれること
   1675           */
   1676          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1677          int32_t man_lte_req_reset(int32_t id, func_man_lte callback)
   1678          {
   \                     man_lte_req_reset: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
   1679          	int32_t	ret=0;
   \   00000004   0x2000             MOVS     R0,#+0
   1680          
   1681          	// 要求を保存する
   1682          	man_lte_work.request.req_cmd = MAN_CMD_REQ_CMD_RESET;
   \   00000006   0x2307             MOVS     R3,#+7
   \   00000008   0x....             LDR      R4,??DataTable17_3
   \   0000000A   0x6063             STR      R3,[R4, #+4]
   1683          	man_lte_work.request.id = id;
   \   0000000C   0x....             LDR      R3,??DataTable17_3
   \   0000000E   0x609A             STR      R2,[R3, #+8]
   1684          	man_lte_work.request.callback = callback;
   \   00000010   0x....             LDR      R2,??DataTable17_3
   \   00000012   0x60D1             STR      R1,[R2, #+12]
   1685          
   1686          	return ret;
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return
   1687          }
   1688          
   1689          /********************************************************************/
   1690          /*!
   1691           * \name	man_lte_req_offt
   1692           * \brief	NETWORK POWER OFF 処理
   1693           * \param	id       : ユニーク番号
   1694           *          callback : 完了を通知するcallback関数
   1695           * \return   0: 成功
   1696           *          -1:失敗
   1697           * \note	必要時に、呼ばれること
   1698           */
   1699          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1700          int32_t man_lte_req_off(int32_t id, func_man_lte callback)
   1701          {
   \                     man_lte_req_off: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
   1702          	int32_t	ret=0;
   \   00000004   0x2000             MOVS     R0,#+0
   1703          
   1704          	// 要求を保存する
   1705          	man_lte_work.request.req_cmd = MAN_CMD_REQ_CMD_OFF;
   \   00000006   0x2308             MOVS     R3,#+8
   \   00000008   0x....             LDR      R4,??DataTable17_3
   \   0000000A   0x6063             STR      R3,[R4, #+4]
   1706          	man_lte_work.request.id = id;
   \   0000000C   0x....             LDR      R3,??DataTable17_3
   \   0000000E   0x609A             STR      R2,[R3, #+8]
   1707          	man_lte_work.request.callback = callback;
   \   00000010   0x....             LDR      R2,??DataTable17_3
   \   00000012   0x60D1             STR      R1,[R2, #+12]
   1708          
   1709          	return ret;
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return
   1710          }
   1711          
   1712          
   1713          /********************************************************************/
   1714          /*!
   1715           * \name	man_lte_noti_state
   1716           * \brief	LTEが受信した状態を通知する
   1717           * \param	id             : ユニーク番号
   1718           *          callback_state : 状態を通知するcallback関数
   1719           * \return   0: 成功
   1720           *          -1:失敗
   1721           * \note	必要時に、呼ばれること
   1722           */
   1723          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1724          int32_t man_lte_noti_state(int32_t id, func_man_lte callback_state)
   1725          {
   \                     man_lte_noti_state: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0002             MOVS     R2,R0
   1726          	int32_t		ret = -1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
   1727          	
   1728          	if (callback_state != NULL) {
   \   00000008   0x000B             MOVS     R3,R1
   \   0000000A   0x2B00             CMP      R3,#+0
   \   0000000C   0xD004             BEQ      ??man_lte_noti_state_0
   1729          		man_lte_work.noti_state.id = id;
   \   0000000E   0x....             LDR      R0,??DataTable17_3
   \   00000010   0x6302             STR      R2,[R0, #+48]
   1730          		man_lte_work.noti_state.callback_state = callback_state;
   \   00000012   0x....             LDR      R0,??DataTable17_3
   \   00000014   0x6341             STR      R1,[R0, #+52]
   1731          		ret = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   1732          	}
   1733          	return ret;
   \                     ??man_lte_noti_state_0: (+1)
   \   00000018   0xBD00             POP      {PC}             ;; return
   1734          }
   1735          
   1736          
   1737          
   1738          
   1739          /********************************************************************/
   1740          /*!
   1741           * \name	man_lte_req_state
   1742           * \brief	NETWORK状態を通知する
   1743           * \param	state         : MAN_LTE_STATE_RESET    : リセット発生
   1744           *                        : MAN_LTE_STATE_NETCLOSE : NET CLOSE発生
   1745           * \return  なし
   1746           * \note	必要時に、呼ばれること
   1747           */
   1748          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1749          void man_lte_req_state(int32_t state)
   1750          {
   1751          	man_lte_work.req_state = state;
   \                     man_lte_req_state: (+1)
   \   00000000   0x....             LDR      R1,??DataTable17_3
   \   00000002   0x63C8             STR      R0,[R1, #+60]
   1752          }
   \   00000004   0x4770             BX       LR               ;; return
   1753          
   1754          
   1755          /********************************************************************/
   1756          /*!
   1757           * \name	man_let_get_data
   1758           * \brief	NETWORK状態を取得する
   1759           * \param	mode         : MAN_LTE_MODE_CLOSE   : LTE切断状態
   1760           *                       : MAN_LTE_MODE_OPEN    : LTE接続状態
   1761           * \return  なし
   1762           * \note	必要時に、呼ばれること
   1763           */
   1764          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1765          void man_let_get_data(man_lte_mode_def *mode) 
   1766          {
   1767          	*mode = man_lte_work.mode;
   \                     man_let_get_data: (+1)
   \   00000000   0x....             LDR      R1,??DataTable17_3
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x7001             STRB     R1,[R0, #+0]
   1768          }
   \   00000006   0x4770             BX       LR               ;; return
   1769          
   1770          
   1771          
   1772          
   1773          /********************************************************************/
   1774          /*!
   1775           * \name	man_lte_1000ms_main
   1776           * \brief	LTE 1000ms毎実行処理
   1777           * \param	なし
   1778           * \return  なし
   1779           * \note	1000ms毎に、呼ばれること
   1780           */
   1781          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1782          void man_lte_1000ms_main( void )
   1783          {
   \                     man_lte_1000ms_main: (+1)
   \   00000000   0xB500             PUSH     {LR}
   1784          	man_lte_work.csq_interval++;
   \   00000002   0x....             LDR      R0,??DataTable17_3
   \   00000004   0x6AC0             LDR      R0,[R0, #+44]
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x....             LDR      R1,??DataTable17_3
   \   0000000A   0x62C8             STR      R0,[R1, #+44]
   1785          	if ((man_lte_work.csq_interval % MAN_LTE_CSQ_INTERVAL) == 0) {
   \   0000000C   0x....             LDR      R0,??DataTable17_3
   \   0000000E   0x6AC0             LDR      R0,[R0, #+44]
   \   00000010   0x2105             MOVS     R1,#+5
   \   00000012   0x.... 0x....      BL       __aeabi_idivmod
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD105             BNE      ??man_lte_1000ms_main_0
   1786          		man_lte_work.csq_interval = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x....             LDR      R1,??DataTable17_3
   \   0000001E   0x62C8             STR      R0,[R1, #+44]
   1787          		man_lte_work.chk_csq = 1;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x....             LDR      R1,??DataTable17_3
   \   00000024   0x6288             STR      R0,[R1, #+40]
   1788          	}
   1789          }
   \                     ??man_lte_1000ms_main_0: (+1)
   \   00000026   0xBD00             POP      {PC}             ;; return
   1790          
   1791          /********************************************************************/
   1792          /*!
   1793           * \name	man_lte_disp_info
   1794           * \brief	管理情報を表示する処理
   1795           * \param	なし
   1796           * \return  なし
   1797           * \note	必要時に、呼ばれること
   1798           */
   1799          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1800          void man_lte_disp_info( void )
   1801          {
   \                     man_lte_disp_info: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1802          	int32_t		length;
   1803          
   1804          	sprintf((char *)&man_lte_work.buff[0], "LTE INFO :: ota_off=%d, sts=%02x, req cmd=%d, req state=%d\n", man_lte_work.ota_off_flag, man_lte_work.lte_sts, man_lte_work.request.req_cmd, man_lte_work.req_state);
   \   00000004   0x....             LDR      R0,??DataTable17_3
   \   00000006   0x6BC0             LDR      R0,[R0, #+60]
   \   00000008   0x9001             STR      R0,[SP, #+4]
   \   0000000A   0x....             LDR      R0,??DataTable17_3
   \   0000000C   0x6840             LDR      R0,[R0, #+4]
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x....             LDR      R0,??DataTable17_3
   \   00000012   0x6A43             LDR      R3,[R0, #+36]
   \   00000014   0x....             LDR      R0,??DataTable17_3
   \   00000016   0x6A02             LDR      R2,[R0, #+32]
   \   00000018   0x....             LDR      R1,??DataTable17_4
   \   0000001A   0x....             LDR      R0,??DataTable17_5
   \   0000001C   0x.... 0x....      BL       sprintf
   1805          	length = strlen((char const *)&man_lte_work.buff[0]);
   \   00000020   0x....             LDR      R0,??DataTable17_5
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x0001             MOVS     R1,R0
   1806          	man_usb_data_send(&man_lte_work.buff[0], length);
   \   00000028   0x....             LDR      R0,??DataTable17_5
   \   0000002A   0x.... 0x....      BL       man_usb_data_send
   1807          }
   \   0000002E   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     man_lte_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     man_lte_work+0xA4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     man_lte_req_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x0000EA60         DC32     0xea60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40400047         DC32     0x40400047

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x0000052B         DC32     0x52b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x4040004C         DC32     0x4040004c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x00000552         DC32     0x552

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x00000BB8         DC32     0xbb8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x4040004F         DC32     0x4040004f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x00007530         DC32     0x7530

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     usb_log_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x00000579         DC32     0x579

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     man_lte_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x40400005         DC32     0x40400005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x4040001F         DC32     0x4040001f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x40400026         DC32     0x40400026

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x40400032         DC32     0x40400032

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x00001388         DC32     0x1388

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x40400036         DC32     0x40400036

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     man_lte_work+0x24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     man_lte_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x........         DC32     man_lte_work+0xA8

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x56 0x4C          DC8 "VLTE OFF\015\012"
   \              0x54 0x45    
   \              0x20 0x4F    
   \              0x46 0x46    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x4C 0x54          DC8 4CH, 54H, 45H, 20H, 49H, 4EH, 46H, 4FH
   \              0x45 0x20    
   \              0x49 0x4E    
   \              0x46 0x4F    
   \   00000008   0x20 0x3A          DC8 20H, 3AH, 3AH, 20H, 6FH, 74H, 61H, 5FH
   \              0x3A 0x20    
   \              0x6F 0x74    
   \              0x61 0x5F    
   \   00000010   0x6F 0x66          DC8 6FH, 66H, 66H, 3DH, 25H, 64H, 2CH, 20H
   \              0x66 0x3D    
   \              0x25 0x64    
   \              0x2C 0x20    
   \   00000018   0x73 0x74          DC8 73H, 74H, 73H, 3DH, 25H, 30H, 32H, 78H
   \              0x73 0x3D    
   \              0x25 0x30    
   \              0x32 0x78    
   \   00000020   0x2C 0x20          DC8 2CH, 20H, 72H, 65H, 71H, 20H, 63H, 6DH
   \              0x72 0x65    
   \              0x71 0x20    
   \              0x63 0x6D    
   \   00000028   0x64 0x3D          DC8 64H, 3DH, 25H, 64H, 2CH, 20H, 72H, 65H
   \              0x25 0x64    
   \              0x2C 0x20    
   \              0x72 0x65    
   \   00000030   0x71 0x20          DC8 71H, 20H, 73H, 74H, 61H, 74H, 65H, 3DH
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x3D    
   \   00000038   0x25 0x64          DC8 25H, 64H, 0AH, 0
   \              0x0A 0x00    
   1808          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   man_let_get_data
       4   man_lte_1000ms_main
         4 __aeabi_idivmod
      16   man_lte_disp_info
        16   -> man_usb_data_send
        16   -> sprintf
        16   -> strlen
       8   man_lte_init
         8   -> __aeabi_memset
         8   -> man_http_lte_state
      16   man_lte_main
        16   -- Indirect call
        16   -> man_data_get_SIM7500_cfotaswitch
        16   -> man_dbglog_setting
        16   -> man_error_set
        16   -> man_gpio_lte_power
        16   -> man_gpio_lte_power_get
        16   -> man_gpio_lte_pwrkey
        16   -> man_gpio_lte_reset
        16   -> man_http_get_status
        16   -> man_http_lte_close
        16   -> man_http_lte_exec_reset
        16   -> man_http_lte_get_cpsi
        16   -> man_http_lte_init
        16   -> man_http_lte_open
        16   -> man_http_lte_ota_off
        16   -> man_http_lte_ready
        16   -> man_http_lte_stby_in
        16   -> man_http_lte_stby_out
        16   -> man_http_set_rssi_ng
        16   -> man_lte_return_callback
        16   -> man_lte_set_sequense
        16   -> man_timer_cancel_wait
        16   -> man_timer_start_wait
        16   -> mid_HTTP_req_LTE_PowerOFF
        16   -> seSysSleepMS
        16   -> sysmgr_log
       4   man_lte_noti_state
       0   man_lte_req_callback
       4   man_lte_req_init
       4   man_lte_req_off
       4   man_lte_req_ready
       4   man_lte_req_reset
       4   man_lte_req_start
       0   man_lte_req_state
       4   man_lte_req_stby
       4   man_lte_req_stop
       4   man_lte_req_wakeup
       8   man_lte_return_callback
         8   -- Indirect call
         8   -> man_lte_set_sequense
       8   man_lte_set_sequense
         8   -> man_dbglog_setting


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable11
       4  ??DataTable13
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable5
       4  ??DataTable6
       4  ??DataTable7
       4  ??DataTable8
       4  ??DataTable9
      12  ?_0
      60  ?_1
       8  man_let_get_data
      40  man_lte_1000ms_main
      48  man_lte_disp_info
      28  man_lte_init
    4360  man_lte_main
      26  man_lte_noti_state
      18  man_lte_req_callback
      24  man_lte_req_init
      24  man_lte_req_off
      24  man_lte_req_ready
      24  man_lte_req_reset
      24  man_lte_req_start
       6  man_lte_req_state
      24  man_lte_req_stby
      24  man_lte_req_stop
      24  man_lte_req_wakeup
      42  man_lte_return_callback
      68  man_lte_set_sequense
     268  man_lte_work

 
   268 bytes in section .bss
    72 bytes in section .rodata
 4 936 bytes in section .text
 
 4 936 bytes of CODE  memory
    72 bytes of CONST memory
   268 bytes of DATA  memory

Errors: none
Warnings: 1
