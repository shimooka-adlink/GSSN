###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       17/May/2019  13:32:04
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\driver\uart\drv_uart2_1.c
#    Command line =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\driver\uart\drv_uart2_1.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_B -lCN
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        -lA
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List\drv_uart2_1.lst
#    Object file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj\drv_uart2_1.o
#
###############################################################################

C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\driver\uart\drv_uart2_1.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    uart2_1.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    2017.10.2
      8            * @brief   P02, P03を使用してUART CH1でデータの送受信を行う
      9            *          受信バッファは2048バイトとする。
     10            ******************************************************************************
     11            $Id: drv_uart2_1.c 201 2018-06-15 06:10:56Z shitaoka $
     12            * @attention
     13            *
     14            *  PORT
     15            *    P02        : USIN
     16            *    P03        : USOUT
     17            *
     18            *  ClkSrc       : seCLG_IOSC
     19            *  ClkDivider   : seUART2_IOSC_CLKDIV_1
     20            *               : seUART2_BAUD_RATE_115200
     21            *
     22            *  受信バッファ : DRV_UART0_RECV_BUFF_MAX
     23            *
     24            *****************************************************************************
     25          */ 
     26          
     27          /**
     28            * @}
     29            */ 
     30          
     31          #include <string.h>
     32          #include <stdio.h>
     33          #include "board.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB240             SXTB     R0,R0
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD405             BMI      ??NVIC_EnableIRQ_0
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x06C0             LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \   0000000C   0x0EC0             LSRS     R0,R0,#+27
   \   0000000E   0x4081             LSLS     R1,R1,R0
   \   00000010   0x....             LDR      R0,??DataTable7  ;; 0xe000e100
   \   00000012   0x6001             STR      R1,[R0, #+0]
   \                     ??NVIC_EnableIRQ_0: (+1)
   \   00000014   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     NVIC_SetPriority: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB240             SXTB     R0,R0
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD41B             BMI      ??NVIC_SetPriority_0
   \   00000008   0x....             LDR      R2,??DataTable7_1  ;; 0xe000e400
   \   0000000A   0xB240             SXTB     R0,R0
   \   0000000C   0x0883             LSRS     R3,R0,#+2
   \   0000000E   0x2404             MOVS     R4,#+4
   \   00000010   0x4363             MULS     R3,R4,R3
   \   00000012   0x58D2             LDR      R2,[R2, R3]
   \   00000014   0x23FF             MOVS     R3,#+255
   \   00000016   0x0784             LSLS     R4,R0,#+30       ;; ZeroExtS R4,R0,#+30,#+30
   \   00000018   0x0FA4             LSRS     R4,R4,#+30
   \   0000001A   0x2508             MOVS     R5,#+8
   \   0000001C   0x436C             MULS     R4,R5,R4
   \   0000001E   0x40A3             LSLS     R3,R3,R4
   \   00000020   0x439A             BICS     R2,R2,R3
   \   00000022   0x0189             LSLS     R1,R1,#+6
   \   00000024   0xB2C9             UXTB     R1,R1
   \   00000026   0x0783             LSLS     R3,R0,#+30       ;; ZeroExtS R3,R0,#+30,#+30
   \   00000028   0x0F9B             LSRS     R3,R3,#+30
   \   0000002A   0x2408             MOVS     R4,#+8
   \   0000002C   0x4363             MULS     R3,R4,R3
   \   0000002E   0x4099             LSLS     R1,R1,R3
   \   00000030   0x4311             ORRS     R1,R1,R2
   \   00000032   0x....             LDR      R2,??DataTable7_1  ;; 0xe000e400
   \   00000034   0xB240             SXTB     R0,R0
   \   00000036   0x0880             LSRS     R0,R0,#+2
   \   00000038   0x2304             MOVS     R3,#+4
   \   0000003A   0x4358             MULS     R0,R3,R0
   \   0000003C   0x5011             STR      R1,[R2, R0]
   \   0000003E   0xE020             B        ??NVIC_SetPriority_1
   \                     ??NVIC_SetPriority_0: (+1)
   \   00000040   0x....             LDR      R3,??DataTable7_2  ;; 0xe000ed1c
   \   00000042   0xB240             SXTB     R0,R0
   \   00000044   0x0702             LSLS     R2,R0,#+28       ;; ZeroExtS R2,R0,#+28,#+28
   \   00000046   0x0F12             LSRS     R2,R2,#+28
   \   00000048   0x3A08             SUBS     R2,R2,#+8
   \   0000004A   0x0892             LSRS     R2,R2,#+2
   \   0000004C   0x2404             MOVS     R4,#+4
   \   0000004E   0x4362             MULS     R2,R4,R2
   \   00000050   0x....             LDR      R4,??DataTable7_2  ;; 0xe000ed1c
   \   00000052   0xB240             SXTB     R0,R0
   \   00000054   0x0705             LSLS     R5,R0,#+28       ;; ZeroExtS R5,R0,#+28,#+28
   \   00000056   0x0F2D             LSRS     R5,R5,#+28
   \   00000058   0x3D08             SUBS     R5,R5,#+8
   \   0000005A   0x08AD             LSRS     R5,R5,#+2
   \   0000005C   0x2604             MOVS     R6,#+4
   \   0000005E   0x4375             MULS     R5,R6,R5
   \   00000060   0x5964             LDR      R4,[R4, R5]
   \   00000062   0x25FF             MOVS     R5,#+255
   \   00000064   0x0786             LSLS     R6,R0,#+30       ;; ZeroExtS R6,R0,#+30,#+30
   \   00000066   0x0FB6             LSRS     R6,R6,#+30
   \   00000068   0x2708             MOVS     R7,#+8
   \   0000006A   0x437E             MULS     R6,R7,R6
   \   0000006C   0x40B5             LSLS     R5,R5,R6
   \   0000006E   0x43AC             BICS     R4,R4,R5
   \   00000070   0x0189             LSLS     R1,R1,#+6
   \   00000072   0xB2C9             UXTB     R1,R1
   \   00000074   0x0780             LSLS     R0,R0,#+30       ;; ZeroExtS R0,R0,#+30,#+30
   \   00000076   0x0F80             LSRS     R0,R0,#+30
   \   00000078   0x2508             MOVS     R5,#+8
   \   0000007A   0x4368             MULS     R0,R5,R0
   \   0000007C   0x4081             LSLS     R1,R1,R0
   \   0000007E   0x4321             ORRS     R1,R1,R4
   \   00000080   0x5099             STR      R1,[R3, R2]
   \                     ??NVIC_SetPriority_1: (+1)
   \   00000082   0xBDF0             POP      {R4-R7,PC}       ;; return
     34          #include "system_manager.h"
     35          #include "se_common.h"
     36          #include "se_uart2.h"
     37          #include "man_usb.h"
     38          
     39          
     40          
     41          #pragma section = "DRV_PRG_BLOCK"
     42          
     43          
     44          /************************************************************************/
     45          /* declaration of structure                                             */
     46          /************************************************************************/
     47          
     48          #define	DRV_UART1_RECV_BUFF_MAX		2048
     49          
     50          // 個別情報
     51          typedef struct _drv_uart1_recv_info_t {
     52          	uint8_t		rcv_buff[DRV_UART1_RECV_BUFF_MAX];
     53          	uint32_t	length;
     54          	uint32_t	write_p;
     55          	uint32_t	read_p;
     56          	uint32_t	error;
     57          } drv_uart1_recv_info_t;
     58          
     59          typedef struct _drv_uart1_work_t {
     60          	drv_uart1_recv_info_t	recv_info;
     61          } drv_uart1_work_t;
     62          
     63          
     64          /************************************************************************/
     65          /* definition of variables                                              */
     66          /************************************************************************/
     67          

   \                                 In section .bss, align 4
     68          static drv_uart1_work_t		drv_uart1_work;			// UART CH1用変数
   \                     drv_uart1_work:
   \   00000000                      DS8 2064
     69          
     70          //  Structure for peripheral library

   \                                 In section .bss, align 4
     71          static seUART2_InitTypeDef InitStruct;
   \                     InitStruct:
   \   00000000                      DS8 8
     72          
     73          
     74          
     75          /********************************************************************/
     76          /*!
     77           * \name	drv_uart2_1_init
     78           * \brief	UART Ch1 の初期化
     79           * \param	なし
     80           * \return  0: 正常
     81           * \note	
     82           */
     83          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     84          int drv_uart2_1_init( void )
     85          {
   \                     drv_uart2_1_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     86          
     87          	memset( &drv_uart1_work, 0, sizeof( drv_uart1_work_t ) );
   \   00000002   0x2181             MOVS     R1,#+129
   \   00000004   0x0109             LSLS     R1,R1,#+4        ;; #+2064
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x....             LDR      R4,??DataTable7_3
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
     88          
     89          	memset( &InitStruct, 0, sizeof( seUART2_InitTypeDef ) );
   \   00000010   0x2106             MOVS     R1,#+6
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x....             LDR      R4,??DataTable7_4
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       __aeabi_memset
     90          
     91          #ifdef OSC3_ENABLE
     92          	InitStruct.ClkSrc = seCLG_OSC3; 
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x....             LDR      R1,??DataTable7_4
   \   00000020   0x7008             STRB     R0,[R1, #+0]
     93          	InitStruct.ClkDivider = seUART2_OSC3_CLKDIV_1;  
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR      R1,??DataTable7_4
   \   00000026   0x8048             STRH     R0,[R1, #+2]
     94          #else
     95          	InitStruct.ClkSrc = seCLG_IOSC; 
     96          	InitStruct.ClkDivider = seUART2_IOSC_CLKDIV_1;  
     97          #endif
     98          
     99          	InitStruct.Mode.reg_b.puen = seUART2_MOD_PUEN_ENABLE;
   \   00000028   0x....             LDR      R0,??DataTable7_4
   \   0000002A   0x8880             LDRH     R0,[R0, #+4]
   \   0000002C   0x2140             MOVS     R1,#+64
   \   0000002E   0x4301             ORRS     R1,R1,R0
   \   00000030   0x....             LDR      R0,??DataTable7_4
   \   00000032   0x8081             STRH     R1,[R0, #+4]
    100          	InitStruct.Mode.reg_b.chln = seUART2_MOD_CHLN_8BIT;
   \   00000034   0x....             LDR      R0,??DataTable7_4
   \   00000036   0x8880             LDRH     R0,[R0, #+4]
   \   00000038   0x2108             MOVS     R1,#+8
   \   0000003A   0x4301             ORRS     R1,R1,R0
   \   0000003C   0x....             LDR      R0,??DataTable7_4
   \   0000003E   0x8081             STRH     R1,[R0, #+4]
    101          	InitStruct.Mode.reg_b.stpb = seUART2_MOD_STPB_1BIT;
   \   00000040   0x....             LDR      R0,??DataTable7_4
   \   00000042   0x8880             LDRH     R0,[R0, #+4]
   \   00000044   0x....             LDR      R1,??DataTable7_5  ;; 0xfffe
   \   00000046   0x4001             ANDS     R1,R1,R0
   \   00000048   0x....             LDR      R0,??DataTable7_4
   \   0000004A   0x8081             STRH     R1,[R0, #+4]
    102          	InitStruct.Mode.reg_b.pren = seUART2_MOD_PREN_NO_PARITY;
   \   0000004C   0x....             LDR      R0,??DataTable7_4
   \   0000004E   0x8880             LDRH     R0,[R0, #+4]
   \   00000050   0x....             LDR      R1,??DataTable7_6  ;; 0xfffb
   \   00000052   0x4001             ANDS     R1,R1,R0
   \   00000054   0x....             LDR      R0,??DataTable7_4
   \   00000056   0x8081             STRH     R1,[R0, #+4]
    103          	InitStruct.Mode.reg_b.prmd = seUART2_MOD_PRMD_EVEN;
   \   00000058   0x....             LDR      R0,??DataTable7_4
   \   0000005A   0x8880             LDRH     R0,[R0, #+4]
   \   0000005C   0x....             LDR      R1,??DataTable7_7  ;; 0xfffd
   \   0000005E   0x4001             ANDS     R1,R1,R0
   \   00000060   0x....             LDR      R0,??DataTable7_4
   \   00000062   0x8081             STRH     R1,[R0, #+4]
    104          	InitStruct.Mode.reg_b.irmd = seUART2_MOD_IRMD_NO_IRDA;
   \   00000064   0x....             LDR      R0,??DataTable7_4
   \   00000066   0x8880             LDRH     R0,[R0, #+4]
   \   00000068   0x....             LDR      R1,??DataTable7_8  ;; 0xffef
   \   0000006A   0x4001             ANDS     R1,R1,R0
   \   0000006C   0x....             LDR      R0,??DataTable7_4
   \   0000006E   0x8081             STRH     R1,[R0, #+4]
    105          
    106          	seUART2_Init( &UART2_CH1, &InitStruct );
   \   00000070   0x....             LDR      R1,??DataTable7_4
   \   00000072   0x....             LDR      R0,??DataTable7_9
   \   00000074   0x.... 0x....      BL       seUART2_Init
    107          	seUART2_SetBaudRate( UART2_CH1.UARTx, seUART2_BAUD_RATE_115200 );
   \   00000078   0x21E1             MOVS     R1,#+225
   \   0000007A   0x0249             LSLS     R1,R1,#+9        ;; #+115200
   \   0000007C   0x....             LDR      R0,??DataTable7_9
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x.... 0x....      BL       seUART2_SetBaudRate
    108          	seUART2_Enable( UART2_CH1.UARTx );
   \   00000084   0x....             LDR      R0,??DataTable7_9
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x.... 0x....      BL       seUART2_Enable
    109            
    110          	seUART2_EnableInt( UART2_CH1.UARTx, seUART2_RB1FIE_INT );
   \   0000008C   0x2102             MOVS     R1,#+2
   \   0000008E   0x....             LDR      R0,??DataTable7_9
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x.... 0x....      BL       seUART2_EnableInt
    111          	seUART2_EnableInt( UART2_CH1.UARTx, seUART2_RB2FIE_INT );
   \   00000096   0x2104             MOVS     R1,#+4
   \   00000098   0x....             LDR      R0,??DataTable7_9
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x.... 0x....      BL       seUART2_EnableInt
    112            
    113          	NVIC_SetPriority( UART2_1_IRQn, 1 );  //  Set interrupt level
   \   000000A0   0x2101             MOVS     R1,#+1
   \   000000A2   0x200C             MOVS     R0,#+12
   \   000000A4   0x.... 0x....      BL       NVIC_SetPriority
    114          	NVIC_EnableIRQ( UART2_1_IRQn );
   \   000000A8   0x200C             MOVS     R0,#+12
   \   000000AA   0x.... 0x....      BL       NVIC_EnableIRQ
    115          
    116          	return 0;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0xBD10             POP      {R4,PC}          ;; return
    117          } 
    118          
    119          
    120          /********************************************************************/
    121          /*!
    122           * \name	drv_uart2_1_stop
    123           * \brief	UART Ch1 の停止
    124           * \param	なし
    125           * \return  0: 正常
    126           * \note	動作クロックの供給を停止してUARTチャネルを禁止します
    127           */
    128          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    129          void drv_uart2_1_stop( void )  
    130          {
   \                     drv_uart2_1_stop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    131          	seUART2_Disable( UART2_CH1.UARTx );						// UART CH1 割り込みを無効にする
   \   00000002   0x....             LDR      R0,??DataTable7_9
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      BL       seUART2_Disable
    132          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    133          
    134          /********************************************************************/
    135          /*!
    136           * \name	drv_uart2_1_start
    137           * \brief	UART Ch1 の再開
    138           * \param	なし
    139           * \return  0: 正常
    140           * \note	動作クロックを供給してUARTチャネルを許可します。
    141           */
    142          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    143          void drv_uart2_1_start( void )  
    144          {
   \                     drv_uart2_1_start: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    145          	seUART2_Enable( UART2_CH1.UARTx );							// UART CH1 割り込みを有効にする
   \   00000002   0x....             LDR      R0,??DataTable7_9
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      BL       seUART2_Enable
    146          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    147          
    148          
    149          /********************************************************************/
    150          /*!
    151           * \name	drv_uart2_1_send
    152           * \brief	データをUART CH1経由で送信します。
    153           * \param	buff   : 送信データ
    154           *			length : データ長
    155           * \return   0: 正常
    156           *			-1: 異常
    157           * \note	送信が完了するまで待ちます。
    158           */
    159          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    160          int32_t drv_uart2_1_send( uint8_t *buff , int32_t length )  
    161          {
   \                     drv_uart2_1_send: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
   \   00000004   0x000E             MOVS     R6,R1
    162          	uint32_t	send_len;
    163          	int32_t		ret=-1;
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x43E4             MVNS     R4,R4            ;; #-1
    164          
    165          	// パラメータチェック
    166          	if ( (buff!=NULL) && (length>0) ) {
   \   0000000A   0x2F00             CMP      R7,#+0
   \   0000000C   0xD017             BEQ      ??drv_uart2_1_send_0
   \   0000000E   0x2E01             CMP      R6,#+1
   \   00000010   0xDB15             BLT      ??drv_uart2_1_send_0
    167          
    168          		send_len = seUART2_Send( UART2_CH1.UARTx, buff, length );
   \   00000012   0x0032             MOVS     R2,R6
   \   00000014   0x0039             MOVS     R1,R7
   \   00000016   0x....             LDR      R0,??DataTable7_9
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x.... 0x....      BL       seUART2_Send
   \   0000001E   0x0005             MOVS     R5,R0
    169                          if((usb_log_flag & LOG_FLAG_GPS) || (usb_console_flag == 1))
   \   00000020   0x....             LDR      R0,??DataTable7_10
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x0740             LSLS     R0,R0,#+29
   \   00000026   0xD403             BMI      ??drv_uart2_1_send_1
   \   00000028   0x....             LDR      R0,??DataTable7_11
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xD103             BNE      ??drv_uart2_1_send_2
    170                          {       
    171                           sysmgr_log(buff,length);
   \                     ??drv_uart2_1_send_1: (+1)
   \   00000030   0x0031             MOVS     R1,R6
   \   00000032   0x0038             MOVS     R0,R7
   \   00000034   0x.... 0x....      BL       sysmgr_log
    172                          }
    173          		// 全て送信できていたら正常
    174          		if (send_len == length) {
   \                     ??drv_uart2_1_send_2: (+1)
   \   00000038   0x42B5             CMP      R5,R6
   \   0000003A   0xD100             BNE      ??drv_uart2_1_send_0
    175          			ret=0;
   \   0000003C   0x2400             MOVS     R4,#+0
    176          		}
    177          	}
    178          
    179            return ret;
   \                     ??drv_uart2_1_send_0: (+1)
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    180          } 
    181          
    182          
    183          
    184          /********************************************************************/
    185          /*!
    186           * \name	UART2_1_GetChar
    187           * \brief	UART CH1１文字受信
    188           * \param	なし
    189           * \return  -1: 受信データなし
    190           *          以外: 受信データ
    191           * \note	
    192           */
    193          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    194          int32_t UART2_1_GetChar(void)
    195          {
   \                     UART2_1_GetChar: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    196          	int32_t		ret=-1;
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x43E4             MVNS     R4,R4            ;; #-1
    197          	uint32_t	data;
    198          	uint32_t	read_next;
    199          
    200          	if (drv_uart1_work.recv_info.read_p != drv_uart1_work.recv_info.write_p)
   \   00000006   0x....             LDR      R0,??DataTable7_12
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x....             LDR      R1,??DataTable7_13
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xD01C             BEQ      ??UART2_1_GetChar_0
    201                  {
    202                        read_next = drv_uart1_work.recv_info.read_p + 1;
   \   00000012   0x....             LDR      R0,??DataTable7_12
   \   00000014   0x6805             LDR      R5,[R0, #+0]
   \   00000016   0x1C6D             ADDS     R5,R5,#+1
    203                        if (read_next >= DRV_UART1_RECV_BUFF_MAX)
   \   00000018   0x2080             MOVS     R0,#+128
   \   0000001A   0x0100             LSLS     R0,R0,#+4        ;; #+2048
   \   0000001C   0x4285             CMP      R5,R0
   \   0000001E   0xD300             BCC      ??UART2_1_GetChar_1
    204                        {
    205          		read_next = 0;
   \   00000020   0x2500             MOVS     R5,#+0
    206                        }
    207                        data = (uint32_t)drv_uart1_work.recv_info.rcv_buff[drv_uart1_work.recv_info.read_p];
   \                     ??UART2_1_GetChar_1: (+1)
   \   00000022   0x....             LDR      R0,??DataTable7_3
   \   00000024   0x....             LDR      R1,??DataTable7_12
   \   00000026   0x6809             LDR      R1,[R1, #+0]
   \   00000028   0x5C44             LDRB     R4,[R0, R1]
    208                        ret = (int32_t)data;
    209                        if((usb_log_flag & LOG_FLAG_GPS) || (usb_console_flag == 1))
   \   0000002A   0x....             LDR      R0,??DataTable7_10
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x0740             LSLS     R0,R0,#+29
   \   00000030   0xD403             BMI      ??UART2_1_GetChar_2
   \   00000032   0x....             LDR      R0,??DataTable7_11
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD106             BNE      ??UART2_1_GetChar_3
    210                        {
    211                         uint8_t uart2_data_char = (uint8_t) ret;
   \                     ??UART2_1_GetChar_2: (+1)
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x4669             MOV      R1,SP
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
    212                         sysmgr_log(&uart2_data_char,1);
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x4668             MOV      R0,SP
   \   00000044   0x.... 0x....      BL       sysmgr_log
    213                        }
    214                        drv_uart1_work.recv_info.read_p = read_next;
   \                     ??UART2_1_GetChar_3: (+1)
   \   00000048   0x....             LDR      R0,??DataTable7_12
   \   0000004A   0x6005             STR      R5,[R0, #+0]
    215          	}
    216          	
    217          	return ret;
   \                     ??UART2_1_GetChar_0: (+1)
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    218          }
    219          
    220          
    221          /********************************************************************/
    222          /*!
    223           * \name	PRG_UART2_1_IRQHandler
    224           * \brief	UART CH1 受信割り込み処理
    225           * \param	
    226           * \return  
    227           * \note	受信バッファに受信データを登録する。
    228           *          受信バッファがFULL時はerrorを+1する。
    229           */
    230          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    231          void UART2_1_IRQHandler( void ) 
    232          //void PRG_UART2_1_IRQHandler( void ) 
    233          {
   \                     UART2_1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    234          	uint8_t		buff;
    235          	int32_t		write_p;
    236          	uint32_t	write_next;
    237          
    238          	// UART CH1 受信割り込み
    239          	if ( seUART2_GetIntFlag( UART2_1, seUART2_RB2FIE_INT ) ) {
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x....             LDR      R0,??DataTable7_14  ;; 0x40000600
   \   00000006   0x.... 0x....      BL       seUART2_GetIntFlag
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD019             BEQ      ??UART2_1_IRQHandler_0
    240          		buff = UART2_1->RXD;
   \   0000000E   0x....             LDR      R0,??DataTable7_15  ;; 0x4000060a
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
    241          
    242          		write_next = drv_uart1_work.recv_info.write_p + 1;
   \   00000012   0x....             LDR      R1,??DataTable7_13
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x1C49             ADDS     R1,R1,#+1
    243          		if (write_next >= DRV_UART1_RECV_BUFF_MAX) {
   \   00000018   0x2280             MOVS     R2,#+128
   \   0000001A   0x0112             LSLS     R2,R2,#+4        ;; #+2048
   \   0000001C   0x4291             CMP      R1,R2
   \   0000001E   0xD300             BCC      ??UART2_1_IRQHandler_1
    244          			write_next = 0;
   \   00000020   0x2100             MOVS     R1,#+0
    245          		}
    246          
    247          		// バッファFULLで無い場合は登録
    248          		if ( drv_uart1_work.recv_info.read_p != write_next ) {
   \                     ??UART2_1_IRQHandler_1: (+1)
   \   00000022   0x....             LDR      R2,??DataTable7_12
   \   00000024   0x6812             LDR      R2,[R2, #+0]
   \   00000026   0x428A             CMP      R2,R1
   \   00000028   0xD006             BEQ      ??UART2_1_IRQHandler_2
    249          			drv_uart1_work.recv_info.rcv_buff[drv_uart1_work.recv_info.write_p] = buff;
   \   0000002A   0x....             LDR      R2,??DataTable7_3
   \   0000002C   0x....             LDR      R3,??DataTable7_13
   \   0000002E   0x681B             LDR      R3,[R3, #+0]
   \   00000030   0x54D0             STRB     R0,[R2, R3]
    250          			drv_uart1_work.recv_info.write_p = write_next;
   \   00000032   0x....             LDR      R0,??DataTable7_13
   \   00000034   0x6001             STR      R1,[R0, #+0]
   \   00000036   0xE004             B        ??UART2_1_IRQHandler_0
    251          		}
    252          
    253          		// バッファFULL時、エラー発生
    254          		else {
    255          			drv_uart1_work.recv_info.error++;
   \                     ??UART2_1_IRQHandler_2: (+1)
   \   00000038   0x....             LDR      R0,??DataTable7_16
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0x....             LDR      R1,??DataTable7_16
   \   00000040   0x6008             STR      R0,[R1, #+0]
    256          		}
    257          	}
    258          
    259          	buff = UART2_1->RXD;
   \                     ??UART2_1_IRQHandler_0: (+1)
   \   00000042   0x....             LDR      R0,??DataTable7_15  ;; 0x4000060a
   \   00000044   0x8800             LDRH     R0,[R0, #+0]
    260          
    261          	write_next = drv_uart1_work.recv_info.write_p + 1;
   \   00000046   0x....             LDR      R1,??DataTable7_13
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0x1C49             ADDS     R1,R1,#+1
    262          	if (write_next >= DRV_UART1_RECV_BUFF_MAX) {
   \   0000004C   0x2280             MOVS     R2,#+128
   \   0000004E   0x0112             LSLS     R2,R2,#+4        ;; #+2048
   \   00000050   0x4291             CMP      R1,R2
   \   00000052   0xD300             BCC      ??UART2_1_IRQHandler_3
    263          		write_next = 0;
   \   00000054   0x2100             MOVS     R1,#+0
    264          	}
    265          
    266          	// バッファFULLで無い場合は登録
    267          	if ( drv_uart1_work.recv_info.read_p != write_next ) {
   \                     ??UART2_1_IRQHandler_3: (+1)
   \   00000056   0x....             LDR      R2,??DataTable7_12
   \   00000058   0x6812             LDR      R2,[R2, #+0]
   \   0000005A   0x428A             CMP      R2,R1
   \   0000005C   0xD006             BEQ      ??UART2_1_IRQHandler_4
    268          		drv_uart1_work.recv_info.rcv_buff[drv_uart1_work.recv_info.write_p] = buff;
   \   0000005E   0x....             LDR      R2,??DataTable7_3
   \   00000060   0x....             LDR      R3,??DataTable7_13
   \   00000062   0x681B             LDR      R3,[R3, #+0]
   \   00000064   0x54D0             STRB     R0,[R2, R3]
    269          		drv_uart1_work.recv_info.write_p = write_next;
   \   00000066   0x....             LDR      R0,??DataTable7_13
   \   00000068   0x6001             STR      R1,[R0, #+0]
   \   0000006A   0xE004             B        ??UART2_1_IRQHandler_5
    270          	}
    271          
    272          	// バッファFULL時、エラー発生
    273          	else {
    274          		drv_uart1_work.recv_info.error++;
   \                     ??UART2_1_IRQHandler_4: (+1)
   \   0000006C   0x....             LDR      R0,??DataTable7_16
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x1C40             ADDS     R0,R0,#+1
   \   00000072   0x....             LDR      R1,??DataTable7_16
   \   00000074   0x6008             STR      R0,[R1, #+0]
    275          	}
    276          
    277          
    278          //	seUART2_DisableInt( UART2_1, seUART2_RB1FIE_INT );
    279          //	seUART2_DisableInt( UART2_1, seUART2_RB2FIE_INT );
    280          }
   \                     ??UART2_1_IRQHandler_5: (+1)
   \   00000076   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0xE000ED1C         DC32     0xe000ed1c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     drv_uart1_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     InitStruct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x0000FFFE         DC32     0xfffe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x0000FFFB         DC32     0xfffb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x0000FFFD         DC32     0xfffd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x0000FFEF         DC32     0xffef

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     UART2_CH1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     usb_log_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     usb_console_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     drv_uart1_work+0x808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     drv_uart1_work+0x804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x40000600         DC32     0x40000600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x4000060A         DC32     0x4000060a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x........         DC32     drv_uart1_work+0x80C
    281          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   NVIC_EnableIRQ
      20   NVIC_SetPriority
      16   UART2_1_GetChar
        16   -> sysmgr_log
       8   UART2_1_IRQHandler
         8   -> seUART2_GetIntFlag
       8   drv_uart2_1_init
         8   -> NVIC_EnableIRQ
         8   -> NVIC_SetPriority
         8   -> __aeabi_memset
         8   -> seUART2_Enable
         8   -> seUART2_EnableInt
         8   -> seUART2_Init
         8   -> seUART2_SetBaudRate
      24   drv_uart2_1_send
        24   -> seUART2_Send
        24   -> sysmgr_log
       8   drv_uart2_1_start
         8   -> seUART2_Enable
       8   drv_uart2_1_stop
         8   -> seUART2_Disable


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       8  InitStruct
      22  NVIC_EnableIRQ
     132  NVIC_SetPriority
      80  UART2_1_GetChar
     120  UART2_1_IRQHandler
    2064  drv_uart1_work
     178  drv_uart2_1_init
      66  drv_uart2_1_send
      12  drv_uart2_1_start
      12  drv_uart2_1_stop

 
 2 072 bytes in section .bss
   690 bytes in section .text
 
   690 bytes of CODE memory
 2 072 bytes of DATA memory

Errors: none
Warnings: 2
