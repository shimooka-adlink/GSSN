///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM      17/May/2019  13:32:06
// Copyright 1999-2017 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_flash.c
//    Command line =  
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_flash.c -D
//        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_B -lCN
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
//        -lA
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
//        --diag_suppress Pe177,Pe111,Pa082 -o
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --no_clustering --no_scheduling --debug --endian=little
//        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
//        (x86)\IAR Systems\Embedded Workbench
//        7.5\arm\INC\c\DLib_Config_Normal.h" -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
//        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
//        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
//        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
//        -I
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
//        -Ol
//    Locale       =  Japanese_Japan.932
//    List file    =  
//        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List\man_flash.s
//
///////////////////////////////////////////////////////////////////////////////

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__dlib_full_locale_support", "0"
        AAPCS BASE,INTERWORK
        PRESERVE8
        REQUIRE8

        #define SHT_PROGBITS 0x1

        EXTERN __aeabi_idivmod
        EXTERN clrl_W25Q_WriteEnable
        EXTERN ctrl_W25Q_IsBusy
        EXTERN ctrl_W25Q_erase_64k_block_req
        EXTERN ctrl_W25Q_erase_all_req
        EXTERN ctrl_W25Q_erase_sector_req
        EXTERN ctrl_W25Q_init
        EXTERN ctrl_W25Q_read
        EXTERN ctrl_W25Q_write_page
        EXTERN man_memory_alloc
        EXTERN man_timer_get_1ms_count
        EXTERN man_timer_get_elapsed_time
        EXTERN memcmp

        PUBLIC man_flash_erase_all
        PUBLIC man_flash_erase_block
        PUBLIC man_flash_erase_page
        PUBLIC man_flash_init
        PUBLIC man_flash_main
        PUBLIC man_flash_read
        PUBLIC man_flash_work
        PUBLIC man_flash_write_page
        
          CFI Names cfiNames0
          CFI StackFrame CFA R13 DATA
          CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
          CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, R13:32, R14:32
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 4
          CFI ReturnAddress R14 CODE
          CFI CFA R13+0
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 Undefined
          CFI R14 SameValue
          CFI EndCommon cfiCommon0
        
// C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_flash.c
//    1 
//    2 /**
//    3   ******************************************************************************
//    4   * @file    man_flash.c
//    5   * @author  コア
//    6   * @version V1.0
//    7   * @date    2018.3.19
//    8   * @brief   外部FLASHを管理する
//    9   ******************************************************************************
//   10   * @attention
//   11   *
//   12   *****************************************************************************
//   13 */
//   14 
//   15 #include <string.h>
//   16 #include <stdio.h>
//   17 #include <stdlib.h>
//   18 
//   19 #include "board.h"
//   20 #include "man_flash.h"
//   21 #include "man_memory.h"
//   22 #include "man_timer.h"
//   23 
//   24 #include "gnss_gw_common.h"
//   25 #include "ctrl_W25Q.h"
//   26 #include "se_spia.h"
//   27 #include "man_usb.h"
//   28 
//   29 
//   30 #pragma section = "APL_PRG_BLOCK"
//   31 
//   32 
//   33 
//   34 // 要求
//   35 #define	MAN_FLASH_REQ_CMD_NON			0		// 要求待ち
//   36 #define	MAN_FLASH_REQ_CMD_ERASE_ALL		1		// ERASE ALL
//   37 #define	MAN_FLASH_REQ_CMD_ERASE_BLOCK	2		// ERASE BLOCK(64kB)
//   38 
//   39 // FLASH管理シーケンス
//   40 typedef enum {
//   41 	MAN_FLASH_SEQ_READY,					// 00 : 要求待ち
//   42 
//   43 	MAN_FLASH_SEQ_ERASE_ALL_REQ,			// 01 : erase all要求
//   44 	MAN_FLASH_SEQ_ERASE_ALL_WAIT,			// 02 : erase all完了待ち
//   45 	MAN_FLASH_SEQ_ERASE_BLOCK_REQ,			// 03 : erase block初期化
//   46 	MAN_FLASH_SEQ_ERASE_BLOCK_WAIT,			// 04 : erase block完了待ち
//   47 } man_flash_seq_def;
//   48 
//   49 
//   50 
//   51 /************************************************************************/
//   52 /* declaration of structure                                             */
//   53 /************************************************************************/
//   54 
//   55 // 要求
//   56 typedef struct _man_flash_req_info_t{
//   57 	int32_t						req_cmd;
//   58 	int32_t						addr;		// 先頭アドレス
//   59 	int32_t						num;		// 
//   60 	int32_t						id;
//   61 	func_man_flash				callback;
//   62 
//   63 	int32_t						counter;
//   64 } man_flash_req_info_t;
//   65 
//   66 
//   67 // FLASH管理ワーク
//   68 typedef struct _man_flash_work_t {
//   69 	man_flash_seq_def			sequense;			// シーケンス
//   70 	man_flash_req_info_t		request;			// 要求
//   71 	uint32_t					start_time;
//   72 } man_flash_work_t;
//   73 
//   74 
//   75 /************************************************************************/
//   76 /* definition of variables                                              */
//   77 /************************************************************************/
//   78 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
//   79 man_flash_work_t			man_flash_work;
man_flash_work:
        DS8 32
//   80 
//   81 
//   82 /********************************************************************/
//   83 /*	callback関数                                                    */
//   84 /********************************************************************/
//   85 
//   86 /********************************************************************/
//   87 /*	static関数                                                      */
//   88 /********************************************************************/
//   89 
//   90 /********************************************************************/
//   91 /*!
//   92  * \name	man_flash_return_callback
//   93  * \brief	callback応答を返す処理
//   94  * \param	status : 通知するステータス
//   95  * \return  なし
//   96  * \note	
//   97  */
//   98 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function man_flash_return_callback
        THUMB
//   99 static void man_flash_return_callback( int32_t status )
//  100 {
man_flash_return_callback:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//  101 	// callback関数で終了通知
//  102 	if (man_flash_work.request.callback != NULL) {
        LDR      R1,??DataTable4
        LDR      R1,[R1, #+20]
        CMP      R1,#+0
        BEQ      ??man_flash_return_callback_0
//  103 		man_flash_work.request.callback(man_flash_work.request.id, status);
        MOVS     R1,R0
        LDR      R0,??DataTable4
        LDR      R0,[R0, #+16]
        LDR      R2,??DataTable4
        LDR      R2,[R2, #+20]
          CFI FunCall
        BLX      R2
//  104 		man_flash_work.request.callback = NULL;
        MOVS     R0,#+0
        LDR      R1,??DataTable4
        STR      R0,[R1, #+20]
//  105 	}
//  106 	man_flash_work.sequense = MAN_FLASH_SEQ_READY;
??man_flash_return_callback_0:
        MOVS     R0,#+0
        LDR      R1,??DataTable4
        STRB     R0,[R1, #+0]
//  107 	man_flash_work.request.req_cmd = MAN_FLASH_REQ_CMD_NON;
        MOVS     R0,#+0
        LDR      R1,??DataTable4
        STR      R0,[R1, #+4]
//  108 }
        POP      {R0,PC}          ;; return
          CFI EndBlock cfiBlock0
//  109 
//  110 
//  111 /********************************************************************/
//  112 /*!
//  113  * \name	man_flash_init
//  114  * \brief	FLASH管理の初期化処理(１回のみ実行)
//  115  * \param	なし
//  116  * \return  なし
//  117  * \note	起動時に、呼ばれること
//  118  */
//  119 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function man_flash_init
        THUMB
//  120 void man_flash_init(void)
//  121 {
man_flash_init:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//  122 	// GPIO初期化
//  123 	ctrl_W25Q_init();
          CFI FunCall ctrl_W25Q_init
        BL       ctrl_W25Q_init
//  124 }
        POP      {R0,PC}          ;; return
          CFI EndBlock cfiBlock1
//  125 
//  126 
//  127 /********************************************************************/
//  128 /*!
//  129  * \name	man_flash_main
//  130  * \brief	FLASHのメイン処理
//  131  * \param	なし
//  132  * \return  なし
//  133  * \note	毎回、呼ばれること
//  134  */
//  135 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function man_flash_main
        THUMB
//  136 void man_flash_main( void )
//  137 {
man_flash_main:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//  138 	int32_t		ret;
//  139 	uint32_t	delay;
//  140 
//  141 
//  142 	// ******************************
//  143 	//    要求処理
//  144 	// ******************************
//  145 	switch (man_flash_work.request.req_cmd) {
        LDR      R0,??DataTable4
        LDR      R0,[R0, #+4]
        CMP      R0,#+0
        BEQ      ??man_flash_main_0
        CMP      R0,#+2
        BEQ      ??man_flash_main_1
        BCC      ??man_flash_main_2
        B        ??man_flash_main_3
//  146 	case MAN_FLASH_REQ_CMD_NON:
//  147 		break;
??man_flash_main_0:
        B        ??man_flash_main_3
//  148 	case MAN_FLASH_REQ_CMD_ERASE_ALL:
//  149 		if (man_flash_work.sequense == MAN_FLASH_SEQ_READY) {
??man_flash_main_2:
        LDR      R0,??DataTable4
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??man_flash_main_4
//  150 			man_flash_work.sequense = MAN_FLASH_SEQ_ERASE_ALL_REQ;
        MOVS     R0,#+1
        LDR      R1,??DataTable4
        STRB     R0,[R1, #+0]
//  151 		}
//  152 		break;
??man_flash_main_4:
        B        ??man_flash_main_3
//  153 	case MAN_FLASH_REQ_CMD_ERASE_BLOCK:
//  154 		if (man_flash_work.sequense == MAN_FLASH_SEQ_READY) {
??man_flash_main_1:
        LDR      R0,??DataTable4
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??man_flash_main_5
//  155 			man_flash_work.request.counter = 0;
        MOVS     R0,#+0
        LDR      R1,??DataTable4
        STR      R0,[R1, #+24]
//  156 			man_flash_work.sequense = MAN_FLASH_SEQ_ERASE_BLOCK_REQ;
        MOVS     R0,#+3
        LDR      R1,??DataTable4
        STRB     R0,[R1, #+0]
//  157 		}
//  158 		break;
//  159 	}
//  160 
//  161 
//  162 	// ******************************
//  163 	//    シーケンス処理
//  164 	// ******************************
//  165 	switch (man_flash_work.sequense) {
??man_flash_main_5:
??man_flash_main_3:
        LDR      R0,??DataTable4
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??man_flash_main_6
        CMP      R0,#+2
        BEQ      ??man_flash_main_7
        BCC      ??man_flash_main_8
        CMP      R0,#+4
        BEQ      ??man_flash_main_9
        BCC      ??man_flash_main_10
        B        ??man_flash_main_11
//  166 	case MAN_FLASH_SEQ_READY:
//  167 		break;
??man_flash_main_6:
        B        ??man_flash_main_11
//  168 	case MAN_FLASH_SEQ_ERASE_ALL_REQ:
//  169 		ret = clrl_W25Q_WriteEnable();
??man_flash_main_8:
          CFI FunCall clrl_W25Q_WriteEnable
        BL       clrl_W25Q_WriteEnable
//  170 		if (ret >= 0) {
        CMP      R0,#+0
        BMI      ??man_flash_main_12
//  171 			ret = ctrl_W25Q_erase_all_req();
          CFI FunCall ctrl_W25Q_erase_all_req
        BL       ctrl_W25Q_erase_all_req
//  172 		}
//  173 		if (ret >= 0) {
??man_flash_main_12:
        CMP      R0,#+0
        BMI      ??man_flash_main_13
//  174 			man_flash_work.sequense = MAN_FLASH_SEQ_ERASE_ALL_WAIT;
        MOVS     R0,#+2
        LDR      R1,??DataTable4
        STRB     R0,[R1, #+0]
//  175 			man_flash_work.start_time = man_timer_get_1ms_count();
          CFI FunCall man_timer_get_1ms_count
        BL       man_timer_get_1ms_count
        LDR      R1,??DataTable4
        STR      R0,[R1, #+28]
        B        ??man_flash_main_14
//  176 		}
//  177 		else {
//  178 			// 失敗を通知する
//  179 			man_flash_return_callback(MAN_FLASH_STATUS_NG);
??man_flash_main_13:
        MOVS     R0,#+0
        MVNS     R0,R0            ;; #-1
          CFI FunCall man_flash_return_callback
        BL       man_flash_return_callback
//  180 		}
//  181 		break;
??man_flash_main_14:
        B        ??man_flash_main_11
//  182 	case MAN_FLASH_SEQ_ERASE_ALL_WAIT:
//  183 		// ERASE完了チェック
//  184 		if (ctrl_W25Q_IsBusy() != 0) {
??man_flash_main_7:
          CFI FunCall ctrl_W25Q_IsBusy
        BL       ctrl_W25Q_IsBusy
        CMP      R0,#+0
        BEQ      ??man_flash_main_15
//  185 			// 完了を通知する
//  186 			man_flash_return_callback(MAN_FLASH_STATUS_OK);
        MOVS     R0,#+0
          CFI FunCall man_flash_return_callback
        BL       man_flash_return_callback
        B        ??man_flash_main_16
//  187 		}
//  188 		else {
//  189 			// 60秒経過しても完了しない場合は異常とする
//  190 			delay = man_timer_get_elapsed_time(man_flash_work.start_time, man_timer_get_1ms_count());
??man_flash_main_15:
          CFI FunCall man_timer_get_1ms_count
        BL       man_timer_get_1ms_count
        MOVS     R1,R0
        LDR      R0,??DataTable4
        LDR      R0,[R0, #+28]
          CFI FunCall man_timer_get_elapsed_time
        BL       man_timer_get_elapsed_time
//  191 			if (delay > 60*1000) {
        LDR      R1,??DataTable4_1  ;; 0xea61
        CMP      R0,R1
        BCC      ??man_flash_main_16
//  192 				// 失敗を通知する
//  193 				man_flash_return_callback(MAN_FLASH_STATUS_NG);
        MOVS     R0,#+0
        MVNS     R0,R0            ;; #-1
          CFI FunCall man_flash_return_callback
        BL       man_flash_return_callback
//  194 			}
//  195 		}
//  196 		break;
??man_flash_main_16:
        B        ??man_flash_main_11
//  197 		
//  198 	case MAN_FLASH_SEQ_ERASE_BLOCK_REQ:
//  199 		// 書込み許可コマンド送信
//  200 		ret = clrl_W25Q_WriteEnable();
??man_flash_main_10:
          CFI FunCall clrl_W25Q_WriteEnable
        BL       clrl_W25Q_WriteEnable
//  201 		if (ret >= 0) {
        CMP      R0,#+0
        BMI      ??man_flash_main_17
//  202 			// 64kB block消去コマンド送信
//  203 			ret = ctrl_W25Q_erase_64k_block_req(man_flash_work.request.addr + man_flash_work.request.counter * MAN_FLASH_BLOCK_SIZE);
        LDR      R0,??DataTable4
        LDR      R0,[R0, #+8]
        LDR      R1,??DataTable4
        LDR      R1,[R1, #+24]
        MOVS     R2,#+128
        LSLS     R2,R2,#+9        ;; #+65536
        MULS     R1,R2,R1
        ADDS     R0,R0,R1
          CFI FunCall ctrl_W25Q_erase_64k_block_req
        BL       ctrl_W25Q_erase_64k_block_req
//  204 		}
//  205 		if (ret >= 0) {
??man_flash_main_17:
        CMP      R0,#+0
        BMI      ??man_flash_main_18
//  206 			man_flash_work.sequense = MAN_FLASH_SEQ_ERASE_BLOCK_WAIT;
        MOVS     R0,#+4
        LDR      R1,??DataTable4
        STRB     R0,[R1, #+0]
//  207 			man_flash_work.start_time = man_timer_get_1ms_count();
          CFI FunCall man_timer_get_1ms_count
        BL       man_timer_get_1ms_count
        LDR      R1,??DataTable4
        STR      R0,[R1, #+28]
        B        ??man_flash_main_19
//  208 		}
//  209 		else {
//  210 			// 失敗を通知する
//  211 			man_flash_return_callback(MAN_FLASH_STATUS_NG);
??man_flash_main_18:
        MOVS     R0,#+0
        MVNS     R0,R0            ;; #-1
          CFI FunCall man_flash_return_callback
        BL       man_flash_return_callback
//  212 		}
//  213 		break;
??man_flash_main_19:
        B        ??man_flash_main_11
//  214 
//  215 	case MAN_FLASH_SEQ_ERASE_BLOCK_WAIT:
//  216 		// ERASE完了チェック
//  217 		if (ctrl_W25Q_IsBusy() != 0) {
??man_flash_main_9:
          CFI FunCall ctrl_W25Q_IsBusy
        BL       ctrl_W25Q_IsBusy
        CMP      R0,#+0
        BEQ      ??man_flash_main_20
//  218 			man_flash_work.request.counter++;
        LDR      R0,??DataTable4
        LDR      R0,[R0, #+24]
        ADDS     R0,R0,#+1
        LDR      R1,??DataTable4
        STR      R0,[R1, #+24]
//  219 			if (man_flash_work.request.num <= man_flash_work.request.counter) {
        LDR      R0,??DataTable4
        LDR      R0,[R0, #+24]
        LDR      R1,??DataTable4
        LDR      R1,[R1, #+12]
        CMP      R0,R1
        BLT      ??man_flash_main_21
//  220 				// 完了を通知する
//  221 				man_flash_return_callback(MAN_FLASH_STATUS_OK);
        MOVS     R0,#+0
          CFI FunCall man_flash_return_callback
        BL       man_flash_return_callback
        B        ??man_flash_main_22
//  222 			}
//  223 			else {
//  224 				// 次のBLOCKの消去を開始する
//  225 				man_flash_work.sequense = MAN_FLASH_SEQ_ERASE_BLOCK_REQ;
??man_flash_main_21:
        MOVS     R0,#+3
        LDR      R1,??DataTable4
        STRB     R0,[R1, #+0]
        B        ??man_flash_main_22
//  226 			}
//  227 		}
//  228 		else {
//  229 			// 60秒経過しても完了しない場合は異常とする
//  230 			delay = man_timer_get_elapsed_time(man_flash_work.start_time, man_timer_get_1ms_count());
??man_flash_main_20:
          CFI FunCall man_timer_get_1ms_count
        BL       man_timer_get_1ms_count
        MOVS     R1,R0
        LDR      R0,??DataTable4
        LDR      R0,[R0, #+28]
          CFI FunCall man_timer_get_elapsed_time
        BL       man_timer_get_elapsed_time
//  231 			if (delay > 60*1000) {
        LDR      R1,??DataTable4_1  ;; 0xea61
        CMP      R0,R1
        BCC      ??man_flash_main_22
//  232 				// 失敗を通知する
//  233 				man_flash_return_callback(MAN_FLASH_STATUS_NG);
        MOVS     R0,#+0
        MVNS     R0,R0            ;; #-1
          CFI FunCall man_flash_return_callback
        BL       man_flash_return_callback
//  234 			}
//  235 		}
//  236 	}
//  237 
//  238 }
??man_flash_main_22:
??man_flash_main_11:
        POP      {R0,PC}          ;; return
          CFI EndBlock cfiBlock2
//  239 
//  240 
//  241 
//  242 /********************************************************************/
//  243 /*!
//  244  * \name	man_flash_erase_all
//  245  * \brief	FLASH管理の全消去処理
//  246  * \param	id       : ユニーク番号
//  247  *          callback : 完了を通知するcallback関数
//  248  * \return   0: 成功
//  249  *          -1:失敗
//  250  * \note	各ファイル書き込み時に、呼ばれる
//  251  */
//  252 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function man_flash_erase_all
          CFI NoCalls
        THUMB
//  253 int32_t  man_flash_erase_all(int32_t id, func_man_flash callback)
//  254 {
man_flash_erase_all:
        PUSH     {R4}
          CFI R4 Frame(CFA, -4)
          CFI CFA R13+4
        MOVS     R2,R0
//  255 	int32_t	ret=0;
        MOVS     R0,#+0
//  256 
//  257 
//  258 	// 要求を保存する
//  259 	man_flash_work.request.req_cmd = MAN_FLASH_REQ_CMD_ERASE_ALL;
        MOVS     R3,#+1
        LDR      R4,??DataTable4
        STR      R3,[R4, #+4]
//  260 	man_flash_work.request.id = id;
        LDR      R3,??DataTable4
        STR      R2,[R3, #+16]
//  261 	man_flash_work.request.callback = callback;
        LDR      R2,??DataTable4
        STR      R1,[R2, #+20]
//  262 
//  263 	return ret;
        POP      {R4}
          CFI R4 SameValue
          CFI CFA R13+0
        BX       LR               ;; return
//  264 }
          CFI EndBlock cfiBlock3
//  265 
//  266 
//  267 /********************************************************************/
//  268 /*!
//  269  * \name	man_flash_erase_block
//  270  * \brief	FLASHのBLOCK(64kB)消去処理
//  271  * \param	addr     : 消去する先頭アドレス
//  272  *          num      : 消去するBLOCK数
//  273  *          id       : ユニーク番号
//  274  *          callback : 完了を通知するcallback関数
//  275  * \return   0: 成功
//  276  *          -1:失敗
//  277  * \note	
//  278  */
//  279 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function man_flash_erase_block
        THUMB
//  280 int32_t  man_flash_erase_block(int32_t addr, int32_t num, int32_t id, func_man_flash callback)
//  281 {
man_flash_erase_block:
        PUSH     {R2,R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R3
//  282 	int32_t	ret=-1;
        MOVS     R7,#+0
        MVNS     R7,R7            ;; #-1
//  283 
//  284 	// BLOCKの先頭アドレス && BLOCK数を指定
//  285 	if ( ((addr % MAN_FLASH_BLOCK_SIZE) == 0) && (num >= 1) ) {
        MOVS     R0,R4
        MOVS     R1,#+128
        LSLS     R1,R1,#+9        ;; #+65536
          CFI FunCall __aeabi_idivmod
        BL       __aeabi_idivmod
        CMP      R1,#+0
        BNE      ??man_flash_erase_block_0
        CMP      R5,#+1
        BLT      ??man_flash_erase_block_0
//  286 		// 要求を保存する
//  287 		man_flash_work.request.req_cmd = MAN_FLASH_REQ_CMD_ERASE_BLOCK;
        MOVS     R0,#+2
        LDR      R1,??DataTable4
        STR      R0,[R1, #+4]
//  288 		man_flash_work.request.addr = addr;
        LDR      R0,??DataTable4
        STR      R4,[R0, #+8]
//  289 		man_flash_work.request.num = num;
        LDR      R0,??DataTable4
        STR      R5,[R0, #+12]
//  290 		man_flash_work.request.id = id;
        LDR      R0,[SP, #+0]
        LDR      R1,??DataTable4
        STR      R0,[R1, #+16]
//  291 		man_flash_work.request.callback = callback;
        LDR      R0,??DataTable4
        STR      R6,[R0, #+20]
//  292 		ret = 0;
        MOVS     R7,#+0
//  293 	}
//  294 
//  295 	return ret;
??man_flash_erase_block_0:
        MOVS     R0,R7
        POP      {R1,R4-R7,PC}    ;; return
//  296 }
          CFI EndBlock cfiBlock4
//  297 
//  298 
//  299 /********************************************************************/
//  300 /*!
//  301  * \name	man_flash_erase_page
//  302  * \brief	FLASHのPAGE(128B)消去処理
//  303  * \param	addr     : 消去する先頭アドレス
//  304  * \return   0: 成功
//  305  *          -1:失敗
//  306  * \note	
//  307  */
//  308 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function man_flash_erase_page
        THUMB
//  309 int32_t  man_flash_erase_page(int32_t addr)
//  310 {
man_flash_erase_page:
        PUSH     {R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+16
        MOVS     R6,R0
//  311 	int32_t		ret=-1;
        MOVS     R4,#+0
        MVNS     R4,R4            ;; #-1
//  312 	uint32_t	Timer = 10000;		// 正常時は1300程度
        LDR      R5,??DataTable4_2  ;; 0x2710
//  313 
//  314 
//  315 	// PAGEの先頭アドレスを指定
//  316 	if ( (addr % MAN_FLASH_PAGE_SIZE) == 0 ) {
        MOVS     R0,R6
        MOVS     R1,#+128
        LSLS     R1,R1,#+1        ;; #+256
          CFI FunCall __aeabi_idivmod
        BL       __aeabi_idivmod
        CMP      R1,#+0
        BNE      ??man_flash_erase_page_0
//  317 
//  318 		// 書込み許可コマンド送信
//  319 		ret = clrl_W25Q_WriteEnable();
          CFI FunCall clrl_W25Q_WriteEnable
        BL       clrl_W25Q_WriteEnable
        MOVS     R4,R0
//  320 		if (ret >= 0) {
        CMP      R4,#+0
        BMI      ??man_flash_erase_page_1
//  321 			// sector消去コマンド送信
//  322 			ret = ctrl_W25Q_erase_sector_req(addr);
        MOVS     R0,R6
          CFI FunCall ctrl_W25Q_erase_sector_req
        BL       ctrl_W25Q_erase_sector_req
        MOVS     R4,R0
//  323 		}
//  324 
//  325 		if (ret >= 0) {
??man_flash_erase_page_1:
        CMP      R4,#+0
        BMI      ??man_flash_erase_page_0
//  326 			// 完了待ち
//  327 			while (ctrl_W25Q_IsBusy() == 0) {
??man_flash_erase_page_2:
          CFI FunCall ctrl_W25Q_IsBusy
        BL       ctrl_W25Q_IsBusy
        CMP      R0,#+0
        BNE      ??man_flash_erase_page_0
//  328 				if (--Timer == 0) {
        SUBS     R5,R5,#+1
        CMP      R5,#+0
        BNE      ??man_flash_erase_page_2
//  329 					ret = -1;
        MOVS     R4,#+0
        MVNS     R4,R4            ;; #-1
//  330 					break;
//  331 				}
//  332 			}
//  333 		}
//  334 	}
//  335 
//  336 	return ret;
??man_flash_erase_page_0:
        MOVS     R0,R4
        POP      {R4-R6,PC}       ;; return
//  337 }
          CFI EndBlock cfiBlock5

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable4:
        DC32     man_flash_work

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable4_1:
        DC32     0xea61

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable4_2:
        DC32     0x2710
//  338 
//  339 
//  340 /********************************************************************/
//  341 /*!
//  342  * \name	man_flash_write_page
//  343  * \brief	FLASH PAGE(256Byte)の書き込み処理
//  344  * \param	addr   : flash 書き込みアドレス
//  345  *          data   : flash 書き込みデータ
//  346  *          length : データ長
//  347  * \return  0: 成功  -1:失敗
//  348  * \note	各ファイル書き込み時に、呼ばれる
//  349  */
//  350 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function man_flash_write_page
        THUMB
//  351 int32_t  man_flash_write_page(uint32_t addr , uint8_t *data, int32_t length)
//  352 {
man_flash_write_page:
        PUSH     {R0,R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        MOVS     R7,R1
        MOVS     R6,R2
//  353 	int32_t		ret=-1;
        MOVS     R4,#+0
        MVNS     R4,R4            ;; #-1
//  354 	int32_t		sts;
//  355 	uint8_t		*flash_buff = man_memory_alloc();
          CFI FunCall man_memory_alloc
        BL       man_memory_alloc
        MOVS     R5,R0
//  356 
//  357 	// 256バイトの書き込み
//  358 	sts = ctrl_W25Q_write_page(addr, data, MAN_FLASH_PAGE_SIZE);
        MOVS     R2,#+128
        LSLS     R2,R2,#+1        ;; #+256
        MOVS     R1,R7
        LDR      R0,[SP, #+0]
          CFI FunCall ctrl_W25Q_write_page
        BL       ctrl_W25Q_write_page
//  359 	if (sts >= 0) {
        CMP      R0,#+0
        BMI      ??man_flash_write_page_0
//  360 		// 256バイトの読み込み
//  361 		sts = ctrl_W25Q_read(addr, flash_buff, length);
        MOVS     R2,R6
        MOVS     R1,R5
        LDR      R0,[SP, #+0]
          CFI FunCall ctrl_W25Q_read
        BL       ctrl_W25Q_read
//  362 		if (sts >= 0) {
        CMP      R0,#+0
        BMI      ??man_flash_write_page_0
//  363 			if (memcmp((void const *)data, flash_buff, length) == 0) {
        MOVS     R2,R6
        MOVS     R1,R5
        MOVS     R0,R7
          CFI FunCall memcmp
        BL       memcmp
        CMP      R0,#+0
        BNE      ??man_flash_write_page_0
//  364 				ret = 0;
        MOVS     R4,#+0
//  365 			}
//  366 		}
//  367 	}
//  368 	
//  369 	return ret;
??man_flash_write_page_0:
        MOVS     R0,R4
        POP      {R1,R4-R7,PC}    ;; return
//  370 }
          CFI EndBlock cfiBlock6
//  371 
//  372 
//  373 /********************************************************************/
//  374 /*!
//  375  * \name	man_flash_read
//  376  * \brief	FLASH管理の読み出し処理
//  377  * \param	flash_top  :: 読み出し先頭アドレス
//  378  *          data       :: 読み出したデータ格納エリア
//  379  *          length     :: 読み出しサイズ
//  380  * \return  0: 読み込みOK , -1: FLASH無効　または　読み込み失敗
//  381  * \note	各ファイル読み込み時に、呼ばれる
//  382  */
//  383 /********************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function man_flash_read
        THUMB
//  384 int32_t man_flash_read(int32_t flash_top, uint8_t *data, int32_t length)
//  385 {
man_flash_read:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//  386 	int32_t		ret = -1;
        MOVS     R3,#+0
        MVNS     R3,R3            ;; #-1
//  387 
//  388 	ret = ctrl_W25Q_read(flash_top, data, length);
          CFI FunCall ctrl_W25Q_read
        BL       ctrl_W25Q_read
        MOVS     R3,R0
//  389 
//  390 	return ret;
        MOVS     R0,R3
        POP      {R1,PC}          ;; return
//  391 }
          CFI EndBlock cfiBlock7

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION APL_PRG_BLOCK:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
//  392 
//  393 
// 
//  32 bytes in section .bss
// 598 bytes in section .text
// 
// 598 bytes of CODE memory
//  32 bytes of DATA memory
//
//Errors: none
//Warnings: none
