###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       17/May/2019  13:31:43
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_charge.c
#    Command line =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_charge.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_A -lCN
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        -lA
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List\man_charge.lst
#    Object file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj\man_charge.o
#
###############################################################################

C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\apl\man_charge.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    man_charge.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    2017.10.2
      8            * @brief   充電開始・充電終了・外部電源ON・外部電源OFFを管理する
      9            ******************************************************************************
     10            $Id: man_charge.c 246 2018-07-27 06:18:43Z shitaoka $
     11            * @attention
     12            *
     13            *****************************************************************************
     14          */
     15          
     16          #include <string.h>
     17          #include <stdio.h>
     18          #include <stdlib.h>
     19          
     20          #include "board.h"
     21          #include "system_manager.h"
     22          #include "ctrl_BQ24160A.h"
     23          #include "gnss_gw_common.h"
     24          #include "man_timer.h"
     25          #include "man_error.h"
     26          #include "man_charge.h"
     27          #include "man_memory.h"
     28          #include "man_usb.h"
     29          #include "man_gpio.h"
     30          
     31          #pragma section = "APL_PRG_BLOCK"
     32          
     33          /************************************************************************/
     34          /* declaration of structure                                             */
     35          /************************************************************************/
     36          
     37          
     38          #define	MAN_CHARGE_INIT_COUNTER		10	// 起動後10秒後のデータから有効とする
     39          
     40          
     41          #define	MAN_CHARGE_MODE_STANDBY		0	// 受信停止
     42          #define	MAN_CHARGE_MODE_ACTIVE		1	// 受信中
     43          
     44          // 電源電圧が3.6Vを超えるとTE ON状態に切り替える
     45          //#define	MAN_CHARGE_TE_VOLTAGE		3600	// 3.6V
     46          #define	MAN_CHARGE_TE_VOLTAGE		4600	// 3.6V
     47          
     48          // 初期化状態
     49          typedef enum {
     50          	MAN_CHARGE_INIT_STATE_NON,				// 未初期化
     51          	MAN_CHARGE_INIT_STATE_REQ,				// 初期化中
     52          	MAN_CHARGE_INIT_STATE_END,				// 初期化完了
     53          } man_charge_init_state_def;
     54          
     55          
     56          // 充電情報管理ワーク
     57          typedef struct _man_charge_work_t {
     58          	uint32_t					mode;			// 動作状態
     59          
     60          	uint32_t					charge_state;	// 充電状態
     61          	uint32_t					ext_state;		// 外部電源状態
     62          	uint32_t					charge_msg;		// メッセージ送信データ
     63          	uint32_t					init_cnt;		// 最初の20秒間は無効とする
     64          	man_charge_init_state_def	init_state;		// 初期化状態
     65          	int32_t						voltage;		// 電源電圧
     66          	int32_t						te_stete;		// TEの状態
     67          	uint32_t					re_init_req;	// 1: 再初期化
     68          
     69          	int32_t						charge_status;	// 充電ステータス
     70          	int32_t						ext_status;		// 外部電源ON/OFFステータス
     71          	int32_t						usb_status;		// USB電源ON/OFFステータス
     72          	int32_t						fault_status;	// 異常状態
     73          } man_charge_work_t;
     74          
     75          
     76          
     77          /************************************************************************/
     78          /* definition of variables                                              */
     79          /************************************************************************/
     80          

   \                                 In section .bss, align 4
     81          man_charge_work_t	man_charge_work;
   \                     man_charge_work:
   \   00000000                      DS8 52
     82          
     83          /********************************************************************/
     84          /*	callback関数                                                    */
     85          /********************************************************************/
     86          
     87          /********************************************************************/
     88          /*	static関数                                                      */
     89          /********************************************************************/
     90          
     91          /********************************************************************/
     92          /*	extern関数                                                      */
     93          /********************************************************************/
     94          
     95          /********************************************************************/
     96          /*!
     97           * \name	man_charge_init
     98           * \brief	充電情報管理の初期化処理
     99           * \param	なし
    100           * \return   0: 正常
    101           *          -1: 異常
    102           * \note	起動時に、呼ばれること
    103           */
    104          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    105          int32_t man_charge_init(void)
    106          {
   \                     man_charge_init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    107          	int32_t	ret;
    108          
    109          	// MPL3115A2の開始処理
    110          	ret = ctrl_BQ24160A_start();
   \   00000002   0x.... 0x....      BL       ctrl_BQ24160A_start
   \   00000006   0x0004             MOVS     R4,R0
    111          
    112          	// 内部変数を初期化する
    113          	memset(&man_charge_work, 0, sizeof(man_charge_work_t));
   \   00000008   0x2134             MOVS     R1,#+52
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x....             LDR      R5,??DataTable7
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x.... 0x....      BL       __aeabi_memset
    114          
    115          	// 受信開始
    116          	man_charge_work.mode = MAN_CHARGE_MODE_ACTIVE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x....             LDR      R1,??DataTable7
   \   00000018   0x6008             STR      R0,[R1, #+0]
    117          
    118          	return ret;
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    119          }
    120          
    121          
    122          
    123          
    124          
    125          /********************************************************************/
    126          /*!
    127           * \name	man_charge_1000ms_main
    128           * \brief	充電情報管理のmain処理
    129           * \param	なし
    130           * \return  なし
    131           * \note	1000ms毎に呼ばれること
    132           */
    133          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    134          void man_charge_1000ms_main(void)
    135          {
   \                     man_charge_1000ms_main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    136          	int32_t		ret=-1;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x43C0             MVNS     R0,R0            ;; #-1
    137          
    138          	if (man_charge_work.mode == MAN_CHARGE_MODE_ACTIVE) {
   \   00000006   0x....             LDR      R0,??DataTable7
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD000             BEQ      .+4
   \   0000000E   0xE0B7             B        ??man_charge_1000ms_main_0
    139          
    140          		// 初回は電源電圧に合わせる
    141          		if (man_charge_work.init_state == MAN_CHARGE_INIT_STATE_REQ) {
   \   00000010   0x....             LDR      R0,??DataTable7
   \   00000012   0x7D00             LDRB     R0,[R0, #+20]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD113             BNE      ??man_charge_1000ms_main_1
    142          			man_charge_work.init_state = MAN_CHARGE_INIT_STATE_END;
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0x....             LDR      R1,??DataTable7
   \   0000001C   0x7508             STRB     R0,[R1, #+20]
    143          			if (man_charge_work.voltage >= MAN_CHARGE_TE_VOLTAGE) {
   \   0000001E   0x....             LDR      R0,??DataTable7
   \   00000020   0x6980             LDR      R0,[R0, #+24]
   \   00000022   0x....             LDR      R1,??DataTable6  ;; 0x11f8
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xDB03             BLT      ??man_charge_1000ms_main_2
    144          				man_charge_work.te_stete = BQ24160A_REQ_TE_ON;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR      R1,??DataTable7
   \   0000002C   0x61C8             STR      R0,[R1, #+28]
   \   0000002E   0xE002             B        ??man_charge_1000ms_main_3
    145          			}
    146          			else {
    147          				man_charge_work.te_stete = BQ24160A_REQ_TE_OFF;
   \                     ??man_charge_1000ms_main_2: (+1)
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x....             LDR      R1,??DataTable7
   \   00000034   0x61C8             STR      R0,[R1, #+28]
    148          			}
    149          			ctrl_BQ24160A_init_setting(man_charge_work.te_stete);
   \                     ??man_charge_1000ms_main_3: (+1)
   \   00000036   0x....             LDR      R0,??DataTable7
   \   00000038   0x69C0             LDR      R0,[R0, #+28]
   \   0000003A   0x.... 0x....      BL       ctrl_BQ24160A_init_setting
   \   0000003E   0xE013             B        ??man_charge_1000ms_main_4
    150          		}
    151          
    152          		// TE OFF状態で3.6Vを超えるとTE ON状態に切り替える
    153          		else if (man_charge_work.init_state == MAN_CHARGE_INIT_STATE_END) {
   \                     ??man_charge_1000ms_main_1: (+1)
   \   00000040   0x....             LDR      R0,??DataTable7
   \   00000042   0x7D00             LDRB     R0,[R0, #+20]
   \   00000044   0x2802             CMP      R0,#+2
   \   00000046   0xD10F             BNE      ??man_charge_1000ms_main_4
    154          			if (man_charge_work.te_stete == BQ24160A_REQ_TE_OFF) {
   \   00000048   0x....             LDR      R0,??DataTable7
   \   0000004A   0x69C0             LDR      R0,[R0, #+28]
   \   0000004C   0x2801             CMP      R0,#+1
   \   0000004E   0xD10B             BNE      ??man_charge_1000ms_main_4
    155          				if (man_charge_work.voltage >= MAN_CHARGE_TE_VOLTAGE) {
   \   00000050   0x....             LDR      R0,??DataTable7
   \   00000052   0x6980             LDR      R0,[R0, #+24]
   \   00000054   0x....             LDR      R1,??DataTable6  ;; 0x11f8
   \   00000056   0x4288             CMP      R0,R1
   \   00000058   0xDB06             BLT      ??man_charge_1000ms_main_4
    156          					man_charge_work.te_stete = BQ24160A_REQ_TE_ON;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x....             LDR      R1,??DataTable7
   \   0000005E   0x61C8             STR      R0,[R1, #+28]
    157          					ctrl_BQ24160A_init_setting(man_charge_work.te_stete);
   \   00000060   0x....             LDR      R0,??DataTable7
   \   00000062   0x69C0             LDR      R0,[R0, #+28]
   \   00000064   0x.... 0x....      BL       ctrl_BQ24160A_init_setting
    158          				}
    159          			}
    160          		}
    161          
    162          		// 再初期化要求時
    163          		if (man_charge_work.re_init_req == 1) {
   \                     ??man_charge_1000ms_main_4: (+1)
   \   00000068   0x....             LDR      R0,??DataTable7
   \   0000006A   0x6A00             LDR      R0,[R0, #+32]
   \   0000006C   0x2801             CMP      R0,#+1
   \   0000006E   0xD115             BNE      ??man_charge_1000ms_main_5
    164          			// 再設定は電源電圧に合わせる
    165          			if (man_charge_work.voltage >= MAN_CHARGE_TE_VOLTAGE) {
   \   00000070   0x....             LDR      R0,??DataTable7
   \   00000072   0x6980             LDR      R0,[R0, #+24]
   \   00000074   0x....             LDR      R1,??DataTable6  ;; 0x11f8
   \   00000076   0x4288             CMP      R0,R1
   \   00000078   0xDB03             BLT      ??man_charge_1000ms_main_6
    166          				man_charge_work.te_stete = BQ24160A_REQ_TE_ON;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x....             LDR      R1,??DataTable7
   \   0000007E   0x61C8             STR      R0,[R1, #+28]
   \   00000080   0xE002             B        ??man_charge_1000ms_main_7
    167          			}
    168          			else {
    169          				man_charge_work.te_stete = BQ24160A_REQ_TE_OFF;
   \                     ??man_charge_1000ms_main_6: (+1)
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x....             LDR      R1,??DataTable7
   \   00000086   0x61C8             STR      R0,[R1, #+28]
    170          			}
    171          			ret = ctrl_BQ24160A_init_setting(man_charge_work.te_stete);
   \                     ??man_charge_1000ms_main_7: (+1)
   \   00000088   0x....             LDR      R0,??DataTable7
   \   0000008A   0x69C0             LDR      R0,[R0, #+28]
   \   0000008C   0x.... 0x....      BL       ctrl_BQ24160A_init_setting
    172          			if (ret >= 0) {
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD475             BMI      ??man_charge_1000ms_main_0
    173          				man_charge_work.re_init_req = 0;
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0x....             LDR      R1,??DataTable7
   \   00000098   0x6208             STR      R0,[R1, #+32]
   \   0000009A   0xE071             B        ??man_charge_1000ms_main_0
    174          			}
    175          		}
    176          
    177          		// 通常時
    178          		else {
    179          			ret = ctrl_BQ24160A_get_charge_status(&man_charge_work.charge_status, &man_charge_work.ext_status, &man_charge_work.usb_status, &man_charge_work.fault_status);
   \                     ??man_charge_1000ms_main_5: (+1)
   \   0000009C   0x....             LDR      R3,??DataTable7_1
   \   0000009E   0x....             LDR      R2,??DataTable7_2
   \   000000A0   0x....             LDR      R1,??DataTable7_3
   \   000000A2   0x....             LDR      R0,??DataTable7_4
   \   000000A4   0x.... 0x....      BL       ctrl_BQ24160A_get_charge_status
    180          			if (ret >= 0) {
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD467             BMI      ??man_charge_1000ms_main_8
    181          				// fault_status判定
    182          				switch (man_charge_work.fault_status) {
   \   000000AC   0x....             LDR      R0,??DataTable7
   \   000000AE   0x6B00             LDR      R0,[R0, #+48]
   \   000000B0   0x2802             CMP      R0,#+2
   \   000000B2   0xD011             BEQ      ??man_charge_1000ms_main_9
   \   000000B4   0xD310             BCC      ??man_charge_1000ms_main_10
   \   000000B6   0x2804             CMP      R0,#+4
   \   000000B8   0xD00A             BEQ      ??man_charge_1000ms_main_11
   \   000000BA   0xD305             BCC      ??man_charge_1000ms_main_12
   \   000000BC   0x2806             CMP      R0,#+6
   \   000000BE   0xD00B             BEQ      ??man_charge_1000ms_main_9
   \   000000C0   0xD30A             BCC      ??man_charge_1000ms_main_9
   \   000000C2   0x2807             CMP      R0,#+7
   \   000000C4   0xD004             BEQ      ??man_charge_1000ms_main_11
   \   000000C6   0xE007             B        ??man_charge_1000ms_main_10
    183          				case BQ24160A_REG_ERROR_WDT:			// 03 : ウォッチドッグ・タイマ満了
    184          					man_charge_work.re_init_req = 1;
   \                     ??man_charge_1000ms_main_12: (+1)
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0x....             LDR      R1,??DataTable7
   \   000000CC   0x6208             STR      R0,[R1, #+32]
    185          					break;
   \   000000CE   0xE003             B        ??man_charge_1000ms_main_10
    186          				case BQ24160A_REG_ERROR_ST:				// 04 : 安全タイマーの期限切れ
    187          				case BQ24160A_REG_ERROR_BATT:			// 07 : バッテリ異常
    188          					man_charge_work.re_init_req = 1;
   \                     ??man_charge_1000ms_main_11: (+1)
   \   000000D0   0x2001             MOVS     R0,#+1
   \   000000D2   0x....             LDR      R1,??DataTable7
   \   000000D4   0x6208             STR      R0,[R1, #+32]
    189          //					man_error_setting(MAN_ERROR_MAN_CHG, man_charge_work.fault_status, man_charge_work.charge_status);
    190          					break;
   \   000000D6   0xE7FF             B        ??man_charge_1000ms_main_10
    191          				case BQ24160A_REG_ERROR_TEMP:			// 02 : バッテリ温度エラー
    192          				case BQ24160A_REG_ERROR_IN:				// 05 : INからの充電障害
    193          				case BQ24160A_REG_ERROR_USB:			// 06 : USBからの充電障害
    194          					break;
    195          				}
    196          
    197          				// ウォッチドッグ・タイマ満了時のcharge_statusデータは採用しない
    198          				if (man_charge_work.re_init_req == 0) {
   \                     ??man_charge_1000ms_main_9: (+1)
   \                     ??man_charge_1000ms_main_10: (+1)
   \   000000D8   0x....             LDR      R0,??DataTable7
   \   000000DA   0x6A00             LDR      R0,[R0, #+32]
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD11C             BNE      ??man_charge_1000ms_main_13
    199          					// charge_status判定
    200          					switch (man_charge_work.charge_status) {
   \   000000E0   0x....             LDR      R0,??DataTable7
   \   000000E2   0x6A40             LDR      R0,[R0, #+36]
   \   000000E4   0x2800             CMP      R0,#+0
   \   000000E6   0x2802             CMP      R0,#+2
   \   000000E8   0xD908             BLS      ??man_charge_1000ms_main_14
   \   000000EA   0x1EC0             SUBS     R0,R0,#+3
   \   000000EC   0x2801             CMP      R0,#+1
   \   000000EE   0xD909             BLS      ??man_charge_1000ms_main_15
   \   000000F0   0x1E80             SUBS     R0,R0,#+2
   \   000000F2   0xD00B             BEQ      ??man_charge_1000ms_main_16
   \   000000F4   0x1E40             SUBS     R0,R0,#+1
   \   000000F6   0x2801             CMP      R0,#+1
   \   000000F8   0xD90C             BLS      ??man_charge_1000ms_main_17
   \   000000FA   0xE00E             B        ??man_charge_1000ms_main_13
    201          					case BQ24160A_REG_STAT_NO_SOURCE:			// 00 : 有効なソースが検出されませんでした
    202          					case BQ24160A_REG_STAT_IN_READY:			// 01 : IN Ready
    203          					case BQ24160A_REG_STAT_USB_READY:			// 02 : USB Ready
    204          						man_charge_work.charge_state = MAN_CHARGE_STAT_NON;
   \                     ??man_charge_1000ms_main_14: (+1)
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x....             LDR      R1,??DataTable7
   \   00000100   0x6048             STR      R0,[R1, #+4]
    205          						break;
   \   00000102   0xE00A             B        ??man_charge_1000ms_main_13
    206          					case BQ24160A_REG_STAT_CHARGE_IN:			// 03 : INからの充電
    207          					case BQ24160A_REG_STAT_CHARGE_USB:			// 04 : USBからの充電
    208          						man_charge_work.charge_state = MAN_CHARGE_STAT_CHARGE;
   \                     ??man_charge_1000ms_main_15: (+1)
   \   00000104   0x2001             MOVS     R0,#+1
   \   00000106   0x....             LDR      R1,??DataTable7
   \   00000108   0x6048             STR      R0,[R1, #+4]
    209          						break;
   \   0000010A   0xE006             B        ??man_charge_1000ms_main_13
    210          
    211          					case BQ24160A_REG_STAT_CHARGE_DONE:			// 05 : 充電完了
    212          						man_charge_work.charge_state = MAN_CHARGE_STAT_DONE;
   \                     ??man_charge_1000ms_main_16: (+1)
   \   0000010C   0x2002             MOVS     R0,#+2
   \   0000010E   0x....             LDR      R1,??DataTable7
   \   00000110   0x6048             STR      R0,[R1, #+4]
    213          						break;
   \   00000112   0xE002             B        ??man_charge_1000ms_main_13
    214          					case BQ24160A_REG_STAT_NA:					// 06 : NA
    215          					case BQ24160A_REG_STAT_FAULT:				// 07 : 障害
    216          						man_charge_work.charge_state = MAN_CHARGE_STAT_NON;
   \                     ??man_charge_1000ms_main_17: (+1)
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0x....             LDR      R1,??DataTable7
   \   00000118   0x6048             STR      R0,[R1, #+4]
    217          						break;
    218          					}
    219          //					man_charge_work.charge_state = man_charge_work.;
    220          				}
    221          
    222          				
    223          				// ext_status判定
    224          				switch (man_charge_work.ext_status) {
   \                     ??man_charge_1000ms_main_13: (+1)
   \   0000011A   0x....             LDR      R0,??DataTable7
   \   0000011C   0x6A80             LDR      R0,[R0, #+40]
   \   0000011E   0x2800             CMP      R0,#+0
   \   00000120   0xD003             BEQ      ??man_charge_1000ms_main_18
   \   00000122   0x1E40             SUBS     R0,R0,#+1
   \   00000124   0x2802             CMP      R0,#+2
   \   00000126   0xD904             BLS      ??man_charge_1000ms_main_19
   \   00000128   0xE006             B        ??man_charge_1000ms_main_20
    225          				case BQ24160A_REG_STAT_NORMAL:				// 00 : 外部電源ON(正常)
    226          					man_charge_work.ext_state = MAN_CHARGE_EXTSTAT_ON;
   \                     ??man_charge_1000ms_main_18: (+1)
   \   0000012A   0x2001             MOVS     R0,#+1
   \   0000012C   0x....             LDR      R1,??DataTable7
   \   0000012E   0x6088             STR      R0,[R1, #+8]
    227          					break;
   \   00000130   0xE002             B        ??man_charge_1000ms_main_20
    228          				case BQ24160A_REG_STAT_OVP:					// 01 : 外部電源ON(過電圧保護)
    229          				case BQ24160A_REG_STAT_WEAK:				// 02 : 外部電源ON(弱電圧：充電なし)
    230          				case BQ24160A_REG_STAT_OFF:					// 03 : 外部電源OFF(VIN < VUVLO)
    231          					man_charge_work.ext_state = MAN_CHARGE_EXTSTAT_OFF;
   \                     ??man_charge_1000ms_main_19: (+1)
   \   00000132   0x2000             MOVS     R0,#+0
   \   00000134   0x....             LDR      R1,??DataTable7
   \   00000136   0x6088             STR      R0,[R1, #+8]
    232          					break;
    233          				}
    234          
    235          				// 外部電源端子が接続されたいない時はUSB電源を確認する
    236          				if (man_charge_work.ext_state == MAN_CHARGE_EXTSTAT_OFF) {
   \                     ??man_charge_1000ms_main_20: (+1)
   \   00000138   0x....             LDR      R0,??DataTable7
   \   0000013A   0x6880             LDR      R0,[R0, #+8]
   \   0000013C   0x2800             CMP      R0,#+0
   \   0000013E   0xD10E             BNE      ??man_charge_1000ms_main_21
    237          					// usb_status判定
    238          					switch (man_charge_work.usb_status) {
   \   00000140   0x....             LDR      R0,??DataTable7
   \   00000142   0x6AC0             LDR      R0,[R0, #+44]
   \   00000144   0x2800             CMP      R0,#+0
   \   00000146   0xD003             BEQ      ??man_charge_1000ms_main_22
   \   00000148   0x1E40             SUBS     R0,R0,#+1
   \   0000014A   0x2802             CMP      R0,#+2
   \   0000014C   0xD904             BLS      ??man_charge_1000ms_main_23
   \   0000014E   0xE006             B        ??man_charge_1000ms_main_21
    239          					case BQ24160A_REG_STAT_NORMAL:				// 00 : 外部電源ON(正常)
    240          						man_charge_work.ext_state = MAN_CHARGE_EXTSTAT_ON;
   \                     ??man_charge_1000ms_main_22: (+1)
   \   00000150   0x2001             MOVS     R0,#+1
   \   00000152   0x....             LDR      R1,??DataTable7
   \   00000154   0x6088             STR      R0,[R1, #+8]
    241          						break;
   \   00000156   0xE002             B        ??man_charge_1000ms_main_21
    242          					case BQ24160A_REG_STAT_OVP:					// 01 : 外部電源ON(過電圧保護)
    243          					case BQ24160A_REG_STAT_WEAK:				// 02 : 外部電源ON(弱電圧：充電なし)
    244          					case BQ24160A_REG_STAT_OFF:					// 03 : 外部電源OFF(VIN < VUVLO)
    245          						man_charge_work.ext_state = MAN_CHARGE_EXTSTAT_OFF;
   \                     ??man_charge_1000ms_main_23: (+1)
   \   00000158   0x2000             MOVS     R0,#+0
   \   0000015A   0x....             LDR      R1,??DataTable7
   \   0000015C   0x6088             STR      R0,[R1, #+8]
    246          						break;
    247          					}
    248          				}
    249          
    250          			
    251          				// 起動後MAN_CHARGE_INIT_COUNTER秒以降を有効とする
    252          				if (man_charge_work.init_cnt <= MAN_CHARGE_INIT_COUNTER) {
   \                     ??man_charge_1000ms_main_21: (+1)
   \   0000015E   0x....             LDR      R0,??DataTable7
   \   00000160   0x6900             LDR      R0,[R0, #+16]
   \   00000162   0x280B             CMP      R0,#+11
   \   00000164   0xD20A             BCS      ??man_charge_1000ms_main_8
    253          					man_charge_work.init_cnt++;
   \   00000166   0x....             LDR      R0,??DataTable7
   \   00000168   0x6900             LDR      R0,[R0, #+16]
   \   0000016A   0x1C40             ADDS     R0,R0,#+1
   \   0000016C   0x....             LDR      R1,??DataTable7
   \   0000016E   0x6108             STR      R0,[R1, #+16]
    254          					man_charge_work.ext_state = MAN_CHARGE_EXTSTAT_ON;
   \   00000170   0x2001             MOVS     R0,#+1
   \   00000172   0x....             LDR      R1,??DataTable7
   \   00000174   0x6088             STR      R0,[R1, #+8]
    255          					man_charge_work.charge_state = MAN_CHARGE_STAT_NON;
   \   00000176   0x2000             MOVS     R0,#+0
   \   00000178   0x....             LDR      R1,??DataTable7
   \   0000017A   0x6048             STR      R0,[R1, #+4]
    256          				}
    257          			}
    258          
    259          			// WDTクリア
    260          			BQ24160A_set_ctrl_wdt();
   \                     ??man_charge_1000ms_main_8: (+1)
   \   0000017C   0x.... 0x....      BL       BQ24160A_set_ctrl_wdt
    261          		}
    262          	}
    263          }
   \                     ??man_charge_1000ms_main_0: (+1)
   \   00000180   0xBD01             POP      {R0,PC}          ;; return
    264          
    265          
    266          /********************************************************************/
    267          /*!
    268           * \name	man_charge_get_data
    269           * \brief	保持している充電情報の取得
    270           * \param	charge_state : 充電情報
    271           *                          0x00 : その他
    272           *                          0x01 : 充電開始
    273           *                          0x02 : 充電終了
    274           *          ext_state    : 外部電源ON/OFF情報
    275           *                          0x00 : 外部電源OFF
    276           *                          0x01 : 外部電源ON
    277           * \return   0: 正常
    278           *          -1: 異常
    279           * \note	必要時に呼ばれること
    280           */
    281          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    282          int32_t man_charge_get_data(uint32_t *charge_state, uint32_t *ext_state)
    283          {
   \                     man_charge_get_data: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0002             MOVS     R2,R0
    284          	int32_t		ret=-1;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x43C0             MVNS     R0,R0            ;; #-1
    285          	
    286          	if ( (charge_state != NULL) && (ext_state != NULL) ) {
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD008             BEQ      ??man_charge_get_data_0
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD006             BEQ      ??man_charge_get_data_0
    287          		*charge_state = man_charge_work.charge_state;
   \   00000010   0x....             LDR      R0,??DataTable7
   \   00000012   0x6840             LDR      R0,[R0, #+4]
   \   00000014   0x6010             STR      R0,[R2, #+0]
    288          		*ext_state = man_charge_work.ext_state;
   \   00000016   0x....             LDR      R0,??DataTable7
   \   00000018   0x6880             LDR      R0,[R0, #+8]
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    289          		ret = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
    290          	}
    291          	
    292          	return ret;
   \                     ??man_charge_get_data_0: (+1)
   \   0000001E   0xBD00             POP      {PC}             ;; return
    293          }
    294                            
    295          
    296          /********************************************************************/
    297          /*!
    298           * \name	man_charge_active
    299           * \brief	充電情報管理のアクティブモード処理
    300           * \param	なし
    301           * \return   0: 正常
    302           *          -1: 異常
    303           * \note	スタンバイ -> アクティブ時に、呼ばれること
    304           */
    305          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    306          int32_t man_charge_active(void)
    307          {
    308          	int32_t	ret=0;
   \                     man_charge_active: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    309          	
    310          	// 受信再開
    311          	man_charge_work.mode = MAN_CHARGE_MODE_ACTIVE;
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x....             LDR      R2,??DataTable7
   \   00000006   0x6011             STR      R1,[R2, #+0]
    312          	// 再度、初期化を行う
    313          	man_charge_work.init_state = MAN_CHARGE_INIT_STATE_NON;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x....             LDR      R2,??DataTable7
   \   0000000C   0x7511             STRB     R1,[R2, #+20]
    314          	man_charge_work.voltage = 0;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x....             LDR      R2,??DataTable7
   \   00000012   0x6191             STR      R1,[R2, #+24]
    315          
    316          	return ret;
   \   00000014   0x4770             BX       LR               ;; return
    317          }
    318          
    319          /********************************************************************/
    320          /*!
    321           * \name	man_charge_standby
    322           * \brief	充電情報管理のスタンバイモード処理
    323           * \param	なし
    324           * \return   0: 正常
    325           *          -1: 異常
    326           * \note	アクティブ -> スタンバイ時に、呼ばれること
    327           */
    328          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    329          int32_t man_charge_standby(void)
    330          {
    331          	int32_t	ret=0;
   \                     man_charge_standby: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    332          	
    333          	// 受信停止
    334          	man_charge_work.mode = MAN_CHARGE_MODE_STANDBY;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x....             LDR      R2,??DataTable7
   \   00000006   0x6011             STR      R1,[R2, #+0]
    335          
    336          	return ret;
   \   00000008   0x4770             BX       LR               ;; return
    337          }
    338          
    339          /********************************************************************/
    340          /*!
    341           * \name	man_charge_noti_voltage
    342           * \brief	現在の電源電圧を通知する処理
    343           * \param	voltage : 取得した電源電圧
    344           * \return  なし
    345           * \note	電源電圧の取得が出来た時点でレジスタTEを決定する
    346           */
    347          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    348          void man_charge_noti_voltage(int32_t voltage)
    349          {
   \                     man_charge_noti_voltage: (+1)
   \   00000000   0xB500             PUSH     {LR}
    350          	if (man_charge_work.init_state == MAN_CHARGE_INIT_STATE_NON) {
   \   00000002   0x....             LDR      R1,??DataTable7
   \   00000004   0x7D09             LDRB     R1,[R1, #+20]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD106             BNE      ??man_charge_noti_voltage_0
    351          		// 外部電源ON
    352          		if (man_charge_work.ext_state == MAN_CHARGE_EXTSTAT_ON) {
   \   0000000A   0x....             LDR      R1,??DataTable7
   \   0000000C   0x6889             LDR      R1,[R1, #+8]
   \   0000000E   0x2901             CMP      R1,#+1
   \   00000010   0xD102             BNE      ??man_charge_noti_voltage_0
    353          			man_charge_work.init_state = MAN_CHARGE_INIT_STATE_REQ;
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x....             LDR      R2,??DataTable7
   \   00000016   0x7511             STRB     R1,[R2, #+20]
    354          		}
    355          	}
    356          	man_charge_work.voltage = voltage;
   \                     ??man_charge_noti_voltage_0: (+1)
   \   00000018   0x....             LDR      R1,??DataTable7
   \   0000001A   0x6188             STR      R0,[R1, #+24]
    357          }
   \   0000001C   0xBD00             POP      {PC}             ;; return
    358          
    359          /********************************************************************/
    360          /*!
    361           * \name	man_charge_disp_info
    362           * \brief	充電管理情報を表示する処理
    363           * \param	なし
    364           * \return  なし
    365           * \note	必要時に、呼ばれること
    366           */
    367          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    368          void man_charge_disp_info( void )
    369          {
   \                     man_charge_disp_info: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    370          	int32_t					length;
    371          	uint8_t					*usb_buff = man_memory_alloc();
   \   00000002   0x.... 0x....      BL       man_memory_alloc
   \   00000006   0x0004             MOVS     R4,R0
    372          	
    373          	sprintf((char *)&usb_buff[0], "CHARGE DATA :: charge=%d, ext=%d, usb=%d, fault=%d\n", man_charge_work.charge_status, man_charge_work.ext_status, man_charge_work.usb_status, man_charge_work.fault_status);
   \   00000008   0x....             LDR      R0,??DataTable7
   \   0000000A   0x6B00             LDR      R0,[R0, #+48]
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0x....             LDR      R0,??DataTable7
   \   00000010   0x6AC0             LDR      R0,[R0, #+44]
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x....             LDR      R0,??DataTable7
   \   00000016   0x6A83             LDR      R3,[R0, #+40]
   \   00000018   0x....             LDR      R0,??DataTable7
   \   0000001A   0x6A42             LDR      R2,[R0, #+36]
   \   0000001C   0x....             LDR      R1,??DataTable7_5
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       sprintf
    374          	length = strlen((char const *)&usb_buff[0]);
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       strlen
    375          	sysmgr_log(&usb_buff[0], length);
   \   0000002A   0x0001             MOVS     R1,R0
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       sysmgr_log
    376          
    377          	sprintf((char *)&usb_buff[0], "CHARGE STATE :: charge=%d, ext=%d\n", man_charge_work.charge_state, man_charge_work.ext_state);
   \   00000032   0x....             LDR      R0,??DataTable7
   \   00000034   0x6883             LDR      R3,[R0, #+8]
   \   00000036   0x....             LDR      R0,??DataTable7
   \   00000038   0x6842             LDR      R2,[R0, #+4]
   \   0000003A   0x....             LDR      R1,??DataTable7_6
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       sprintf
    378          	length = strlen((char const *)&usb_buff[0]);
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0x.... 0x....      BL       strlen
    379          	sysmgr_log(&usb_buff[0], length);
   \   00000048   0x0001             MOVS     R1,R0
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x.... 0x....      BL       sysmgr_log
    380          	
    381          }
   \   00000050   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    382          
    383          

   \                                 In section .bss, align 4
    384          char   man_charge_dbg_log[64];
   \                     man_charge_dbg_log:
   \   00000000                      DS8 64

   \                                 In section .text, align 2, keep-with-next
    385          void  man_charge_status_log()
    386          {
   \                     man_charge_status_log: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    387            int32_t charge_status;
    388            int32_t ext_status;
    389            int32_t usb_status;
    390            int32_t fault_status;
    391            
    392            
    393            if(ctrl_BQ24160A_get_charge_status(&charge_status, &ext_status, &usb_status, &fault_status) >=0)
   \   00000004   0xAB02             ADD      R3,SP,#+8
   \   00000006   0xAA03             ADD      R2,SP,#+12
   \   00000008   0xA904             ADD      R1,SP,#+16
   \   0000000A   0xA805             ADD      R0,SP,#+20
   \   0000000C   0x.... 0x....      BL       ctrl_BQ24160A_get_charge_status
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD438             BMI      ??man_charge_status_log_0
    394            {
    395          
    396                man_gpio_expow_def	pw_ext =  man_gpio_expow_get();
   \   00000014   0x.... 0x....      BL       man_gpio_expow_get
   \   00000018   0x0006             MOVS     R6,R0
    397                man_gpio_expow_def	pw_usb =  man_gpio_expow_usb_get();
   \   0000001A   0x.... 0x....      BL       man_gpio_expow_usb_get
    398                int pw_ext_flag=0;
   \   0000001E   0x2400             MOVS     R4,#+0
    399                int pw_ext_usb_flag=0;
   \   00000020   0x2500             MOVS     R5,#+0
    400                if(pw_ext == MAN_GPIO_EXPOW_ON) pw_ext_flag=1;
   \   00000022   0xB2F6             UXTB     R6,R6
   \   00000024   0x2E01             CMP      R6,#+1
   \   00000026   0xD100             BNE      ??man_charge_status_log_1
   \   00000028   0x2401             MOVS     R4,#+1
    401                if(pw_usb == MAN_GPIO_EXPOW_ON) pw_ext_usb_flag=1;
   \                     ??man_charge_status_log_1: (+1)
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xD100             BNE      ??man_charge_status_log_2
   \   00000030   0x2501             MOVS     R5,#+1
    402                sprintf(print_buf, "24160::G_EXT:%d G_USB:%d 5_DC_D:%d 18_VBUS_D:%d\r\n",
    403                        pw_ext_flag,
    404                        pw_ext_usb_flag,
    405                        ctrl_get_port(4),   //DC
    406                        ctrl_get_port(17)); //VBUS);
   \                     ??man_charge_status_log_2: (+1)
   \   00000032   0x2011             MOVS     R0,#+17
   \   00000034   0x.... 0x....      BL       ctrl_get_port
   \   00000038   0x0006             MOVS     R6,R0
   \   0000003A   0x2004             MOVS     R0,#+4
   \   0000003C   0x.... 0x....      BL       ctrl_get_port
   \   00000040   0x9601             STR      R6,[SP, #+4]
   \   00000042   0x9000             STR      R0,[SP, #+0]
   \   00000044   0x002B             MOVS     R3,R5
   \   00000046   0x0022             MOVS     R2,R4
   \   00000048   0x....             LDR      R1,??DataTable7_7
   \   0000004A   0x....             LDR      R0,??DataTable7_8
   \   0000004C   0x.... 0x....      BL       sprintf
    407                if(memcmp(man_charge_dbg_log,print_buf,strlen(print_buf)) != 0)
   \   00000050   0x....             LDR      R0,??DataTable7_8
   \   00000052   0x.... 0x....      BL       strlen
   \   00000056   0x0002             MOVS     R2,R0
   \   00000058   0x....             LDR      R1,??DataTable7_8
   \   0000005A   0x....             LDR      R0,??DataTable7_9
   \   0000005C   0x.... 0x....      BL       memcmp
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD006             BEQ      ??man_charge_status_log_3
    408                {
    409                  sysmgr_log(print_buf,strlen(print_buf));
   \   00000064   0x....             LDR      R0,??DataTable7_8
   \   00000066   0x.... 0x....      BL       strlen
   \   0000006A   0x0001             MOVS     R1,R0
   \   0000006C   0x....             LDR      R0,??DataTable7_8
   \   0000006E   0x.... 0x....      BL       sysmgr_log
    410                }
    411                memcpy(man_charge_dbg_log,print_buf,strlen(print_buf));  
   \                     ??man_charge_status_log_3: (+1)
   \   00000072   0x....             LDR      R0,??DataTable7_8
   \   00000074   0x.... 0x....      BL       strlen
   \   00000078   0x0002             MOVS     R2,R0
   \   0000007A   0x....             LDR      R1,??DataTable7_8
   \   0000007C   0x....             LDR      R4,??DataTable7_9
   \   0000007E   0x0020             MOVS     R0,R4
   \   00000080   0x.... 0x....      BL       __aeabi_memcpy
    412            }
   \   00000084   0xE00A             B        ??man_charge_status_log_4
    413            else
    414            {
    415              sprintf(print_buf, "24160::ctrl_BQ24160A_get_charge_status() error\r\n");
   \                     ??man_charge_status_log_0: (+1)
   \   00000086   0x....             LDR      R1,??DataTable7_10
   \   00000088   0x....             LDR      R0,??DataTable7_8
   \   0000008A   0x.... 0x....      BL       sprintf
    416              sysmgr_log(print_buf,strlen(print_buf));
   \   0000008E   0x....             LDR      R0,??DataTable7_8
   \   00000090   0x.... 0x....      BL       strlen
   \   00000094   0x0001             MOVS     R1,R0
   \   00000096   0x....             LDR      R0,??DataTable7_8
   \   00000098   0x.... 0x....      BL       sysmgr_log
    417            }           
    418          }
   \                     ??man_charge_status_log_4: (+1)
   \   0000009C   0xB006             ADD      SP,SP,#+24
   \   0000009E   0xBD70             POP      {R4-R6,PC}       ;; return
    419          
    420          /********************************************************************/
    421          /*!
    422           * \name	man_charge_expow_get
    423           * \brief	外部電源ON/OFFを取得する
    424           * \param	なし
    425           * \return  外部電源ON/OFF状態
    426           * \note	必要時、呼ばれること
    427           */
    428          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    429          int32_t man_charge_expow_get( void )
    430          {
   \                     man_charge_expow_get: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    431          	man_gpio_expow_def	get_sw=MAN_GPIO_EXPOW_OFF;
   \   00000002   0x2000             MOVS     R0,#+0
    432          	
    433                  int16_t current;
    434                if(ctrl_BQ28Z610_get_current(&current) >= 0)
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x.... 0x....      BL       ctrl_BQ28Z610_get_current
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD405             BMI      ??man_charge_expow_get_0
    435                  {
    436                    if(current < 0)
   \   0000000E   0x9800             LDR      R0,[SP, #+0]
   \   00000010   0xB200             SXTH     R0,R0
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD501             BPL      ??man_charge_expow_get_0
    437                    {
    438                      return MAN_CHARGE_EXTSTAT_OFF;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE006             B        ??man_charge_expow_get_1
    439                    }
    440                  }
    441          
    442                  if( man_gpio_expow_get () == MAN_GPIO_EXPOW_ON )
   \                     ??man_charge_expow_get_0: (+1)
   \   0000001A   0x.... 0x....      BL       man_gpio_expow_get
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xD101             BNE      ??man_charge_expow_get_2
    443                  {
    444                      return MAN_CHARGE_EXTSTAT_ON;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xE000             B        ??man_charge_expow_get_1
    445          	}
    446          	
    447          	return MAN_CHARGE_EXTSTAT_OFF;
   \                     ??man_charge_expow_get_2: (+1)
   \   00000026   0x2000             MOVS     R0,#+0
   \                     ??man_charge_expow_get_1: (+1)
   \   00000028   0xBD02             POP      {R1,PC}          ;; return
    448          
    449          }
    450          
    451          /********************************************************************/
    452          /*!
    453           * \name	man_MAN_usb_expow_usb_get
    454           * \brief	外部電源(USB)ON/OFFを取得する
    455           * \param	なし
    456           * \return  外部電源(USB)ON/OFF状態
    457           * \note	必要時、呼ばれること
    458           */
    459          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    460          int32_t man_charge_expow_usb_get( void )
    461          {
   \                     man_charge_expow_usb_get: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    462                  int16_t current;
    463          
    464          
    465                  if(ctrl_BQ28Z610_get_current(&current) >= 0)
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x.... 0x....      BL       ctrl_BQ28Z610_get_current
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD405             BMI      ??man_charge_expow_usb_get_0
    466                  {
    467                    if(current < 0)
   \   0000000C   0x9800             LDR      R0,[SP, #+0]
   \   0000000E   0xB200             SXTH     R0,R0
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD501             BPL      ??man_charge_expow_usb_get_0
    468                    {
    469                      return MAN_CHARGE_EXTSTAT_OFF;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE006             B        ??man_charge_expow_usb_get_1
    470                    }
    471                  }
    472          	
    473                  if( man_gpio_expow_usb_get() == MAN_GPIO_EXPOW_ON )
   \                     ??man_charge_expow_usb_get_0: (+1)
   \   00000018   0x.... 0x....      BL       man_gpio_expow_usb_get
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD101             BNE      ??man_charge_expow_usb_get_2
    474                  {
    475                      return MAN_CHARGE_EXTSTAT_ON;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xE000             B        ??man_charge_expow_usb_get_1
    476          	}
    477          	return MAN_CHARGE_EXTSTAT_OFF;
   \                     ??man_charge_expow_usb_get_2: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??man_charge_expow_usb_get_1: (+1)
   \   00000026   0xBD02             POP      {R1,PC}          ;; return
    478          
    479          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x000011F8         DC32     0x11f8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     man_charge_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     man_charge_work+0x30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     man_charge_work+0x2C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     man_charge_work+0x28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     man_charge_work+0x24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     print_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     man_charge_dbg_log

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x43 0x48          DC8 43H, 48H, 41H, 52H, 47H, 45H, 20H, 44H
   \              0x41 0x52    
   \              0x47 0x45    
   \              0x20 0x44    
   \   00000008   0x41 0x54          DC8 41H, 54H, 41H, 20H, 3AH, 3AH, 20H, 63H
   \              0x41 0x20    
   \              0x3A 0x3A    
   \              0x20 0x63    
   \   00000010   0x68 0x61          DC8 68H, 61H, 72H, 67H, 65H, 3DH, 25H, 64H
   \              0x72 0x67    
   \              0x65 0x3D    
   \              0x25 0x64    
   \   00000018   0x2C 0x20          DC8 2CH, 20H, 65H, 78H, 74H, 3DH, 25H, 64H
   \              0x65 0x78    
   \              0x74 0x3D    
   \              0x25 0x64    
   \   00000020   0x2C 0x20          DC8 2CH, 20H, 75H, 73H, 62H, 3DH, 25H, 64H
   \              0x75 0x73    
   \              0x62 0x3D    
   \              0x25 0x64    
   \   00000028   0x2C 0x20          DC8 2CH, 20H, 66H, 61H, 75H, 6CH, 74H, 3DH
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x3D    
   \   00000030   0x25 0x64          DC8 25H, 64H, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x43 0x48          DC8 "CHARGE STATE :: charge=%d, ext=%d\012"
   \              0x41 0x52    
   \              0x47 0x45    
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x54 0x45    
   \              0x20 0x3A    
   \              0x3A 0x20    
   \              0x63 0x68    
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x3D 0x25    
   \              0x64 0x2C    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x3D 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x32 0x34          DC8 "24160::G_EXT:%d G_USB:%d 5_DC_D:%d 18_VBUS_D:%d\015\012"
   \              0x31 0x36    
   \              0x30 0x3A    
   \              0x3A 0x47    
   \              0x5F 0x45    
   \              0x58 0x54    
   \              0x3A 0x25    
   \              0x64 0x20    
   \              0x47 0x5F    
   \              0x55 0x53    
   \              0x42 0x3A    
   \              0x25 0x64    
   \              0x20 0x35    
   \              0x5F 0x44    
   \              0x43 0x5F    
   \              0x44 0x3A    
   \              0x25 0x64    
   \              0x20 0x31    
   \              0x38 0x5F    
   \              0x56 0x42    
   \              0x55 0x53    
   \              0x5F 0x44    
   \              0x3A 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x32 0x34          DC8 "24160::ctrl_BQ24160A_get_charge_status() error\015\012"
   \              0x31 0x36    
   \              0x30 0x3A    
   \              0x3A 0x63    
   \              0x74 0x72    
   \              0x6C 0x5F    
   \              0x42 0x51    
   \              0x32 0x34    
   \              0x31 0x36    
   \              0x30 0x41    
   \              0x5F 0x67    
   \              0x65 0x74    
   \              0x5F 0x63    
   \              0x68 0x61    
   \              0x72 0x67    
   \              0x65 0x5F    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x28 0x29    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x0D 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   man_charge_1000ms_main
         8   -> BQ24160A_set_ctrl_wdt
         8   -> ctrl_BQ24160A_get_charge_status
         8   -> ctrl_BQ24160A_init_setting
       0   man_charge_active
      16   man_charge_disp_info
        16   -> man_memory_alloc
        16   -> sprintf
        16   -> strlen
        16   -> sysmgr_log
       8   man_charge_expow_get
         8   -> ctrl_BQ28Z610_get_current
         8   -> man_gpio_expow_get
       8   man_charge_expow_usb_get
         8   -> ctrl_BQ28Z610_get_current
         8   -> man_gpio_expow_usb_get
       4   man_charge_get_data
      16   man_charge_init
        16   -> __aeabi_memset
        16   -> ctrl_BQ24160A_start
       4   man_charge_noti_voltage
       0   man_charge_standby
      40   man_charge_status_log
        40   -> __aeabi_memcpy
        40   -> ctrl_BQ24160A_get_charge_status
        40   -> ctrl_get_port
        40   -> man_gpio_expow_get
        40   -> man_gpio_expow_usb_get
        40   -> memcmp
        40   -> sprintf
        40   -> strlen
        40   -> sysmgr_log


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      52  ?_0
      36  ?_1
      52  ?_2
      52  ?_3
     386  man_charge_1000ms_main
      22  man_charge_active
      64  man_charge_dbg_log
      82  man_charge_disp_info
      42  man_charge_expow_get
      40  man_charge_expow_usb_get
      32  man_charge_get_data
      30  man_charge_init
      30  man_charge_noti_voltage
      10  man_charge_standby
     160  man_charge_status_log
      52  man_charge_work

 
 116 bytes in section .bss
 192 bytes in section .rodata
 882 bytes in section .text
 
 882 bytes of CODE  memory
 192 bytes of CONST memory
 116 bytes of DATA  memory

Errors: none
Warnings: 5
