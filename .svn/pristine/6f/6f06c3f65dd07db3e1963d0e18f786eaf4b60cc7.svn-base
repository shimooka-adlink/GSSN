###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       21/May/2019  17:01:22
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\GNSS\Software\rJ105\source\GNSS_GW\apl\man_error.c
#    Command line =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\apl\man_error.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_B -lCN
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        -lA
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List\man_error.lst
#    Object file  =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj\man_error.o
#
###############################################################################

C:\GNSS\Software\rJ105\source\GNSS_GW\apl\man_error.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    man_error.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    05-August-2016
      8            * @brief   発生したエラーを管理します。
      9            ******************************************************************************
     10            $Id: man_error.c 256 2018-08-02 01:06:38Z shitaoka $
     11            * @attention
     12            *
     13            *****************************************************************************
     14          */
     15          
     16          #include <string.h>
     17          #include <stdio.h>
     18          #include <stdlib.h>
     19          
     20          #include "board.h"
     21          
     22          #include "man_rtc.h"
     23          #include "man_timer.h"
     24          #include "man_usb.h"
     25          #include "gnss_gw_common.h"
     26          #include "man_memory.h"
     27          #include "man_error.h"
     28          
     29          #define	MAN_ERROR_ERR_BUFF_MAX		344			// 8KB分
     30          
     31          
     32          #define	MAN_ERROR_DBG_BUFF_MAX		512			// 8KB分
     33          
     34          
     35          #define	MAN_ERROR_FREE		0				// 空き
     36          #define	MAN_ERROR_USED		1				// 使用中
     37          
     38          #define	MAN_ERROR_REQ_OUT_NON		0
     39          #define	MAN_ERROR_REQ_OUT_ERRLOG	1
     40          #define	MAN_ERROR_REQ_OUT_DBGLOG	2
     41          
     42          
     43          #pragma section = "APL_PRG_BLOCK"
     44          
     45          /************************************************************************/
     46          /* declaration of structure                                             */
     47          /************************************************************************/
     48          // エラー情報
     49          typedef struct _man_error_info_t {
     50          	man_err_def				error_code;			// 発生エラーコード
     51          	uint32_t				error_info1;		// 付属情報１
     52          	uint32_t				error_info2;		// 付属情報２
     53          
     54          	uint32_t				ms_count;			// Timer のカウンタ値
     55          	uint32_t				line_no;			// ライン番号
     56          
     57          	uint8_t					day;				// 日
     58          	uint8_t					hour;				// 時
     59          	uint8_t					minute;				// 分
     60          	uint8_t					seconds;			// 秒
     61          } man_error_info_t;
     62          
     63          
     64          // デバック情報
     65          typedef struct _man_dbg_info_t {
     66          	man_err_dbg_def			dbg_code;			// dbgコード
     67          	man_err_dbg_type_def	type;				// 種別
     68          	uint32_t				data;				// データ
     69          	uint32_t				ms_count;			// Timer のカウンタ値
     70          } man_dbg_info_t;
     71          
     72          
     73          // ログ出力要求
     74          typedef struct _man_error_req_info_t {
     75          	int32_t			req_cmd;					// 要求
     76          	int32_t			top_pos;					// 先頭位置
     77          } man_error_req_info_t;
     78          
     79          
     80          typedef struct _man_error_work_t {
     81          	uint32_t				err_write_p;			// errlog 書き込み位置
     82          	uint32_t				err_write_cnt;			// errlog数
     83          	man_error_info_t		error_info[MAN_ERROR_ERR_BUFF_MAX];
     84          	
     85          	uint32_t				dbg_write_p;			// dbglog 書き込み位置
     86          	uint32_t				dbg_write_cnt;			// dbglog数
     87          	man_dbg_info_t			dbg_info[MAN_ERROR_DBG_BUFF_MAX];
     88          
     89          	man_error_req_info_t	request;				// 要求
     90          
     91          	uint8_t					buff[100];
     92          } man_error_work_t;
     93          
     94          
     95          
     96          /************************************************************************/
     97          /* definition of variables                                              */
     98          /************************************************************************/
     99          

   \                                 In section .bss, align 4
    100          static man_error_work_t		man_error_work;			// エラー管理用変数
   \                     man_error_work:
   \   00000000                      DS8 14524
    101          

   \                                 In section .data, align 4
    102          static const uint8_t *dbg_cmd_module_tbl[] = {
   \                     dbg_cmd_module_tbl:
   \   00000000   0x........         DC32 ?_0, ?_1, ?_2, ?_3, ?_4, ?_5, ?_6, ?_7, ?_8, ?_9, ?_10, ?_11, ?_12
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000034   0x........         DC32 ?_13, ?_14, ?_15, ?_16, ?_17, ?_18, ?_19, ?_20, ?_21, ?_22, ?_23
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000060   0x........         DC32 ?_24, ?_25, ?_26, ?_27, ?_28, ?_29, ?_30
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
    103          	"-------",				// MAN_ERROR_NON
    104          	"DRV_CFG",				// MAN_ERROR_DRV_CFG
    105          	"DRV_FLH",				// MAN_ERROR_DRV_FLASH
    106          	"DRV_GPI",				// MAN_ERROR_DRV_GPIO
    107          	"DRV_I20",				// MAN_ERROR_DRV_I2C0
    108          	"DRV_I21",				// MAN_ERROR_DRV_I2C1
    109          	"DRV_RTC",				// MAN_ERROR_DRV_RTC
    110          	"DRV_T16",				// MAN_ERROR_DRV_T16
    111          	"DRV_UA0",				// MAN_ERROR_DRV_UART0
    112          	"DRV_UA1",				// MAN_ERROR_DRV_UART1
    113          	"DRV_USB",				// MAN_ERROR_DRV_USB
    114          	"DRV_WDT",				// MAN_ERROR_DRV_WDT
    115          	"CTR_GPS",				// MAN_ERROR_CTRL_CXD
    116          	"CTR_MPL",				// MAN_ERROR_CTRL_MPL
    117          	"CTR_LTE",				// MAN_ERROR_CTRL_SM
    118          	"MID_GPS",				// MAN_ERROR_MID_GPS
    119          	"MID_HTP",				// MAN_ERROR_MID_HTTP
    120          	"MAN_TIM",				// MAN_ERROR_MAN_TIMMER
    121          	"MAN_PRE",				// MAN_ERROR_MAN_PRESS
    122          	"MAN_GPS",				// MAN_ERROR_MAN_GPS
    123          	"MAN_NET",				// MAN_ERROR_MAN_NET
    124          	"MAN_OPE",				// MAN_ERROR_MAN_OPE
    125          	"MAN_HTP",				// MAN_ERROR_MAN_HTTP
    126          	"MAN_RPT",				// MAN_ERROR_MAN_RPT
    127          	"MAN_LTE",				// MAN_ERROR_MAN_LTE
    128          	"MAN_CMD",				// MAN_ERROR_MAN_CMD
    129          	"MAN_MSG",				// MAN_ERROR_MAN_MSG
    130          	"MAN_OTA",				// MAN_ERROR_MAN_OTA
    131          	"MAN_CHG",				// MAN_ERROR_MAN_CHG
    132          	"MAN_USB",				// MAN_ERROR_MAN_USB
    133          	"MAIN   ",				// MAN_ERROR_MAIN
    134          };
    135          

   \                                 In section .data, align 4
    136          static const uint8_t *dbg_cmd_seq_tbl[] = {
   \                     dbg_cmd_seq_tbl:
   \   00000000   0x........         DC32 ?_27, ?_21, ?_20, ?_24, ?_23, ?_26, ?_25, ?_19, ?_22, ?_29, ?_31
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
    137          	"MAN_OTA",		// MAN_ERROR_DBG_MAN_OTA
    138          	"MAN_OPE",		// MAN_ERROR_DBG_MAN_OPE
    139          	"MAN_NET",		// MAN_ERROR_DBG_MAN_NET
    140          	"MAN_LTE",		// MAN_ERROR_DBG_MAN_LTE
    141          	"MAN_RPT",		// MAN_ERROR_DBG_MAN_RPT
    142          	"MAN_MSG",		// MAN_ERROR_DBG_MAN_MSG
    143          	"MAN_CMD",		// MAN_ERROR_DBG_MAN_CMD
    144          	"MAN_GPS",		// MAN_ERROR_DBG_MAN_GPS
    145          	"MAN_HTP",		// MAN_ERROR_DBG_MAN_HTP
    146          	"MAN_USB",		// MAN_ERROR_DBG_MAN_USB
    147          	"MAX",
    148          };
    149          

   \                                 In section .data, align 4
    150          static const uint8_t *dbg_cmd_type_tbl[] = {
   \                     dbg_cmd_type_tbl:
   \   00000000   0x........         DC32 ?_32, ?_33, ?_34, ?_35, ?_36, ?_31
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
    151          	"SEQ",			// MAN_ERROR_DBG_TYPE_SEQ
    152          	"NOTI",			// MAN_ERROR_DBG_TYPE_NOTI
    153          	"STATE",		// MAN_ERROR_DBG_TYPE_STATE
    154          	"EVENT",		// MAN_ERROR_DBG_TYPE_EVENT
    155          	"OTHER",		// MAN_ERROR_DBG_TYPE_OTHER
    156          	"MAX",			// MAN_ERROR_DBG_TYPE_MAX
    157          };
    158          
    159          /********************************************************************/
    160          /*	static関数                                                      */
    161          /********************************************************************/
    162          
    163          /********************************************************************/
    164          /*!
    165           * \name	man_error_out_errlog
    166           * \brief	errlog出力
    167           * \param	get_top_pos : 出力するerrlogの先頭位置(1〜MAN_ERROR_ERR_BUFF_MAX)
    168           * \return  次の先頭位置
    169           * \note	get_top_posから10個分が出力されます
    170           */
    171          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    172          static int32_t man_error_out_errlog( int32_t get_top_pos )
    173          {
   \                     man_error_out_errlog: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x0006             MOVS     R6,R0
    174          	int32_t		rsp_top=0, rsp_end=0;
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2000             MOVS     R0,#+0
    175          	int32_t		top_pos, get_pos, get_len;
    176          	int32_t		point;
    177          	int32_t		loop;
    178          	int32_t		pos_num;
    179          	uint8_t		*usb_buff = man_memory_alloc();
   \   0000000A   0x.... 0x....      BL       man_memory_alloc
   \   0000000E   0x9009             STR      R0,[SP, #+36]
    180          
    181          
    182          	pos_num = get_top_pos;
   \   00000010   0x9608             STR      R6,[SP, #+32]
    183          	// 先頭位置を決定する
    184          	// 取得先頭位置を決定する
    185          	if (man_error_work.err_write_cnt >= MAN_ERROR_ERR_BUFF_MAX) {
   \   00000012   0x....             LDR      R0,??DataTable2
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x21AC             MOVS     R1,#+172
   \   00000018   0x0049             LSLS     R1,R1,#+1        ;; #+344
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD314             BCC      ??man_error_out_errlog_0
    186          		if (get_top_pos <= MAN_ERROR_ERR_BUFF_MAX) {
   \   0000001E   0x20FF             MOVS     R0,#+255
   \   00000020   0x305A             ADDS     R0,R0,#+90       ;; #+345
   \   00000022   0x4286             CMP      R6,R0
   \   00000024   0xDA0E             BGE      ??man_error_out_errlog_1
    187          			top_pos = man_error_work.err_write_p;
   \   00000026   0x....             LDR      R0,??DataTable2
   \   00000028   0x6800             LDR      R0,[R0, #+0]
    188          			get_pos = top_pos + (get_top_pos-1);
   \   0000002A   0x1984             ADDS     R4,R0,R6
   \   0000002C   0x1E64             SUBS     R4,R4,#+1
    189          			if (get_pos >= MAN_ERROR_ERR_BUFF_MAX) {
   \   0000002E   0x20AC             MOVS     R0,#+172
   \   00000030   0x0040             LSLS     R0,R0,#+1        ;; #+344
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xDB01             BLT      ??man_error_out_errlog_2
    190          				get_pos -= MAN_ERROR_ERR_BUFF_MAX;
   \   00000036   0x....             LDR      R0,??DataTable2_1  ;; 0xfffffea8
   \   00000038   0x1824             ADDS     R4,R4,R0
    191          			}
    192          			get_len = MAN_ERROR_ERR_BUFF_MAX - (get_top_pos - 1);
   \                     ??man_error_out_errlog_2: (+1)
   \   0000003A   0x20AC             MOVS     R0,#+172
   \   0000003C   0x0040             LSLS     R0,R0,#+1        ;; #+344
   \   0000003E   0x1B86             SUBS     R6,R0,R6
   \   00000040   0x1C76             ADDS     R6,R6,#+1
   \   00000042   0xE00D             B        ??man_error_out_errlog_3
    193          		}
    194          		// 全て送信した場合
    195          		else {
    196          			get_len = 0;
   \                     ??man_error_out_errlog_1: (+1)
   \   00000044   0x2600             MOVS     R6,#+0
   \   00000046   0xE00B             B        ??man_error_out_errlog_3
    197          		}
    198          	}
    199          	else {
    200          		top_pos = 0;
   \                     ??man_error_out_errlog_0: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
    201          		get_pos = top_pos + (get_top_pos - 1);
   \   0000004A   0x1984             ADDS     R4,R0,R6
   \   0000004C   0x1E64             SUBS     R4,R4,#+1
    202          		if (get_pos >= man_error_work.err_write_p) {
   \   0000004E   0x....             LDR      R0,??DataTable2
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD301             BCC      ??man_error_out_errlog_4
    203          			get_len = 0;
   \   00000056   0x2600             MOVS     R6,#+0
   \   00000058   0xE002             B        ??man_error_out_errlog_3
    204          		}
    205          		else {
    206          			get_len = man_error_work.err_write_p - get_pos;
   \                     ??man_error_out_errlog_4: (+1)
   \   0000005A   0x....             LDR      R0,??DataTable2
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x1B06             SUBS     R6,R0,R4
    207          		}
    208          	}
    209          
    210          	// 1回の送信は10データ分を最大とする
    211          	if (get_len > 10) {
   \                     ??man_error_out_errlog_3: (+1)
   \   00000060   0x2E0B             CMP      R6,#+11
   \   00000062   0xDB00             BLT      ??man_error_out_errlog_5
    212          		get_len = 10;
   \   00000064   0x260A             MOVS     R6,#+10
    213          	}
    214          
    215          	if (get_len > 0) {
   \                     ??man_error_out_errlog_5: (+1)
   \   00000066   0x2E01             CMP      R6,#+1
   \   00000068   0xDB68             BLT      ??man_error_out_errlog_6
    216          		for(loop=0; loop<get_len; loop++) {
   \   0000006A   0x2700             MOVS     R7,#+0
   \   0000006C   0xE060             B        ??man_error_out_errlog_7
    217          
    218          			if ( (man_error_work.error_info[get_pos].error_code > MAN_ERROR_NON) && (man_error_work.error_info[get_pos].error_code < MAN_ERROR_MAX) ) {
   \                     ??man_error_out_errlog_8: (+1)
   \   0000006E   0x....             LDR      R0,??DataTable2
   \   00000070   0x2118             MOVS     R1,#+24
   \   00000072   0x4361             MULS     R1,R4,R1
   \   00000074   0x1840             ADDS     R0,R0,R1
   \   00000076   0x7A00             LDRB     R0,[R0, #+8]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD058             BEQ      ??man_error_out_errlog_9
   \   0000007C   0x....             LDR      R0,??DataTable2
   \   0000007E   0x2118             MOVS     R1,#+24
   \   00000080   0x4361             MULS     R1,R4,R1
   \   00000082   0x1840             ADDS     R0,R0,R1
   \   00000084   0x7A00             LDRB     R0,[R0, #+8]
   \   00000086   0x281F             CMP      R0,#+31
   \   00000088   0xDA51             BGE      ??man_error_out_errlog_9
    219          				// バッファを越える場合は行わない
    220          				if ( (rsp_top+150) < MAN_MEMORY_ALLOC_MAX) {
   \   0000008A   0x0028             MOVS     R0,R5
   \   0000008C   0x3096             ADDS     R0,R0,#+150
   \   0000008E   0x2180             MOVS     R1,#+128
   \   00000090   0x0109             LSLS     R1,R1,#+4        ;; #+2048
   \   00000092   0x4288             CMP      R0,R1
   \   00000094   0xDA4B             BGE      ??man_error_out_errlog_9
    221          					sprintf((char *)&usb_buff[rsp_top],
    222          						"errlog(%03d) :: %s, line=%d, info1=%08x, info2=%08x, date=%d/%02d:%02d:%02d time=%dms\n",
    223          						pos_num,
    224          						dbg_cmd_module_tbl[man_error_work.error_info[get_pos].error_code], 
    225          						man_error_work.error_info[get_pos].line_no,
    226          						man_error_work.error_info[get_pos].error_info1,
    227          						man_error_work.error_info[get_pos].error_info2,
    228          						man_error_work.error_info[get_pos].day,
    229          						man_error_work.error_info[get_pos].hour,
    230          						man_error_work.error_info[get_pos].minute,
    231          						man_error_work.error_info[get_pos].seconds,
    232          						man_error_work.error_info[get_pos].ms_count);
   \   00000096   0x....             LDR      R0,??DataTable2
   \   00000098   0x2118             MOVS     R1,#+24
   \   0000009A   0x4361             MULS     R1,R4,R1
   \   0000009C   0x1840             ADDS     R0,R0,R1
   \   0000009E   0x6940             LDR      R0,[R0, #+20]
   \   000000A0   0x9007             STR      R0,[SP, #+28]
   \   000000A2   0x....             LDR      R0,??DataTable2
   \   000000A4   0x2118             MOVS     R1,#+24
   \   000000A6   0x4361             MULS     R1,R4,R1
   \   000000A8   0x1840             ADDS     R0,R0,R1
   \   000000AA   0x7FC0             LDRB     R0,[R0, #+31]
   \   000000AC   0x9006             STR      R0,[SP, #+24]
   \   000000AE   0x....             LDR      R0,??DataTable2
   \   000000B0   0x2118             MOVS     R1,#+24
   \   000000B2   0x4361             MULS     R1,R4,R1
   \   000000B4   0x1840             ADDS     R0,R0,R1
   \   000000B6   0x7F80             LDRB     R0,[R0, #+30]
   \   000000B8   0x9005             STR      R0,[SP, #+20]
   \   000000BA   0x....             LDR      R0,??DataTable2
   \   000000BC   0x2118             MOVS     R1,#+24
   \   000000BE   0x4361             MULS     R1,R4,R1
   \   000000C0   0x1840             ADDS     R0,R0,R1
   \   000000C2   0x7F40             LDRB     R0,[R0, #+29]
   \   000000C4   0x9004             STR      R0,[SP, #+16]
   \   000000C6   0x....             LDR      R0,??DataTable2
   \   000000C8   0x2118             MOVS     R1,#+24
   \   000000CA   0x4361             MULS     R1,R4,R1
   \   000000CC   0x1840             ADDS     R0,R0,R1
   \   000000CE   0x7F00             LDRB     R0,[R0, #+28]
   \   000000D0   0x9003             STR      R0,[SP, #+12]
   \   000000D2   0x....             LDR      R0,??DataTable2
   \   000000D4   0x2118             MOVS     R1,#+24
   \   000000D6   0x4361             MULS     R1,R4,R1
   \   000000D8   0x1840             ADDS     R0,R0,R1
   \   000000DA   0x6900             LDR      R0,[R0, #+16]
   \   000000DC   0x9002             STR      R0,[SP, #+8]
   \   000000DE   0x....             LDR      R0,??DataTable2
   \   000000E0   0x2118             MOVS     R1,#+24
   \   000000E2   0x4361             MULS     R1,R4,R1
   \   000000E4   0x1840             ADDS     R0,R0,R1
   \   000000E6   0x68C0             LDR      R0,[R0, #+12]
   \   000000E8   0x9001             STR      R0,[SP, #+4]
   \   000000EA   0x....             LDR      R0,??DataTable2
   \   000000EC   0x2118             MOVS     R1,#+24
   \   000000EE   0x4361             MULS     R1,R4,R1
   \   000000F0   0x1840             ADDS     R0,R0,R1
   \   000000F2   0x6980             LDR      R0,[R0, #+24]
   \   000000F4   0x9000             STR      R0,[SP, #+0]
   \   000000F6   0x....             LDR      R0,??DataTable3
   \   000000F8   0x....             LDR      R1,??DataTable2
   \   000000FA   0x2218             MOVS     R2,#+24
   \   000000FC   0x4362             MULS     R2,R4,R2
   \   000000FE   0x1889             ADDS     R1,R1,R2
   \   00000100   0x7A09             LDRB     R1,[R1, #+8]
   \   00000102   0x2204             MOVS     R2,#+4
   \   00000104   0x4351             MULS     R1,R2,R1
   \   00000106   0x5843             LDR      R3,[R0, R1]
   \   00000108   0x9A08             LDR      R2,[SP, #+32]
   \   0000010A   0x....             LDR      R1,??DataTable6
   \   0000010C   0x9809             LDR      R0,[SP, #+36]
   \   0000010E   0x1940             ADDS     R0,R0,R5
   \   00000110   0x.... 0x....      BL       sprintf
    233          
    234          					// 結果書き込み位置を更新する
    235          					rsp_top = strlen((const char *)&usb_buff[0]);
   \   00000114   0x9809             LDR      R0,[SP, #+36]
   \   00000116   0x.... 0x....      BL       strlen
   \   0000011A   0x0005             MOVS     R5,R0
    236          
    237          					get_pos++;
   \   0000011C   0x1C64             ADDS     R4,R4,#+1
    238          					if (get_pos >= MAN_ERROR_ERR_BUFF_MAX) {
   \   0000011E   0x20AC             MOVS     R0,#+172
   \   00000120   0x0040             LSLS     R0,R0,#+1        ;; #+344
   \   00000122   0x4284             CMP      R4,R0
   \   00000124   0xDB00             BLT      ??man_error_out_errlog_10
    239          						get_pos = 0;
   \   00000126   0x2400             MOVS     R4,#+0
    240          					}
    241          					pos_num++;
   \                     ??man_error_out_errlog_10: (+1)
   \   00000128   0x9808             LDR      R0,[SP, #+32]
   \   0000012A   0x1C40             ADDS     R0,R0,#+1
   \   0000012C   0x9008             STR      R0,[SP, #+32]
    242          				}
    243          			}
    244          		}
   \                     ??man_error_out_errlog_9: (+1)
   \   0000012E   0x1C7F             ADDS     R7,R7,#+1
   \                     ??man_error_out_errlog_7: (+1)
   \   00000130   0x42B7             CMP      R7,R6
   \   00000132   0xDB9C             BLT      ??man_error_out_errlog_8
    245          
    246          		// USB出力
    247          		man_usb_data_send(&usb_buff[0], rsp_top);
   \   00000134   0x0029             MOVS     R1,R5
   \   00000136   0x9809             LDR      R0,[SP, #+36]
   \   00000138   0x.... 0x....      BL       man_usb_data_send
    248          	}
    249          	
    250          	return pos_num;
   \                     ??man_error_out_errlog_6: (+1)
   \   0000013C   0x9808             LDR      R0,[SP, #+32]
   \   0000013E   0xB00B             ADD      SP,SP,#+44
   \   00000140   0xBDF0             POP      {R4-R7,PC}       ;; return
    251          }
    252          
    253          
    254          /********************************************************************/
    255          /*!
    256           * \name	man_error_out_dbglog
    257           * \brief	dbglog出力
    258           * \param	get_top_pos : 出力するdbglogの先頭位置(1〜MAN_ERROR_DBG_BUFF_MAX)
    259           * \return  次の先頭位置
    260           * \note	get_top_posから10個分が出力されます
    261           */
    262          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    263          static int32_t man_error_out_dbglog( int32_t get_top_pos )
    264          {
   \                     man_error_out_dbglog: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0007             MOVS     R7,R0
    265          	int32_t		rsp_top=0, rsp_end=0;
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x2000             MOVS     R0,#+0
    266          	int32_t		top_pos=0, get_pos=0, get_len=0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0x2500             MOVS     R5,#+0
    267          	int32_t		point;
    268          	int32_t		loop;
    269          	int32_t		pos_num;
    270          	uint8_t		*usb_buff = man_memory_alloc();
   \   00000010   0x.... 0x....      BL       man_memory_alloc
   \   00000014   0x9004             STR      R0,[SP, #+16]
    271          
    272          
    273          	pos_num = get_top_pos;
   \   00000016   0x9703             STR      R7,[SP, #+12]
    274          	// 先頭位置を決定する
    275          	// 取得先頭位置を決定する
    276          	if (man_error_work.dbg_write_cnt >= MAN_ERROR_DBG_BUFF_MAX) {
   \   00000018   0x....             LDR      R0,??DataTable5
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x2180             MOVS     R1,#+128
   \   0000001E   0x0089             LSLS     R1,R1,#+2        ;; #+512
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD313             BCC      ??man_error_out_dbglog_0
    277          		if (get_top_pos <= MAN_ERROR_DBG_BUFF_MAX) {
   \   00000024   0x....             LDR      R0,??DataTable6_1  ;; 0x201
   \   00000026   0x4287             CMP      R7,R0
   \   00000028   0xDA0E             BGE      ??man_error_out_dbglog_1
    278          			top_pos = man_error_work.dbg_write_p;
   \   0000002A   0x....             LDR      R0,??DataTable6_2
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
    279          			get_pos = top_pos + (get_top_pos-1);
   \   0000002E   0x19C4             ADDS     R4,R0,R7
   \   00000030   0x1E64             SUBS     R4,R4,#+1
    280          			if (get_pos >= MAN_ERROR_DBG_BUFF_MAX) {
   \   00000032   0x2080             MOVS     R0,#+128
   \   00000034   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xDB01             BLT      ??man_error_out_dbglog_2
    281          				get_pos -= MAN_ERROR_DBG_BUFF_MAX;
   \   0000003A   0x....             LDR      R0,??DataTable6_3  ;; 0xfffffe00
   \   0000003C   0x1824             ADDS     R4,R4,R0
    282          			}
    283          			get_len = MAN_ERROR_DBG_BUFF_MAX - (get_top_pos - 1);
   \                     ??man_error_out_dbglog_2: (+1)
   \   0000003E   0x2080             MOVS     R0,#+128
   \   00000040   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000042   0x1BC5             SUBS     R5,R0,R7
   \   00000044   0x1C6D             ADDS     R5,R5,#+1
   \   00000046   0xE00D             B        ??man_error_out_dbglog_3
    284          		}
    285          		// 全て送信した場合
    286          		else {
    287          			get_len = 0;
   \                     ??man_error_out_dbglog_1: (+1)
   \   00000048   0x2500             MOVS     R5,#+0
   \   0000004A   0xE00B             B        ??man_error_out_dbglog_3
    288          		}
    289          	}
    290          	else {
    291          		top_pos = 0;
   \                     ??man_error_out_dbglog_0: (+1)
   \   0000004C   0x2000             MOVS     R0,#+0
    292          		get_pos = top_pos + (get_top_pos - 1);
   \   0000004E   0x19C4             ADDS     R4,R0,R7
   \   00000050   0x1E64             SUBS     R4,R4,#+1
    293          		if (get_pos >= man_error_work.dbg_write_p) {
   \   00000052   0x....             LDR      R0,??DataTable6_2
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD301             BCC      ??man_error_out_dbglog_4
    294          			get_len = 0;
   \   0000005A   0x2500             MOVS     R5,#+0
   \   0000005C   0xE002             B        ??man_error_out_dbglog_3
    295          		}
    296          		else {
    297          			get_len = man_error_work.dbg_write_p - get_pos;
   \                     ??man_error_out_dbglog_4: (+1)
   \   0000005E   0x....             LDR      R0,??DataTable6_2
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x1B05             SUBS     R5,R0,R4
    298          		}
    299          	}
    300          
    301          	// 1回の送信は10データ分を最大とする
    302          	if (get_len > 10) {
   \                     ??man_error_out_dbglog_3: (+1)
   \   00000064   0x2D0B             CMP      R5,#+11
   \   00000066   0xDB00             BLT      ??man_error_out_dbglog_5
    303          		get_len = 10;
   \   00000068   0x250A             MOVS     R5,#+10
    304          	}
    305          
    306          	if (get_len > 0) {
   \                     ??man_error_out_dbglog_5: (+1)
   \   0000006A   0x2D01             CMP      R5,#+1
   \   0000006C   0xDB68             BLT      ??man_error_out_dbglog_6
    307          		for(loop=0; loop<get_len; loop++) {
   \   0000006E   0x2700             MOVS     R7,#+0
   \   00000070   0xE060             B        ??man_error_out_dbglog_7
    308          
    309          			if (   ( (man_error_work.dbg_info[get_pos].dbg_code > 0) && (man_error_work.dbg_info[get_pos].dbg_code < MAN_ERROR_DBG_MAX) )
    310          				&& ( (man_error_work.dbg_info[get_pos].type > 0) && (man_error_work.dbg_info[get_pos].type < MAN_ERROR_DBG_TYPE_MAX) ) ) {
   \                     ??man_error_out_dbglog_8: (+1)
   \   00000072   0x....             LDR      R0,??DataTable2
   \   00000074   0x210C             MOVS     R1,#+12
   \   00000076   0x4361             MULS     R1,R4,R1
   \   00000078   0x1840             ADDS     R0,R0,R1
   \   0000007A   0x....             LDR      R1,??DataTable7  ;; 0x2050
   \   0000007C   0x5C40             LDRB     R0,[R0, R1]
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD057             BEQ      ??man_error_out_dbglog_9
   \   00000082   0x....             LDR      R0,??DataTable2
   \   00000084   0x210C             MOVS     R1,#+12
   \   00000086   0x4361             MULS     R1,R4,R1
   \   00000088   0x1840             ADDS     R0,R0,R1
   \   0000008A   0x....             LDR      R1,??DataTable7  ;; 0x2050
   \   0000008C   0x5C40             LDRB     R0,[R0, R1]
   \   0000008E   0x280B             CMP      R0,#+11
   \   00000090   0xDA4F             BGE      ??man_error_out_dbglog_9
   \   00000092   0x....             LDR      R0,??DataTable2
   \   00000094   0x210C             MOVS     R1,#+12
   \   00000096   0x4361             MULS     R1,R4,R1
   \   00000098   0x1840             ADDS     R0,R0,R1
   \   0000009A   0x....             LDR      R1,??DataTable7_1  ;; 0x2051
   \   0000009C   0x5C40             LDRB     R0,[R0, R1]
   \   0000009E   0x2800             CMP      R0,#+0
   \   000000A0   0xD047             BEQ      ??man_error_out_dbglog_9
   \   000000A2   0x....             LDR      R0,??DataTable2
   \   000000A4   0x210C             MOVS     R1,#+12
   \   000000A6   0x4361             MULS     R1,R4,R1
   \   000000A8   0x1840             ADDS     R0,R0,R1
   \   000000AA   0x....             LDR      R1,??DataTable7_1  ;; 0x2051
   \   000000AC   0x5C40             LDRB     R0,[R0, R1]
   \   000000AE   0x2806             CMP      R0,#+6
   \   000000B0   0xDA3F             BGE      ??man_error_out_dbglog_9
    311          
    312          				// バッファを越える場合は行わない
    313          				if ( (rsp_top+150) < MAN_MEMORY_ALLOC_MAX) {
   \   000000B2   0x0030             MOVS     R0,R6
   \   000000B4   0x3096             ADDS     R0,R0,#+150
   \   000000B6   0x2180             MOVS     R1,#+128
   \   000000B8   0x0109             LSLS     R1,R1,#+4        ;; #+2048
   \   000000BA   0x4288             CMP      R0,R1
   \   000000BC   0xDA39             BGE      ??man_error_out_dbglog_9
    314          					sprintf((char *)&usb_buff[rsp_top],
    315          						"dbglog(%03d) :: %s, %s(%d), time=%dms\n",
    316          						pos_num,
    317          						dbg_cmd_seq_tbl[man_error_work.dbg_info[get_pos].dbg_code-1], 
    318          						dbg_cmd_type_tbl[man_error_work.dbg_info[get_pos].type-1],
    319          						man_error_work.dbg_info[get_pos].data,
    320          						man_error_work.dbg_info[get_pos].ms_count);
   \   000000BE   0x....             LDR      R0,??DataTable2
   \   000000C0   0x210C             MOVS     R1,#+12
   \   000000C2   0x4361             MULS     R1,R4,R1
   \   000000C4   0x1840             ADDS     R0,R0,R1
   \   000000C6   0x....             LDR      R1,??DataTable7_2  ;; 0x2058
   \   000000C8   0x5840             LDR      R0,[R0, R1]
   \   000000CA   0x9002             STR      R0,[SP, #+8]
   \   000000CC   0x....             LDR      R0,??DataTable2
   \   000000CE   0x210C             MOVS     R1,#+12
   \   000000D0   0x4361             MULS     R1,R4,R1
   \   000000D2   0x1840             ADDS     R0,R0,R1
   \   000000D4   0x....             LDR      R1,??DataTable7_3  ;; 0x2054
   \   000000D6   0x5840             LDR      R0,[R0, R1]
   \   000000D8   0x9001             STR      R0,[SP, #+4]
   \   000000DA   0x....             LDR      R0,??DataTable7_4
   \   000000DC   0x....             LDR      R1,??DataTable2
   \   000000DE   0x220C             MOVS     R2,#+12
   \   000000E0   0x4362             MULS     R2,R4,R2
   \   000000E2   0x1889             ADDS     R1,R1,R2
   \   000000E4   0x....             LDR      R2,??DataTable7_1  ;; 0x2051
   \   000000E6   0x5C89             LDRB     R1,[R1, R2]
   \   000000E8   0x2204             MOVS     R2,#+4
   \   000000EA   0x4351             MULS     R1,R2,R1
   \   000000EC   0x1840             ADDS     R0,R0,R1
   \   000000EE   0x1F00             SUBS     R0,R0,#+4
   \   000000F0   0x6800             LDR      R0,[R0, #+0]
   \   000000F2   0x9000             STR      R0,[SP, #+0]
   \   000000F4   0x....             LDR      R0,??DataTable7_5
   \   000000F6   0x....             LDR      R1,??DataTable2
   \   000000F8   0x220C             MOVS     R2,#+12
   \   000000FA   0x4362             MULS     R2,R4,R2
   \   000000FC   0x1889             ADDS     R1,R1,R2
   \   000000FE   0x....             LDR      R2,??DataTable7  ;; 0x2050
   \   00000100   0x5C89             LDRB     R1,[R1, R2]
   \   00000102   0x2204             MOVS     R2,#+4
   \   00000104   0x4351             MULS     R1,R2,R1
   \   00000106   0x1840             ADDS     R0,R0,R1
   \   00000108   0x1F00             SUBS     R0,R0,#+4
   \   0000010A   0x6803             LDR      R3,[R0, #+0]
   \   0000010C   0x9A03             LDR      R2,[SP, #+12]
   \   0000010E   0x....             LDR      R1,??DataTable7_6
   \   00000110   0x9804             LDR      R0,[SP, #+16]
   \   00000112   0x1980             ADDS     R0,R0,R6
   \   00000114   0x.... 0x....      BL       sprintf
    321          
    322          					// 結果書き込み位置を更新する
    323          					rsp_top = strlen((const char *)&usb_buff[0]);
   \   00000118   0x9804             LDR      R0,[SP, #+16]
   \   0000011A   0x.... 0x....      BL       strlen
   \   0000011E   0x0006             MOVS     R6,R0
    324          
    325          					get_pos++;
   \   00000120   0x1C64             ADDS     R4,R4,#+1
    326          					if (get_pos >= MAN_ERROR_DBG_BUFF_MAX) {
   \   00000122   0x2080             MOVS     R0,#+128
   \   00000124   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000126   0x4284             CMP      R4,R0
   \   00000128   0xDB00             BLT      ??man_error_out_dbglog_10
    327          						get_pos = 0;
   \   0000012A   0x2400             MOVS     R4,#+0
    328          					}
    329          					pos_num++;
   \                     ??man_error_out_dbglog_10: (+1)
   \   0000012C   0x9803             LDR      R0,[SP, #+12]
   \   0000012E   0x1C40             ADDS     R0,R0,#+1
   \   00000130   0x9003             STR      R0,[SP, #+12]
    330          				}
    331          			}
    332          		}
   \                     ??man_error_out_dbglog_9: (+1)
   \   00000132   0x1C7F             ADDS     R7,R7,#+1
   \                     ??man_error_out_dbglog_7: (+1)
   \   00000134   0x42AF             CMP      R7,R5
   \   00000136   0xDB9C             BLT      ??man_error_out_dbglog_8
    333          
    334          		// USB出力
    335          		man_usb_data_send(&usb_buff[0], rsp_top);
   \   00000138   0x0031             MOVS     R1,R6
   \   0000013A   0x9804             LDR      R0,[SP, #+16]
   \   0000013C   0x.... 0x....      BL       man_usb_data_send
    336          	}
    337          	
    338          	return pos_num;
   \                     ??man_error_out_dbglog_6: (+1)
   \   00000140   0x9803             LDR      R0,[SP, #+12]
   \   00000142   0xB005             ADD      SP,SP,#+20
   \   00000144   0xBDF0             POP      {R4-R7,PC}       ;; return
    339          }
    340          
    341          
    342          
    343          /********************************************************************/
    344          /*	extern関数                                                      */
    345          /********************************************************************/
    346          
    347          /********************************************************************/
    348          /*!
    349           * \name	man_error_init
    350           * \brief	エラー管理初期化
    351           * \param	なし
    352           * \return   0: 成功
    353           *          -1: 失敗
    354           * \note	
    355           */
    356          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    357          void man_error_init( void )
    358          {
   \                     man_error_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    359          
    360          	// 使用変数の初期化
    361          	memset(&man_error_work, 0, sizeof(man_error_work));
   \   00000002   0x....             LDR      R1,??DataTable7_7  ;; 0x38bc
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x....             LDR      R4,??DataTable7_8
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       __aeabi_memset
    362          }
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
    363          
    364          
    365          
    366          /********************************************************************/
    367          /*!
    368           * \name	man_error_set
    369           * \brief	発生したエラーを登録します
    370           * \param	error_code  : 発生エラーコード
    371           *          error_info1 : 付属情報１
    372           *          error_info2 : 付属情報２
    373           *          line_no     : 発生した行番号
    374           * \return  
    375           * \note	
    376           */
    377          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    378          void man_error_set( man_err_def error_code, uint32_t error_info1, uint32_t error_info2, uint32_t line_no )
    379          {
   \                     man_error_set: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
    380          
    381          	uint32_t	point;
    382          
    383          	clock_info_t	jst_clock;
    384          
    385          	point = man_error_work.err_write_p;
   \   00000002   0x....             LDR      R4,??DataTable7_8
   \   00000004   0x6824             LDR      R4,[R4, #+0]
    386          
    387          	// ログ出力中は登録しない
    388          	if (man_error_work.request.req_cmd != MAN_ERROR_REQ_OUT_ERRLOG) {
   \   00000006   0x....             LDR      R5,??DataTable7_9
   \   00000008   0x682D             LDR      R5,[R5, #+0]
   \   0000000A   0x2D01             CMP      R5,#+1
   \   0000000C   0xD051             BEQ      ??man_error_set_0
    389          		man_error_work.error_info[point].error_code = error_code;
   \   0000000E   0x....             LDR      R5,??DataTable7_8
   \   00000010   0x2618             MOVS     R6,#+24
   \   00000012   0x4366             MULS     R6,R4,R6
   \   00000014   0x19AD             ADDS     R5,R5,R6
   \   00000016   0x7228             STRB     R0,[R5, #+8]
    390          		man_error_work.error_info[point].error_info1 = error_info1;
   \   00000018   0x....             LDR      R0,??DataTable7_8
   \   0000001A   0x2518             MOVS     R5,#+24
   \   0000001C   0x4365             MULS     R5,R4,R5
   \   0000001E   0x1940             ADDS     R0,R0,R5
   \   00000020   0x60C1             STR      R1,[R0, #+12]
    391          		man_error_work.error_info[point].error_info2 = error_info2;
   \   00000022   0x....             LDR      R0,??DataTable7_8
   \   00000024   0x2118             MOVS     R1,#+24
   \   00000026   0x4361             MULS     R1,R4,R1
   \   00000028   0x1840             ADDS     R0,R0,R1
   \   0000002A   0x6102             STR      R2,[R0, #+16]
    392          		man_error_work.error_info[point].line_no = line_no;
   \   0000002C   0x....             LDR      R0,??DataTable7_8
   \   0000002E   0x2118             MOVS     R1,#+24
   \   00000030   0x4361             MULS     R1,R4,R1
   \   00000032   0x1840             ADDS     R0,R0,R1
   \   00000034   0x6183             STR      R3,[R0, #+24]
    393          
    394          		// RTC 時間取得
    395          		man_rtc_get_clock(&jst_clock);
   \   00000036   0x4668             MOV      R0,SP
   \   00000038   0x.... 0x....      BL       man_rtc_get_clock
    396          		man_error_work.error_info[point].ms_count = man_timer_get_1ms_count();
   \   0000003C   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000040   0x....             LDR      R1,??DataTable7_8
   \   00000042   0x2218             MOVS     R2,#+24
   \   00000044   0x4362             MULS     R2,R4,R2
   \   00000046   0x1889             ADDS     R1,R1,R2
   \   00000048   0x6148             STR      R0,[R1, #+20]
    397          
    398          		man_error_work.error_info[point].day		= jst_clock.day;
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0x7880             LDRB     R0,[R0, #+2]
   \   0000004E   0x....             LDR      R1,??DataTable7_8
   \   00000050   0x2218             MOVS     R2,#+24
   \   00000052   0x4362             MULS     R2,R4,R2
   \   00000054   0x1889             ADDS     R1,R1,R2
   \   00000056   0x7708             STRB     R0,[R1, #+28]
    399          		man_error_work.error_info[point].hour		= jst_clock.hour;
   \   00000058   0x4668             MOV      R0,SP
   \   0000005A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000005C   0x....             LDR      R1,??DataTable7_8
   \   0000005E   0x2218             MOVS     R2,#+24
   \   00000060   0x4362             MULS     R2,R4,R2
   \   00000062   0x1889             ADDS     R1,R1,R2
   \   00000064   0x7748             STRB     R0,[R1, #+29]
    400          		man_error_work.error_info[point].minute		= jst_clock.minute;
   \   00000066   0x4668             MOV      R0,SP
   \   00000068   0x7900             LDRB     R0,[R0, #+4]
   \   0000006A   0x....             LDR      R1,??DataTable7_8
   \   0000006C   0x2218             MOVS     R2,#+24
   \   0000006E   0x4362             MULS     R2,R4,R2
   \   00000070   0x1889             ADDS     R1,R1,R2
   \   00000072   0x7788             STRB     R0,[R1, #+30]
    401          		man_error_work.error_info[point].seconds	= jst_clock.seconds;
   \   00000074   0x4668             MOV      R0,SP
   \   00000076   0x7940             LDRB     R0,[R0, #+5]
   \   00000078   0x....             LDR      R1,??DataTable7_8
   \   0000007A   0x2218             MOVS     R2,#+24
   \   0000007C   0x4362             MULS     R2,R4,R2
   \   0000007E   0x1889             ADDS     R1,R1,R2
   \   00000080   0x77C8             STRB     R0,[R1, #+31]
    402          
    403          		if (point < (MAN_ERROR_ERR_BUFF_MAX-1))		man_error_work.err_write_p++;
   \   00000082   0x20FF             MOVS     R0,#+255
   \   00000084   0x3058             ADDS     R0,R0,#+88       ;; #+343
   \   00000086   0x4284             CMP      R4,R0
   \   00000088   0xD205             BCS      ??man_error_set_1
   \   0000008A   0x....             LDR      R0,??DataTable7_8
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x1C40             ADDS     R0,R0,#+1
   \   00000090   0x....             LDR      R1,??DataTable7_8
   \   00000092   0x6008             STR      R0,[R1, #+0]
   \   00000094   0xE002             B        ??man_error_set_2
    404          		else										man_error_work.err_write_p=0;
   \                     ??man_error_set_1: (+1)
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x....             LDR      R1,??DataTable7_8
   \   0000009A   0x6008             STR      R0,[R1, #+0]
    405          
    406          		if (man_error_work.err_write_cnt < MAN_ERROR_ERR_BUFF_MAX) {
   \                     ??man_error_set_2: (+1)
   \   0000009C   0x....             LDR      R0,??DataTable7_8
   \   0000009E   0x6840             LDR      R0,[R0, #+4]
   \   000000A0   0x21AC             MOVS     R1,#+172
   \   000000A2   0x0049             LSLS     R1,R1,#+1        ;; #+344
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD204             BCS      ??man_error_set_0
    407          			man_error_work.err_write_cnt++;
   \   000000A8   0x....             LDR      R0,??DataTable7_8
   \   000000AA   0x6840             LDR      R0,[R0, #+4]
   \   000000AC   0x1C40             ADDS     R0,R0,#+1
   \   000000AE   0x....             LDR      R1,??DataTable7_8
   \   000000B0   0x6048             STR      R0,[R1, #+4]
    408          		}
    409          	
    410          #ifdef GNSS_DEBUG_MAN_ERR 
    411          			int32_t		length;
    412          			sprintf((char *)&man_error_work.buff[0], "ERROR(%s, line=%d, p1=%08x, p2=%08x)\n", dbg_cmd_module_tbl[error_code], line_no, error_info1, error_info2);
    413          			length = strlen((char const *)&man_error_work.buff[0]);
    414          			man_usb_data_send(&man_error_work.buff[0], length);
    415          #endif
    416          	}
    417          }
   \                     ??man_error_set_0: (+1)
   \   000000B2   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    418          
    419          
    420          /********************************************************************/
    421          /*!
    422           * \name	man_dbglog_setting
    423           * \brief	発生したログを登録します
    424           * \param	dbg_code  : dbgコード
    425           *          type      : データ種別
    426           *          data      : データ
    427           * \return  なし
    428           * \note	
    429           */
    430          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    431          void man_dbglog_setting( man_err_dbg_def dbg_code, man_err_dbg_type_def type, uint32_t data )
    432          {
   \                     man_dbglog_setting: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    433          	uint32_t	point;
    434          
    435          	point = man_error_work.dbg_write_p;
   \   00000002   0x....             LDR      R3,??DataTable6_2
   \   00000004   0x681C             LDR      R4,[R3, #+0]
    436          
    437          	// ログ出力中は登録しない
    438          	if (man_error_work.request.req_cmd != MAN_ERROR_REQ_OUT_DBGLOG) {
   \   00000006   0x....             LDR      R3,??DataTable7_9
   \   00000008   0x681B             LDR      R3,[R3, #+0]
   \   0000000A   0x2B02             CMP      R3,#+2
   \   0000000C   0xD030             BEQ      ??man_dbglog_setting_0
    439          
    440          		man_error_work.dbg_info[point].dbg_code  = dbg_code;
   \   0000000E   0x....             LDR      R3,??DataTable7_8
   \   00000010   0x250C             MOVS     R5,#+12
   \   00000012   0x4365             MULS     R5,R4,R5
   \   00000014   0x195B             ADDS     R3,R3,R5
   \   00000016   0x....             LDR      R5,??DataTable7  ;; 0x2050
   \   00000018   0x5558             STRB     R0,[R3, R5]
    441          		man_error_work.dbg_info[point].type = type;
   \   0000001A   0x....             LDR      R0,??DataTable7_8
   \   0000001C   0x230C             MOVS     R3,#+12
   \   0000001E   0x4363             MULS     R3,R4,R3
   \   00000020   0x18C0             ADDS     R0,R0,R3
   \   00000022   0x....             LDR      R3,??DataTable7_1  ;; 0x2051
   \   00000024   0x54C1             STRB     R1,[R0, R3]
    442          		man_error_work.dbg_info[point].data = data;
   \   00000026   0x....             LDR      R0,??DataTable7_8
   \   00000028   0x210C             MOVS     R1,#+12
   \   0000002A   0x4361             MULS     R1,R4,R1
   \   0000002C   0x1840             ADDS     R0,R0,R1
   \   0000002E   0x....             LDR      R1,??DataTable7_3  ;; 0x2054
   \   00000030   0x5042             STR      R2,[R0, R1]
    443          
    444          		// ms 時間取得
    445          		man_error_work.dbg_info[point].ms_count = man_timer_get_1ms_count();
   \   00000032   0x.... 0x....      BL       man_timer_get_1ms_count
   \   00000036   0x....             LDR      R1,??DataTable7_8
   \   00000038   0x220C             MOVS     R2,#+12
   \   0000003A   0x4362             MULS     R2,R4,R2
   \   0000003C   0x1889             ADDS     R1,R1,R2
   \   0000003E   0x....             LDR      R2,??DataTable7_2  ;; 0x2058
   \   00000040   0x5088             STR      R0,[R1, R2]
    446          
    447          		if (point < (MAN_ERROR_DBG_BUFF_MAX-1))		man_error_work.dbg_write_p++;
   \   00000042   0x....             LDR      R0,??DataTable7_10  ;; 0x1ff
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD205             BCS      ??man_dbglog_setting_1
   \   00000048   0x....             LDR      R0,??DataTable6_2
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x1C40             ADDS     R0,R0,#+1
   \   0000004E   0x....             LDR      R1,??DataTable6_2
   \   00000050   0x6008             STR      R0,[R1, #+0]
   \   00000052   0xE002             B        ??man_dbglog_setting_2
    448          		else										man_error_work.dbg_write_p=0;
   \                     ??man_dbglog_setting_1: (+1)
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x....             LDR      R1,??DataTable6_2
   \   00000058   0x6008             STR      R0,[R1, #+0]
    449          
    450          		if (man_error_work.dbg_write_cnt < MAN_ERROR_DBG_BUFF_MAX) {
   \                     ??man_dbglog_setting_2: (+1)
   \   0000005A   0x....             LDR      R0,??DataTable5
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x2180             MOVS     R1,#+128
   \   00000060   0x0089             LSLS     R1,R1,#+2        ;; #+512
   \   00000062   0x4288             CMP      R0,R1
   \   00000064   0xD204             BCS      ??man_dbglog_setting_0
    451          			man_error_work.dbg_write_cnt++;
   \   00000066   0x....             LDR      R0,??DataTable5
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x1C40             ADDS     R0,R0,#+1
   \   0000006C   0x....             LDR      R1,??DataTable5
   \   0000006E   0x6008             STR      R0,[R1, #+0]
    452          		}
    453          	}
    454          }
   \                     ??man_dbglog_setting_0: (+1)
   \   00000070   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    455          
    456          
    457          
    458          
    459          /********************************************************************/
    460          /*!
    461           * \name	man_error_req_out_errlog
    462           * \brief	errlog出力要求
    463           * \param	なし
    464           * \return  なし
    465           * \note	
    466           */
    467          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    468          void man_error_req_out_errlog( void  )
    469          {
    470          	man_error_work.request.req_cmd = MAN_ERROR_REQ_OUT_ERRLOG;
   \                     man_error_req_out_errlog: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR      R1,??DataTable7_9
   \   00000004   0x6008             STR      R0,[R1, #+0]
    471          	man_error_work.request.top_pos = 1;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x....             LDR      R1,??DataTable7_11
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    472          }
   \   0000000C   0x4770             BX       LR               ;; return
    473          
    474          
    475          /********************************************************************/
    476          /*!
    477           * \name	man_error_req_out_dbglog
    478           * \brief	dbglog出力要求
    479           * \param	なし
    480           * \return  なし
    481           * \note	
    482           */
    483          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    484          void man_error_req_out_dbglog( void  )
    485          {
    486          	man_error_work.request.req_cmd = MAN_ERROR_REQ_OUT_DBGLOG;
   \                     man_error_req_out_dbglog: (+1)
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0x....             LDR      R1,??DataTable7_9
   \   00000004   0x6008             STR      R0,[R1, #+0]
    487          	man_error_work.request.top_pos = 1;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x....             LDR      R1,??DataTable7_11
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    488          }
   \   0000000C   0x4770             BX       LR               ;; return
    489          
    490          
    491          /********************************************************************/
    492          /*!
    493           * \name	man_error_1000ms_main
    494           * \brief	1000ms毎に行う処理
    495           * \param	なし
    496           * \return  なし
    497           * \note	1000ms毎に、呼ばれること
    498           */
    499          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    500          void man_error_1000ms_main( void )
    501          {
   \                     man_error_1000ms_main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    502          	int32_t		pos_num;
    503          
    504          	// errlog出力処理
    505          	if (man_error_work.request.req_cmd == MAN_ERROR_REQ_OUT_ERRLOG) {
   \   00000002   0x....             LDR      R0,??DataTable7_9
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD110             BNE      ??man_error_1000ms_main_0
    506          		pos_num = man_error_out_errlog(man_error_work.request.top_pos);
   \   0000000A   0x....             LDR      R0,??DataTable7_11
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x.... 0x....      BL       man_error_out_errlog
    507          		if (man_error_work.request.top_pos != pos_num) {
   \   00000012   0x....             LDR      R1,??DataTable7_11
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x4281             CMP      R1,R0
   \   00000018   0xD002             BEQ      ??man_error_1000ms_main_1
    508          			man_error_work.request.top_pos = pos_num;
   \   0000001A   0x....             LDR      R1,??DataTable7_11
   \   0000001C   0x6008             STR      R0,[R1, #+0]
   \   0000001E   0xE019             B        ??man_error_1000ms_main_2
    509          		}
    510          		else {
    511          			// 最後にCR+LFを出力する
    512          			man_usb_data_send_crlf();
   \                     ??man_error_1000ms_main_1: (+1)
   \   00000020   0x.... 0x....      BL       man_usb_data_send_crlf
    513          			man_error_work.request.req_cmd = MAN_ERROR_REQ_OUT_NON;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR      R1,??DataTable7_9
   \   00000028   0x6008             STR      R0,[R1, #+0]
   \   0000002A   0xE013             B        ??man_error_1000ms_main_2
    514          		}
    515          	}
    516          	
    517          	// dbglog出力処理
    518          	else if (man_error_work.request.req_cmd == MAN_ERROR_REQ_OUT_DBGLOG) {
   \                     ??man_error_1000ms_main_0: (+1)
   \   0000002C   0x....             LDR      R0,??DataTable7_9
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x2802             CMP      R0,#+2
   \   00000032   0xD10F             BNE      ??man_error_1000ms_main_2
    519          		pos_num = man_error_out_dbglog(man_error_work.request.top_pos);
   \   00000034   0x....             LDR      R0,??DataTable7_11
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x.... 0x....      BL       man_error_out_dbglog
    520          		if (man_error_work.request.top_pos != pos_num) {
   \   0000003C   0x....             LDR      R1,??DataTable7_11
   \   0000003E   0x6809             LDR      R1,[R1, #+0]
   \   00000040   0x4281             CMP      R1,R0
   \   00000042   0xD002             BEQ      ??man_error_1000ms_main_3
    521          			man_error_work.request.top_pos = pos_num;
   \   00000044   0x....             LDR      R1,??DataTable7_11
   \   00000046   0x6008             STR      R0,[R1, #+0]
   \   00000048   0xE004             B        ??man_error_1000ms_main_2
    522          		}
    523          		else {
    524          			// 最後にCR+LFを出力する
    525          			man_usb_data_send_crlf();
   \                     ??man_error_1000ms_main_3: (+1)
   \   0000004A   0x.... 0x....      BL       man_usb_data_send_crlf
    526          			man_error_work.request.req_cmd = MAN_ERROR_REQ_OUT_NON;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x....             LDR      R1,??DataTable7_9
   \   00000052   0x6008             STR      R0,[R1, #+0]
    527          		}
    528          	}
    529          }
   \                     ??man_error_1000ms_main_2: (+1)
   \   00000054   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     man_error_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0xFFFFFEA8         DC32     0xfffffea8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     dbg_cmd_module_tbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     man_error_work+0x204C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     ?_37

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x00000201         DC32     0x201

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     man_error_work+0x2048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0xFFFFFE00         DC32     0xfffffe00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x00002050         DC32     0x2050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x00002051         DC32     0x2051

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x00002058         DC32     0x2058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x00002054         DC32     0x2054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     dbg_cmd_type_tbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     dbg_cmd_seq_tbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     ?_38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x000038BC         DC32     0x38bc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     man_error_work

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     man_error_work+0x3850

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x000001FF         DC32     0x1ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     man_error_work+0x3854

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x2D 0x2D          DC8 "-------"
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x44 0x52          DC8 "DRV_CFG"
   \              0x56 0x5F    
   \              0x43 0x46    
   \              0x47 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x44 0x52          DC8 "DRV_FLH"
   \              0x56 0x5F    
   \              0x46 0x4C    
   \              0x48 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x44 0x52          DC8 "DRV_GPI"
   \              0x56 0x5F    
   \              0x47 0x50    
   \              0x49 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x44 0x52          DC8 "DRV_I20"
   \              0x56 0x5F    
   \              0x49 0x32    
   \              0x30 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x44 0x52          DC8 "DRV_I21"
   \              0x56 0x5F    
   \              0x49 0x32    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x44 0x52          DC8 "DRV_RTC"
   \              0x56 0x5F    
   \              0x52 0x54    
   \              0x43 0x00    

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x44 0x52          DC8 "DRV_T16"
   \              0x56 0x5F    
   \              0x54 0x31    
   \              0x36 0x00    

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x44 0x52          DC8 "DRV_UA0"
   \              0x56 0x5F    
   \              0x55 0x41    
   \              0x30 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x44 0x52          DC8 "DRV_UA1"
   \              0x56 0x5F    
   \              0x55 0x41    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x44 0x52          DC8 "DRV_USB"
   \              0x56 0x5F    
   \              0x55 0x53    
   \              0x42 0x00    

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x44 0x52          DC8 "DRV_WDT"
   \              0x56 0x5F    
   \              0x57 0x44    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x43 0x54          DC8 "CTR_GPS"
   \              0x52 0x5F    
   \              0x47 0x50    
   \              0x53 0x00    

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x43 0x54          DC8 "CTR_MPL"
   \              0x52 0x5F    
   \              0x4D 0x50    
   \              0x4C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x43 0x54          DC8 "CTR_LTE"
   \              0x52 0x5F    
   \              0x4C 0x54    
   \              0x45 0x00    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x4D 0x49          DC8 "MID_GPS"
   \              0x44 0x5F    
   \              0x47 0x50    
   \              0x53 0x00    

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x4D 0x49          DC8 "MID_HTP"
   \              0x44 0x5F    
   \              0x48 0x54    
   \              0x50 0x00    

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x4D 0x41          DC8 "MAN_TIM"
   \              0x4E 0x5F    
   \              0x54 0x49    
   \              0x4D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_18:
   \   00000000   0x4D 0x41          DC8 "MAN_PRE"
   \              0x4E 0x5F    
   \              0x50 0x52    
   \              0x45 0x00    

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x4D 0x41          DC8 "MAN_GPS"
   \              0x4E 0x5F    
   \              0x47 0x50    
   \              0x53 0x00    

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x4D 0x41          DC8 "MAN_NET"
   \              0x4E 0x5F    
   \              0x4E 0x45    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x4D 0x41          DC8 "MAN_OPE"
   \              0x4E 0x5F    
   \              0x4F 0x50    
   \              0x45 0x00    

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x4D 0x41          DC8 "MAN_HTP"
   \              0x4E 0x5F    
   \              0x48 0x54    
   \              0x50 0x00    

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x4D 0x41          DC8 "MAN_RPT"
   \              0x4E 0x5F    
   \              0x52 0x50    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x4D 0x41          DC8 "MAN_LTE"
   \              0x4E 0x5F    
   \              0x4C 0x54    
   \              0x45 0x00    

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x4D 0x41          DC8 "MAN_CMD"
   \              0x4E 0x5F    
   \              0x43 0x4D    
   \              0x44 0x00    

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x4D 0x41          DC8 "MAN_MSG"
   \              0x4E 0x5F    
   \              0x4D 0x53    
   \              0x47 0x00    

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x4D 0x41          DC8 "MAN_OTA"
   \              0x4E 0x5F    
   \              0x4F 0x54    
   \              0x41 0x00    

   \                                 In section .rodata, align 4
   \                     ?_28:
   \   00000000   0x4D 0x41          DC8 "MAN_CHG"
   \              0x4E 0x5F    
   \              0x43 0x48    
   \              0x47 0x00    

   \                                 In section .rodata, align 4
   \                     ?_29:
   \   00000000   0x4D 0x41          DC8 "MAN_USB"
   \              0x4E 0x5F    
   \              0x55 0x53    
   \              0x42 0x00    

   \                                 In section .rodata, align 4
   \                     ?_30:
   \   00000000   0x4D 0x41          DC8 "MAIN   "
   \              0x49 0x4E    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_31:
   \   00000000   0x4D 0x41          DC8 "MAX"
   \              0x58 0x00    

   \                                 In section .rodata, align 4
   \                     ?_32:
   \   00000000   0x53 0x45          DC8 "SEQ"
   \              0x51 0x00    

   \                                 In section .rodata, align 4
   \                     ?_33:
   \   00000000   0x4E 0x4F          DC8 "NOTI"
   \              0x54 0x49    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_34:
   \   00000000   0x53 0x54          DC8 "STATE"
   \              0x41 0x54    
   \              0x45 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_35:
   \   00000000   0x45 0x56          DC8 "EVENT"
   \              0x45 0x4E    
   \              0x54 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_36:
   \   00000000   0x4F 0x54          DC8 "OTHER"
   \              0x48 0x45    
   \              0x52 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_37:
   \   00000000   0x65 0x72          DC8 65H, 72H, 72H, 6CH, 6FH, 67H, 28H, 25H
   \              0x72 0x6C    
   \              0x6F 0x67    
   \              0x28 0x25    
   \   00000008   0x30 0x33          DC8 30H, 33H, 64H, 29H, 20H, 3AH, 3AH, 20H
   \              0x64 0x29    
   \              0x20 0x3A    
   \              0x3A 0x20    
   \   00000010   0x25 0x73          DC8 25H, 73H, 2CH, 20H, 6CH, 69H, 6EH, 65H
   \              0x2C 0x20    
   \              0x6C 0x69    
   \              0x6E 0x65    
   \   00000018   0x3D 0x25          DC8 3DH, 25H, 64H, 2CH, 20H, 69H, 6EH, 66H
   \              0x64 0x2C    
   \              0x20 0x69    
   \              0x6E 0x66    
   \   00000020   0x6F 0x31          DC8 6FH, 31H, 3DH, 25H, 30H, 38H, 78H, 2CH
   \              0x3D 0x25    
   \              0x30 0x38    
   \              0x78 0x2C    
   \   00000028   0x20 0x69          DC8 20H, 69H, 6EH, 66H, 6FH, 32H, 3DH, 25H
   \              0x6E 0x66    
   \              0x6F 0x32    
   \              0x3D 0x25    
   \   00000030   0x30 0x38          DC8 30H, 38H, 78H, 2CH, 20H, 64H, 61H, 74H
   \              0x78 0x2C    
   \              0x20 0x64    
   \              0x61 0x74    
   \   00000038   0x65 0x3D          DC8 65H, 3DH, 25H, 64H, 2FH, 25H, 30H, 32H
   \              0x25 0x64    
   \              0x2F 0x25    
   \              0x30 0x32    
   \   00000040   0x64 0x3A          DC8 64H, 3AH, 25H, 30H, 32H, 64H, 3AH, 25H
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x3A 0x25    
   \   00000048   0x30 0x32          DC8 30H, 32H, 64H, 20H, 74H, 69H, 6DH, 65H
   \              0x64 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \   00000050   0x3D 0x25          DC8 3DH, 25H, 64H, 6DH, 73H, 0AH, 0
   \              0x64 0x6D    
   \              0x73 0x0A    
   \              0x00         
   \   00000057   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_38:
   \   00000000   0x64 0x62          DC8 "dbglog(%03d) :: %s, %s(%d), time=%dms\012"
   \              0x67 0x6C    
   \              0x6F 0x67    
   \              0x28 0x25    
   \              0x30 0x33    
   \              0x64 0x29    
   \              0x20 0x3A    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2C 0x20    
   \              0x25 0x73    
   \              0x28 0x25    
   \              0x64 0x29    
   \              0x2C 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x3D 0x25    
   \              0x64 0x6D    
   \              0x73 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0
    530          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   man_dbglog_setting
        16   -> man_timer_get_1ms_count
       8   man_error_1000ms_main
         8   -> man_error_out_dbglog
         8   -> man_error_out_errlog
         8   -> man_usb_data_send_crlf
       8   man_error_init
         8   -> __aeabi_memset
      40   man_error_out_dbglog
        40   -> man_memory_alloc
        40   -> man_usb_data_send
        40   -> sprintf
        40   -> strlen
      64   man_error_out_errlog
        64   -> man_memory_alloc
        64   -> man_usb_data_send
        64   -> sprintf
        64   -> strlen
       0   man_error_req_out_dbglog
       0   man_error_req_out_errlog
      24   man_error_set
        24   -> man_rtc_get_clock
        24   -> man_timer_get_1ms_count


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable3
       4  ??DataTable5
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       8  ?_0
       8  ?_1
       8  ?_10
       8  ?_11
       8  ?_12
       8  ?_13
       8  ?_14
       8  ?_15
       8  ?_16
       8  ?_17
       8  ?_18
       8  ?_19
       8  ?_2
       8  ?_20
       8  ?_21
       8  ?_22
       8  ?_23
       8  ?_24
       8  ?_25
       8  ?_26
       8  ?_27
       8  ?_28
       8  ?_29
       8  ?_3
       8  ?_30
       4  ?_31
       4  ?_32
       8  ?_33
       8  ?_34
       8  ?_35
       8  ?_36
      88  ?_37
      40  ?_38
       8  ?_4
       8  ?_5
       8  ?_6
       8  ?_7
       8  ?_8
       8  ?_9
     124  dbg_cmd_module_tbl
      44  dbg_cmd_seq_tbl
      24  dbg_cmd_type_tbl
     114  man_dbglog_setting
      86  man_error_1000ms_main
      16  man_error_init
     326  man_error_out_dbglog
     322  man_error_out_errlog
      14  man_error_req_out_dbglog
      14  man_error_req_out_errlog
     180  man_error_set
   14524  man_error_work

 
 14 524 bytes in section .bss
    192 bytes in section .data
    416 bytes in section .rodata
  1 152 bytes in section .text
 
  1 152 bytes of CODE  memory
    416 bytes of CONST memory
 14 716 bytes of DATA  memory

Errors: none
Warnings: none
