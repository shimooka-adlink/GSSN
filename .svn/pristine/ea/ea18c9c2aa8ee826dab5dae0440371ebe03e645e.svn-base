###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       21/May/2019  17:01:16
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\GNSS\Software\rJ105\source\GNSS_GW\hal\ctrl_BQ28Z610.c
#    Command line =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\hal\ctrl_BQ28Z610.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_B -lCN
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        -lA
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\List\ctrl_BQ28Z610.lst
#    Object file  =  
#        C:\GNSS\Software\rJ105\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlashBside\Obj\ctrl_BQ28Z610.o
#
###############################################################################

C:\GNSS\Software\rJ105\source\GNSS_GW\hal\ctrl_BQ28Z610.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    ctrl_BQ28Z610.c
      5            * @author  コア
      6            * @version V1.0
      7            * @date    2017.10.2
      8            * @brief   このファイルはI2C CH1を使用してデバイス電池残量計IC(BQ28Z610)を制御するソフトウェアです。
      9            ******************************************************************************
     10            $Id: ctrl_BQ28Z610.c 182 2018-05-25 04:55:18Z shitaoka $
     11            * @attention
     12            *
     13            *****************************************************************************
     14          */ 
     15          
     16          #include <string.h>
     17          #include <stdio.h>
     18          #include <stdlib.h>
     19          #include "board.h"
     20          #include "drv_i2c_1.h"
     21          
     22          #pragma section = "CTRL_PRG_BLOCK"
     23          

   \                                 In section .data, align 1
     24          static uint8_t slave_addr = 0x55;
   \                     slave_addr:
   \   00000000   0x55               DC8 85
     25          
     26          #define	CTRL_BQ28Z610_RETRY	(1+1)		// リトライ回数  1回
     27          
     28          /********************************************************************/
     29          /*	static関数                                                      */
     30          /********************************************************************/
     31          
     32          /********************************************************************/
     33          /*	extern関数                                                      */
     34          /********************************************************************/
     35          
     36          /********************************************************************/
     37          /*!
     38           * \name	ctrl_BQ28Z610_start
     39           * \brief	BQ28Z610の開始処理
     40           * \return   0: 成功
     41           *          -1:失敗
     42           * \note	なし
     43           */
     44          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     45          int32_t ctrl_BQ28Z610_start(void)
     46          {
     47          	int32_t	status = 0;
   \                     ctrl_BQ28Z610_start: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
     48          
     49          	return status;
   \   00000002   0x4770             BX       LR               ;; return
     50          }
     51          
     52          /********************************************************************/
     53          /*!
     54           * \name	ctcr_BQ28Z610_get_voltage
     55           * \brief	電圧を取得する
     56           * \param	voltage : 電圧情報を格納する
     57           * \return   0: 成功
     58           *          -1: 失敗
     59           * \note	
     60           */
     61          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     62          int32_t ctrl_BQ28Z610_get_voltage(int32_t *voltage)
     63          {
   \                     ctrl_BQ28Z610_get_voltage: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0006             MOVS     R6,R0
     64          	int32_t		ret = 0;
   \   00000006   0x2500             MOVS     R5,#+0
     65          	int32_t		status;
     66          	uint8_t	buf[2] = {0};			//電圧情報格納レジスタ
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x8001             STRH     R1,[R0, #0]
     67          	uint8_t	cmd[1] = {0x08};		//電圧取得コマンド
   \   0000000E   0xA800             ADD      R0,SP,#+0
   \   00000010   0x1C80             ADDS     R0,R0,#+2
   \   00000012   0x....             LDR      R1,??DataTable2
   \   00000014   0x780A             LDRB     R2,[R1, #0]
   \   00000016   0x7002             STRB     R2,[R0, #0]
     68                  int32_t		i;
     69          	
     70          	//voltage取得
     71          	ret = -1;
   \   00000018   0x2500             MOVS     R5,#+0
   \   0000001A   0x43ED             MVNS     R5,R5            ;; #-1
     72          	for(i = 0; i<CTRL_BQ28Z610_RETRY; i++){
   \   0000001C   0x2400             MOVS     R4,#+0
   \   0000001E   0xE000             B        ??ctrl_BQ28Z610_get_voltage_0
   \                     ??ctrl_BQ28Z610_get_voltage_1: (+1)
   \   00000020   0x1C64             ADDS     R4,R4,#+1
   \                     ??ctrl_BQ28Z610_get_voltage_0: (+1)
   \   00000022   0x2C02             CMP      R4,#+2
   \   00000024   0xDA1F             BGE      ??ctrl_BQ28Z610_get_voltage_2
     73          		seSysSleepMS(2);
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x.... 0x....      BL       seSysSleepMS
     74          		status = i2c1_SendData(slave_addr, &cmd[0], 1, seENABLE);
   \   0000002C   0x2301             MOVS     R3,#+1
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0xA900             ADD      R1,SP,#+0
   \   00000032   0x1C89             ADDS     R1,R1,#+2
   \   00000034   0x....             LDR      R0,??DataTable2_1
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0xB280             UXTH     R0,R0
   \   0000003A   0x.... 0x....      BL       i2c1_SendData
     75          		if(status >= 0){
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD4EE             BMI      ??ctrl_BQ28Z610_get_voltage_1
     76          			status = i2c1_ReceiveData(slave_addr, &buf[0], 2,seDISABLE);
   \   00000042   0x2300             MOVS     R3,#+0
   \   00000044   0x2202             MOVS     R2,#+2
   \   00000046   0x4669             MOV      R1,SP
   \   00000048   0x....             LDR      R0,??DataTable2_1
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0xB280             UXTH     R0,R0
   \   0000004E   0x.... 0x....      BL       i2c1_ReceiveData
     77          			if(status >= 0){
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD4E4             BMI      ??ctrl_BQ28Z610_get_voltage_1
     78          				*voltage = (int)(buf[1]<<8)+(int)buf[0];
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x7840             LDRB     R0,[R0, #+1]
   \   0000005A   0x0200             LSLS     R0,R0,#+8
   \   0000005C   0x4669             MOV      R1,SP
   \   0000005E   0x7809             LDRB     R1,[R1, #+0]
   \   00000060   0x1840             ADDS     R0,R0,R1
   \   00000062   0x6030             STR      R0,[R6, #+0]
     79          				ret = 0;
   \   00000064   0x2500             MOVS     R5,#+0
     80          				break;
     81          			}
     82          		}
     83          	}
     84          	return ret;
   \                     ??ctrl_BQ28Z610_get_voltage_2: (+1)
   \   00000066   0x0028             MOVS     R0,R5
   \   00000068   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
     85          }
     86          
     87          
     88          /********************************************************************/
     89          /*!
     90           * \name	ctrl_BQ28Z610_get_current
     91           * \brief	バッテリのCharge/Dischargeの電流値を取得する
     92           * \param	current : 電流情報を格納する
     93           * \return   0: 成功
     94           *          -1: 失敗
     95           * \note	
     96           */
     97          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     98          int32_t ctrl_BQ28Z610_get_current(int16_t *current)
     99          {
   \                     ctrl_BQ28Z610_get_current: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0006             MOVS     R6,R0
    100          	int32_t		ret = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    101          	int32_t		status;
    102          	uint8_t	buf[2] = {0};			//電流情報格納レジスタ
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x8001             STRH     R1,[R0, #0]
    103          	uint8_t	cmd[2] = {0x0C,0x0D};		//電流取得コマンド
   \   0000000E   0xA800             ADD      R0,SP,#+0
   \   00000010   0x1C80             ADDS     R0,R0,#+2
   \   00000012   0x....             LDR      R1,??DataTable2_2
   \   00000014   0x880A             LDRH     R2,[R1, #0]
   \   00000016   0x8002             STRH     R2,[R0, #0]
    104                  int32_t		i;
    105          	
    106          	ret = -1;
   \   00000018   0x2500             MOVS     R5,#+0
   \   0000001A   0x43ED             MVNS     R5,R5            ;; #-1
    107          	for(i = 0; i<CTRL_BQ28Z610_RETRY; i++){
   \   0000001C   0x2400             MOVS     R4,#+0
   \   0000001E   0xE000             B        ??ctrl_BQ28Z610_get_current_0
   \                     ??ctrl_BQ28Z610_get_current_1: (+1)
   \   00000020   0x1C64             ADDS     R4,R4,#+1
   \                     ??ctrl_BQ28Z610_get_current_0: (+1)
   \   00000022   0x2C02             CMP      R4,#+2
   \   00000024   0xDA1F             BGE      ??ctrl_BQ28Z610_get_current_2
    108          		seSysSleepMS(2);
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x.... 0x....      BL       seSysSleepMS
    109          		status = i2c1_SendData(slave_addr, &cmd[0], 1, seENABLE);
   \   0000002C   0x2301             MOVS     R3,#+1
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0xA900             ADD      R1,SP,#+0
   \   00000032   0x1C89             ADDS     R1,R1,#+2
   \   00000034   0x....             LDR      R0,??DataTable2_1
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0xB280             UXTH     R0,R0
   \   0000003A   0x.... 0x....      BL       i2c1_SendData
    110          		if(status >= 0){
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD4EE             BMI      ??ctrl_BQ28Z610_get_current_1
    111          			status = i2c1_ReceiveData(slave_addr, &buf[0], 2,seDISABLE);
   \   00000042   0x2300             MOVS     R3,#+0
   \   00000044   0x2202             MOVS     R2,#+2
   \   00000046   0x4669             MOV      R1,SP
   \   00000048   0x....             LDR      R0,??DataTable2_1
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0xB280             UXTH     R0,R0
   \   0000004E   0x.... 0x....      BL       i2c1_ReceiveData
    112          			if(status >= 0){
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD4E4             BMI      ??ctrl_BQ28Z610_get_current_1
    113          				*current = (int)(buf[1]<<8)+(int)buf[0];
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x7840             LDRB     R0,[R0, #+1]
   \   0000005A   0x0200             LSLS     R0,R0,#+8
   \   0000005C   0x4669             MOV      R1,SP
   \   0000005E   0x7809             LDRB     R1,[R1, #+0]
   \   00000060   0x1840             ADDS     R0,R0,R1
   \   00000062   0x8030             STRH     R0,[R6, #+0]
    114          				ret = 0;
   \   00000064   0x2500             MOVS     R5,#+0
    115          				break;
    116          			}
    117          		}
    118          	}
    119          	return ret;
   \                     ??ctrl_BQ28Z610_get_current_2: (+1)
   \   00000066   0x0028             MOVS     R0,R5
   \   00000068   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    120          }
    121          
    122          
    123          /********************************************************************/
    124          /*!
    125           * \name	ctrl_BQ28Z610_get_remaining
    126           * \brief	バッテリー残量を取得する
    127           * \param	remaining : バッテリー残量を格納する
    128           * \return   0: 成功
    129           *          -1: 失敗
    130           * \note	
    131           */
    132          /********************************************************************/ 

   \                                 In section .text, align 2, keep-with-next
    133          int32_t ctrl_BQ28Z610_get_remaining(int32_t *remaining)
    134          {
   \                     ctrl_BQ28Z610_get_remaining: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0006             MOVS     R6,R0
    135          	int32_t		ret = -1;
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x43ED             MVNS     R5,R5            ;; #-1
    136          	int32_t		status;
    137          	uint8_t		buf[2] = {0};			//バッテリー残量情報格納レジスタ
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x8001             STRH     R1,[R0, #0]
    138          	uint8_t		cmd[1] = {0x2C};		//バッテリー残量取得コマンド
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x1C80             ADDS     R0,R0,#+2
   \   00000014   0x....             LDR      R1,??DataTable2_3
   \   00000016   0x780A             LDRB     R2,[R1, #0]
   \   00000018   0x7002             STRB     R2,[R0, #0]
    139          	int32_t		i;
    140          	
    141          	//remaining取得
    142          	ret = -1;
   \   0000001A   0x2500             MOVS     R5,#+0
   \   0000001C   0x43ED             MVNS     R5,R5            ;; #-1
    143          	for(i = 0; i<CTRL_BQ28Z610_RETRY; i++){
   \   0000001E   0x2400             MOVS     R4,#+0
   \   00000020   0xE000             B        ??ctrl_BQ28Z610_get_remaining_0
   \                     ??ctrl_BQ28Z610_get_remaining_1: (+1)
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \                     ??ctrl_BQ28Z610_get_remaining_0: (+1)
   \   00000024   0x2C02             CMP      R4,#+2
   \   00000026   0xDA1F             BGE      ??ctrl_BQ28Z610_get_remaining_2
    144          		seSysSleepMS(2);
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0x.... 0x....      BL       seSysSleepMS
    145          		status = i2c1_SendData(slave_addr, &cmd[0], 1, seENABLE);
   \   0000002E   0x2301             MOVS     R3,#+1
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0xA900             ADD      R1,SP,#+0
   \   00000034   0x1C89             ADDS     R1,R1,#+2
   \   00000036   0x....             LDR      R0,??DataTable2_1
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0xB280             UXTH     R0,R0
   \   0000003C   0x.... 0x....      BL       i2c1_SendData
    146          		if(status >= 0){
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD4EE             BMI      ??ctrl_BQ28Z610_get_remaining_1
    147          			status = i2c1_ReceiveData(slave_addr, &buf[0], 2,seDISABLE);
   \   00000044   0x2300             MOVS     R3,#+0
   \   00000046   0x2202             MOVS     R2,#+2
   \   00000048   0x4669             MOV      R1,SP
   \   0000004A   0x....             LDR      R0,??DataTable2_1
   \   0000004C   0x7800             LDRB     R0,[R0, #+0]
   \   0000004E   0xB280             UXTH     R0,R0
   \   00000050   0x.... 0x....      BL       i2c1_ReceiveData
    148          			if(status >= 0){
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD4E4             BMI      ??ctrl_BQ28Z610_get_remaining_1
    149          				*remaining = (int)(buf[1]<<8)+(int)buf[0];
   \   00000058   0x4668             MOV      R0,SP
   \   0000005A   0x7840             LDRB     R0,[R0, #+1]
   \   0000005C   0x0200             LSLS     R0,R0,#+8
   \   0000005E   0x4669             MOV      R1,SP
   \   00000060   0x7809             LDRB     R1,[R1, #+0]
   \   00000062   0x1840             ADDS     R0,R0,R1
   \   00000064   0x6030             STR      R0,[R6, #+0]
    150          				ret = 0;
   \   00000066   0x2500             MOVS     R5,#+0
    151          				break;
    152          			}
    153          		}
    154          	}
    155          	return ret;
   \                     ??ctrl_BQ28Z610_get_remaining_2: (+1)
   \   00000068   0x0028             MOVS     R0,R5
   \   0000006A   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    156          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     slave_addr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .rodata, align 2
   \   00000000   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 1
   \                     ?_1:
   \   00000000   0x08               DC8 8

   \                                 In section .rodata, align 2
   \   00000000   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2
   \                     ?_3:
   \   00000000   0x0C 0x0D          DC8 12, 13

   \                                 In section .rodata, align 2
   \   00000000   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 1
   \                     ?_5:
   \   00000000   0x2C               DC8 44

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   ctrl_BQ28Z610_get_current
        24   -> i2c1_ReceiveData
        24   -> i2c1_SendData
        24   -> seSysSleepMS
      24   ctrl_BQ28Z610_get_remaining
        24   -> i2c1_ReceiveData
        24   -> i2c1_SendData
        24   -> seSysSleepMS
      24   ctrl_BQ28Z610_get_voltage
        24   -> i2c1_ReceiveData
        24   -> i2c1_SendData
        24   -> seSysSleepMS
       0   ctrl_BQ28Z610_start


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       2  ?_0
       1  ?_1
       2  ?_2
       2  ?_3
       2  ?_4
       1  ?_5
     106  ctrl_BQ28Z610_get_current
     108  ctrl_BQ28Z610_get_remaining
     106  ctrl_BQ28Z610_get_voltage
       4  ctrl_BQ28Z610_start
       1  slave_addr

 
   1 byte  in section .data
  10 bytes in section .rodata
 340 bytes in section .text
 
 340 bytes of CODE  memory
  10 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: none
