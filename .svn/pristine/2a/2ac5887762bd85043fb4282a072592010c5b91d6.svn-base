###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       17/May/2019  13:31:41
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\driver\rtc\drv_rtc.c
#    Command line =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\driver\rtc\drv_rtc.c -D
#        __TARGET_ARCH_7_M -D S1C31W74 -D GNSS_GW_SIDE_A -lCN
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        -lA
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List
#        --diag_suppress Pe177,Pe111,Pa082 -o
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\ -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.5\arm\inc\Epson\" -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Device\S1C31W74\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\CMSIS\Driver\Include\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\sePeriphLibrary\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\board\S5U1C31W74T1\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\..\..\USBStack\INC\
#        -I
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\..\..\..\include\
#        -Ol
#    Locale       =  Japanese_Japan.932
#    List file    =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\List\drv_rtc.lst
#    Object file  =  
#        C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\board\S5U1C31W74T1\IAR\DebugFlash\Obj\drv_rtc.o
#
###############################################################################

C:\GNSS\Software\rJ104_rc2\source\GNSS_GW\driver\rtc\drv_rtc.c
      1          
      2          /**
      3            ******************************************************************************
      4            * @file    drv_rtc.c
      5            * @author  Epson
      6            * @version V1.1
      7            * @date    05-August-2016
      8            * @brief   This file is Template example software.
      9            ******************************************************************************
     10            $Id: drv_rtc.c 57 2018-03-30 05:54:51Z shitaoka $
     11            * @attention
     12            *
     13            *****************************************************************************
     14          */
     15          
     16          /** @defgroup RTCA
     17           * @{
     18           * @brief RTCA module is a real-time clock with a perpetual calendar function
     19           *
     20           * \section intro_sec Introduction
     21           * This example shows how to program and read the various functions of the real-time clock
     22           * such as the time/date, stopwatch, alarm, and trimming.
     23           * 
     24           * \section operation_sec Operations
     25           * 
     26           * 1. Initializes RTCA.
     27           * 2. Starts RTCA.
     28           * 3. Calculates TRM.
     29           * 4. Sets time and date, and reads it back.
     30           * 5. Sets an alarm and CPU goes to sleep. Expects interrupt while sleeping.
     31           * 6. Starts 1 second timer to perform trimming.
     32           * 7. Checks stop watch operations.
     33           *
     34           * \subsection output Example of output:
     35           *
     36           *  -CPU clock- seCLG_IOSC (20000000)
     37           * RTCA TRM bits 0x43
     38           * RTCA Set hour 4 (PM), minute 17, second 0
     39           * RTCA Get hour 4 (PM), minute 17, second 0
     40           * RTCA Set year 15, month 2, day 5, Thursday
     41           * RTCA Get year, month, day. 2015, 2, 5, Thursday
     42           * RTCA Set Alarm hour 4 (PM), minute 17, second 5
     43           * RTCA waiting for alarm....
     44           * RTCA Alarm occurred : hour 4(PM), minute 17, second 5
     45           * RTCA Start Trimming
     46           * RTCA waiting for timer....
     47           * RTCA Trimming performed : hour 4(PM), minute 17, second 11
     48           * RTCA StopWatch (start) : hour 4(PM), minute 17, second 11
     49           * RTCA sleep 5 seconds waiting for Stop....
     50           * RTCA interrupts disabled for count reading
     51           * SysTick 5000
     52           * StopWatchHW: 5.14
     53           * Exit
     54           * 
     55           ***************************************************************************
     56          */
     57          /**
     58            * @}
     59            */ 
     60          
     61          #include <string.h>
     62          #include <stdio.h>
     63          #include "se_rtca.h"
     64          #include "se_common.h"
     65          #include "board.h"
     66          #include "gnss_gw_common.h"
     67          #include "drv_rtc.h"
     68          
     69          
     70          #pragma section = "DRV_PRG_BLOCK"
     71          
     72          // Structures and variables for testing 

   \                                 In section .bss, align 4
     73          static seRTCA_InitTypeDef InitStruct;
   \                     InitStruct:
   \   00000000                      DS8 4
     74          
     75          
     76          /********************************************************************/
     77          /*!
     78           * \name	rtc_init
     79           * \brief	RTC Driverの初期化
     80           * \param	なし
     81           * \return   0: 成功
     82           *          -1: 失敗
     83           * \note	
     84           */
     85          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     86          int32_t rtc_init( void ) 
     87          {
   \                     rtc_init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     88          	seStatus	status;
     89          	int32_t		ret=-1;
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x43E4             MVNS     R4,R4            ;; #-1
     90          
     91          	memset(&InitStruct, 0, sizeof(seRTCA_InitTypeDef));
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x....             LDR      R5,??DataTable0
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0x.... 0x....      BL       __aeabi_memset
     92          	// Init module
     93          	InitStruct.ClkSupldInDebugMode = seENABLE;				// CPUスリープモードでシステムクロックを供給する
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x....             LDR      R1,??DataTable0
   \   00000016   0x7008             STRB     R0,[R1, #+0]
     94          	InitStruct.H12_24Format = seRTCA_CTL_RTC24H_24;			// 24H形式
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x....             LDR      R1,??DataTable0
   \   0000001C   0x7048             STRB     R0,[R1, #+1]
     95          	status = seRTCA_Init( &InitStruct );
   \   0000001E   0x....             LDR      R0,??DataTable0
   \   00000020   0x.... 0x....      BL       seRTCA_Init
     96          
     97          	if (status == seSTATUS_OK) {
   \   00000024   0xB2C0             UXTB     R0,R0
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xD101             BNE      ??rtc_init_0
     98          		// RTCA開始
     99          		status = seRTCA_Start();
   \   0000002A   0x.... 0x....      BL       seRTCA_Start
    100          	}
    101          
    102          	if (status == seSTATUS_OK) {
   \                     ??rtc_init_0: (+1)
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0x2801             CMP      R0,#+1
   \   00000032   0xD100             BNE      ??rtc_init_1
    103          		ret=0;
   \   00000034   0x2400             MOVS     R4,#+0
    104          	}
    105          	
    106          	return ret;
   \                     ??rtc_init_1: (+1)
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    107          }
    108          
    109          
    110          /********************************************************************/
    111          /*!
    112           * \name	rtc_set_clock
    113           * \brief	RTC 時間設定
    114           * \param	clock   設定時間
    115           * \return   0: 成功
    116           *          -1: 失敗
    117           * \note	
    118           */
    119          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    120          int32_t rtc_set_clock( clock_info_t *clock ) 
    121          {
   \                     rtc_set_clock: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    122          	seStatus	status;
    123          	int32_t		ret=-1;
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x43ED             MVNS     R5,R5            ;; #-1
    124          
    125          	status = seRTCA_SetHourMinuteSecond( clock->hour, clock->minute, clock->seconds );
   \   00000008   0x7960             LDRB     R0,[R4, #+5]
   \   0000000A   0x0002             MOVS     R2,R0
   \   0000000C   0xB2D2             UXTB     R2,R2
   \   0000000E   0x7920             LDRB     R0,[R4, #+4]
   \   00000010   0x0001             MOVS     R1,R0
   \   00000012   0xB2C9             UXTB     R1,R1
   \   00000014   0x78E0             LDRB     R0,[R4, #+3]
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0x.... 0x....      BL       seRTCA_SetHourMinuteSecond
    126          
    127          	if (status == seSTATUS_OK) {
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xD115             BNE      ??rtc_set_clock_0
    128          		status = seRTCA_SetYearMonthDayWeek( clock->year, clock->month, clock->day, seRTCA_CalcWeekDay(clock->year, clock->month, clock->day) );
   \   00000022   0x78A0             LDRB     R0,[R4, #+2]
   \   00000024   0x0002             MOVS     R2,R0
   \   00000026   0xB2D2             UXTB     R2,R2
   \   00000028   0x7860             LDRB     R0,[R4, #+1]
   \   0000002A   0x0001             MOVS     R1,R0
   \   0000002C   0xB2C9             UXTB     R1,R1
   \   0000002E   0x7820             LDRB     R0,[R4, #+0]
   \   00000030   0xB2C0             UXTB     R0,R0
   \   00000032   0x.... 0x....      BL       seRTCA_CalcWeekDay
   \   00000036   0x0003             MOVS     R3,R0
   \   00000038   0xB2DB             UXTB     R3,R3
   \   0000003A   0x78A0             LDRB     R0,[R4, #+2]
   \   0000003C   0x0002             MOVS     R2,R0
   \   0000003E   0xB2D2             UXTB     R2,R2
   \   00000040   0x7860             LDRB     R0,[R4, #+1]
   \   00000042   0x0001             MOVS     R1,R0
   \   00000044   0xB2C9             UXTB     R1,R1
   \   00000046   0x7820             LDRB     R0,[R4, #+0]
   \   00000048   0xB2C0             UXTB     R0,R0
   \   0000004A   0x.... 0x....      BL       seRTCA_SetYearMonthDayWeek
    129          	}
    130          
    131          	if (status == seSTATUS_OK) {
   \                     ??rtc_set_clock_0: (+1)
   \   0000004E   0xB2C0             UXTB     R0,R0
   \   00000050   0x2801             CMP      R0,#+1
   \   00000052   0xD100             BNE      ??rtc_set_clock_1
    132          		ret=0;
   \   00000054   0x2500             MOVS     R5,#+0
    133          	}
    134          	
    135          	return ret;
   \                     ??rtc_set_clock_1: (+1)
   \   00000056   0x0028             MOVS     R0,R5
   \   00000058   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    136          }
    137          
    138          
    139          
    140          /********************************************************************/
    141          /*!
    142           * \name	rtc_get_clock
    143           * \brief	RTC 時間取得
    144           * \param	clock  取得時間
    145           * \return   0: 成功
    146           *          -1: 失敗
    147           * \note	
    148           */
    149          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    150          int32_t rtc_get_clock( clock_info_t *clock )
    151          {
   \                     rtc_get_clock: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0006             MOVS     R6,R0
    152          	seStatus	status;
    153          	int32_t		ret=-1;
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x43E4             MVNS     R4,R4            ;; #-1
    154          	uint8_t		week;
    155          
    156          	status = seRTCA_GetHourMinuteSecond( (uint8_t*)&clock->hour, (uint8_t*)&clock->minute, (uint8_t*)&clock->seconds );
   \   0000000A   0x1D72             ADDS     R2,R6,#+5
   \   0000000C   0x1D31             ADDS     R1,R6,#+4
   \   0000000E   0x1CF0             ADDS     R0,R6,#+3
   \   00000010   0x.... 0x....      BL       seRTCA_GetHourMinuteSecond
   \   00000014   0x0005             MOVS     R5,R0
    157          
    158          	if (status == seSTATUS_OK) {
   \   00000016   0xB2ED             UXTB     R5,R5
   \   00000018   0x2D01             CMP      R5,#+1
   \   0000001A   0xD105             BNE      ??rtc_get_clock_0
    159          		seRTCA_GetYearMonthDayWeek( (uint8_t*)&clock->year, (uint8_t*)&clock->month, (uint8_t*)&clock->day, &week );
   \   0000001C   0x466B             MOV      R3,SP
   \   0000001E   0x1CB2             ADDS     R2,R6,#+2
   \   00000020   0x1C71             ADDS     R1,R6,#+1
   \   00000022   0x0030             MOVS     R0,R6
   \   00000024   0x.... 0x....      BL       seRTCA_GetYearMonthDayWeek
    160          	}
    161          
    162          	if (status == seSTATUS_OK) {
   \                     ??rtc_get_clock_0: (+1)
   \   00000028   0xB2ED             UXTB     R5,R5
   \   0000002A   0x2D01             CMP      R5,#+1
   \   0000002C   0xD100             BNE      ??rtc_get_clock_1
    163          		ret=0;
   \   0000002E   0x2400             MOVS     R4,#+0
    164          	}
    165          	
    166          	return ret;
   \                     ??rtc_get_clock_1: (+1)
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    167          }
    168          
    169          
    170          
    171          /********************************************************************/
    172          /*!
    173           * \name	rtc_set_alarm
    174           * \brief	アラーム 時間設定
    175           * \param	alarm  アラーム設定時間
    176           * \return   0: 成功
    177           *          -1: 失敗
    178           * \note	
    179           */
    180          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    181          int32_t rtc_set_alarm( drv_rtc_alarm_t *alarm ) 
    182          {
   \                     rtc_set_alarm: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    183          	seStatus	status;
    184          	int32_t		ret=-1;
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x43E4             MVNS     R4,R4            ;; #-1
    185          
    186          	// 設定値をチェック
    187          	if ( seRTCA_VALID_24HOURS(alarm->hour) 
    188          		&& seRTCA_VALID_MINUTES(alarm->minute)
    189          		&& seRTCA_VALID_SECONDS(alarm->seconds) ) {
   \   00000006   0x7801             LDRB     R1,[R0, #+0]
   \   00000008   0x2918             CMP      R1,#+24
   \   0000000A   0xDA0F             BGE      ??rtc_set_alarm_0
   \   0000000C   0x7841             LDRB     R1,[R0, #+1]
   \   0000000E   0x293C             CMP      R1,#+60
   \   00000010   0xDA0C             BGE      ??rtc_set_alarm_0
   \   00000012   0x7881             LDRB     R1,[R0, #+2]
   \   00000014   0x293C             CMP      R1,#+60
   \   00000016   0xDA09             BGE      ??rtc_set_alarm_0
    190          
    191          		status = seRTCA_SetAlarm( alarm->hour, alarm->minute, alarm->seconds, seRTCA_HUR_RTCAP_AM );
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0x7882             LDRB     R2,[R0, #+2]
   \   0000001C   0x7841             LDRB     R1,[R0, #+1]
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x.... 0x....      BL       seRTCA_SetAlarm
    192          		if (status == seSTATUS_OK) {
   \   00000024   0xB2C0             UXTB     R0,R0
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xD100             BNE      ??rtc_set_alarm_0
    193          //			NVIC_SetPriority( RTC_IRQn, 3 );  
    194          //			NVIC_EnableIRQ( RTC_IRQn );
    195          			ret=0;
   \   0000002A   0x2400             MOVS     R4,#+0
    196          		}
    197          	}
    198          
    199          	return ret;
   \                     ??rtc_set_alarm_0: (+1)
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    200          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     InitStruct
    201          
    202          
    203          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   rtc_get_clock
        24   -> seRTCA_GetHourMinuteSecond
        24   -> seRTCA_GetYearMonthDayWeek
      16   rtc_init
        16   -> __aeabi_memset
        16   -> seRTCA_Init
        16   -> seRTCA_Start
       8   rtc_set_alarm
         8   -> seRTCA_SetAlarm
      16   rtc_set_clock
        16   -> seRTCA_CalcWeekDay
        16   -> seRTCA_SetHourMinuteSecond
        16   -> seRTCA_SetYearMonthDayWeek


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  InitStruct
      52  rtc_get_clock
      58  rtc_init
      48  rtc_set_alarm
      90  rtc_set_clock

 
   4 bytes in section .bss
 252 bytes in section .text
 
 252 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
